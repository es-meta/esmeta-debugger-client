{
  "ForInOfStatement[0,0].ContainsDuplicateLabels" : "\n        1. Return ContainsDuplicateLabels of |Statement| with argument _labelSet_.\n      ",
  "INTRINSICS.TypedArray.prototype.fill" : "\n          1. Let _O_ be the *this* value.\n          1. Let _taRecord_ be ? ValidateTypedArray(_O_, ~seq-cst~).\n          1. Let _len_ be TypedArrayLength(_taRecord_).\n          1. If _O_.[[ContentType]] is ~bigint~, set _value_ to ? ToBigInt(_value_).\n          1. Otherwise, set _value_ to ? ToNumber(_value_).\n          1. Let _relativeStart_ be ? ToIntegerOrInfinity(_start_).\n          1. If _relativeStart_ = -‚àû, let _startIndex_ be 0.\n          1. Else if _relativeStart_ < 0, let _startIndex_ be max(_len_ + _relativeStart_, 0).\n          1. Else, let _startIndex_ be min(_relativeStart_, _len_).\n          1. If _end_ is *undefined*, let _relativeEnd_ be _len_; else let _relativeEnd_ be ? ToIntegerOrInfinity(_end_).\n          1. If _relativeEnd_ = -‚àû, let _endIndex_ be 0.\n          1. Else if _relativeEnd_ < 0, let _endIndex_ be max(_len_ + _relativeEnd_, 0).\n          1. Else, let _endIndex_ be min(_relativeEnd_, _len_).\n          1. Set _taRecord_ to MakeTypedArrayWithBufferWitnessRecord(_O_, ~seq-cst~).\n          1. If IsTypedArrayOutOfBounds(_taRecord_) is *true*, throw a *TypeError* exception.\n          1. Set _len_ to TypedArrayLength(_taRecord_).\n          1. Set _endIndex_ to min(_endIndex_, _len_).\n          1. Let _k_ be _startIndex_.\n          1. Repeat, while _k_ < _endIndex_,\n            1. Let _Pk_ be ! ToString(ùîΩ(_k_)).\n            1. Perform ! Set(_O_, _Pk_, _value_, *true*).\n            1. Set _k_ to _k_ + 1.\n          1. Return _O_.\n        ",
  "AssignmentExpression[7,0].IsFunctionDefinition" : "\n        1. Return *false*.\n      ",
  "IsRegExp" : "\n        1. If _argument_ is not an Object, return *false*.\n        1. Let _matcher_ be ? Get(_argument_, @@match).\n        1. If _matcher_ is not *undefined*, return ToBoolean(_matcher_).\n        1. If _argument_ has a [[RegExpMatcher]] internal slot, return *true*.\n        1. Return *false*.\n      ",
  "InLeapYear" : "\n          1. If DaysInYear(YearFromTime(_t_)) is *366*<sub>ùîΩ</sub>, return *1*<sub>ùîΩ</sub>; else return *+0*<sub>ùîΩ</sub>.\n        ",
  "INTRINSICS.Object.assign" : "\n          1. Let _to_ be ? ToObject(_target_).\n          1. If only one argument was passed, return _to_.\n          1. For each element _nextSource_ of _sources_, do\n            1. If _nextSource_ is neither *undefined* nor *null*, then\n              1. Let _from_ be ! ToObject(_nextSource_).\n              1. Let _keys_ be ? <emu-meta effects=\"user-code\">_from_.[[OwnPropertyKeys]]()</emu-meta>.\n              1. For each element _nextKey_ of _keys_, do\n                1. Let _desc_ be ? <emu-meta effects=\"user-code\">_from_.[[GetOwnProperty]]</emu-meta>(_nextKey_).\n                1. If _desc_ is not *undefined* and _desc_.[[Enumerable]] is *true*, then\n                  1. Let _propValue_ be ? Get(_from_, _nextKey_).\n                  1. Perform ? Set(_to_, _nextKey_, _propValue_, *true*).\n          1. Return _to_.\n        ",
  "INTRINSICS.Object.getOwnPropertyNames" : "\n          1. Return CreateArrayFromList(? GetOwnPropertyKeys(_O_, ~string~)).\n        ",
  "CaseBlock[1,3].ContainsDuplicateLabels" : "\n        1. If the first |CaseClauses| is present, then\n          1. If ContainsDuplicateLabels of the first |CaseClauses| with argument _labelSet_ is *true*, return *true*.\n        1. If ContainsDuplicateLabels of |DefaultClause| with argument _labelSet_ is *true*, return *true*.\n        1. If the second |CaseClauses| is not present, return *false*.\n        1. Return ContainsDuplicateLabels of the second |CaseClauses| with argument _labelSet_.\n      ",
  "INTRINSICS.DataView.prototype.getUint8" : "\n          1. Let _v_ be the *this* value.\n          1. Return ? GetViewValue(_v_, _byteOffset_, *true*, ~uint8~).\n        ",
  "INTRINSICS.Array.prototype.at" : "\n          1. Let _O_ be ? ToObject(*this* value).\n          1. Let _len_ be ? LengthOfArrayLike(_O_).\n          1. Let _relativeIndex_ be ? ToIntegerOrInfinity(_index_).\n          1. If _relativeIndex_ ‚â• 0, then\n            1. Let _k_ be _relativeIndex_.\n          1. Else,\n            1. Let _k_ be _len_ + _relativeIndex_.\n          1. If _k_ < 0 or _k_ ‚â• _len_, return *undefined*.\n          1. Return ? Get(_O_, ! ToString(ùîΩ(_k_))).\n        ",
  "CreatePerIterationEnvironment" : "\n          1. If _perIterationBindings_ has any elements, then\n            1. Let _lastIterationEnv_ be the running execution context's LexicalEnvironment.\n            1. Let _outer_ be _lastIterationEnv_.[[OuterEnv]].\n            1. Assert: _outer_ is not *null*.\n            1. Let _thisIterationEnv_ be NewDeclarativeEnvironment(_outer_).\n            1. For each element _bn_ of _perIterationBindings_, do\n              1. Perform ! _thisIterationEnv_.CreateMutableBinding(_bn_, *false*).\n              1. Let _lastValue_ be ? _lastIterationEnv_.GetBindingValue(_bn_, *true*).\n              1. Perform ! _thisIterationEnv_.InitializeBinding(_bn_, _lastValue_).\n            1. Set the running execution context's LexicalEnvironment to _thisIterationEnv_.\n          1. Return ~unused~.\n        ",
  "CaseClauseIsSelected" : "\n        1. Assert: _C_ is an instance of the production <emu-grammar>CaseClause : `case` Expression `:` StatementList?</emu-grammar>.\n        1. Let _exprRef_ be ? Evaluation of the |Expression| of _C_.\n        1. Let _clauseSelector_ be ? GetValue(_exprRef_).\n        1. Return IsStrictlyEqual(_input_, _clauseSelector_).\n      ",
  "InitializeTypedArrayFromTypedArray" : "\n            1. Let _srcData_ be _srcArray_.[[ViewedArrayBuffer]].\n            1. Let _elementType_ be TypedArrayElementType(_O_).\n            1. Let _elementSize_ be TypedArrayElementSize(_O_).\n            1. Let _srcType_ be TypedArrayElementType(_srcArray_).\n            1. Let _srcElementSize_ be TypedArrayElementSize(_srcArray_).\n            1. Let _srcByteOffset_ be _srcArray_.[[ByteOffset]].\n            1. Let _srcRecord_ be MakeTypedArrayWithBufferWitnessRecord(_srcArray_, ~seq-cst~).\n            1. If IsTypedArrayOutOfBounds(_srcRecord_) is *true*, throw a *TypeError* exception.\n            1. Let _elementLength_ be TypedArrayLength(_srcRecord_).\n            1. Let _byteLength_ be _elementSize_ √ó _elementLength_.\n            1. If _elementType_ is _srcType_, then\n              1. Let _data_ be ? CloneArrayBuffer(_srcData_, _srcByteOffset_, _byteLength_).\n            1. Else,\n              1. Let _data_ be ? <emu-meta suppress-effects=\"user-code\">AllocateArrayBuffer(%ArrayBuffer%, _byteLength_)</emu-meta>.\n              1. If _srcArray_.[[ContentType]] is not _O_.[[ContentType]], throw a *TypeError* exception.\n              1. Let _srcByteIndex_ be _srcByteOffset_.\n              1. Let _targetByteIndex_ be 0.\n              1. Let _count_ be _elementLength_.\n              1. Repeat, while _count_ > 0,\n                1. Let _value_ be GetValueFromBuffer(_srcData_, _srcByteIndex_, _srcType_, *true*, ~unordered~).\n                1. Perform SetValueInBuffer(_data_, _targetByteIndex_, _elementType_, _value_, *true*, ~unordered~).\n                1. Set _srcByteIndex_ to _srcByteIndex_ + _srcElementSize_.\n                1. Set _targetByteIndex_ to _targetByteIndex_ + _elementSize_.\n                1. Set _count_ to _count_ - 1.\n            1. Set _O_.[[ViewedArrayBuffer]] to _data_.\n            1. Set _O_.[[ByteLength]] to _byteLength_.\n            1. Set _O_.[[ByteOffset]] to 0.\n            1. Set _O_.[[ArrayLength]] to _elementLength_.\n            1. Return ~unused~.\n          ",
  "HasProperty" : "\n        1. Return ? <emu-meta effects=\"user-code\">_O_.[[HasProperty]]</emu-meta>(_P_).\n      ",
  "EqualityExpression[4,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "INTRINSICS.Date.prototype.setUTCHours" : "\n          1. Let _dateObject_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_dateObject_, [[DateValue]]).\n          1. Let _t_ be _dateObject_.[[DateValue]].\n          1. Let _h_ be ? ToNumber(_hour_).\n          1. If _min_ is present, let _m_ be ? ToNumber(_min_).\n          1. If _sec_ is present, let _s_ be ? ToNumber(_sec_).\n          1. If _ms_ is present, let _milli_ be ? ToNumber(_ms_).\n          1. If _t_ is *NaN*, return *NaN*.\n          1. If _min_ is not present, let _m_ be MinFromTime(_t_).\n          1. If _sec_ is not present, let _s_ be SecFromTime(_t_).\n          1. If _ms_ is not present, let _milli_ be msFromTime(_t_).\n          1. Let _date_ be MakeDate(Day(_t_), MakeTime(_h_, _m_, _s_, _milli_)).\n          1. Let _v_ be TimeClip(_date_).\n          1. Set _dateObject_.[[DateValue]] to _v_.\n          1. Return _v_.\n        ",
  "INTRINSICS.WeakSet.prototype.add" : "\n          1. Let _S_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_S_, [[WeakSetData]]).\n          1. If CanBeHeldWeakly(_value_) is *false*, throw a *TypeError* exception.\n          1. For each element _e_ of _S_.[[WeakSetData]], do\n            1. If _e_ is not ~empty~ and SameValue(_e_, _value_) is *true*, then\n              1. Return _S_.\n          1. Append _value_ to _S_.[[WeakSetData]].\n          1. Return _S_.\n        ",
  "CoalesceExpression[0,0].AssignmentTargetType" : "\n        1. Return ~invalid~.\n      ",
  "INTRINSICS.TypedArray.prototype.sort:clo0" : "\n          1. If _comparefn_ is not *undefined* and IsCallable(_comparefn_) is *false*, throw a *TypeError* exception.\n          1. Let _obj_ be the *this* value.\n          1. Let _taRecord_ be ? ValidateTypedArray(_obj_, ~seq-cst~).\n          1. Let _len_ be TypedArrayLength(_taRecord_).\n          1. NOTE: The following closure performs a numeric comparison rather than the string comparison used in <emu-xref href=\"#sec-array.prototype.sort\"></emu-xref>.\n          1. Let _SortCompare_ be a new Abstract Closure with parameters (_x_, _y_) that captures _comparefn_ and performs the following steps when called:\n            1. Return ? CompareTypedArrayElements(_x_, _y_, _comparefn_).\n          1. Let _sortedList_ be ? SortIndexedProperties(_obj_, _len_, _SortCompare_, ~read-through-holes~).\n          1. Let _j_ be 0.\n          1. Repeat, while _j_ < _len_,\n            1. Perform ! Set(_obj_, ! ToString(ùîΩ(_j_)), _sortedList_[_j_], *true*).\n            1. Set _j_ to _j_ + 1.\n          1. Return _obj_.\n        ",
  "INTRINSICS.TypedArray.prototype.set" : "\n          1. Let _target_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_target_, [[TypedArrayName]]).\n          1. Assert: _target_ has a [[ViewedArrayBuffer]] internal slot.\n          1. Let _targetOffset_ be ? ToIntegerOrInfinity(_offset_).\n          1. If _targetOffset_ < 0, throw a *RangeError* exception.\n          1. If _source_ is an Object that has a [[TypedArrayName]] internal slot, then\n            1. Perform ? SetTypedArrayFromTypedArray(_target_, _targetOffset_, _source_).\n          1. Else,\n            1. Perform ? SetTypedArrayFromArrayLike(_target_, _targetOffset_, _source_).\n          1. Return *undefined*.\n        ",
  "UnaryExpression[6,0].IsFunctionDefinition" : "\n        1. Return *false*.\n      ",
  "ForStatement[0,7].HasCallInTailPosition" : "\n        1. Return HasCallInTailPosition of |Statement| with argument _call_.\n      ",
  "AsyncArrowFunction[0,0].NamedEvaluation" : "\n        1. Return InstantiateAsyncArrowFunctionExpression of |AsyncArrowFunction| with argument _name_.\n      ",
  "ModuleItem[1,0].VarDeclaredNames" : "\n        1. If |ExportDeclaration| is `export` |VariableStatement|, return BoundNames of |ExportDeclaration|.\n        1. Return a new empty List.\n      ",
  "Number::subtract" : "\n            1. Return Number::add(_x_, Number::unaryMinus(_y_)).\n          ",
  "UnicodePropertyValueExpression[1,0].CompileToCharSet" : "\n          1. Let _s_ be the source text matched by |LoneUnicodePropertyNameOrValue|.\n          1. If UnicodeMatchPropertyValue(`General_Category`, _s_) is a Unicode property value or property value alias for the General_Category (gc) property listed in <a href=\"https://unicode.org/Public/UCD/latest/ucd/PropertyValueAliases.txt\"><code>PropertyValueAliases.txt</code></a>, then\n            1. Return the CharSet containing all Unicode code points whose character database definition includes the property ‚ÄúGeneral_Category‚Äù with value _s_.\n          1. Let _p_ be UnicodeMatchProperty(_rer_, _s_).\n          1. Assert: _p_ is a binary Unicode property or binary property alias listed in the ‚Äú<emu-not-ref>Property name</emu-not-ref> and aliases‚Äù column of <emu-xref href=\"#table-binary-unicode-properties\"></emu-xref>, or a binary Unicode property of strings listed in the ‚Äú<emu-not-ref>Property name</emu-not-ref>‚Äù column of <emu-xref href=\"#table-binary-unicode-properties-of-strings\"></emu-xref>.\n          1. Let _A_ be the CharSet containing all CharSetElements whose character database definition includes the property _p_ with value ‚ÄúTrue‚Äù.\n          1. Return MaybeSimpleCaseFolding(_rer_, _A_).\n        ",
  "FormalParameterList[1,0].IsSimpleParameterList" : "\n        1. If IsSimpleParameterList of |FormalParameterList| is *false*, return *false*.\n        1. Return IsSimpleParameterList of |FormalParameter|.\n      ",
  "TemplateSpans[0,0].TemplateStrings" : "\n          1. Return ¬´ TemplateString(|TemplateTail|, _raw_) ¬ª.\n        ",
  "Statement[13,0].LabelledEvaluation" : "\n        1. Return ? Evaluation of |Statement|.\n      ",
  "NewPromiseReactionJob" : "\n          1. Let _job_ be a new Job Abstract Closure with no parameters that captures _reaction_ and _argument_ and performs the following steps when called:\n            1. Let _promiseCapability_ be _reaction_.[[Capability]].\n            1. Let _type_ be _reaction_.[[Type]].\n            1. Let _handler_ be _reaction_.[[Handler]].\n            1. If _handler_ is ~empty~, then\n              1. If _type_ is ~fulfill~, then\n                1. Let _handlerResult_ be NormalCompletion(_argument_).\n              1. Else,\n                1. Assert: _type_ is ~reject~.\n                1. Let _handlerResult_ be ThrowCompletion(_argument_).\n            1. Else,\n              1. Let _handlerResult_ be Completion(HostCallJobCallback(_handler_, *undefined*, ¬´ _argument_ ¬ª)).\n            1. If _promiseCapability_ is *undefined*, then\n              1. Assert: _handlerResult_ is not an abrupt completion.\n              1. Return ~empty~.\n            1. Assert: _promiseCapability_ is a PromiseCapability Record.\n            1. If _handlerResult_ is an abrupt completion, then\n              1. Return ? Call(_promiseCapability_.[[Reject]], *undefined*, ¬´ _handlerResult_.[[Value]] ¬ª).\n            1. Else,\n              1. Return ? Call(_promiseCapability_.[[Resolve]], *undefined*, ¬´ _handlerResult_.[[Value]] ¬ª).\n          1. Let _handlerRealm_ be *null*.\n          1. If _reaction_.[[Handler]] is not ~empty~, then\n            1. Let _getHandlerRealmResult_ be Completion(GetFunctionRealm(_reaction_.[[Handler]].[[Callback]])).\n            1. If _getHandlerRealmResult_ is a normal completion, set _handlerRealm_ to _getHandlerRealmResult_.[[Value]].\n            1. Else, set _handlerRealm_ to the current Realm Record.\n            1. NOTE: _handlerRealm_ is never *null* unless the handler is *undefined*. When the handler is a revoked Proxy and no ECMAScript code runs, _handlerRealm_ is used to create error objects.\n          1. Return the Record { [[Job]]: _job_, [[Realm]]: _handlerRealm_ }.\n        ",
  "LabelledStatement[0,0].TopLevelVarScopedDeclarations" : "\n        1. Return the TopLevelVarScopedDeclarations of |LabelledItem|.\n      ",
  "PrimaryExpression[1,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "ToUint8Clamp" : "\n        1. Let _number_ be ? ToNumber(_argument_).\n        1. If _number_ is *NaN*, return *+0*<sub>ùîΩ</sub>.\n        1. Let _mv_ be the extended mathematical value of _number_.\n        1. Let _clamped_ be the result of clamping _mv_ between 0 and 255.\n        1. Let _f_ be floor(_clamped_).\n        1. If _clamped_ < _f_ + 0.5, return ùîΩ(_f_).\n        1. If _clamped_ > _f_ + 0.5, return ùîΩ(_f_ + 1).\n        1. If _f_ is even, return ùîΩ(_f_). Otherwise, return ùîΩ(_f_ + 1).\n      ",
  "GetThisEnvironment" : "\n        1. Let _env_ be the running execution context's LexicalEnvironment.\n        1. [id=\"step-getthisenvironment-loop\"] Repeat,\n          1. Let _exists_ be _env_.HasThisBinding().\n          1. If _exists_ is *true*, return _env_.\n          1. Let _outer_ be _env_.[[OuterEnv]].\n          1. Assert: _outer_ is not *null*.\n          1. Set _env_ to _outer_.\n      ",
  "AsyncFunctionExpression[0,0].ContainsArguments" : "\n        1. Return *false*.\n      ",
  "ArrayLiteral[0,1].Evaluation" : "\n          1. Let _array_ be ! ArrayCreate(0).\n          1. If |Elision| is present, then\n            1. Perform ? ArrayAccumulation of |Elision| with arguments _array_ and 0.\n          1. Return _array_.\n        ",
  "INTRINSICS.Array.prototype.unshift" : "\n          1. Let _O_ be ? ToObject(*this* value).\n          1. Let _len_ be ? LengthOfArrayLike(_O_).\n          1. Let _argCount_ be the number of elements in _items_.\n          1. If _argCount_ > 0, then\n            1. If _len_ + _argCount_ > 2<sup>53</sup> - 1, throw a *TypeError* exception.\n            1. Let _k_ be _len_.\n            1. Repeat, while _k_ > 0,\n              1. Let _from_ be ! ToString(ùîΩ(_k_ - 1)).\n              1. Let _to_ be ! ToString(ùîΩ(_k_ + _argCount_ - 1)).\n              1. Let _fromPresent_ be ? HasProperty(_O_, _from_).\n              1. If _fromPresent_ is *true*, then\n                1. Let _fromValue_ be ? Get(_O_, _from_).\n                1. Perform ? Set(_O_, _to_, _fromValue_, *true*).\n              1. Else,\n                1. Assert: _fromPresent_ is *false*.\n                1. Perform ? DeletePropertyOrThrow(_O_, _to_).\n              1. Set _k_ to _k_ - 1.\n            1. Let _j_ be *+0*<sub>ùîΩ</sub>.\n            1. For each element _E_ of _items_, do\n              1. Perform ? Set(_O_, ! ToString(_j_), _E_, *true*).\n              1. Set _j_ to _j_ + *1*<sub>ùîΩ</sub>.\n          1. Perform ? Set(_O_, *\"length\"*, ùîΩ(_len_ + _argCount_), *true*).\n          1. Return ùîΩ(_len_ + _argCount_).\n        ",
  "Canonicalize" : "\n            1. If HasEitherUnicodeFlag(_rer_) is *true* and _rer_.[[IgnoreCase]] is *true*, then\n              1. If the file <a href=\"https://unicode.org/Public/UCD/latest/ucd/CaseFolding.txt\"><code>CaseFolding.txt</code></a> of the Unicode Character Database provides a simple or common case folding mapping for _ch_, return the result of applying that mapping to _ch_.\n              1. Return _ch_.\n            1. If _rer_.[[IgnoreCase]] is *false*, return _ch_.\n            1. Assert: _ch_ is a UTF-16 code unit.\n            1. Let _cp_ be the code point whose numeric value is the numeric value of _ch_.\n            1. Let _u_ be the result of toUppercase(¬´ _cp_ ¬ª), according to the Unicode Default Case Conversion algorithm.\n            1. Let _uStr_ be CodePointsToString(_u_).\n            1. If the length of _uStr_ ‚â† 1, return _ch_.\n            1. Let _cu_ be _uStr_'s single code unit element.\n            1. If the numeric value of _ch_ ‚â• 128 and the numeric value of _cu_ < 128, return _ch_.\n            1. Return _cu_.\n          ",
  "GetFunctionRealm" : "\n        1. If _obj_ has a [[Realm]] internal slot, then\n          1. Return _obj_.[[Realm]].\n        1. If _obj_ is a bound function exotic object, then\n          1. Let _boundTargetFunction_ be _obj_.[[BoundTargetFunction]].\n          1. Return ? GetFunctionRealm(_boundTargetFunction_).\n        1. If _obj_ is a Proxy exotic object, then\n          1. Perform ? ValidateNonRevokedProxy(_obj_).\n          1. Let _proxyTarget_ be _obj_.[[ProxyTarget]].\n          1. Return ? GetFunctionRealm(_proxyTarget_).\n        1. [id=\"step-getfunctionrealm-default-return\"] Return the current Realm Record.\n      ",
  "ForStatement[1,2].ContainsUndefinedBreakTarget" : "\n        1. Return ContainsUndefinedBreakTarget of |Statement| with argument _labelSet_.\n      ",
  "ArrowParameters[0,0].IsSimpleParameterList" : "\n        1. Return *true*.\n      ",
  "ExportDeclaration[5,0].ModuleRequests" : "\n          1. Return a new empty List.\n        ",
  "ParenthesizedExpression[0,0].Evaluation" : "\n          1. Return ? Evaluation of |Expression|. This may be of type Reference.\n        ",
  "ClassElementName[1,0].ComputedPropertyContains" : "\n        1. Return *false*.\n      ",
  "Record[GlobalEnvironmentRecord].CanDeclareGlobalVar" : "\n            1. Let _ObjRec_ be _envRec_.[[ObjectRecord]].\n            1. Let _globalObject_ be _ObjRec_.[[BindingObject]].\n            1. Let _hasProperty_ be ? HasOwnProperty(_globalObject_, _N_).\n            1. If _hasProperty_ is *true*, return *true*.\n            1. Return ? IsExtensible(_globalObject_).\n          ",
  "IsPropertyKey" : "\n        1. If _argument_ is a String, return *true*.\n        1. If _argument_ is a Symbol, return *true*.\n        1. Return *false*.\n      ",
  "PropertyDefinition[2,0].PropName" : "\n        1. Return PropName of |PropertyName|.\n      ",
  "BitwiseORExpression[1,0].AssignmentTargetType" : "\n        1. Return ~invalid~.\n      ",
  "IsSuperReference" : "\n          1. If _V_.[[ThisValue]] is not ~empty~, return *true*; otherwise return *false*.\n        ",
  "FunctionDeclaration[0,0].InstantiateOrdinaryFunctionObject" : "\n        1. Let _name_ be StringValue of |BindingIdentifier|.\n        1. Let _sourceText_ be the source text matched by |FunctionDeclaration|.\n        1. Let _F_ be OrdinaryFunctionCreate(%Function.prototype%, _sourceText_, |FormalParameters|, |FunctionBody|, ~non-lexical-this~, _env_, _privateEnv_).\n        1. Perform SetFunctionName(_F_, _name_).\n        1. Perform MakeConstructor(_F_).\n        1. Return _F_.\n      ",
  "ForInOfStatement[2,0].ContainsUndefinedContinueTarget" : "\n        1. Return ContainsUndefinedContinueTarget of |Statement| with arguments _iterationSet_ and ¬´ ¬ª.\n      ",
  "ForBinding[1,0].IsDestructuring" : "\n          1. Return *true*.\n        ",
  "DecimalBigIntegerLiteral[2,0].NumericValue" : "\n          1. Let _n_ be the number of code points in |DecimalDigits|, excluding all occurrences of |NumericLiteralSeparator|.\n          1. Let _mv_ be (the MV of |NonZeroDigit| √ó 10<sup>_n_</sup>) plus the MV of |DecimalDigits|.\n          1. Return ‚Ñ§(_mv_).\n        ",
  "FunctionDeclarationInstantiation" : "\n        1. Let _calleeContext_ be the running execution context.\n        1. Let _code_ be _func_.[[ECMAScriptCode]].\n        1. Let _strict_ be _func_.[[Strict]].\n        1. Let _formals_ be _func_.[[FormalParameters]].\n        1. Let _parameterNames_ be the BoundNames of _formals_.\n        1. If _parameterNames_ has any duplicate entries, let _hasDuplicates_ be *true*. Otherwise, let _hasDuplicates_ be *false*.\n        1. Let _simpleParameterList_ be IsSimpleParameterList of _formals_.\n        1. Let _hasParameterExpressions_ be ContainsExpression of _formals_.\n        1. Let _varNames_ be the VarDeclaredNames of _code_.\n        1. Let _varDeclarations_ be the VarScopedDeclarations of _code_.\n        1. Let _lexicalNames_ be the LexicallyDeclaredNames of _code_.\n        1. Let _functionNames_ be a new empty List.\n        1. Let _functionsToInitialize_ be a new empty List.\n        1. For each element _d_ of _varDeclarations_, in reverse List order, do\n          1. If _d_ is neither a |VariableDeclaration| nor a |ForBinding| nor a |BindingIdentifier|, then\n            1. Assert: _d_ is either a |FunctionDeclaration|, a |GeneratorDeclaration|, an |AsyncFunctionDeclaration|, or an |AsyncGeneratorDeclaration|.\n            1. Let _fn_ be the sole element of the BoundNames of _d_.\n            1. If _functionNames_ does not contain _fn_, then\n              1. Insert _fn_ as the first element of _functionNames_.\n              1. NOTE: If there are multiple function declarations for the same name, the last declaration is used.\n              1. Insert _d_ as the first element of _functionsToInitialize_.\n        1. Let _argumentsObjectNeeded_ be *true*.\n        1. If _func_.[[ThisMode]] is ~lexical~, then\n          1. NOTE: Arrow functions never have an arguments object.\n          1. Set _argumentsObjectNeeded_ to *false*.\n        1. Else if _parameterNames_ contains *\"arguments\"*, then\n          1. Set _argumentsObjectNeeded_ to *false*.\n        1. Else if _hasParameterExpressions_ is *false*, then\n          1. If _functionNames_ contains *\"arguments\"* or _lexicalNames_ contains *\"arguments\"*, then\n            1. Set _argumentsObjectNeeded_ to *false*.\n        1. If _strict_ is *true* or _hasParameterExpressions_ is *false*, then\n          1. NOTE: Only a single Environment Record is needed for the parameters, since calls to `eval` in strict mode code cannot create new bindings which are visible outside of the `eval`.\n          1. Let _env_ be the LexicalEnvironment of _calleeContext_.\n        1. Else,\n          1. NOTE: A separate Environment Record is needed to ensure that bindings created by direct eval calls in the formal parameter list are outside the environment where parameters are declared.\n          1. Let _calleeEnv_ be the LexicalEnvironment of _calleeContext_.\n          1. Let _env_ be NewDeclarativeEnvironment(_calleeEnv_).\n          1. Assert: The VariableEnvironment of _calleeContext_ is _calleeEnv_.\n          1. Set the LexicalEnvironment of _calleeContext_ to _env_.\n        1. For each String _paramName_ of _parameterNames_, do\n          1. Let _alreadyDeclared_ be ! _env_.HasBinding(_paramName_).\n          1. NOTE: Early errors ensure that duplicate parameter names can only occur in non-strict functions that do not have parameter default values or rest parameters.\n          1. If _alreadyDeclared_ is *false*, then\n            1. Perform ! _env_.CreateMutableBinding(_paramName_, *false*).\n            1. If _hasDuplicates_ is *true*, then\n              1. Perform ! _env_.InitializeBinding(_paramName_, *undefined*).\n        1. If _argumentsObjectNeeded_ is *true*, then\n          1. If _strict_ is *true* or _simpleParameterList_ is *false*, then\n            1. Let _ao_ be CreateUnmappedArgumentsObject(_argumentsList_).\n          1. Else,\n            1. NOTE: A mapped argument object is only provided for non-strict functions that don't have a rest parameter, any parameter default value initializers, or any destructured parameters.\n            1. Let _ao_ be CreateMappedArgumentsObject(_func_, _formals_, _argumentsList_, _env_).\n          1. If _strict_ is *true*, then\n            1. Perform ! _env_.CreateImmutableBinding(*\"arguments\"*, *false*).\n            1. NOTE: In strict mode code early errors prevent attempting to assign to this binding, so its mutability is not observable.\n          1. Else,\n            1. Perform ! _env_.CreateMutableBinding(*\"arguments\"*, *false*).\n          1. Perform ! _env_.InitializeBinding(*\"arguments\"*, _ao_).\n          1. Let _parameterBindings_ be the list-concatenation of _parameterNames_ and ¬´ *\"arguments\"* ¬ª.\n        1. Else,\n          1. Let _parameterBindings_ be _parameterNames_.\n        1. Let _iteratorRecord_ be CreateListIteratorRecord(_argumentsList_).\n        1. If _hasDuplicates_ is *true*, then\n          1. Perform ? IteratorBindingInitialization of _formals_ with arguments _iteratorRecord_ and *undefined*.\n        1. Else,\n          1. Perform ? IteratorBindingInitialization of _formals_ with arguments _iteratorRecord_ and _env_.\n        1. If _hasParameterExpressions_ is *false*, then\n          1. NOTE: Only a single Environment Record is needed for the parameters and top-level vars.\n          1. Let _instantiatedVarNames_ be a copy of the List _parameterBindings_.\n          1. For each element _n_ of _varNames_, do\n            1. If _instantiatedVarNames_ does not contain _n_, then\n              1. Append _n_ to _instantiatedVarNames_.\n              1. Perform ! _env_.CreateMutableBinding(_n_, *false*).\n              1. Perform ! _env_.InitializeBinding(_n_, *undefined*).\n          1. Let _varEnv_ be _env_.\n        1. Else,\n          1. NOTE: A separate Environment Record is needed to ensure that closures created by expressions in the formal parameter list do not have visibility of declarations in the function body.\n          1. Let _varEnv_ be NewDeclarativeEnvironment(_env_).\n          1. Set the VariableEnvironment of _calleeContext_ to _varEnv_.\n          1. Let _instantiatedVarNames_ be a new empty List.\n          1. For each element _n_ of _varNames_, do\n            1. If _instantiatedVarNames_ does not contain _n_, then\n              1. Append _n_ to _instantiatedVarNames_.\n              1. Perform ! _varEnv_.CreateMutableBinding(_n_, *false*).\n              1. If _parameterBindings_ does not contain _n_, or if _functionNames_ contains _n_, then\n                1. Let _initialValue_ be *undefined*.\n              1. Else,\n                1. Let _initialValue_ be ! _env_.GetBindingValue(_n_, *false*).\n              1. Perform ! _varEnv_.InitializeBinding(_n_, _initialValue_).\n              1. NOTE: A var with the same name as a formal parameter initially has the same value as the corresponding initialized parameter.\n        1. [id=\"step-functiondeclarationinstantiation-web-compat-insertion-point\"] NOTE: Annex <emu-xref href=\"#sec-web-compat-functiondeclarationinstantiation\"></emu-xref> adds additional steps at this point.\n        1. If _strict_ is *false*, then\n          1. Let _lexEnv_ be NewDeclarativeEnvironment(_varEnv_).\n          1. NOTE: Non-strict functions use a separate Environment Record for top-level lexical declarations so that a direct eval can determine whether any var scoped declarations introduced by the eval code conflict with pre-existing top-level lexically scoped declarations. This is not needed for strict functions because a strict direct eval always places all declarations into a new Environment Record.\n        1. Else,\n          1. Let _lexEnv_ be _varEnv_.\n        1. Set the LexicalEnvironment of _calleeContext_ to _lexEnv_.\n        1. Let _lexDeclarations_ be the LexicallyScopedDeclarations of _code_.\n        1. For each element _d_ of _lexDeclarations_, do\n          1. NOTE: A lexically declared name cannot be the same as a function/generator declaration, formal parameter, or a var name. Lexically declared names are only instantiated here but not initialized.\n          1. For each element _dn_ of the BoundNames of _d_, do\n            1. If IsConstantDeclaration of _d_ is *true*, then\n              1. Perform ! _lexEnv_.CreateImmutableBinding(_dn_, *true*).\n            1. Else,\n              1. Perform ! _lexEnv_.CreateMutableBinding(_dn_, *false*).\n        1. Let _privateEnv_ be the PrivateEnvironment of _calleeContext_.\n        1. For each Parse Node _f_ of _functionsToInitialize_, do\n          1. Let _fn_ be the sole element of the BoundNames of _f_.\n          1. Let _fo_ be InstantiateFunctionObject of _f_ with arguments _lexEnv_ and _privateEnv_.\n          1. Perform ! _varEnv_.SetMutableBinding(_fn_, _fo_, *false*).\n        1. Return ~unused~.\n      ",
  "NumberToBigInt" : "\n            1. If IsIntegralNumber(_number_) is *false*, throw a *RangeError* exception.\n            1. Return ‚Ñ§(‚Ñù(_number_)).\n          ",
  "INTRINSICS.SetIteratorPrototype.next" : "\n            1. Return ? <emu-meta suppress-effects=\"user-code\">GeneratorResume(*this* value, ~empty~, *\"%SetIteratorPrototype%\"*)</emu-meta>.\n          ",
  "GetNamedTimeZoneOffsetNanoseconds" : "\n          1. Assert: _timeZoneIdentifier_ is *\"UTC\"*.\n          1. Return 0.\n        ",
  "TemplateLiteral[0,0].TemplateStrings" : "\n          1. Return ¬´ TemplateString(|NoSubstitutionTemplate|, _raw_) ¬ª.\n        ",
  "ExportDeclaration[6,0].BoundNames" : "\n        1. Return ¬´ *\"\\*default\\*\"* ¬ª.\n      ",
  "BindingRestElement[0,0].IteratorBindingInitialization" : "\n        1. Let _lhs_ be ? ResolveBinding(StringValue of |BindingIdentifier|, _environment_).\n        1. Let _A_ be ! ArrayCreate(0).\n        1. Let _n_ be 0.\n        1. Repeat,\n          1. Let _next_ be ~done~.\n          1. If _iteratorRecord_.[[Done]] is *false*, then\n            1. Set _next_ to ? IteratorStepValue(_iteratorRecord_).\n          1. If _next_ is ~done~, then\n            1. If _environment_ is *undefined*, return ? PutValue(_lhs_, _A_).\n            1. Return ? InitializeReferencedBinding(_lhs_, _A_).\n          1. Perform ! CreateDataPropertyOrThrow(_A_, ! ToString(ùîΩ(_n_)), _next_).\n          1. Set _n_ to _n_ + 1.\n      ",
  "Assertion[4,0].CompileAssertion" : "\n          1. Let _m_ be CompileSubpattern of |Disjunction| with arguments _rer_ and ~forward~.\n          1. Return a new Matcher with parameters (_x_, _c_) that captures _m_ and performs the following steps when called:\n            1. Assert: _x_ is a MatchState.\n            1. Assert: _c_ is a MatcherContinuation.\n            1. Let _d_ be a new MatcherContinuation with parameters (_y_) that captures nothing and performs the following steps when called:\n              1. Assert: _y_ is a MatchState.\n              1. Return _y_.\n            1. Let _r_ be _m_(_x_, _d_).\n            1. If _r_ is ~failure~, return ~failure~.\n            1. Assert: _r_ is a MatchState.\n            1. Let _cap_ be _r_.[[Captures]].\n            1. Let _Input_ be _x_.[[Input]].\n            1. Let _xe_ be _x_.[[EndIndex]].\n            1. Let _z_ be the MatchState { [[Input]]: _Input_, [[EndIndex]]: _xe_, [[Captures]]: _cap_ }.\n            1. Return _c_(_z_).\n        ",
  "ObjectAssignmentPattern[0,0].DestructuringAssignmentEvaluation" : "\n          1. Perform ? RequireObjectCoercible(_value_).\n          1. Return ~unused~.\n        ",
  "FunctionStatementList[0,1].LexicallyDeclaredNames" : "\n        1. Return TopLevelLexicallyDeclaredNames of |StatementList|.\n      ",
  "DayFromYear" : "\n          1. Let _ry_ be ‚Ñù(_y_).\n          1. [declared=\"numYears1,numYears4,numYears100,numYears400\"] NOTE: In the following steps, _numYears1_, _numYears4_, _numYears100_, and _numYears400_ represent the number of years divisible by 1, 4, 100, and 400, respectively, that occur between the epoch and the start of year _y_. The number is negative if _y_ is before the epoch.\n          1. Let _numYears1_ be (_ry_ - 1970).\n          1. Let _numYears4_ be floor((_ry_ - 1969) / 4).\n          1. Let _numYears100_ be floor((_ry_ - 1901) / 100).\n          1. Let _numYears400_ be floor((_ry_ - 1601) / 400).\n          1. Return ùîΩ(365 √ó _numYears1_ + _numYears4_ - _numYears100_ + _numYears400_).\n        ",
  "TimeString" : "\n            1. Let _hour_ be ToZeroPaddedDecimalString(‚Ñù(HourFromTime(_tv_)), 2).\n            1. Let _minute_ be ToZeroPaddedDecimalString(‚Ñù(MinFromTime(_tv_)), 2).\n            1. Let _second_ be ToZeroPaddedDecimalString(‚Ñù(SecFromTime(_tv_)), 2).\n            1. Return the string-concatenation of _hour_, *\":\"*, _minute_, *\":\"*, _second_, the code unit 0x0020 (SPACE), and *\"GMT\"*.\n          ",
  "ModuleExportName[1,0].ReferencedBindings" : "\n          1. Return a List whose sole element is the |StringLiteral|.\n        ",
  "ForStatement[2,0].ContainsUndefinedBreakTarget" : "\n        1. Return ContainsUndefinedBreakTarget of |Statement| with argument _labelSet_.\n      ",
  "OrdinaryCreateFromConstructor" : "\n        1. Assert: _intrinsicDefaultProto_ is this specification's name of an intrinsic object. The corresponding object must be an intrinsic that is intended to be used as the [[Prototype]] value of an object.\n        1. Let _proto_ be ? GetPrototypeFromConstructor(_constructor_, _intrinsicDefaultProto_).\n        1. If _internalSlotsList_ is present, let _slotsList_ be _internalSlotsList_.\n        1. Else, let _slotsList_ be a new empty List.\n        1. Return OrdinaryObjectCreate(_proto_, _slotsList_).\n      ",
  "INTRINSICS.Number.prototype.toString" : "\n          1. Let _x_ be ? ThisNumberValue(*this* value).\n          1. If _radix_ is *undefined*, let _radixMV_ be 10.\n          1. Else, let _radixMV_ be ? ToIntegerOrInfinity(_radix_).\n          1. If _radixMV_ is not in the inclusive interval from 2 to 36, throw a *RangeError* exception.\n          1. Return Number::toString(_x_, _radixMV_).\n        ",
  "INTRINSICS.Date.prototype.getMonth" : "\n          1. Let _dateObject_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_dateObject_, [[DateValue]]).\n          1. Let _t_ be _dateObject_.[[DateValue]].\n          1. If _t_ is *NaN*, return *NaN*.\n          1. Return MonthFromTime(LocalTime(_t_)).\n        ",
  "ArrowParameters[1,0].ContainsExpression" : "\n        1. Let _formals_ be the |ArrowFormalParameters| that is covered by |CoverParenthesizedExpressionAndArrowParameterList|.\n        1. Return ContainsExpression of _formals_.\n      ",
  "ForInOfStatement[8,0].ContainsUndefinedContinueTarget" : "\n        1. Return ContainsUndefinedContinueTarget of |Statement| with arguments _iterationSet_ and ¬´ ¬ª.\n      ",
  "PrimaryExpression[4,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "INTRINSICS.IteratorPrototype[@@iterator]" : "\n          1. Return the *this* value.\n        ",
  "__REMOVE_ELEM__" : null,
  "INTRINSICS.String.prototype.normalize" : "\n          1. Let _O_ be ? RequireObjectCoercible(*this* value).\n          1. Let _S_ be ? ToString(_O_).\n          1. If _form_ is *undefined*, let _f_ be *\"NFC\"*.\n          1. Else, let _f_ be ? ToString(_form_).\n          1. If _f_ is not one of *\"NFC\"*, *\"NFD\"*, *\"NFKC\"*, or *\"NFKD\"*, throw a *RangeError* exception.\n          1. Let _ns_ be the String value that is the result of normalizing _S_ into the normalization form named by _f_ as specified in <a href=\"https://www.unicode.org/versions/latest/ch03.pdf\">the latest Unicode Standard, Normalization Forms</a>.\n          1. Return _ns_.\n        ",
  "IsGenericDescriptor" : "\n          1. If _Desc_ is *undefined*, return *false*.\n          1. If IsAccessorDescriptor(_Desc_) is *true*, return *false*.\n          1. If IsDataDescriptor(_Desc_) is *true*, return *false*.\n          1. Return *true*.\n        ",
  "ForStatement[0,4].VarScopedDeclarations" : "\n        1. Return the VarScopedDeclarations of |Statement|.\n      ",
  "FunctionDeclaration[1,0].ContainsArguments" : "\n        1. Return *false*.\n      ",
  "ExportDeclaration[0,0].LexicallyScopedDeclarations" : "\n        1. Return a new empty List.\n      ",
  "SingleNameBinding[0,1].KeyedBindingInitialization" : "\n          1. Let _bindingId_ be StringValue of |BindingIdentifier|.\n          1. Let _lhs_ be ? ResolveBinding(_bindingId_, _environment_).\n          1. Let _v_ be ? GetV(_value_, _propertyName_).\n          1. If |Initializer| is present and _v_ is *undefined*, then\n            1. If IsAnonymousFunctionDefinition(|Initializer|) is *true*, then\n              1. Set _v_ to ? NamedEvaluation of |Initializer| with argument _bindingId_.\n            1. Else,\n              1. Let _defaultValue_ be ? Evaluation of |Initializer|.\n              1. Set _v_ to ? GetValue(_defaultValue_).\n          1. If _environment_ is *undefined*, return ? PutValue(_lhs_, _v_).\n          1. Return ? InitializeReferencedBinding(_lhs_, _v_).\n        ",
  "PerformPromiseThen" : "\n            1. Assert: IsPromise(_promise_) is *true*.\n            1. If _resultCapability_ is not present, then\n              1. Set _resultCapability_ to *undefined*.\n            1. If IsCallable(_onFulfilled_) is *false*, then\n              1. Let _onFulfilledJobCallback_ be ~empty~.\n            1. Else,\n              1. Let _onFulfilledJobCallback_ be HostMakeJobCallback(_onFulfilled_).\n            1. If IsCallable(_onRejected_) is *false*, then\n              1. Let _onRejectedJobCallback_ be ~empty~.\n            1. Else,\n              1. Let _onRejectedJobCallback_ be HostMakeJobCallback(_onRejected_).\n            1. Let _fulfillReaction_ be the PromiseReaction Record { [[Capability]]: _resultCapability_, [[Type]]: ~fulfill~, [[Handler]]: _onFulfilledJobCallback_ }.\n            1. Let _rejectReaction_ be the PromiseReaction Record { [[Capability]]: _resultCapability_, [[Type]]: ~reject~, [[Handler]]: _onRejectedJobCallback_ }.\n            1. If _promise_.[[PromiseState]] is ~pending~, then\n              1. Append _fulfillReaction_ to _promise_.[[PromiseFulfillReactions]].\n              1. Append _rejectReaction_ to _promise_.[[PromiseRejectReactions]].\n            1. Else if _promise_.[[PromiseState]] is ~fulfilled~, then\n              1. Let _value_ be _promise_.[[PromiseResult]].\n              1. Let _fulfillJob_ be NewPromiseReactionJob(_fulfillReaction_, _value_).\n              1. Perform HostEnqueuePromiseJob(_fulfillJob_.[[Job]], _fulfillJob_.[[Realm]]).\n            1. Else,\n              1. Assert: The value of _promise_.[[PromiseState]] is ~rejected~.\n              1. Let _reason_ be _promise_.[[PromiseResult]].\n              1. If _promise_.[[PromiseIsHandled]] is *false*, perform HostPromiseRejectionTracker(_promise_, *\"handle\"*).\n              1. Let _rejectJob_ be NewPromiseReactionJob(_rejectReaction_, _reason_).\n              1. Perform HostEnqueuePromiseJob(_rejectJob_.[[Job]], _rejectJob_.[[Realm]]).\n            1. Set _promise_.[[PromiseIsHandled]] to *true*.\n            1. If _resultCapability_ is *undefined*, then\n              1. Return *undefined*.\n            1. Else,\n              1. Return _resultCapability_.[[Promise]].\n          ",
  "ReturnStatement[1,0].HasCallInTailPosition" : "\n        1. Return HasCallInTailPosition of |Expression| with argument _call_.\n      ",
  "AsyncGeneratorAwaitReturn:clo0" : "\n          1. Let _queue_ be _generator_.[[AsyncGeneratorQueue]].\n          1. Assert: _queue_ is not empty.\n          1. Let _next_ be the first element of _queue_.\n          1. Let _completion_ be Completion(_next_.[[Completion]]).\n          1. Assert: _completion_ is a return completion.\n          1. Let _promise_ be ? PromiseResolve(%Promise%, _completion_.[[Value]]).\n          1. Let _fulfilledClosure_ be a new Abstract Closure with parameters (_value_) that captures _generator_ and performs the following steps when called:\n            1. Set _generator_.[[AsyncGeneratorState]] to ~completed~.\n            1. Let _result_ be NormalCompletion(_value_).\n            1. Perform AsyncGeneratorCompleteStep(_generator_, _result_, *true*).\n            1. Perform AsyncGeneratorDrainQueue(_generator_).\n            1. Return *undefined*.\n          1. Let _onFulfilled_ be CreateBuiltinFunction(_fulfilledClosure_, 1, *\"\"*, ¬´ ¬ª).\n          1. Let _rejectedClosure_ be a new Abstract Closure with parameters (_reason_) that captures _generator_ and performs the following steps when called:\n            1. Set _generator_.[[AsyncGeneratorState]] to ~completed~.\n            1. Let _result_ be ThrowCompletion(_reason_).\n            1. Perform AsyncGeneratorCompleteStep(_generator_, _result_, *true*).\n            1. Perform AsyncGeneratorDrainQueue(_generator_).\n            1. Return *undefined*.\n          1. Let _onRejected_ be CreateBuiltinFunction(_rejectedClosure_, 1, *\"\"*, ¬´ ¬ª).\n          1. Perform PerformPromiseThen(_promise_, _onFulfilled_, _onRejected_).\n          1. Return ~unused~.\n        ",
  "IsLessThan" : "\n        1. If _LeftFirst_ is *true*, then\n          1. Let _px_ be ? ToPrimitive(_x_, ~number~).\n          1. Let _py_ be ? ToPrimitive(_y_, ~number~).\n        1. Else,\n          1. NOTE: The order of evaluation needs to be reversed to preserve left to right evaluation.\n          1. Let _py_ be ? ToPrimitive(_y_, ~number~).\n          1. Let _px_ be ? ToPrimitive(_x_, ~number~).\n        1. [id=\"step-arc-string-check\"] If _px_ is a String and _py_ is a String, then\n          1. Let _lx_ be the length of _px_.\n          1. Let _ly_ be the length of _py_.\n          1. For each integer _i_ such that 0 ‚â§ _i_ < min(_lx_, _ly_), in ascending order, do\n            1. Let _cx_ be the numeric value of the code unit at index _i_ within _px_.\n            1. Let _cy_ be the numeric value of the code unit at index _i_ within _py_.\n            1. If _cx_ < _cy_, return *true*.\n            1. If _cx_ > _cy_, return *false*.\n          1. If _lx_ < _ly_, return *true*. Otherwise, return *false*.\n        1. Else,\n          1. If _px_ is a BigInt and _py_ is a String, then\n            1. Let _ny_ be StringToBigInt(_py_).\n            1. If _ny_ is *undefined*, return *undefined*.\n            1. Return BigInt::lessThan(_px_, _ny_).\n          1. If _px_ is a String and _py_ is a BigInt, then\n            1. Let _nx_ be StringToBigInt(_px_).\n            1. If _nx_ is *undefined*, return *undefined*.\n            1. Return BigInt::lessThan(_nx_, _py_).\n          1. NOTE: Because _px_ and _py_ are primitive values, evaluation order is not important.\n          1. Let _nx_ be ? <emu-meta suppress-effects=\"user-code\">ToNumeric(_px_)</emu-meta>.\n          1. Let _ny_ be ? <emu-meta suppress-effects=\"user-code\">ToNumeric(_py_)</emu-meta>.\n          1. If Type(_nx_) is Type(_ny_), then\n            1. If _nx_ is a Number, then\n              1. Return Number::lessThan(_nx_, _ny_).\n            1. Else,\n              1. Assert: _nx_ is a BigInt.\n              1. Return BigInt::lessThan(_nx_, _ny_).\n          1. Assert: _nx_ is a BigInt and _ny_ is a Number, or _nx_ is a Number and _ny_ is a BigInt.\n          1. If _nx_ or _ny_ is *NaN*, return *undefined*.\n          1. If _nx_ is *-‚àû*<sub>ùîΩ</sub> or _ny_ is *+‚àû*<sub>ùîΩ</sub>, return *true*.\n          1. If _nx_ is *+‚àû*<sub>ùîΩ</sub> or _ny_ is *-‚àû*<sub>ùîΩ</sub>, return *false*.\n          1. If ‚Ñù(_nx_) < ‚Ñù(_ny_), return *true*; otherwise return *false*.\n      ",
  "RelationalExpression[3,0].IsFunctionDefinition" : "\n        1. Return *false*.\n      ",
  "CreateSetIterator:clo0" : "\n          1. Perform ? RequireInternalSlot(_set_, [[SetData]]).\n          1. Let _closure_ be a new Abstract Closure with no parameters that captures _set_ and _kind_ and performs the following steps when called:\n            1. Let _index_ be 0.\n            1. Let _entries_ be _set_.[[SetData]].\n            1. Let _numEntries_ be the number of elements in _entries_.\n            1. Repeat, while _index_ < _numEntries_,\n              1. Let _e_ be _entries_[_index_].\n              1. Set _index_ to _index_ + 1.\n              1. If _e_ is not ~empty~, then\n                1. If _kind_ is ~key+value~, then\n                  1. Let _result_ be CreateArrayFromList(¬´ _e_, _e_ ¬ª).\n                  1. Perform ? GeneratorYield(CreateIterResultObject(_result_, *false*)).\n                1. Else,\n                  1. Assert: _kind_ is ~value~.\n                  1. Perform ? GeneratorYield(CreateIterResultObject(_e_, *false*)).\n                1. NOTE: The number of elements in _entries_ may have increased while execution of this abstract operation was paused by Yield.\n                1. Set _numEntries_ to the number of elements in _entries_.\n            1. Return NormalCompletion(*undefined*).\n          1. Return CreateIteratorFromClosure(_closure_, *\"%SetIteratorPrototype%\"*, %SetIteratorPrototype%).\n        ",
  "INTRINSICS.Map.prototype.keys" : "\n          1. Let _M_ be the *this* value.\n          1. Return ? CreateMapIterator(_M_, ~key~).\n        ",
  "Record[ObjectEnvironmentRecord].SetMutableBinding" : "\n            1. Let _bindingObject_ be _envRec_.[[BindingObject]].\n            1. Let _stillExists_ be ? HasProperty(_bindingObject_, _N_).\n            1. If _stillExists_ is *false* and _S_ is *true*, throw a *ReferenceError* exception.\n            1. Perform ? Set(_bindingObject_, _N_, _V_, _S_).\n            1. Return ~unused~.\n          ",
  "Set" : "\n        1. Let _success_ be ? <emu-meta effects=\"user-code\">_O_.[[Set]]</emu-meta>(_P_, _V_, _O_).\n        1. If _success_ is *false* and _Throw_ is *true*, throw a *TypeError* exception.\n        1. Return ~unused~.\n      ",
  "FunctionStatementList[0,0].VarScopedDeclarations" : "\n        1. Return a new empty List.\n      ",
  "StatementListItem[1,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "ForStatement[2,3].HasCallInTailPosition" : "\n        1. Return HasCallInTailPosition of |Statement| with argument _call_.\n      ",
  "CaseBlock[0,0].ContainsUndefinedBreakTarget" : "\n        1. Return *false*.\n      ",
  "CharacterClassEscape[6,0].CompileToCharSet" : "\n          1. Return CompileToCharSet of |UnicodePropertyValueExpression| with argument _rer_.\n        ",
  "LeftHandSideExpression[2,0].AssignmentTargetType" : "\n        1. Return ~invalid~.\n      ",
  "ModuleExportName[0,0].ReferencedBindings" : "\n          1. Return a List whose sole element is the |IdentifierName|.\n        ",
  "PromiseResolve" : "\n            1. If IsPromise(_x_) is *true*, then\n              1. Let _xConstructor_ be ? Get(_x_, *\"constructor\"*).\n              1. If SameValue(_xConstructor_, _C_) is *true*, return _x_.\n            1. Let _promiseCapability_ be ? NewPromiseCapability(_C_).\n            1. Perform ? Call(_promiseCapability_.[[Resolve]], *undefined*, ¬´ _x_ ¬ª).\n            1. Return _promiseCapability_.[[Promise]].\n          ",
  "MethodDefinition[0,0].ContainsArguments" : "\n        1. Return ContainsArguments of |ClassElementName|.\n      ",
  "ShiftExpression[1,0].Evaluation" : "\n          1. Return ? EvaluateStringOrNumericBinaryExpression(|ShiftExpression|, `<<`, |AdditiveExpression|).\n        ",
  "FunctionStatementList[0,0].ContainsUndefinedBreakTarget" : "\n        1. Return *false*.\n      ",
  "TypedArrayGetElement" : "\n          1. If IsValidIntegerIndex(_O_, _index_) is *false*, return *undefined*.\n          1. Let _offset_ be _O_.[[ByteOffset]].\n          1. Let _elementSize_ be TypedArrayElementSize(_O_).\n          1. Let _byteIndexInBuffer_ be (‚Ñù(_index_) √ó _elementSize_) + _offset_.\n          1. Let _elementType_ be TypedArrayElementType(_O_).\n          1. Return GetValueFromBuffer(_O_.[[ViewedArrayBuffer]], _byteIndexInBuffer_, _elementType_, *true*, ~unordered~).\n        ",
  "INTRINSICS.DataView.prototype.getInt32" : "\n          1. Let _v_ be the *this* value.\n          1. If _littleEndian_ is not present, set _littleEndian_ to *false*.\n          1. Return ? GetViewValue(_v_, _byteOffset_, _littleEndian_, ~int32~).\n        ",
  "ExportDeclaration[0,0].ModuleRequests" : "\n          1. Return the ModuleRequests of |FromClause|.\n        ",
  "Number::lessThan" : "\n            1. If _x_ is *NaN*, return *undefined*.\n            1. If _y_ is *NaN*, return *undefined*.\n            1. If _x_ is _y_, return *false*.\n            1. If _x_ is *+0*<sub>ùîΩ</sub> and _y_ is *-0*<sub>ùîΩ</sub>, return *false*.\n            1. If _x_ is *-0*<sub>ùîΩ</sub> and _y_ is *+0*<sub>ùîΩ</sub>, return *false*.\n            1. If _x_ is *+‚àû*<sub>ùîΩ</sub>, return *false*.\n            1. If _y_ is *+‚àû*<sub>ùîΩ</sub>, return *true*.\n            1. If _y_ is *-‚àû*<sub>ùîΩ</sub>, return *false*.\n            1. If _x_ is *-‚àû*<sub>ùîΩ</sub>, return *true*.\n            1. Assert: _x_ and _y_ are finite.\n            1. If ‚Ñù(_x_) < ‚Ñù(_y_), return *true*. Otherwise, return *false*.\n          ",
  "INTRINSICS.TypedArray.prototype.every" : "\n          1. Let _O_ be the *this* value.\n          1. Let _taRecord_ be ? ValidateTypedArray(_O_, ~seq-cst~).\n          1. Let _len_ be TypedArrayLength(_taRecord_).\n          1. If IsCallable(_callbackfn_) is *false*, throw a *TypeError* exception.\n          1. Let _k_ be 0.\n          1. Repeat, while _k_ < _len_,\n            1. Let _Pk_ be ! ToString(ùîΩ(_k_)).\n            1. Let _kValue_ be ! Get(_O_, _Pk_).\n            1. Let _testResult_ be ToBoolean(? Call(_callbackfn_, _thisArg_, ¬´ _kValue_, ùîΩ(_k_), _O_ ¬ª)).\n            1. If _testResult_ is *false*, return *false*.\n            1. Set _k_ to _k_ + 1.\n          1. Return *true*.\n        ",
  "WeekDay" : "\n          1. Return ùîΩ(‚Ñù(Day(_t_) + *4*<sub>ùîΩ</sub>) modulo 7).\n        ",
  "INTRINSICS.Array.prototype.findLast" : "\n          1. Let _O_ be ? ToObject(*this* value).\n          1. Let _len_ be ? LengthOfArrayLike(_O_).\n          1. Let _findRec_ be ? FindViaPredicate(_O_, _len_, ~descending~, _predicate_, _thisArg_).\n          1. Return _findRec_.[[Value]].\n        ",
  "Statement[13,0].ContainsUndefinedContinueTarget" : "\n        1. Return *false*.\n      ",
  "OptionalChain[5,0].HasCallInTailPosition" : "\n        1. If this |OptionalChain| is _call_, return *true*.\n        1. Return *false*.\n      ",
  "StringNumericLiteral[1,2].StringNumericValue" : "\n            1. Return StringNumericValue of |StrNumericLiteral|.\n          ",
  "IfStatement[0,0].HasCallInTailPosition" : "\n        1. Let _has_ be HasCallInTailPosition of the first |Statement| with argument _call_.\n        1. If _has_ is *true*, return *true*.\n        1. Return HasCallInTailPosition of the second |Statement| with argument _call_.\n      ",
  "ConciseBody[0,0].LexicallyDeclaredNames" : "\n        1. Return a new empty List.\n      ",
  "TryStatement[2,0].HasCallInTailPosition" : "\n        1. Return HasCallInTailPosition of |Finally| with argument _call_.\n      ",
  "AsyncIteratorClose" : "\n        1. Assert: _iteratorRecord_.[[Iterator]] is an Object.\n        1. Let _iterator_ be _iteratorRecord_.[[Iterator]].\n        1. Let _innerResult_ be Completion(GetMethod(_iterator_, *\"return\"*)).\n        1. If _innerResult_ is a normal completion, then\n          1. Let _return_ be _innerResult_.[[Value]].\n          1. If _return_ is *undefined*, return ? _completion_.\n          1. Set _innerResult_ to Completion(Call(_return_, _iterator_)).\n          1. If _innerResult_ is a normal completion, set _innerResult_ to Completion(Await(_innerResult_.[[Value]])).\n        1. If _completion_ is a throw completion, return ? _completion_.\n        1. If _innerResult_ is a throw completion, return ? _innerResult_.\n        1. If _innerResult_.[[Value]] is not an Object, throw a *TypeError* exception.\n        1. Return ? _completion_.\n      ",
  "RelationalExpression[1,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "INTRINSICS.Math.acosh" : "\n          1. Let _n_ be ? ToNumber(_x_).\n          1. If _n_ is either *NaN* or *+‚àû*<sub>ùîΩ</sub>, return _n_.\n          1. If _n_ is *1*<sub>ùîΩ</sub>, return *+0*<sub>ùîΩ</sub>.\n          1. If _n_ < *1*<sub>ùîΩ</sub>, return *NaN*.\n          1. Return an implementation-approximated Number value representing the result of the inverse hyperbolic cosine of ‚Ñù(_n_).\n        ",
  "Disjunction[1,0].CompileSubpattern" : "\n          1. Let _m1_ be CompileSubpattern of |Alternative| with arguments _rer_ and _direction_.\n          1. Let _m2_ be CompileSubpattern of |Disjunction| with arguments _rer_ and _direction_.\n          1. Return MatchTwoAlternatives(_m1_, _m2_).\n        ",
  "Record[ObjectEnvironmentRecord].DeleteBinding" : "\n            1. Let _bindingObject_ be _envRec_.[[BindingObject]].\n            1. Return ? <emu-meta effects=\"user-code\">_bindingObject_.[[Delete]]</emu-meta>(_N_).\n          ",
  "CaseBlock[0,0].VarScopedDeclarations" : "\n        1. Return a new empty List.\n      ",
  "ExecuteAsyncModule:clo0" : "\n              1. Assert: _module_.[[Status]] is either ~evaluating~ or ~evaluating-async~.\n              1. Assert: _module_.[[HasTLA]] is *true*.\n              1. Let _capability_ be ! NewPromiseCapability(%Promise%).\n              1. Let _fulfilledClosure_ be a new Abstract Closure with no parameters that captures _module_ and performs the following steps when called:\n                1. Perform AsyncModuleExecutionFulfilled(_module_).\n                1. Return *undefined*.\n              1. Let _onFulfilled_ be CreateBuiltinFunction(_fulfilledClosure_, 0, *\"\"*, ¬´ ¬ª).\n              1. Let _rejectedClosure_ be a new Abstract Closure with parameters (_error_) that captures _module_ and performs the following steps when called:\n                1. Perform AsyncModuleExecutionRejected(_module_, _error_).\n                1. Return *undefined*.\n              1. Let _onRejected_ be CreateBuiltinFunction(_rejectedClosure_, 0, *\"\"*, ¬´ ¬ª).\n              1. Perform PerformPromiseThen(_capability_.[[Promise]], _onFulfilled_, _onRejected_).\n              1. Perform ! <emu-meta effects=\"user-code\">_module_.ExecuteModule</emu-meta>(_capability_).\n              1. Return ~unused~.\n            ",
  "UnicodePropertyValueExpression[0,0].MayContainStrings" : "\n          1. Return *false*.\n        ",
  "GeneratorMethod[0,0].HasDirectSuper" : "\n        1. If |UniqueFormalParameters| Contains |SuperCall| is *true*, return *true*.\n        1. Return |GeneratorBody| Contains |SuperCall|.\n      ",
  "BreakStatement[0,0].Evaluation" : "\n        1. Return Completion Record { [[Type]]: ~break~, [[Value]]: ~empty~, [[Target]]: ~empty~ }.\n      ",
  "CaseClause[0,1].VarDeclaredNames" : "\n        1. If the |StatementList| is present, return the VarDeclaredNames of |StatementList|.\n        1. Return a new empty List.\n      ",
  "ForBinding[0,0].IsDestructuring" : "\n          1. Return *false*.\n        ",
  "Record[Array].DefineOwnProperty" : "\n          1. If _P_ is *\"length\"*, then\n            1. Return ? ArraySetLength(_A_, _Desc_).\n          1. Else if _P_ is an array index, then\n            1. Let _lengthDesc_ be OrdinaryGetOwnProperty(_A_, *\"length\"*).\n            1. Assert: IsDataDescriptor(_lengthDesc_) is *true*.\n            1. Assert: _lengthDesc_.[[Configurable]] is *false*.\n            1. Let _length_ be _lengthDesc_.[[Value]].\n            1. Assert: _length_ is a non-negative integral Number.\n            1. Let _index_ be ! ToUint32(_P_).\n            1. If _index_ ‚â• _length_ and _lengthDesc_.[[Writable]] is *false*, return *false*.\n            1. Let _succeeded_ be ! OrdinaryDefineOwnProperty(_A_, _P_, _Desc_).\n            1. If _succeeded_ is *false*, return *false*.\n            1. If _index_ ‚â• _length_, then\n              1. Set _lengthDesc_.[[Value]] to _index_ + *1*<sub>ùîΩ</sub>.\n              1. Set _succeeded_ to ! OrdinaryDefineOwnProperty(_A_, *\"length\"*, _lengthDesc_).\n              1. Assert: _succeeded_ is *true*.\n            1. Return *true*.\n          1. Return ? OrdinaryDefineOwnProperty(_A_, _P_, _Desc_).\n        ",
  "NewPromiseResolveThenableJob" : "\n          1. Let _job_ be a new Job Abstract Closure with no parameters that captures _promiseToResolve_, _thenable_, and _then_ and performs the following steps when called:\n            1. Let _resolvingFunctions_ be CreateResolvingFunctions(_promiseToResolve_).\n            1. Let _thenCallResult_ be Completion(HostCallJobCallback(_then_, _thenable_, ¬´ _resolvingFunctions_.[[Resolve]], _resolvingFunctions_.[[Reject]] ¬ª)).\n            1. If _thenCallResult_ is an abrupt completion, then\n              1. Return ? Call(_resolvingFunctions_.[[Reject]], *undefined*, ¬´ _thenCallResult_.[[Value]] ¬ª).\n            1. Return ? _thenCallResult_.\n          1. Let _getThenRealmResult_ be Completion(GetFunctionRealm(_then_.[[Callback]])).\n          1. If _getThenRealmResult_ is a normal completion, let _thenRealm_ be _getThenRealmResult_.[[Value]].\n          1. Else, let _thenRealm_ be the current Realm Record.\n          1. NOTE: _thenRealm_ is never *null*. When _then_.[[Callback]] is a revoked Proxy and no code runs, _thenRealm_ is used to create error objects.\n          1. Return the Record { [[Job]]: _job_, [[Realm]]: _thenRealm_ }.\n        ",
  "CaseBlock[1,0].ContainsUndefinedBreakTarget" : "\n        1. If the first |CaseClauses| is present, then\n          1. If ContainsUndefinedBreakTarget of the first |CaseClauses| with argument _labelSet_ is *true*, return *true*.\n        1. If ContainsUndefinedBreakTarget of |DefaultClause| with argument _labelSet_ is *true*, return *true*.\n        1. If the second |CaseClauses| is not present, return *false*.\n        1. Return ContainsUndefinedBreakTarget of the second |CaseClauses| with argument _labelSet_.\n      ",
  "DefaultClause[0,0].ContainsUndefinedBreakTarget" : "\n        1. If the |StatementList| is present, return ContainsUndefinedBreakTarget of |StatementList| with argument _labelSet_.\n        1. Return *false*.\n      ",
  "VariableDeclarationList[1,0].BoundNames" : "\n        1. Let _names1_ be BoundNames of |VariableDeclarationList|.\n        1. Let _names2_ be BoundNames of |VariableDeclaration|.\n        1. Return the list-concatenation of _names1_ and _names2_.\n      ",
  "INTRINSICS.String.prototype.matchAll" : "\n          1. Let _O_ be ? RequireObjectCoercible(*this* value).\n          1. If _regexp_ is neither *undefined* nor *null*, then\n            1. Let _isRegExp_ be ? IsRegExp(_regexp_).\n            1. If _isRegExp_ is *true*, then\n              1. Let _flags_ be ? Get(_regexp_, *\"flags\"*).\n              1. Perform ? RequireObjectCoercible(_flags_).\n              1. If ? ToString(_flags_) does not contain *\"g\"*, throw a *TypeError* exception.\n            1. Let _matcher_ be ? GetMethod(_regexp_, @@matchAll).\n            1. If _matcher_ is not *undefined*, then\n              1. Return ? Call(_matcher_, _regexp_, ¬´ _O_ ¬ª).\n          1. Let _S_ be ? ToString(_O_).\n          1. Let _rx_ be ? RegExpCreate(_regexp_, *\"g\"*).\n          1. Return ? Invoke(_rx_, @@matchAll, ¬´ _S_ ¬ª).\n        ",
  "INTRINSICS.Reflect.construct" : "\n        1. If IsConstructor(_target_) is *false*, throw a *TypeError* exception.\n        1. If _newTarget_ is not present, set _newTarget_ to _target_.\n        1. Else if IsConstructor(_newTarget_) is *false*, throw a *TypeError* exception.\n        1. Let _args_ be ? CreateListFromArrayLike(_argumentsList_).\n        1. Return ? Construct(_target_, _args_, _newTarget_).\n      ",
  "INTRINSICS.String.prototype.startsWith" : "\n          1. Let _O_ be ? RequireObjectCoercible(*this* value).\n          1. Let _S_ be ? ToString(_O_).\n          1. Let _isRegExp_ be ? IsRegExp(_searchString_).\n          1. If _isRegExp_ is *true*, throw a *TypeError* exception.\n          1. Let _searchStr_ be ? ToString(_searchString_).\n          1. Let _len_ be the length of _S_.\n          1. If _position_ is *undefined*, let _pos_ be 0; else let _pos_ be ? ToIntegerOrInfinity(_position_).\n          1. Let _start_ be the result of clamping _pos_ between 0 and _len_.\n          1. Let _searchLength_ be the length of _searchStr_.\n          1. If _searchLength_ = 0, return *true*.\n          1. Let _end_ be _start_ + _searchLength_.\n          1. If _end_ > _len_, return *false*.\n          1. Let _substring_ be the substring of _S_ from _start_ to _end_.\n          1. If _substring_ is _searchStr_, return *true*.\n          1. Return *false*.\n        ",
  "INTRINSICS.Atomics.notify" : "\n        1. Let _byteIndexInBuffer_ be ? ValidateAtomicAccessOnIntegerTypedArray(_typedArray_, _index_, *true*).\n        1. If _count_ is *undefined*, then\n          1. Let _c_ be +‚àû.\n        1. Else,\n          1. Let _intCount_ be ? ToIntegerOrInfinity(_count_).\n          1. Let _c_ be max(_intCount_, 0).\n        1. Let _buffer_ be _typedArray_.[[ViewedArrayBuffer]].\n        1. Let _block_ be _buffer_.[[ArrayBufferData]].\n        1. If IsSharedArrayBuffer(_buffer_) is *false*, return *+0*<sub>ùîΩ</sub>.\n        1. Let _WL_ be GetWaiterList(_block_, _byteIndexInBuffer_).\n        1. Perform EnterCriticalSection(_WL_).\n        1. Let _S_ be RemoveWaiters(_WL_, _c_).\n        1. For each element _W_ of _S_, do\n          1. Perform NotifyWaiter(_WL_, _W_).\n        1. Perform LeaveCriticalSection(_WL_).\n        1. Let _n_ be the number of elements in _S_.\n        1. Return ùîΩ(_n_).\n      ",
  "ArrayLiteral[0,0].Evaluation" : "\n          1. Let _array_ be ! ArrayCreate(0).\n          1. If |Elision| is present, then\n            1. Perform ? ArrayAccumulation of |Elision| with arguments _array_ and 0.\n          1. Return _array_.\n        ",
  "INTRINSICS.Atomics.and" : "\n        1. Let _and_ be a new read-modify-write modification function with parameters (_xBytes_, _yBytes_) that captures nothing and performs the following steps atomically when called:\n          1. Return ByteListBitwiseOp(`&`, _xBytes_, _yBytes_).\n        1. Return ? AtomicReadModifyWrite(_typedArray_, _index_, _value_, _and_).\n      ",
  "ClassSetCharacter[0,0].CharacterValue" : "\n          1. Let _ch_ be the code point matched by |SourceCharacter|.\n          1. Return the numeric value of _ch_.\n        ",
  "ImportSpecifier[0,0].ImportEntriesForModule" : "\n          1. Let _localName_ be the sole element of BoundNames of |ImportedBinding|.\n          1. Let _entry_ be the ImportEntry Record { [[ModuleRequest]]: _module_, [[ImportName]]: _localName_, [[LocalName]]: _localName_ }.\n          1. Return ¬´ _entry_ ¬ª.\n        ",
  "BreakableStatement[1,0].Evaluation" : "\n        1. Let _newLabelSet_ be a new empty List.\n        1. Return ? LabelledEvaluation of this |BreakableStatement| with argument _newLabelSet_.\n      ",
  "ForInOfStatement[8,0].ContainsUndefinedBreakTarget" : "\n        1. Return ContainsUndefinedBreakTarget of |Statement| with argument _labelSet_.\n      ",
  "ClassDeclaration[1,0].BoundNames" : "\n        1. Return ¬´ *\"\\*default\\*\"* ¬ª.\n      ",
  "ExportDeclaration[3,0].ModuleRequests" : "\n          1. Return a new empty List.\n        ",
  "INTRINSICS.WeakRef" : "\n          1. If NewTarget is *undefined*, throw a *TypeError* exception.\n          1. If CanBeHeldWeakly(_target_) is *false*, throw a *TypeError* exception.\n          1. Let _weakRef_ be ? OrdinaryCreateFromConstructor(NewTarget, *\"%WeakRef.prototype%\"*, ¬´ [[WeakRefTarget]] ¬ª).\n          1. Perform AddToKeptObjects(_target_).\n          1. Set _weakRef_.[[WeakRefTarget]] to _target_.\n          1. Return _weakRef_.\n        ",
  "ClassStaticBlockStatementList[0,0].LexicallyScopedDeclarations" : "\n        1. Return a new empty List.\n      ",
  "AsyncArrowFunction[1,0].Contains" : "\n        1. If _symbol_ is not one of |NewTarget|, |SuperProperty|, |SuperCall|, `super`, or `this`, return *false*.\n        1. Let _head_ be the |AsyncArrowHead| that is covered by |CoverCallExpressionAndAsyncArrowHead|.\n        1. If _head_ Contains _symbol_ is *true*, return *true*.\n        1. Return |AsyncConciseBody| Contains _symbol_.\n      ",
  "Record[CyclicModuleRecord].LoadRequestedModules" : "\n            1. If _hostDefined_ is not present, let _hostDefined_ be ~empty~.\n            1. Let _pc_ be ! NewPromiseCapability(%Promise%).\n            1. Let _state_ be the GraphLoadingState Record { [[IsLoading]]: *true*, [[PendingModulesCount]]: 1, [[Visited]]: ¬´ ¬ª, [[PromiseCapability]]: _pc_, [[HostDefined]]: _hostDefined_ }.\n            1. Perform InnerModuleLoading(_state_, _module_).\n            1. Return _pc_.[[Promise]].\n          ",
  "SuperCall[0,0].Evaluation" : "\n          1. Let _newTarget_ be GetNewTarget().\n          1. Assert: _newTarget_ is an Object.\n          1. Let _func_ be GetSuperConstructor().\n          1. Let _argList_ be ? ArgumentListEvaluation of |Arguments|.\n          1. If IsConstructor(_func_) is *false*, throw a *TypeError* exception.\n          1. Let _result_ be ? Construct(_func_, _argList_, _newTarget_).\n          1. Let _thisER_ be GetThisEnvironment().\n          1. Perform ? _thisER_.BindThisValue(_result_).\n          1. Let _F_ be _thisER_.[[FunctionObject]].\n          1. Assert: _F_ is an ECMAScript function object.\n          1. Perform ? InitializeInstanceElements(_result_, _F_).\n          1. Return _result_.\n        ",
  "StringToNumber" : "\n            1. Let _text_ be StringToCodePoints(_str_).\n            1. Let _literal_ be ParseText(_text_, |StringNumericLiteral|).\n            1. If _literal_ is a List of errors, return *NaN*.\n            1. Return StringNumericValue of _literal_.\n          ",
  "AsyncGeneratorResume:cont0" : "\n          1. Assert: _generator_.[[AsyncGeneratorState]] is either ~suspended-start~ or ~suspended-yield~.\n          1. Let _genContext_ be _generator_.[[AsyncGeneratorContext]].\n          1. Let _callerContext_ be the running execution context.\n          1. Suspend _callerContext_.\n          1. Set _generator_.[[AsyncGeneratorState]] to ~executing~.\n          1. Push _genContext_ onto the execution context stack; _genContext_ is now the running execution context.\n          1. <emu-meta effects=\"user-code\">Resume the suspended evaluation of _genContext_</emu-meta> using _completion_ as the result of the operation that suspended it. Let _result_ be the Completion Record returned by the resumed computation.\n          1. Assert: _result_ is never an abrupt completion.\n          1. Assert: When we return here, _genContext_ has already been removed from the execution context stack and _callerContext_ is the currently running execution context.\n          1. Return ~unused~.\n        ",
  "ModuleItem[0,0].LexicallyScopedDeclarations" : "\n        1. Return a new empty List.\n      ",
  "IfStatement[0,0].VarScopedDeclarations" : "\n        1. Let _declarations1_ be VarScopedDeclarations of the first |Statement|.\n        1. Let _declarations2_ be VarScopedDeclarations of the second |Statement|.\n        1. Return the list-concatenation of _declarations1_ and _declarations2_.\n      ",
  "ClassSetRange[0,0].CompileToCharSet" : "\n          1. Let _A_ be CompileToCharSet of the first |ClassSetCharacter| with argument _rer_.\n          1. Let _B_ be CompileToCharSet of the second |ClassSetCharacter| with argument _rer_.\n          1. Return MaybeSimpleCaseFolding(_rer_, CharacterRange(_A_, _B_)).\n        ",
  "ArrayLiteral[1,0].Evaluation" : "\n          1. Let _array_ be ! ArrayCreate(0).\n          1. Perform ? ArrayAccumulation of |ElementList| with arguments _array_ and 0.\n          1. Return _array_.\n        ",
  "Record[DeclarativeEnvironmentRecord].DeleteBinding" : "\n            1. Assert: _envRec_ has a binding for _N_.\n            1. If the binding for _N_ in _envRec_ cannot be deleted, return *false*.\n            1. Remove the binding for _N_ from _envRec_.\n            1. Return *true*.\n          ",
  "FunctionExpression[0,0].InstantiateOrdinaryFunctionExpression" : "\n        1. If _name_ is not present, set _name_ to *\"\"*.\n        1. Let _env_ be the LexicalEnvironment of the running execution context.\n        1. Let _privateEnv_ be the running execution context's PrivateEnvironment.\n        1. Let _sourceText_ be the source text matched by |FunctionExpression|.\n        1. Let _closure_ be OrdinaryFunctionCreate(%Function.prototype%, _sourceText_, |FormalParameters|, |FunctionBody|, ~non-lexical-this~, _env_, _privateEnv_).\n        1. Perform SetFunctionName(_closure_, _name_).\n        1. Perform MakeConstructor(_closure_).\n        1. Return _closure_.\n      ",
  "MemberExpression[6,0].IsDestructuring" : "\n          1. Return *false*.\n        ",
  "OptionalChain[6,0].ChainEvaluation" : "\n          1. Let _optionalChain_ be |OptionalChain|.\n          1. Let _newReference_ be ? ChainEvaluation of _optionalChain_ with arguments _baseValue_ and _baseReference_.\n          1. Let _newValue_ be ? GetValue(_newReference_).\n          1. If the source text matched by this |OptionalChain| is strict mode code, let _strict_ be *true*; else let _strict_ be *false*.\n          1. Return ? EvaluatePropertyAccessWithExpressionKey(_newValue_, |Expression|, _strict_).\n        ",
  "ClassEscape[1,0].CharacterValue" : "\n          1. Return the numeric value of U+002D (HYPHEN-MINUS).\n        ",
  "INTRINSICS.Symbol.for" : "\n          1. Let _stringKey_ be ? ToString(_key_).\n          1. For each element _e_ of the GlobalSymbolRegistry List, do\n            1. If SameValue(_e_.[[Key]], _stringKey_) is *true*, return _e_.[[Symbol]].\n          1. Assert: GlobalSymbolRegistry does not currently contain an entry for _stringKey_.\n          1. Let _newSymbol_ be a new Symbol whose [[Description]] is _stringKey_.\n          1. Append the Record { [[Key]]: _stringKey_, [[Symbol]]: _newSymbol_ } to the GlobalSymbolRegistry List.\n          1. Return _newSymbol_.\n        ",
  "CreateListFromArrayLike" : "\n        1. If _elementTypes_ is not present, set _elementTypes_ to ¬´ Undefined, Null, Boolean, String, Symbol, Number, BigInt, Object ¬ª.\n        1. If _obj_ is not an Object, throw a *TypeError* exception.\n        1. Let _len_ be ? LengthOfArrayLike(_obj_).\n        1. Let _list_ be a new empty List.\n        1. Let _index_ be 0.\n        1. Repeat, while _index_ < _len_,\n          1. Let _indexName_ be ! ToString(ùîΩ(_index_)).\n          1. Let _next_ be ? Get(_obj_, _indexName_).\n          1. If _elementTypes_ does not contain Type(_next_), throw a *TypeError* exception.\n          1. Append _next_ to _list_.\n          1. Set _index_ to _index_ + 1.\n        1. Return _list_.\n      ",
  "SingleNameBinding[0,1].ContainsExpression" : "\n        1. Return *true*.\n      ",
  "GetStringIndex" : "\n          1. If _S_ is the empty String, return 0.\n          1. Let _len_ be the length of _S_.\n          1. Let _codeUnitCount_ be 0.\n          1. Let _codePointCount_ be 0.\n          1. Repeat, while _codeUnitCount_ < _len_,\n            1. If _codePointCount_ = _codePointIndex_, return _codeUnitCount_.\n            1. Let _cp_ be CodePointAt(_S_, _codeUnitCount_).\n            1. Set _codeUnitCount_ to _codeUnitCount_ + _cp_.[[CodeUnitCount]].\n            1. Set _codePointCount_ to _codePointCount_ + 1.\n          1. Return _len_.\n        ",
  "OptionalChain[6,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "ForStatement[1,0].ContainsDuplicateLabels" : "\n        1. Return ContainsDuplicateLabels of |Statement| with argument _labelSet_.\n      ",
  "ClassStaticBlockStatementList[0,1].LexicallyScopedDeclarations" : "\n        1. Return the TopLevelLexicallyScopedDeclarations of |StatementList|.\n      ",
  "InnerModuleLinking" : "\n              1. If _module_ is not a Cyclic Module Record, then\n                1. Perform ? _module_.Link().\n                1. Return _index_.\n              1. If _module_.[[Status]] is one of ~linking~, ~linked~, ~evaluating-async~, or ~evaluated~, then\n                1. Return _index_.\n              1. Assert: _module_.[[Status]] is ~unlinked~.\n              1. Set _module_.[[Status]] to ~linking~.\n              1. Set _module_.[[DFSIndex]] to _index_.\n              1. Set _module_.[[DFSAncestorIndex]] to _index_.\n              1. Set _index_ to _index_ + 1.\n              1. Append _module_ to _stack_.\n              1. For each String _required_ of _module_.[[RequestedModules]], do\n                1. Let _requiredModule_ be GetImportedModule(_module_, _required_).\n                1. Set _index_ to ? InnerModuleLinking(_requiredModule_, _stack_, _index_).\n                1. If _requiredModule_ is a Cyclic Module Record, then\n                  1. Assert: _requiredModule_.[[Status]] is one of ~linking~, ~linked~, ~evaluating-async~, or ~evaluated~.\n                  1. Assert: _requiredModule_.[[Status]] is ~linking~ if and only if _stack_ contains _requiredModule_.\n                  1. If _requiredModule_.[[Status]] is ~linking~, then\n                    1. Set _module_.[[DFSAncestorIndex]] to min(_module_.[[DFSAncestorIndex]], _requiredModule_.[[DFSAncestorIndex]]).\n              1. Perform ? _module_.InitializeEnvironment().\n              1. Assert: _module_ occurs exactly once in _stack_.\n              1. Assert: _module_.[[DFSAncestorIndex]] ‚â§ _module_.[[DFSIndex]].\n              1. If _module_.[[DFSAncestorIndex]] = _module_.[[DFSIndex]], then\n                1. Let _done_ be *false*.\n                1. Repeat, while _done_ is *false*,\n                  1. Let _requiredModule_ be the last element of _stack_.\n                  1. Remove the last element of _stack_.\n                  1. Assert: _requiredModule_ is a Cyclic Module Record.\n                  1. Set _requiredModule_.[[Status]] to ~linked~.\n                  1. If _requiredModule_ and _module_ are the same Module Record, set _done_ to *true*.\n              1. Return _index_.\n            ",
  "PrimaryExpression[11,0].IsIdentifierRef" : "\n        1. Return *false*.\n      ",
  "RelationalExpression[5,0].IsFunctionDefinition" : "\n        1. Return *false*.\n      ",
  "DefaultClause[0,1].Evaluation" : "\n        1. Return ? Evaluation of |StatementList|.\n      ",
  "ClassExpression[0,0].NamedEvaluation" : "\n        1. Let _value_ be ? ClassDefinitionEvaluation of |ClassTail| with arguments *undefined* and _name_.\n        1. Set _value_.[[SourceText]] to the source text matched by |ClassExpression|.\n        1. Return _value_.\n      ",
  "AsyncGeneratorExpression[0,1].InstantiateAsyncGeneratorFunctionExpression" : "\n        1. Assert: _name_ is not present.\n        1. Set _name_ to StringValue of |BindingIdentifier|.\n        1. Let _outerEnv_ be the running execution context's LexicalEnvironment.\n        1. Let _funcEnv_ be NewDeclarativeEnvironment(_outerEnv_).\n        1. Perform ! _funcEnv_.CreateImmutableBinding(_name_, *false*).\n        1. Let _privateEnv_ be the running execution context's PrivateEnvironment.\n        1. Let _sourceText_ be the source text matched by |AsyncGeneratorExpression|.\n        1. Let _closure_ be OrdinaryFunctionCreate(%AsyncGeneratorFunction.prototype%, _sourceText_, |FormalParameters|, |AsyncGeneratorBody|, ~non-lexical-this~, _funcEnv_, _privateEnv_).\n        1. Perform SetFunctionName(_closure_, _name_).\n        1. Let _prototype_ be OrdinaryObjectCreate(%AsyncGeneratorFunction.prototype.prototype%).\n        1. Perform ! DefinePropertyOrThrow(_closure_, *\"prototype\"*, PropertyDescriptor { [[Value]]: _prototype_, [[Writable]]: *true*, [[Enumerable]]: *false*, [[Configurable]]: *false* }).\n        1. Perform ! _funcEnv_.InitializeBinding(_name_, _closure_).\n        1. Return _closure_.\n      ",
  "Initializer[0,0].EvaluateBody" : "\n          1. Assert: _argumentsList_ is empty.\n          1. Assert: _functionObject_.[[ClassFieldInitializerName]] is not ~empty~.\n          1. If IsAnonymousFunctionDefinition(|AssignmentExpression|) is *true*, then\n            1. Let _value_ be ? NamedEvaluation of |Initializer| with argument _functionObject_.[[ClassFieldInitializerName]].\n          1. Else,\n            1. Let _rhs_ be ? Evaluation of |AssignmentExpression|.\n            1. Let _value_ be ? GetValue(_rhs_).\n          1. Return Completion Record { [[Type]]: ~return~, [[Value]]: _value_, [[Target]]: ~empty~ }.\n        ",
  "TypedArrayByteLength" : "\n          1. If IsTypedArrayOutOfBounds(_taRecord_) is *true*, return 0.\n          1. Let _length_ be TypedArrayLength(_taRecord_).\n          1. If _length_ = 0, return 0.\n          1. Let _O_ be _taRecord_.[[Object]].\n          1. If _O_.[[ByteLength]] is not ~auto~, return _O_.[[ByteLength]].\n          1. Let _elementSize_ be TypedArrayElementSize(_O_).\n          1. Return _length_ √ó _elementSize_.\n        ",
  "INTRINSICS.Date.prototype.setFullYear" : "\n          1. Let _dateObject_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_dateObject_, [[DateValue]]).\n          1. Let _t_ be _dateObject_.[[DateValue]].\n          1. Let _y_ be ? ToNumber(_year_).\n          1. If _t_ is *NaN*, set _t_ to *+0*<sub>ùîΩ</sub>; otherwise, set _t_ to LocalTime(_t_).\n          1. If _month_ is not present, let _m_ be MonthFromTime(_t_); otherwise, let _m_ be ? ToNumber(_month_).\n          1. If _date_ is not present, let _dt_ be DateFromTime(_t_); otherwise, let _dt_ be ? ToNumber(_date_).\n          1. Let _newDate_ be MakeDate(MakeDay(_y_, _m_, _dt_), TimeWithinDay(_t_)).\n          1. Let _u_ be TimeClip(UTC(_newDate_)).\n          1. Set _dateObject_.[[DateValue]] to _u_.\n          1. Return _u_.\n        ",
  "IdentifierReference[1,0].Evaluation" : "\n        1. Return ? ResolveBinding(*\"yield\"*).\n      ",
  "ConciseBody[0,0].EvaluateConciseBody" : "\n        1. Perform ? FunctionDeclarationInstantiation(_functionObject_, _argumentsList_).\n        1. Return ? Evaluation of |ExpressionBody|.\n      ",
  "ArrowParameters[0,0].ContainsExpression" : "\n        1. Return *false*.\n      ",
  "OrdinaryIsExtensible" : "\n          1. Return _O_.[[Extensible]].\n        ",
  "CallExpression[1,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "CloneArrayBuffer" : "\n          1. Assert: IsDetachedBuffer(_srcBuffer_) is *false*.\n          1. Let _targetBuffer_ be ? <emu-meta suppress-effects=\"user-code\">AllocateArrayBuffer(%ArrayBuffer%, _srcLength_)</emu-meta>.\n          1. Let _srcBlock_ be _srcBuffer_.[[ArrayBufferData]].\n          1. Let _targetBlock_ be _targetBuffer_.[[ArrayBufferData]].\n          1. Perform CopyDataBlockBytes(_targetBlock_, 0, _srcBlock_, _srcByteOffset_, _srcLength_).\n          1. Return _targetBuffer_.\n        ",
  "ForInOfStatement[8,0].ForInOfLoopEvaluation" : "\n          1. Let _keyResult_ be ? ForIn/OfHeadEvaluation(BoundNames of |ForDeclaration|, |AssignmentExpression|, ~async-iterate~).\n          1. Return ? ForIn/OfBodyEvaluation(|ForDeclaration|, |Statement|, _keyResult_, ~iterate~, ~lexical-binding~, _labelSet_, ~async~).\n        ",
  "INTRINSICS.String.prototype.substring" : "\n          1. Let _O_ be ? RequireObjectCoercible(*this* value).\n          1. Let _S_ be ? ToString(_O_).\n          1. Let _len_ be the length of _S_.\n          1. Let _intStart_ be ? ToIntegerOrInfinity(_start_).\n          1. If _end_ is *undefined*, let _intEnd_ be _len_; else let _intEnd_ be ? ToIntegerOrInfinity(_end_).\n          1. Let _finalStart_ be the result of clamping _intStart_ between 0 and _len_.\n          1. Let _finalEnd_ be the result of clamping _intEnd_ between 0 and _len_.\n          1. Let _from_ be min(_finalStart_, _finalEnd_).\n          1. Let _to_ be max(_finalStart_, _finalEnd_).\n          1. Return the substring of _S_ from _from_ to _to_.\n        ",
  "INTRINSICS.DataView.prototype.setInt8" : "\n          1. Let _v_ be the *this* value.\n          1. Return ? SetViewValue(_v_, _byteOffset_, *true*, ~int8~, _value_).\n        ",
  "RegExpIdentifierStart[2,0].RegExpIdentifierCodePoint" : "\n          1. Let _lead_ be the code unit whose numeric value is the numeric value of the code point matched by |UnicodeLeadSurrogate|.\n          1. Let _trail_ be the code unit whose numeric value is the numeric value of the code point matched by |UnicodeTrailSurrogate|.\n          1. Return UTF16SurrogatePairToCodePoint(_lead_, _trail_).\n        ",
  "IdentifierReference[2,0].Evaluation" : "\n        1. Return ? ResolveBinding(*\"await\"*).\n      ",
  "AssignmentExpression[1,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "DefaultClause[0,0].LexicallyScopedDeclarations" : "\n        1. If the |StatementList| is present, return the LexicallyScopedDeclarations of |StatementList|.\n        1. Return a new empty List.\n      ",
  "ExpressionBody[0,0].Evaluation" : "\n        1. Let _exprRef_ be ? Evaluation of |AssignmentExpression|.\n        1. Let _exprValue_ be ? GetValue(_exprRef_).\n        1. Return Completion Record { [[Type]]: ~return~, [[Value]]: _exprValue_, [[Target]]: ~empty~ }.\n      ",
  "INTRINSICS.Array.prototype.join" : "\n          1. Let _O_ be ? ToObject(*this* value).\n          1. Let _len_ be ? LengthOfArrayLike(_O_).\n          1. If _separator_ is *undefined*, let _sep_ be *\",\"*.\n          1. Else, let _sep_ be ? ToString(_separator_).\n          1. Let _R_ be the empty String.\n          1. Let _k_ be 0.\n          1. Repeat, while _k_ < _len_,\n            1. If _k_ > 0, set _R_ to the string-concatenation of _R_ and _sep_.\n            1. Let _element_ be ? Get(_O_, ! ToString(ùîΩ(_k_))).\n            1. If _element_ is either *undefined* or *null*, let _next_ be the empty String; otherwise, let _next_ be ? ToString(_element_).\n            1. Set _R_ to the string-concatenation of _R_ and _next_.\n            1. Set _k_ to _k_ + 1.\n          1. Return _R_.\n        ",
  "EvaluateNew" : "\n            1. Let _ref_ be ? Evaluation of _constructExpr_.\n            1. Let _constructor_ be ? GetValue(_ref_).\n            1. If _arguments_ is ~empty~, then\n              1. Let _argList_ be a new empty List.\n            1. Else,\n              1. Let _argList_ be ? ArgumentListEvaluation of _arguments_.\n            1. If IsConstructor(_constructor_) is *false*, throw a *TypeError* exception.\n            1. Return ? Construct(_constructor_, _argList_).\n          ",
  "ObjectLiteral[0,0].Evaluation" : "\n          1. Return OrdinaryObjectCreate(%Object.prototype%).\n        ",
  "INTRINSICS.Array.prototype.fill" : "\n          1. Let _O_ be ? ToObject(*this* value).\n          1. Let _len_ be ? LengthOfArrayLike(_O_).\n          1. Let _relativeStart_ be ? ToIntegerOrInfinity(_start_).\n          1. If _relativeStart_ = -‚àû, let _k_ be 0.\n          1. Else if _relativeStart_ < 0, let _k_ be max(_len_ + _relativeStart_, 0).\n          1. Else, let _k_ be min(_relativeStart_, _len_).\n          1. If _end_ is *undefined*, let _relativeEnd_ be _len_; else let _relativeEnd_ be ? ToIntegerOrInfinity(_end_).\n          1. If _relativeEnd_ = -‚àû, let _final_ be 0.\n          1. Else if _relativeEnd_ < 0, let _final_ be max(_len_ + _relativeEnd_, 0).\n          1. Else, let _final_ be min(_relativeEnd_, _len_).\n          1. Repeat, while _k_ < _final_,\n            1. Let _Pk_ be ! ToString(ùîΩ(_k_)).\n            1. Perform ? Set(_O_, _Pk_, _value_, *true*).\n            1. Set _k_ to _k_ + 1.\n          1. Return _O_.\n        ",
  "BitwiseXORExpression[1,0].AssignmentTargetType" : "\n        1. Return ~invalid~.\n      ",
  "Record[GlobalEnvironmentRecord].CreateGlobalVarBinding" : "\n            1. Let _ObjRec_ be _envRec_.[[ObjectRecord]].\n            1. Let _globalObject_ be _ObjRec_.[[BindingObject]].\n            1. Let _hasProperty_ be ? HasOwnProperty(_globalObject_, _N_).\n            1. Let _extensible_ be ? IsExtensible(_globalObject_).\n            1. If _hasProperty_ is *false* and _extensible_ is *true*, then\n              1. Perform ? <emu-meta effects=\"user-code\">_ObjRec_.CreateMutableBinding</emu-meta>(_N_, _D_).\n              1. Perform ? <emu-meta effects=\"user-code\">_ObjRec_.InitializeBinding</emu-meta>(_N_, *undefined*).\n            1. If _envRec_.[[VarNames]] does not contain _N_, then\n              1. Append _N_ to _envRec_.[[VarNames]].\n            1. Return ~unused~.\n          ",
  "AsyncFunctionExpression[0,1].IsFunctionDefinition" : "\n        1. Return *true*.\n      ",
  "Record[ArgumentsExoticObject].Delete" : "\n          1. Let _map_ be _args_.[[ParameterMap]].\n          1. Let _isMapped_ be ! HasOwnProperty(_map_, _P_).\n          1. Let _result_ be ? OrdinaryDelete(_args_, _P_).\n          1. If _result_ is *true* and _isMapped_ is *true*, then\n            1. Perform ! _map_.[[Delete]](_P_).\n          1. Return _result_.\n        ",
  "ForStatement[0,2].ContainsDuplicateLabels" : "\n        1. Return ContainsDuplicateLabels of |Statement| with argument _labelSet_.\n      ",
  "StatementList[1,0].VarDeclaredNames" : "\n        1. Let _names1_ be VarDeclaredNames of |StatementList|.\n        1. Let _names2_ be VarDeclaredNames of |StatementListItem|.\n        1. Return the list-concatenation of _names1_ and _names2_.\n      ",
  "MultiplicativeExpression[1,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "Statement[1,0].LabelledEvaluation" : "\n        1. Return ? Evaluation of |Statement|.\n      ",
  "CharacterClassEscape[7,0].CompileToCharSet" : "\n          1. Let _S_ be CompileToCharSet of |UnicodePropertyValueExpression| with argument _rer_.\n          1. Assert: _S_ contains only single code points.\n          1. Return CharacterComplement(_rer_, _S_).\n        ",
  "INTRINSICS.BigInt.prototype.toString" : "\n          1. Let _x_ be ? ThisBigIntValue(*this* value).\n          1. If _radix_ is *undefined*, let _radixMV_ be 10.\n          1. Else, let _radixMV_ be ? ToIntegerOrInfinity(_radix_).\n          1. If _radixMV_ is not in the inclusive interval from 2 to 36, throw a *RangeError* exception.\n          1. Return BigInt::toString(_x_, _radixMV_).\n        ",
  "FieldDefinition[0,0].ComputedPropertyContains" : "\n        1. Return the result of ComputedPropertyContains of |ClassElementName| with argument _symbol_.\n      ",
  "ForInOfStatement[2,0].HasCallInTailPosition" : "\n        1. Return HasCallInTailPosition of |Statement| with argument _call_.\n      ",
  "FunctionDeclaration[1,0].InstantiateFunctionObject" : "\n        1. Return InstantiateOrdinaryFunctionObject of |FunctionDeclaration| with arguments _env_ and _privateEnv_.\n      ",
  "ClassSetCharacter[3,0].CharacterValue" : "\n          1. Return the numeric value of U+0008 (BACKSPACE).\n        ",
  "INTRINSICS.Date.UTC" : "\n          1. Let _y_ be ? ToNumber(_year_).\n          1. If _month_ is present, let _m_ be ? ToNumber(_month_); else let _m_ be *+0*<sub>ùîΩ</sub>.\n          1. If _date_ is present, let _dt_ be ? ToNumber(_date_); else let _dt_ be *1*<sub>ùîΩ</sub>.\n          1. If _hours_ is present, let _h_ be ? ToNumber(_hours_); else let _h_ be *+0*<sub>ùîΩ</sub>.\n          1. If _minutes_ is present, let _min_ be ? ToNumber(_minutes_); else let _min_ be *+0*<sub>ùîΩ</sub>.\n          1. If _seconds_ is present, let _s_ be ? ToNumber(_seconds_); else let _s_ be *+0*<sub>ùîΩ</sub>.\n          1. If _ms_ is present, let _milli_ be ? ToNumber(_ms_); else let _milli_ be *+0*<sub>ùîΩ</sub>.\n          1. Let _yr_ be MakeFullYear(_y_).\n          1. Return TimeClip(MakeDate(MakeDay(_yr_, _m_, _dt_), MakeTime(_h_, _min_, _s_, _milli_))).\n        ",
  "ForInOfStatement[1,0].ContainsDuplicateLabels" : "\n        1. Return ContainsDuplicateLabels of |Statement| with argument _labelSet_.\n      ",
  "ExportSpecifier[1,0].ReferencedBindings" : "\n          1. Return the ReferencedBindings of the first |ModuleExportName|.\n        ",
  "MemberExpression[6,0].AssignmentTargetType" : "\n        1. Return ~invalid~.\n      ",
  "ExportDeclaration[0,0].IsConstantDeclaration" : "\n        1. Return *false*.\n      ",
  "INTRINSICS.Date.prototype.getDate" : "\n          1. Let _dateObject_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_dateObject_, [[DateValue]]).\n          1. Let _t_ be _dateObject_.[[DateValue]].\n          1. If _t_ is *NaN*, return *NaN*.\n          1. Return DateFromTime(LocalTime(_t_)).\n        ",
  "CaseClause[0,0].VarScopedDeclarations" : "\n        1. If the |StatementList| is present, return the VarScopedDeclarations of |StatementList|.\n        1. Return a new empty List.\n      ",
  "CaseClauses[1,0].ContainsUndefinedBreakTarget" : "\n        1. Let _hasUndefinedLabels_ be ContainsUndefinedBreakTarget of |CaseClauses| with argument _labelSet_.\n        1. If _hasUndefinedLabels_ is *true*, return *true*.\n        1. Return ContainsUndefinedBreakTarget of |CaseClause| with argument _labelSet_.\n      ",
  "DefaultClause[0,1].VarDeclaredNames" : "\n        1. If the |StatementList| is present, return the VarDeclaredNames of |StatementList|.\n        1. Return a new empty List.\n      ",
  "MemberExpression[1,0].Evaluation" : "\n          1. Let _baseReference_ be ? Evaluation of |MemberExpression|.\n          1. Let _baseValue_ be ? GetValue(_baseReference_).\n          1. If the source text matched by this |MemberExpression| is strict mode code, let _strict_ be *true*; else let _strict_ be *false*.\n          1. Return ? EvaluatePropertyAccessWithExpressionKey(_baseValue_, |Expression|, _strict_).\n        ",
  "SingleNameBinding[0,1].BoundNames" : "\n        1. Return the BoundNames of |BindingIdentifier|.\n      ",
  "INTRINSICS.Math.acos" : "\n          1. Let _n_ be ? ToNumber(_x_).\n          1. If _n_ is *NaN*, _n_ > *1*<sub>ùîΩ</sub>, or _n_ < *-1*<sub>ùîΩ</sub>, return *NaN*.\n          1. If _n_ is *1*<sub>ùîΩ</sub>, return *+0*<sub>ùîΩ</sub>.\n          1. Return an implementation-approximated Number value representing the result of the inverse cosine of ‚Ñù(_n_).\n        ",
  "PrimaryExpression[11,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "AsyncFromSyncIteratorContinuation:clo0" : "\n          1. NOTE: Because _promiseCapability_ is derived from the intrinsic %Promise%, the calls to _promiseCapability_.[[Reject]] entailed by the use IfAbruptRejectPromise below are guaranteed not to throw.\n          1. Let _done_ be Completion(IteratorComplete(_result_)).\n          1. IfAbruptRejectPromise(_done_, _promiseCapability_).\n          1. Let _value_ be Completion(IteratorValue(_result_)).\n          1. IfAbruptRejectPromise(_value_, _promiseCapability_).\n          1. Let _valueWrapper_ be Completion(PromiseResolve(%Promise%, _value_)).\n          1. IfAbruptRejectPromise(_valueWrapper_, _promiseCapability_).\n          1. Let _unwrap_ be a new Abstract Closure with parameters (_v_) that captures _done_ and performs the following steps when called:\n            1. Return CreateIterResultObject(_v_, _done_).\n          1. Let _onFulfilled_ be CreateBuiltinFunction(_unwrap_, 1, *\"\"*, ¬´ ¬ª).\n          1. NOTE: _onFulfilled_ is used when processing the *\"value\"* property of an IteratorResult object in order to wait for its value if it is a promise and re-package the result in a new \"unwrapped\" IteratorResult object.\n          1. Perform PerformPromiseThen(_valueWrapper_, _onFulfilled_, *undefined*, _promiseCapability_).\n          1. Return _promiseCapability_.[[Promise]].\n        ",
  "INTRINSICS.Math.random" : null,
  "INTRINSICS.Date.prototype.setUTCDate" : "\n          1. Let _dateObject_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_dateObject_, [[DateValue]]).\n          1. Let _t_ be _dateObject_.[[DateValue]].\n          1. Let _dt_ be ? ToNumber(_date_).\n          1. If _t_ is *NaN*, return *NaN*.\n          1. Let _newDate_ be MakeDate(MakeDay(YearFromTime(_t_), MonthFromTime(_t_), _dt_), TimeWithinDay(_t_)).\n          1. Let _v_ be TimeClip(_newDate_).\n          1. Set _dateObject_.[[DateValue]] to _v_.\n          1. Return _v_.\n        ",
  "TryStatement[1,0].VarScopedDeclarations" : "\n        1. Let _declarations1_ be VarScopedDeclarations of |Block|.\n        1. Let _declarations2_ be VarScopedDeclarations of |Finally|.\n        1. Return the list-concatenation of _declarations1_ and _declarations2_.\n      ",
  "AsyncBlockStart:cont2" : "\n          1. Assert: _promiseCapability_ is a PromiseCapability Record.\n          1. Let _runningContext_ be the running execution context.\n          1. Let _closure_ be a new Abstract Closure with no parameters that captures _promiseCapability_ and _asyncBody_ and performs the following steps when called:\n            1. Let _acAsyncContext_ be the running execution context.\n            1. Let _result_ be Completion(Evaluation of _asyncBody_).\n            1. Assert: If we return here, the async function either threw an exception or performed an implicit or explicit return; all awaiting is done.\n            1. Remove _acAsyncContext_ from the execution context stack and restore the execution context that is at the top of the execution context stack as the running execution context.\n            1. If _result_ is a normal completion, then\n              1. Perform ! Call(_promiseCapability_.[[Resolve]], *undefined*, ¬´ *undefined* ¬ª).\n            1. Else if _result_ is a return completion, then\n              1. Perform ! Call(_promiseCapability_.[[Resolve]], *undefined*, ¬´ _result_.[[Value]] ¬ª).\n            1. Else,\n              1. Assert: _result_ is a throw completion.\n              1. Perform ! Call(_promiseCapability_.[[Reject]], *undefined*, ¬´ _result_.[[Value]] ¬ª).\n            1. [id=\"step-asyncblockstart-return-undefined\"] Return ~unused~.\n          1. Set the code evaluation state of _asyncContext_ such that when evaluation is resumed for that execution context, _closure_ will be called with no arguments.\n          1. Push _asyncContext_ onto the execution context stack; _asyncContext_ is now the running execution context.\n          1. <emu-meta effects=\"user-code\">Resume the suspended evaluation of _asyncContext_</emu-meta>. Let _result_ be the value returned by the resumed computation.\n          1. Assert: When we return here, _asyncContext_ has already been removed from the execution context stack and _runningContext_ is the currently running execution context.\n          1. Assert: _result_ is a normal completion with a value of ~unused~. The possible sources of this value are Await or, if the async function doesn't await anything, step <emu-xref href=\"#step-asyncblockstart-return-undefined\"></emu-xref> above.\n          1. Return ~unused~.\n        ",
  "ForStatement[2,0].ContainsDuplicateLabels" : "\n        1. Return ContainsDuplicateLabels of |Statement| with argument _labelSet_.\n      ",
  "ProxyCreate" : "\n        1. If _target_ is not an Object, throw a *TypeError* exception.\n        1. If _handler_ is not an Object, throw a *TypeError* exception.\n        1. Let _P_ be MakeBasicObject(¬´ [[ProxyHandler]], [[ProxyTarget]] ¬ª).\n        1. Set _P_'s essential internal methods, except for [[Call]] and [[Construct]], to the definitions specified in <emu-xref href=\"#sec-proxy-object-internal-methods-and-internal-slots\"></emu-xref>.\n        1. If IsCallable(_target_) is *true*, then\n          1. Set _P_.[[Call]] as specified in <emu-xref href=\"#sec-proxy-object-internal-methods-and-internal-slots-call-thisargument-argumentslist\"></emu-xref>.\n          1. If IsConstructor(_target_) is *true*, then\n            1. Set _P_.[[Construct]] as specified in <emu-xref href=\"#sec-proxy-object-internal-methods-and-internal-slots-construct-argumentslist-newtarget\"></emu-xref>.\n        1. Set _P_.[[ProxyTarget]] to _target_.\n        1. Set _P_.[[ProxyHandler]] to _handler_.\n        1. Return _P_.\n      ",
  "ArrayBindingPattern[0,0].BoundNames" : "\n        1. Return a new empty List.\n      ",
  "ForStatement[0,0].ContainsDuplicateLabels" : "\n        1. Return ContainsDuplicateLabels of |Statement| with argument _labelSet_.\n      ",
  "INTRINSICS.String.prototype.toLocaleLowerCase" : null,
  "ResolveBinding" : "\n        1. If _env_ is not present or _env_ is *undefined*, then\n          1. Set _env_ to the running execution context's LexicalEnvironment.\n        1. Assert: _env_ is an Environment Record.\n        1. If the source text matched by the syntactic production that is being evaluated is contained in strict mode code, let _strict_ be *true*; else let _strict_ be *false*.\n        1. Return ? GetIdentifierReference(_env_, _name_, _strict_).\n      ",
  "BindingElement[1,1].IteratorBindingInitialization" : "\n        1. Let _v_ be *undefined*.\n        1. If _iteratorRecord_.[[Done]] is *false*, then\n          1. Let _next_ be ? IteratorStepValue(_iteratorRecord_).\n          1. If _next_ is not ~done~, then\n            1. Set _v_ to _next_.\n        1. If |Initializer| is present and _v_ is *undefined*, then\n          1. Let _defaultValue_ be ? Evaluation of |Initializer|.\n          1. Set _v_ to ? GetValue(_defaultValue_).\n        1. Return ? BindingInitialization of |BindingPattern| with arguments _v_ and _environment_.\n      ",
  "ClassSetOperand[0,0].CompileToCharSet" : "\n          1. Return CompileToCharSet of |NestedClass| with argument _rer_.\n        ",
  "INTRINSICS.TypedArray.prototype.copyWithin" : "\n          1. Let _O_ be the *this* value.\n          1. Let _taRecord_ be ? ValidateTypedArray(_O_, ~seq-cst~).\n          1. Let _len_ be TypedArrayLength(_taRecord_).\n          1. Let _relativeTarget_ be ? ToIntegerOrInfinity(_target_).\n          1. If _relativeTarget_ = -‚àû, let _targetIndex_ be 0.\n          1. Else if _relativeTarget_ < 0, let _targetIndex_ be max(_len_ + _relativeTarget_, 0).\n          1. Else, let _targetIndex_ be min(_relativeTarget_, _len_).\n          1. Let _relativeStart_ be ? ToIntegerOrInfinity(_start_).\n          1. If _relativeStart_ = -‚àû, let _startIndex_ be 0.\n          1. Else if _relativeStart_ < 0, let _startIndex_ be max(_len_ + _relativeStart_, 0).\n          1. Else, let _startIndex_ be min(_relativeStart_, _len_).\n          1. If _end_ is *undefined*, let _relativeEnd_ be _len_; else let _relativeEnd_ be ? ToIntegerOrInfinity(_end_).\n          1. If _relativeEnd_ = -‚àû, let _endIndex_ be 0.\n          1. Else if _relativeEnd_ < 0, let _endIndex_ be max(_len_ + _relativeEnd_, 0).\n          1. Else, let _endIndex_ be min(_relativeEnd_, _len_).\n          1. Let _count_ be min(_endIndex_ - _startIndex_, _len_ - _targetIndex_).\n          1. If _count_ > 0, then\n            1. NOTE: The copying must be performed in a manner that preserves the bit-level encoding of the source data.\n            1. Let _buffer_ be _O_.[[ViewedArrayBuffer]].\n            1. Set _taRecord_ to MakeTypedArrayWithBufferWitnessRecord(_O_, ~seq-cst~).\n            1. If IsTypedArrayOutOfBounds(_taRecord_) is *true*, throw a *TypeError* exception.\n            1. Set _len_ to TypedArrayLength(_taRecord_).\n            1. Let _elementSize_ be TypedArrayElementSize(_O_).\n            1. Let _byteOffset_ be _O_.[[ByteOffset]].\n            1. Let _bufferByteLimit_ be (_len_ √ó _elementSize_) + _byteOffset_.\n            1. Let _toByteIndex_ be (_targetIndex_ √ó _elementSize_) + _byteOffset_.\n            1. Let _fromByteIndex_ be (_startIndex_ √ó _elementSize_) + _byteOffset_.\n            1. Let _countBytes_ be _count_ √ó _elementSize_.\n            1. If _fromByteIndex_ < _toByteIndex_ and _toByteIndex_ < _fromByteIndex_ + _countBytes_, then\n              1. Let _direction_ be -1.\n              1. Set _fromByteIndex_ to _fromByteIndex_ + _countBytes_ - 1.\n              1. Set _toByteIndex_ to _toByteIndex_ + _countBytes_ - 1.\n            1. Else,\n              1. Let _direction_ be 1.\n            1. Repeat, while _countBytes_ > 0,\n              1. If _fromByteIndex_ < _bufferByteLimit_ and _toByteIndex_ < _bufferByteLimit_, then\n                1. Let _value_ be GetValueFromBuffer(_buffer_, _fromByteIndex_, ~uint8~, *true*, ~unordered~).\n                1. Perform SetValueInBuffer(_buffer_, _toByteIndex_, ~uint8~, _value_, *true*, ~unordered~).\n                1. Set _fromByteIndex_ to _fromByteIndex_ + _direction_.\n                1. Set _toByteIndex_ to _toByteIndex_ + _direction_.\n                1. Set _countBytes_ to _countBytes_ - 1.\n              1. Else,\n                1. Set _countBytes_ to 0.\n          1. Return _O_.\n        ",
  "ForStatement[0,3].VarScopedDeclarations" : "\n        1. Return the VarScopedDeclarations of |Statement|.\n      ",
  "ByteListEqual" : "\n          1. If _xBytes_ and _yBytes_ do not have the same number of elements, return *false*.\n          1. Let _i_ be 0.\n          1. For each element _xByte_ of _xBytes_, do\n            1. Let _yByte_ be _yBytes_[_i_].\n            1. If _xByte_ ‚â† _yByte_, return *false*.\n            1. Set _i_ to _i_ + 1.\n          1. Return *true*.\n        ",
  "INTRINSICS.Array.prototype.toSpliced" : "\n          1. Let _O_ be ? ToObject(*this* value).\n          1. Let _len_ be ? LengthOfArrayLike(_O_).\n          1. Let _relativeStart_ be ? ToIntegerOrInfinity(_start_).\n          1. If _relativeStart_ is -‚àû, let _actualStart_ be 0.\n          1. Else if _relativeStart_ < 0, let _actualStart_ be max(_len_ + _relativeStart_, 0).\n          1. Else, let _actualStart_ be min(_relativeStart_, _len_).\n          1. Let _insertCount_ be the number of elements in _items_.\n          1. If _start_ is not present, then\n            1. Let _actualSkipCount_ be 0.\n          1. Else if _skipCount_ is not present, then\n            1. Let _actualSkipCount_ be _len_ - _actualStart_.\n          1. Else,\n            1. Let _sc_ be ? ToIntegerOrInfinity(_skipCount_).\n            1. Let _actualSkipCount_ be the result of clamping _sc_ between 0 and _len_ - _actualStart_.\n          1. Let _newLen_ be _len_ + _insertCount_ - _actualSkipCount_.\n          1. If _newLen_ > 2<sup>53</sup> - 1, throw a *TypeError* exception.\n          1. Let _A_ be ? ArrayCreate(_newLen_).\n          1. Let _i_ be 0.\n          1. Let _r_ be _actualStart_ + _actualSkipCount_.\n          1. Repeat, while _i_ < _actualStart_,\n            1. Let _Pi_ be ! ToString(ùîΩ(_i_)).\n            1. Let _iValue_ be ? Get(_O_, _Pi_).\n            1. Perform ! CreateDataPropertyOrThrow(_A_, _Pi_, _iValue_).\n            1. Set _i_ to _i_ + 1.\n          1. For each element _E_ of _items_, do\n            1. Let _Pi_ be ! ToString(ùîΩ(_i_)).\n            1. Perform ! CreateDataPropertyOrThrow(_A_, _Pi_, _E_).\n            1. Set _i_ to _i_ + 1.\n          1. Repeat, while _i_ < _newLen_,\n            1. Let _Pi_ be ! ToString(ùîΩ(_i_)).\n            1. Let _from_ be ! ToString(ùîΩ(_r_)).\n            1. Let _fromValue_ be ? Get(_O_, _from_).\n            1. Perform ! CreateDataPropertyOrThrow(_A_, _Pi_, _fromValue_).\n            1. Set _i_ to _i_ + 1.\n            1. Set _r_ to _r_ + 1.\n          1. Return _A_.\n        ",
  "CaseBlock[1,3].ContainsUndefinedContinueTarget" : "\n        1. If the first |CaseClauses| is present, then\n          1. If ContainsUndefinedContinueTarget of the first |CaseClauses| with arguments _iterationSet_ and ¬´ ¬ª is *true*, return *true*.\n        1. If ContainsUndefinedContinueTarget of |DefaultClause| with arguments _iterationSet_ and ¬´ ¬ª is *true*, return *true*.\n        1. If the second |CaseClauses| is not present, return *false*.\n        1. Return ContainsUndefinedContinueTarget of the second |CaseClauses| with arguments _iterationSet_ and ¬´ ¬ª.\n      ",
  "INTRINSICS.get SharedArrayBuffer[@@species]" : "\n          1. Return the *this* value.\n        ",
  "PrimaryExpression[12,0].AssignmentTargetType" : "\n        1. Let _expr_ be the |ParenthesizedExpression| that is covered by |CoverParenthesizedExpressionAndArrowParameterList|.\n        1. Return AssignmentTargetType of _expr_.\n      ",
  "NestedClass[1,0].MayContainStrings" : "\n          1. Return *false*.\n        ",
  "UnaryExpression[8,0].AssignmentTargetType" : "\n        1. Return ~invalid~.\n      ",
  "ForStatement[1,0].HasCallInTailPosition" : "\n        1. Return HasCallInTailPosition of |Statement| with argument _call_.\n      ",
  "INTRINSICS.get RegExp[@@species]" : "\n          1. Return the *this* value.\n        ",
  "GetGlobalObject" : "\n        1. Let _currentRealm_ be the current Realm Record.\n        1. Return _currentRealm_.[[GlobalObject]].\n      ",
  "AtomicReadModifyWrite" : "\n          1. Let _byteIndexInBuffer_ be ? ValidateAtomicAccessOnIntegerTypedArray(_typedArray_, _index_).\n          1. If _typedArray_.[[ContentType]] is ~bigint~, let _v_ be ? ToBigInt(_value_).\n          1. Otherwise, let _v_ be ùîΩ(? ToIntegerOrInfinity(_value_)).\n          1. Perform ? RevalidateAtomicAccess(_typedArray_, _byteIndexInBuffer_).\n          1. Let _buffer_ be _typedArray_.[[ViewedArrayBuffer]].\n          1. Let _elementType_ be TypedArrayElementType(_typedArray_).\n          1. Return GetModifySetValueInBuffer(_buffer_, _byteIndexInBuffer_, _elementType_, _v_, _op_).\n        ",
  "INTRINSICS.Atomics.add" : "\n        1. Let _type_ be TypedArrayElementType(_typedArray_).\n        1. Let _isLittleEndian_ be the value of the [[LittleEndian]] field of the surrounding agent's Agent Record.\n        1. Let _add_ be a new read-modify-write modification function with parameters (_xBytes_, _yBytes_) that captures _type_ and _isLittleEndian_ and performs the following steps atomically when called:\n          1. Let _x_ be RawBytesToNumeric(_type_, _xBytes_, _isLittleEndian_).\n          1. Let _y_ be RawBytesToNumeric(_type_, _yBytes_, _isLittleEndian_).\n          1. If _x_ is a Number, then\n            1. Let _sum_ be Number::add(_x_, _y_).\n          1. Else,\n            1. Assert: _x_ is a BigInt.\n            1. Let _sum_ be BigInt::add(_x_, _y_).\n          1. Let _sumBytes_ be NumericToRawBytes(_type_, _sum_, _isLittleEndian_).\n          1. Assert: _sumBytes_, _xBytes_, and _yBytes_ have the same number of elements.\n          1. Return _sumBytes_.\n        1. Return ? AtomicReadModifyWrite(_typedArray_, _index_, _value_, _add_).\n      ",
  "ForStatement[0,3].VarDeclaredNames" : "\n        1. Return the VarDeclaredNames of |Statement|.\n      ",
  "TemplateMiddleList[1,0].Evaluation" : "\n          1. Let _rest_ be ? Evaluation of |TemplateMiddleList|.\n          1. Let _middle_ be the TV of |TemplateMiddle| as defined in <emu-xref href=\"#sec-template-literal-lexical-components\"></emu-xref>.\n          1. Let _subRef_ be ? Evaluation of |Expression|.\n          1. Let _sub_ be ? GetValue(_subRef_).\n          1. Let _last_ be ? ToString(_sub_).\n          1. Return the string-concatenation of _rest_, _middle_, and _last_.\n        ",
  "INTRINSICS.String.prototype.padEnd" : "\n          1. Let _O_ be ? RequireObjectCoercible(*this* value).\n          1. Return ? StringPaddingBuiltinsImpl(_O_, _maxLength_, _fillString_, ~end~).\n        ",
  "INTRINSICS.Array.prototype.findLastIndex" : "\n          1. Let _O_ be ? ToObject(*this* value).\n          1. Let _len_ be ? LengthOfArrayLike(_O_).\n          1. Let _findRec_ be ? FindViaPredicate(_O_, _len_, ~descending~, _predicate_, _thisArg_).\n          1. Return _findRec_.[[Index]].\n        ",
  "DaysInYear" : "\n          1. Let _ry_ be ‚Ñù(_y_).\n          1. If (_ry_ modulo 400) = 0, return *366*<sub>ùîΩ</sub>.\n          1. If (_ry_ modulo 100) = 0, return *365*<sub>ùîΩ</sub>.\n          1. If (_ry_ modulo 4) = 0, return *366*<sub>ùîΩ</sub>.\n          1. Return *365*<sub>ùîΩ</sub>.\n        ",
  "CallExpression[6,0].AssignmentTargetType" : "\n        1. Return ~invalid~.\n      ",
  "AdditiveExpression[1,0].IsFunctionDefinition" : "\n        1. Return *false*.\n      ",
  "ForStatement[0,6].VarDeclaredNames" : "\n        1. Return the VarDeclaredNames of |Statement|.\n      ",
  "RegExpIdentifierStart[1,0].RegExpIdentifierCodePoint" : "\n          1. Return the code point whose numeric value is the CharacterValue of |RegExpUnicodeEscapeSequence|.\n        ",
  "FormalParameterList[1,0].ContainsExpression" : "\n        1. If ContainsExpression of |FormalParameterList| is *true*, return *true*.\n        1. Return ContainsExpression of |FormalParameter|.\n      ",
  "Record[DeclarativeEnvironmentRecord].InitializeBinding" : "\n            1. Assert: _envRec_ must have an uninitialized binding for _N_.\n            1. Set the bound value for _N_ in _envRec_ to _V_.\n            1. <emu-not-ref>Record</emu-not-ref> that the binding for _N_ in _envRec_ has been initialized.\n            1. Return ~unused~.\n          ",
  "AsyncFunctionDeclaration[1,0].IsConstantDeclaration" : "\n        1. Return *false*.\n      ",
  "HoistableDeclaration[3,0].Evaluation" : "\n        1. Return ~empty~.\n      ",
  "CaseBlock[1,1].LexicallyScopedDeclarations" : "\n        1. If the first |CaseClauses| is present, let _declarations1_ be the LexicallyScopedDeclarations of the first |CaseClauses|.\n        1. Else, let _declarations1_ be a new empty List.\n        1. Let _declarations2_ be LexicallyScopedDeclarations of |DefaultClause|.\n        1. If the second |CaseClauses| is present, let _declarations3_ be the LexicallyScopedDeclarations of the second |CaseClauses|.\n        1. Else, let _declarations3_ be a new empty List.\n        1. Return the list-concatenation of _declarations1_, _declarations2_, and _declarations3_.\n      ",
  "OptionalChain[9,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "BindingElisionElement[0,1].BoundNames" : "\n        1. Return BoundNames of |BindingElement|.\n      ",
  "DefaultClause[0,1].VarScopedDeclarations" : "\n        1. If the |StatementList| is present, return the VarScopedDeclarations of |StatementList|.\n        1. Return a new empty List.\n      ",
  "ForStatement[2,1].ForLoopEvaluation" : "\n          1. Let _oldEnv_ be the running execution context's LexicalEnvironment.\n          1. Let _loopEnv_ be NewDeclarativeEnvironment(_oldEnv_).\n          1. Let _isConst_ be IsConstantDeclaration of |LexicalDeclaration|.\n          1. Let _boundNames_ be the BoundNames of |LexicalDeclaration|.\n          1. For each element _dn_ of _boundNames_, do\n            1. If _isConst_ is *true*, then\n              1. Perform ! _loopEnv_.CreateImmutableBinding(_dn_, *true*).\n            1. Else,\n              1. Perform ! _loopEnv_.CreateMutableBinding(_dn_, *false*).\n          1. Set the running execution context's LexicalEnvironment to _loopEnv_.\n          1. Let _forDcl_ be Completion(Evaluation of |LexicalDeclaration|).\n          1. If _forDcl_ is an abrupt completion, then\n            1. Set the running execution context's LexicalEnvironment to _oldEnv_.\n            1. Return ? _forDcl_.\n          1. If _isConst_ is *false*, let _perIterationLets_ be _boundNames_; otherwise let _perIterationLets_ be a new empty List.\n          1. If the first |Expression| is present, let _test_ be the first |Expression|; otherwise, let _test_ be ~empty~.\n          1. If the second |Expression| is present, let _increment_ be the second |Expression|; otherwise, let _increment_ be ~empty~.\n          1. Let _bodyResult_ be Completion(ForBodyEvaluation(_test_, _increment_, |Statement|, _perIterationLets_, _labelSet_)).\n          1. Set the running execution context's LexicalEnvironment to _oldEnv_.\n          1. Return ? _bodyResult_.\n        ",
  "OptionalChain[1,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "INTRINSICS.Number.prototype.toLocaleString" : null,
  "Literal[0,0].Evaluation" : "\n          1. Return *null*.\n        ",
  "IdentifierName[0,0].StringValue" : "\n        1. Let _idTextUnescaped_ be IdentifierCodePoints of |IdentifierName|.\n        1. Return CodePointsToString(_idTextUnescaped_).\n      ",
  "LiteralPropertyName[0,0].Contains" : "\n        1. Return *false*.\n      ",
  "SerializeJSONArray" : "\n          1. If _state_.[[Stack]] contains _value_, throw a *TypeError* exception because the structure is cyclical.\n          1. Append _value_ to _state_.[[Stack]].\n          1. Let _stepback_ be _state_.[[Indent]].\n          1. Set _state_.[[Indent]] to the string-concatenation of _state_.[[Indent]] and _state_.[[Gap]].\n          1. Let _partial_ be a new empty List.\n          1. Let _len_ be ? LengthOfArrayLike(_value_).\n          1. Let _index_ be 0.\n          1. Repeat, while _index_ < _len_,\n            1. Let _strP_ be ? SerializeJSONProperty(_state_, ! ToString(ùîΩ(_index_)), _value_).\n            1. If _strP_ is *undefined*, then\n              1. Append *\"null\"* to _partial_.\n            1. Else,\n              1. Append _strP_ to _partial_.\n            1. Set _index_ to _index_ + 1.\n          1. If _partial_ is empty, then\n            1. Let _final_ be *\"[]\"*.\n          1. Else,\n            1. If _state_.[[Gap]] is the empty String, then\n              1. Let _properties_ be the String value formed by concatenating all the element Strings of _partial_ with each adjacent pair of Strings separated with the code unit 0x002C (COMMA). A comma is not inserted either before the first String or after the last String.\n              1. Let _final_ be the string-concatenation of *\"[\"*, _properties_, and *\"]\"*.\n            1. Else,\n              1. Let _separator_ be the string-concatenation of the code unit 0x002C (COMMA), the code unit 0x000A (LINE FEED), and _state_.[[Indent]].\n              1. Let _properties_ be the String value formed by concatenating all the element Strings of _partial_ with each adjacent pair of Strings separated with _separator_. The _separator_ String is not inserted either before the first String or after the last String.\n              1. Let _final_ be the string-concatenation of *\"[\"*, the code unit 0x000A (LINE FEED), _state_.[[Indent]], _properties_, the code unit 0x000A (LINE FEED), _stepback_, and *\"]\"*.\n          1. Remove the last element of _state_.[[Stack]].\n          1. Set _state_.[[Indent]] to _stepback_.\n          1. Return _final_.\n        ",
  "Statement[1,0].ContainsUndefinedBreakTarget" : "\n        1. Return *false*.\n      ",
  "NewExpression[1,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "MemberExpression[4,0].AssignmentTargetType" : "\n        1. Return ~simple~.\n      ",
  "EvaluatePropertyAccessWithIdentifierKey" : "\n        1. Let _propertyNameString_ be StringValue of _identifierName_.\n        1. Return the Reference Record { [[Base]]: _baseValue_, [[ReferencedName]]: _propertyNameString_, [[Strict]]: _strict_, [[ThisValue]]: ~empty~ }.\n      ",
  "AllocateTypedArray" : "\n            1. Let _proto_ be ? GetPrototypeFromConstructor(_newTarget_, _defaultProto_).\n            1. Let _obj_ be TypedArrayCreate(_proto_).\n            1. Assert: _obj_.[[ViewedArrayBuffer]] is *undefined*.\n            1. Set _obj_.[[TypedArrayName]] to _constructorName_.\n            1. If _constructorName_ is either *\"BigInt64Array\"* or *\"BigUint64Array\"*, set _obj_.[[ContentType]] to ~bigint~.\n            1. Otherwise, set _obj_.[[ContentType]] to ~number~.\n            1. If _length_ is not present, then\n              1. Set _obj_.[[ByteLength]] to 0.\n              1. Set _obj_.[[ByteOffset]] to 0.\n              1. Set _obj_.[[ArrayLength]] to 0.\n            1. Else,\n              1. Perform ? AllocateTypedArrayBuffer(_obj_, _length_).\n            1. Return _obj_.\n          ",
  "ForInOfStatement[7,0].ContainsUndefinedContinueTarget" : "\n        1. Return ContainsUndefinedContinueTarget of |Statement| with arguments _iterationSet_ and ¬´ ¬ª.\n      ",
  "SwitchStatement[0,0].ContainsUndefinedBreakTarget" : "\n        1. Return ContainsUndefinedBreakTarget of |CaseBlock| with argument _labelSet_.\n      ",
  "ForStatement[0,7].ContainsUndefinedContinueTarget" : "\n        1. Return ContainsUndefinedContinueTarget of |Statement| with arguments _iterationSet_ and ¬´ ¬ª.\n      ",
  "ShiftExpression[3,0].AssignmentTargetType" : "\n        1. Return ~invalid~.\n      ",
  "Await:clo0:cont0" : "\n          1. Let _asyncContext_ be the running execution context.\n          1. Let _promise_ be ? PromiseResolve(%Promise%, _value_).\n          1. Let _fulfilledClosure_ be a new Abstract Closure with parameters (_v_) that captures _asyncContext_ and performs the following steps when called:\n            1. Let _prevContext_ be the running execution context.\n            1. Suspend _prevContext_.\n            1. Push _asyncContext_ onto the execution context stack; _asyncContext_ is now the running execution context.\n            1. <emu-meta effects=\"user-code\">Resume the suspended evaluation of _asyncContext_</emu-meta> using NormalCompletion(_v_) as the result of the operation that suspended it.\n            1. Assert: When we reach this step, _asyncContext_ has already been removed from the execution context stack and _prevContext_ is the currently running execution context.\n            1. Return *undefined*.\n          1. Let _onFulfilled_ be CreateBuiltinFunction(_fulfilledClosure_, 1, *\"\"*, ¬´ ¬ª).\n          1. Let _rejectedClosure_ be a new Abstract Closure with parameters (_reason_) that captures _asyncContext_ and performs the following steps when called:\n            1. Let _prevContext_ be the running execution context.\n            1. Suspend _prevContext_.\n            1. Push _asyncContext_ onto the execution context stack; _asyncContext_ is now the running execution context.\n            1. <emu-meta effects=\"user-code\">Resume the suspended evaluation of _asyncContext_</emu-meta> using ThrowCompletion(_reason_) as the result of the operation that suspended it.\n            1. Assert: When we reach this step, _asyncContext_ has already been removed from the execution context stack and _prevContext_ is the currently running execution context.\n            1. Return *undefined*.\n          1. Let _onRejected_ be CreateBuiltinFunction(_rejectedClosure_, 1, *\"\"*, ¬´ ¬ª).\n          1. Perform PerformPromiseThen(_promise_, _onFulfilled_, _onRejected_).\n          1. Remove _asyncContext_ from the execution context stack and restore the execution context that is at the top of the execution context stack as the running execution context.\n          1. Let _callerContext_ be the running execution context.\n          1. Resume _callerContext_ passing ~empty~. If _asyncContext_ is ever resumed again, let _completion_ be the Completion Record with which it is resumed.\n          1. Assert: If control reaches here, then _asyncContext_ is the running execution context again.\n          1. Return _completion_.\n        ",
  "Term[0,0].CompileSubpattern" : "\n          1. Return CompileAssertion of |Assertion| with argument _rer_.\n        ",
  "CaseBlock[0,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "INTRINSICS.TypedArray.from" : "\n          1. Let _C_ be the *this* value.\n          1. If IsConstructor(_C_) is *false*, throw a *TypeError* exception.\n          1. If _mapfn_ is *undefined*, then\n            1. Let _mapping_ be *false*.\n          1. Else,\n            1. If IsCallable(_mapfn_) is *false*, throw a *TypeError* exception.\n            1. Let _mapping_ be *true*.\n          1. Let _usingIterator_ be ? GetMethod(_source_, @@iterator).\n          1. If _usingIterator_ is not *undefined*, then\n            1. Let _values_ be ? IteratorToList(? GetIteratorFromMethod(_source_, _usingIterator_)).\n            1. Let _len_ be the number of elements in _values_.\n            1. Let _targetObj_ be ? TypedArrayCreateFromConstructor(_C_, ¬´ ùîΩ(_len_) ¬ª).\n            1. Let _k_ be 0.\n            1. Repeat, while _k_ < _len_,\n              1. Let _Pk_ be ! ToString(ùîΩ(_k_)).\n              1. Let _kValue_ be the first element of _values_.\n              1. Remove the first element from _values_.\n              1. If _mapping_ is *true*, then\n                1. Let _mappedValue_ be ? Call(_mapfn_, _thisArg_, ¬´ _kValue_, ùîΩ(_k_) ¬ª).\n              1. Else,\n                1. Let _mappedValue_ be _kValue_.\n              1. Perform ? Set(_targetObj_, _Pk_, _mappedValue_, *true*).\n              1. Set _k_ to _k_ + 1.\n            1. Assert: _values_ is now an empty List.\n            1. Return _targetObj_.\n          1. NOTE: _source_ is not an Iterable so assume it is already an array-like object.\n          1. Let _arrayLike_ be ! ToObject(_source_).\n          1. Let _len_ be ? LengthOfArrayLike(_arrayLike_).\n          1. Let _targetObj_ be ? TypedArrayCreateFromConstructor(_C_, ¬´ ùîΩ(_len_) ¬ª).\n          1. Let _k_ be 0.\n          1. Repeat, while _k_ < _len_,\n            1. Let _Pk_ be ! ToString(ùîΩ(_k_)).\n            1. Let _kValue_ be ? Get(_arrayLike_, _Pk_).\n            1. If _mapping_ is *true*, then\n              1. Let _mappedValue_ be ? Call(_mapfn_, _thisArg_, ¬´ _kValue_, ùîΩ(_k_) ¬ª).\n            1. Else,\n              1. Let _mappedValue_ be _kValue_.\n            1. Perform ? Set(_targetObj_, _Pk_, _mappedValue_, *true*).\n            1. Set _k_ to _k_ + 1.\n          1. Return _targetObj_.\n        ",
  "INTRINSICS.Array.prototype.keys" : "\n          1. Let _O_ be ? ToObject(*this* value).\n          1. Return CreateArrayIterator(_O_, ~key~).\n        ",
  "INTRINSICS.Math.abs" : "\n          1. Let _n_ be ? ToNumber(_x_).\n          1. If _n_ is *NaN*, return *NaN*.\n          1. If _n_ is *-0*<sub>ùîΩ</sub>, return *+0*<sub>ùîΩ</sub>.\n          1. If _n_ is *-‚àû*<sub>ùîΩ</sub>, return *+‚àû*<sub>ùîΩ</sub>.\n          1. If _n_ < *-0*<sub>ùîΩ</sub>, return -_n_.\n          1. Return _n_.\n        ",
  "OrdinaryGetPrototypeOf" : "\n          1. Return _O_.[[Prototype]].\n        ",
  "INTRINSICS.ArrayBuffer" : "\n          1. If NewTarget is *undefined*, throw a *TypeError* exception.\n          1. Let _byteLength_ be ? ToIndex(_length_).\n          1. Let _requestedMaxByteLength_ be ? GetArrayBufferMaxByteLengthOption(_options_).\n          1. Return ? AllocateArrayBuffer(NewTarget, _byteLength_, _requestedMaxByteLength_).\n        ",
  "CaseBlock[1,2].LexicallyScopedDeclarations" : "\n        1. If the first |CaseClauses| is present, let _declarations1_ be the LexicallyScopedDeclarations of the first |CaseClauses|.\n        1. Else, let _declarations1_ be a new empty List.\n        1. Let _declarations2_ be LexicallyScopedDeclarations of |DefaultClause|.\n        1. If the second |CaseClauses| is present, let _declarations3_ be the LexicallyScopedDeclarations of the second |CaseClauses|.\n        1. Else, let _declarations3_ be a new empty List.\n        1. Return the list-concatenation of _declarations1_, _declarations2_, and _declarations3_.\n      ",
  "ImportClause[3,0].BoundNames" : "\n        1. Let _names1_ be the BoundNames of |ImportedDefaultBinding|.\n        1. Let _names2_ be the BoundNames of |NameSpaceImport|.\n        1. Return the list-concatenation of _names1_ and _names2_.\n      ",
  "GetMethod" : "\n        1. Let _func_ be ? GetV(_V_, _P_).\n        1. If _func_ is either *undefined* or *null*, return *undefined*.\n        1. If IsCallable(_func_) is *false*, throw a *TypeError* exception.\n        1. Return _func_.\n      ",
  "AsyncArrowBindingIdentifier[0,0].ExpectedArgumentCount" : "\n        1. Return 1.\n      ",
  "INTRINSICS.String.prototype.search" : "\n          1. Let _O_ be ? RequireObjectCoercible(*this* value).\n          1. If _regexp_ is neither *undefined* nor *null*, then\n            1. Let _searcher_ be ? GetMethod(_regexp_, @@search).\n            1. If _searcher_ is not *undefined*, then\n              1. Return ? Call(_searcher_, _regexp_, ¬´ _O_ ¬ª).\n          1. Let _string_ be ? ToString(_O_).\n          1. Let _rx_ be ? RegExpCreate(_regexp_, *undefined*).\n          1. Return ? Invoke(_rx_, @@search, ¬´ _string_ ¬ª).\n        ",
  "ModuleItem[0,0].VarDeclaredNames" : "\n        1. Return a new empty List.\n      ",
  "INTRINSICS.Array.isArray" : "\n          1. Return ? IsArray(_arg_).\n        ",
  "GroupBy" : "\n        1. Perform ? RequireObjectCoercible(_items_).\n        1. If IsCallable(_callbackfn_) is *false*, throw a *TypeError* exception.\n        1. Let _groups_ be a new empty List.\n        1. Let _iteratorRecord_ be ? GetIterator(_items_, ~sync~).\n        1. Let _k_ be 0.\n        1. Repeat,\n          1. If _k_ ‚â• 2<sup>53</sup> - 1, then\n            1. Let _error_ be ThrowCompletion(a newly created *TypeError* object).\n            1. Return ? IteratorClose(_iteratorRecord_, _error_).\n          1. Let _next_ be ? IteratorStepValue(_iteratorRecord_).\n          1. If _next_ is ~done~, then\n            1. Return _groups_.\n          1. Let _value_ be _next_.\n          1. Let _key_ be Completion(Call(_callbackfn_, *undefined*, ¬´ _value_, ùîΩ(_k_) ¬ª)).\n          1. IfAbruptCloseIterator(_key_, _iteratorRecord_).\n          1. If _keyCoercion_ is ~property~, then\n            1. Set _key_ to Completion(ToPropertyKey(_key_)).\n            1. IfAbruptCloseIterator(_key_, _iteratorRecord_).\n          1. Else,\n            1. Assert: _keyCoercion_ is ~zero~.\n            1. If _key_ is *-0*<sub>ùîΩ</sub>, set _key_ to *+0*<sub>ùîΩ</sub>.\n          1. Perform AddValueToKeyedGroup(_groups_, _key_, _value_).\n          1. Set _k_ to _k_ + 1.\n      ",
  "INTRINSICS.Object.entries" : "\n          1. Let _obj_ be ? ToObject(_O_).\n          1. Let _entryList_ be ? EnumerableOwnProperties(_obj_, ~key+value~).\n          1. Return CreateArrayFromList(_entryList_).\n        ",
  "NumericLiteral[3,0].NumericValue" : "\n          1. Return the BigInt value for the MV of |NonDecimalIntegerLiteral|.\n        ",
  "INTRINSICS.Math.log10" : "\n          1. Let _n_ be ? ToNumber(_x_).\n          1. If _n_ is either *NaN* or *+‚àû*<sub>ùîΩ</sub>, return _n_.\n          1. If _n_ is *1*<sub>ùîΩ</sub>, return *+0*<sub>ùîΩ</sub>.\n          1. If _n_ is either *+0*<sub>ùîΩ</sub> or *-0*<sub>ùîΩ</sub>, return *-‚àû*<sub>ùîΩ</sub>.\n          1. If _n_ < *-0*<sub>ùîΩ</sub>, return *NaN*.\n          1. Return an implementation-approximated Number value representing the result of the base 10 logarithm of ‚Ñù(_n_).\n        ",
  "PropertyName[1,0].IsComputedPropertyKey" : "\n          1. Return *true*.\n        ",
  "OrdinaryToPrimitive" : "\n          1. If _hint_ is ~string~, then\n            1. Let _methodNames_ be ¬´ *\"toString\"*, *\"valueOf\"* ¬ª.\n          1. Else,\n            1. Let _methodNames_ be ¬´ *\"valueOf\"*, *\"toString\"* ¬ª.\n          1. For each element _name_ of _methodNames_, do\n            1. Let _method_ be ? Get(_O_, _name_).\n            1. If IsCallable(_method_) is *true*, then\n              1. Let _result_ be ? Call(_method_, _O_).\n              1. If _result_ is not an Object, return _result_.\n          1. Throw a *TypeError* exception.\n        ",
  "ExportDeclaration[3,0].BoundNames" : "\n        1. Return the BoundNames of |Declaration|.\n      ",
  "CountLeftCapturingParensWithin" : "\n          1. Assert: _node_ is an instance of a production in <emu-xref href=\"#sec-patterns\">the RegExp Pattern grammar</emu-xref>.\n          1. Return the number of <emu-grammar>Atom :: `(` GroupSpecifier? Disjunction `)`</emu-grammar> Parse Nodes contained within _node_.\n        ",
  "INTRINSICS.AsyncIteratorPrototype[@@asyncIterator]" : "\n          1. Return the *this* value.\n        ",
  "INTRINSICS.Map.prototype.has" : "\n          1. Let _M_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_M_, [[MapData]]).\n          1. For each Record { [[Key]], [[Value]] } _p_ of _M_.[[MapData]], do\n            1. If _p_.[[Key]] is not ~empty~ and SameValueZero(_p_.[[Key]], _key_) is *true*, return *true*.\n          1. Return *false*.\n        ",
  "CompareTypedArrayElements" : "\n          1. Assert: _x_ is a Number and _y_ is a Number, or _x_ is a BigInt and _y_ is a BigInt.\n          1. If _comparefn_ is not *undefined*, then\n            1. Let _v_ be ? ToNumber(? Call(_comparefn_, *undefined*, ¬´ _x_, _y_ ¬ª)).\n            1. If _v_ is *NaN*, return *+0*<sub>ùîΩ</sub>.\n            1. Return _v_.\n          1. If _x_ and _y_ are both *NaN*, return *+0*<sub>ùîΩ</sub>.\n          1. If _x_ is *NaN*, return *1*<sub>ùîΩ</sub>.\n          1. If _y_ is *NaN*, return *-1*<sub>ùîΩ</sub>.\n          1. If _x_ < _y_, return *-1*<sub>ùîΩ</sub>.\n          1. If _x_ > _y_, return *1*<sub>ùîΩ</sub>.\n          1. If _x_ is *-0*<sub>ùîΩ</sub> and _y_ is *+0*<sub>ùîΩ</sub>, return *-1*<sub>ùîΩ</sub>.\n          1. If _x_ is *+0*<sub>ùîΩ</sub> and _y_ is *-0*<sub>ùîΩ</sub>, return *1*<sub>ùîΩ</sub>.\n          1. Return *+0*<sub>ùîΩ</sub>.\n        ",
  "ClassString[0,0].MayContainStrings" : "\n          1. Return *true*.\n        ",
  "INTRINSICS.get RegExp.prototype.multiline" : "\n          1. Let _R_ be the *this* value.\n          1. Let _cu_ be the code unit 0x006D (LATIN SMALL LETTER M).\n          1. Return ? RegExpHasFlag(_R_, _cu_).\n        ",
  "Record[OrdinaryObject].GetPrototypeOf" : "\n        1. Return OrdinaryGetPrototypeOf(_O_).\n      ",
  "CreateDataPropertyOrThrow" : "\n        1. Let _success_ be ? CreateDataProperty(_O_, _P_, _V_).\n        1. If _success_ is *false*, throw a *TypeError* exception.\n        1. Return ~unused~.\n      ",
  "INTRINSICS.get SharedArrayBuffer.prototype.byteLength" : "\n          1. Let _O_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_O_, [[ArrayBufferData]]).\n          1. If IsSharedArrayBuffer(_O_) is *false*, throw a *TypeError* exception.\n          1. Let _length_ be ArrayBufferByteLength(_O_, ~seq-cst~).\n          1. Return ùîΩ(_length_).\n        ",
  "FunctionStatementList[0,0].LexicallyDeclaredNames" : "\n        1. Return a new empty List.\n      ",
  "RegExpIdentifierPart[1,0].RegExpIdentifierCodePoint" : "\n          1. Return the code point whose numeric value is the CharacterValue of |RegExpUnicodeEscapeSequence|.\n        ",
  "IfStatement[1,0].VarScopedDeclarations" : "\n        1. Return the VarScopedDeclarations of |Statement|.\n      ",
  "ForInOfStatement[3,0].VarScopedDeclarations" : "\n        1. Return the VarScopedDeclarations of |Statement|.\n      ",
  "CharacterClass[1,0].CompileCharacterClass" : "\n          1. Let _A_ be CompileToCharSet of |ClassContents| with argument _rer_.\n          1. If _rer_.[[UnicodeSets]] is *true*, then\n            1. Return the Record { [[CharSet]]: CharacterComplement(_rer_, _A_), [[Invert]]: *false* }.\n          1. Return the Record { [[CharSet]]: _A_, [[Invert]]: *true* }.\n        ",
  "CreateAsyncIteratorFromClosure" : "\n          1. NOTE: _closure_ can contain uses of the Await operation and uses of the Yield operation to yield an IteratorResult object.\n          1. Let _internalSlotsList_ be ¬´ [[AsyncGeneratorState]], [[AsyncGeneratorContext]], [[AsyncGeneratorQueue]], [[GeneratorBrand]] ¬ª.\n          1. Let _generator_ be OrdinaryObjectCreate(_generatorPrototype_, _internalSlotsList_).\n          1. Set _generator_.[[GeneratorBrand]] to _generatorBrand_.\n          1. Set _generator_.[[AsyncGeneratorState]] to *undefined*.\n          1. Let _callerContext_ be the running execution context.\n          1. Let _calleeContext_ be a new execution context.\n          1. Set the Function of _calleeContext_ to *null*.\n          1. Set the Realm of _calleeContext_ to the current Realm Record.\n          1. Set the ScriptOrModule of _calleeContext_ to _callerContext_'s ScriptOrModule.\n          1. If _callerContext_ is not already suspended, suspend _callerContext_.\n          1. Push _calleeContext_ onto the execution context stack; _calleeContext_ is now the running execution context.\n          1. Perform AsyncGeneratorStart(_generator_, _closure_).\n          1. Remove _calleeContext_ from the execution context stack and restore _callerContext_ as the running execution context.\n          1. Return _generator_.\n        ",
  "Assertion[7,0].CompileAssertion" : "\n          1. Let _m_ be CompileSubpattern of |Disjunction| with arguments _rer_ and ~backward~.\n          1. Return a new Matcher with parameters (_x_, _c_) that captures _m_ and performs the following steps when called:\n            1. Assert: _x_ is a MatchState.\n            1. Assert: _c_ is a MatcherContinuation.\n            1. Let _d_ be a new MatcherContinuation with parameters (_y_) that captures nothing and performs the following steps when called:\n              1. Assert: _y_ is a MatchState.\n              1. Return _y_.\n            1. Let _r_ be _m_(_x_, _d_).\n            1. If _r_ is not ~failure~, return ~failure~.\n            1. Return _c_(_x_).\n        ",
  "ClassTail[0,3].Contains" : "\n        1. If _symbol_ is |ClassBody|, return *true*.\n        1. If _symbol_ is |ClassHeritage|, then\n          1. If |ClassHeritage| is present, return *true*; otherwise return *false*.\n        1. If |ClassHeritage| is present, then\n          1. If |ClassHeritage| Contains _symbol_ is *true*, return *true*.\n        1. Return the result of ComputedPropertyContains of |ClassBody| with argument _symbol_.\n      ",
  "ClassElement[5,0].PropName" : "\n        1. Return ~empty~.\n      ",
  "AtomEscape[2,0].CompileAtom" : "\n          1. Let _cv_ be the CharacterValue of |CharacterEscape|.\n          1. Let _ch_ be the character whose character value is _cv_.\n          1. Let _A_ be a one-element CharSet containing the character _ch_.\n          1. Return CharacterSetMatcher(_rer_, _A_, *false*, _direction_).\n        ",
  "CallExpression[5,0].Contains" : "\n        1. If |CallExpression| Contains _symbol_ is *true*, return *true*.\n        1. Return *false*.\n      ",
  "Number::signedRightShift" : "\n            1. Let _lnum_ be ! ToInt32(_x_).\n            1. Let _rnum_ be ! ToUint32(_y_).\n            1. Let _shiftCount_ be ‚Ñù(_rnum_) modulo 32.\n            1. Return the result of performing a sign-extending right shift of _lnum_ by _shiftCount_ bits. The most significant bit is propagated. The mathematical value of the result is exactly representable as a 32-bit two's complement bit string.\n          ",
  "FormalParameters[4,0].ContainsExpression" : "\n        1. If ContainsExpression of |FormalParameterList| is *true*, return *true*.\n        1. Return ContainsExpression of |FunctionRestParameter|.\n      ",
  "Statement[11,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "LabelledItem[1,0].LexicallyScopedDeclarations" : "\n        1. Return ¬´ |FunctionDeclaration| ¬ª.\n      ",
  "AsyncGeneratorStart:cont1" : "\n          1. Assert: _generator_.[[AsyncGeneratorState]] is *undefined*.\n          1. Let _genContext_ be the running execution context.\n          1. Set the Generator component of _genContext_ to _generator_.\n          1. Let _closure_ be a new Abstract Closure with no parameters that captures _generatorBody_ and performs the following steps when called:\n            1. Let _acGenContext_ be the running execution context.\n            1. Let _acGenerator_ be the Generator component of _acGenContext_.\n            1. If _generatorBody_ is a Parse Node, then\n              1. Let _result_ be Completion(Evaluation of _generatorBody_).\n            1. Else,\n              1. Assert: _generatorBody_ is an Abstract Closure with no parameters.\n              1. Let _result_ be Completion(_generatorBody_()).\n            1. Assert: If we return here, the async generator either threw an exception or performed either an implicit or explicit return.\n            1. Remove _acGenContext_ from the execution context stack and restore the execution context that is at the top of the execution context stack as the running execution context.\n            1. Set _acGenerator_.[[AsyncGeneratorState]] to ~completed~.\n            1. If _result_ is a normal completion, set _result_ to NormalCompletion(*undefined*).\n            1. If _result_ is a return completion, set _result_ to NormalCompletion(_result_.[[Value]]).\n            1. Perform AsyncGeneratorCompleteStep(_acGenerator_, _result_, *true*).\n            1. Perform AsyncGeneratorDrainQueue(_acGenerator_).\n            1. Return *undefined*.\n          1. Set the code evaluation state of _genContext_ such that when evaluation is resumed for that execution context, _closure_ will be called with no arguments.\n          1. Set _generator_.[[AsyncGeneratorContext]] to _genContext_.\n          1. Set _generator_.[[AsyncGeneratorState]] to ~suspended-start~.\n          1. Set _generator_.[[AsyncGeneratorQueue]] to a new empty List.\n          1. Return ~unused~.\n        ",
  "INTRINSICS.TypedArray.prototype.findLast" : "\n          1. Let _O_ be the *this* value.\n          1. Let _taRecord_ be ? ValidateTypedArray(_O_, ~seq-cst~).\n          1. Let _len_ be TypedArrayLength(_taRecord_).\n          1. Let _findRec_ be ? FindViaPredicate(_O_, _len_, ~descending~, _predicate_, _thisArg_).\n          1. Return _findRec_.[[Value]].\n        ",
  "ClassElement[2,0].ClassElementEvaluation" : "\n        1. Return ? ClassFieldDefinitionEvaluation of |FieldDefinition| with argument _object_.\n      ",
  "INTRINSICS.decodeURI" : "\n          1. Let _uriString_ be ? ToString(_encodedURI_).\n          1. Let _preserveEscapeSet_ be *\";/?:@&=+$,#\"*.\n          1. Return ? Decode(_uriString_, _preserveEscapeSet_).\n        ",
  "MemberExpression[0,0].IsDestructuring" : "\n          1. If |PrimaryExpression| is either an |ObjectLiteral| or an |ArrayLiteral|, return *true*.\n          1. Return *false*.\n        ",
  "CaseBlock[1,1].VarScopedDeclarations" : "\n        1. If the first |CaseClauses| is present, let _declarations1_ be the VarScopedDeclarations of the first |CaseClauses|.\n        1. Else, let _declarations1_ be a new empty List.\n        1. Let _declarations2_ be VarScopedDeclarations of |DefaultClause|.\n        1. If the second |CaseClauses| is present, let _declarations3_ be the VarScopedDeclarations of the second |CaseClauses|.\n        1. Else, let _declarations3_ be a new empty List.\n        1. Return the list-concatenation of _declarations1_, _declarations2_, and _declarations3_.\n      ",
  "ClassEscape[0,0].IsCharacterClass" : "\n          1. Return *false*.\n        ",
  "BigInt::signedRightShift" : "\n            1. Return BigInt::leftShift(_x_, -_y_).\n          ",
  "INTRINSICS.TypedArray.prototype.lastIndexOf" : "\n          1. Let _O_ be the *this* value.\n          1. Let _taRecord_ be ? ValidateTypedArray(_O_, ~seq-cst~).\n          1. Let _len_ be TypedArrayLength(_taRecord_).\n          1. If _len_ = 0, return *-1*<sub>ùîΩ</sub>.\n          1. If _fromIndex_ is present, let _n_ be ? ToIntegerOrInfinity(_fromIndex_); else let _n_ be _len_ - 1.\n          1. If _n_ = -‚àû, return *-1*<sub>ùîΩ</sub>.\n          1. If _n_ ‚â• 0, then\n            1. Let _k_ be min(_n_, _len_ - 1).\n          1. Else,\n            1. Let _k_ be _len_ + _n_.\n          1. Repeat, while _k_ ‚â• 0,\n            1. Let _kPresent_ be ! HasProperty(_O_, ! ToString(ùîΩ(_k_))).\n            1. If _kPresent_ is *true*, then\n              1. Let _elementK_ be ! Get(_O_, ! ToString(ùîΩ(_k_))).\n              1. If IsStrictlyEqual(_searchElement_, _elementK_) is *true*, return ùîΩ(_k_).\n            1. Set _k_ to _k_ - 1.\n          1. Return *-1*<sub>ùîΩ</sub>.\n        ",
  "Module[0,0].ExportEntries" : "\n          1. Return a new empty List.\n        ",
  "INTRINSICS.get Map.prototype.size" : "\n          1. Let _M_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_M_, [[MapData]]).\n          1. Let _count_ be 0.\n          1. For each Record { [[Key]], [[Value]] } _p_ of _M_.[[MapData]], do\n            1. If _p_.[[Key]] is not ~empty~, set _count_ to _count_ + 1.\n          1. Return ùîΩ(_count_).\n        ",
  "AssignmentRestProperty[0,0].RestDestructuringAssignmentEvaluation" : "\n          1. Let _lref_ be ? Evaluation of |DestructuringAssignmentTarget|.\n          1. Let _restObj_ be OrdinaryObjectCreate(%Object.prototype%).\n          1. Perform ? CopyDataProperties(_restObj_, _value_, _excludedNames_).\n          1. Return ? PutValue(_lref_, _restObj_).\n        ",
  "ExponentiationExpression[1,0].Evaluation" : "\n        1. Return ? EvaluateStringOrNumericBinaryExpression(|UpdateExpression|, `**`, |ExponentiationExpression|).\n      ",
  "GeneratorValidate" : "\n          1. Perform ? RequireInternalSlot(_generator_, [[GeneratorState]]).\n          1. Perform ? RequireInternalSlot(_generator_, [[GeneratorBrand]]).\n          1. If _generator_.[[GeneratorBrand]] is not _generatorBrand_, throw a *TypeError* exception.\n          1. Assert: _generator_ also has a [[GeneratorContext]] internal slot.\n          1. Let _state_ be _generator_.[[GeneratorState]].\n          1. If _state_ is ~executing~, throw a *TypeError* exception.\n          1. Return _state_.\n        ",
  "AsyncFunctionDeclaration[0,0].BoundNames" : "\n        1. Return the BoundNames of |BindingIdentifier|.\n      ",
  "RegExpUnicodeEscapeSequence[4,0].CharacterValue" : "\n          1. Return the MV of |Hex4Digits|.\n        ",
  "GeneratorExpression[0,0].ContainsArguments" : "\n        1. Return *false*.\n      ",
  "LabelledStatement[0,0].LexicallyScopedDeclarations" : "\n        1. Return the LexicallyScopedDeclarations of |LabelledItem|.\n      ",
  "ForInOfStatement[2,0].VarScopedDeclarations" : "\n        1. Return the VarScopedDeclarations of |Statement|.\n      ",
  "MemberExpression[2,0].Contains" : "\n        1. If |MemberExpression| Contains _symbol_ is *true*, return *true*.\n        1. Return *false*.\n      ",
  "StrNumericLiteral[1,0].StringNumericValue" : "\n            1. Return ùîΩ(MV of |NonDecimalIntegerLiteral|).\n          ",
  "INTRINSICS.Object.prototype.valueOf" : "\n          1. Return ? ToObject(*this* value).\n        ",
  "ArrayBindingPattern[2,1].BoundNames" : "\n        1. Let _names1_ be BoundNames of |BindingElementList|.\n        1. Let _names2_ be BoundNames of |BindingRestElement|.\n        1. Return the list-concatenation of _names1_ and _names2_.\n      ",
  "CharacterClassEscape[4,0].MayContainStrings" : "\n          1. Return *false*.\n        ",
  "__NEW_OBJ__" : null,
  "Record[GlobalEnvironmentRecord].CreateImmutableBinding" : "\n            1. Let _DclRec_ be _envRec_.[[DeclarativeRecord]].\n            1. If ! _DclRec_.HasBinding(_N_) is *true*, throw a *TypeError* exception.\n            1. Return ! _DclRec_.CreateImmutableBinding(_N_, _S_).\n          ",
  "CallExpression[3,0].Evaluation" : "\n          1. Let _ref_ be ? Evaluation of |CallExpression|.\n          1. Let _func_ be ? GetValue(_ref_).\n          1. Let _thisCall_ be this |CallExpression|.\n          1. Let _tailCall_ be IsInTailPosition(_thisCall_).\n          1. Return ? EvaluateCall(_func_, _ref_, |Arguments|, _tailCall_).\n        ",
  "PrivateMethodOrAccessorAdd" : "\n        1. Assert: _method_.[[Kind]] is either ~method~ or ~accessor~.\n        1. If the host is a web browser, then\n          1. Perform ? HostEnsureCanAddPrivateElement(_O_).\n        1. Let _entry_ be PrivateElementFind(_O_, _method_.[[Key]]).\n        1. If _entry_ is not ~empty~, throw a *TypeError* exception.\n        1. Append _method_ to _O_.[[PrivateElements]].\n        1. Return ~unused~.\n      ",
  "ForStatement[0,2].ForLoopEvaluation" : "\n          1. If the first |Expression| is present, then\n            1. Let _exprRef_ be ? Evaluation of the first |Expression|.\n            1. Perform ? GetValue(_exprRef_).\n          1. If the second |Expression| is present, let _test_ be the second |Expression|; otherwise, let _test_ be ~empty~.\n          1. If the third |Expression| is present, let _increment_ be the third |Expression|; otherwise, let _increment_ be ~empty~.\n          1. Return ? ForBodyEvaluation(_test_, _increment_, |Statement|, ¬´ ¬ª, _labelSet_).\n        ",
  "UpdateExpression[3,0].AssignmentTargetType" : "\n        1. Return ~invalid~.\n      ",
  "INTRINSICS.Array.prototype.values" : "\n          1. Let _O_ be ? ToObject(*this* value).\n          1. Return CreateArrayIterator(_O_, ~value~).\n        ",
  "ArrowParameters[0,0].ExpectedArgumentCount" : "\n        1. Return 1.\n      ",
  "INTRINSICS.Date.prototype.setTime" : "\n          1. Let _dateObject_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_dateObject_, [[DateValue]]).\n          1. Let _t_ be ? ToNumber(_time_).\n          1. Let _v_ be TimeClip(_t_).\n          1. Set _dateObject_.[[DateValue]] to _v_.\n          1. Return _v_.\n        ",
  "BindingElement[1,1].HasInitializer" : "\n        1. Return *true*.\n      ",
  "ModuleItem[0,0].ExportEntries" : "\n          1. Return a new empty List.\n        ",
  "CaseClauses[1,0].VarDeclaredNames" : "\n        1. Let _names1_ be VarDeclaredNames of |CaseClauses|.\n        1. Let _names2_ be VarDeclaredNames of |CaseClause|.\n        1. Return the list-concatenation of _names1_ and _names2_.\n      ",
  "ForStatement[2,2].ForLoopEvaluation" : "\n          1. Let _oldEnv_ be the running execution context's LexicalEnvironment.\n          1. Let _loopEnv_ be NewDeclarativeEnvironment(_oldEnv_).\n          1. Let _isConst_ be IsConstantDeclaration of |LexicalDeclaration|.\n          1. Let _boundNames_ be the BoundNames of |LexicalDeclaration|.\n          1. For each element _dn_ of _boundNames_, do\n            1. If _isConst_ is *true*, then\n              1. Perform ! _loopEnv_.CreateImmutableBinding(_dn_, *true*).\n            1. Else,\n              1. Perform ! _loopEnv_.CreateMutableBinding(_dn_, *false*).\n          1. Set the running execution context's LexicalEnvironment to _loopEnv_.\n          1. Let _forDcl_ be Completion(Evaluation of |LexicalDeclaration|).\n          1. If _forDcl_ is an abrupt completion, then\n            1. Set the running execution context's LexicalEnvironment to _oldEnv_.\n            1. Return ? _forDcl_.\n          1. If _isConst_ is *false*, let _perIterationLets_ be _boundNames_; otherwise let _perIterationLets_ be a new empty List.\n          1. If the first |Expression| is present, let _test_ be the first |Expression|; otherwise, let _test_ be ~empty~.\n          1. If the second |Expression| is present, let _increment_ be the second |Expression|; otherwise, let _increment_ be ~empty~.\n          1. Let _bodyResult_ be Completion(ForBodyEvaluation(_test_, _increment_, |Statement|, _perIterationLets_, _labelSet_)).\n          1. Set the running execution context's LexicalEnvironment to _oldEnv_.\n          1. Return ? _bodyResult_.\n        ",
  "INTRINSICS.Proxy" : "\n          1. If NewTarget is *undefined*, throw a *TypeError* exception.\n          1. Return ? ProxyCreate(_target_, _handler_).\n        ",
  "BindingElement[1,1].BoundNames" : "\n        1. Return the BoundNames of |BindingPattern|.\n      ",
  "QuantifierPrefix[2,0].CompileQuantifierPrefix" : "\n          1. Return the Record { [[Min]]: 0, [[Max]]: 1 }.\n        ",
  "NewPrivateEnvironment" : "\n          1. Let _names_ be a new empty List.\n          1. Return the PrivateEnvironment Record { [[OuterPrivateEnvironment]]: _outerPrivEnv_, [[Names]]: _names_ }.\n        ",
  "LabelledItem[1,0].LexicallyDeclaredNames" : "\n        1. Return BoundNames of |FunctionDeclaration|.\n      ",
  "GeneratorDeclaration[1,0].IsConstantDeclaration" : "\n        1. Return *false*.\n      ",
  "CaseClauses[1,0].HasCallInTailPosition" : "\n        1. Let _has_ be HasCallInTailPosition of |CaseClauses| with argument _call_.\n        1. If _has_ is *true*, return *true*.\n        1. Return HasCallInTailPosition of |CaseClause| with argument _call_.\n      ",
  "ToObject" : null,
  "ForStatement[1,1].ContainsUndefinedBreakTarget" : "\n        1. Return ContainsUndefinedBreakTarget of |Statement| with argument _labelSet_.\n      ",
  "InitializeReferencedBinding" : "\n          1. Assert: IsUnresolvableReference(_V_) is *false*.\n          1. Let _base_ be _V_.[[Base]].\n          1. Assert: _base_ is an Environment Record.\n          1. Return ? _base_.InitializeBinding(_V_.[[ReferencedName]], _W_).\n        ",
  "GeneratorDeclaration[0,0].ContainsArguments" : "\n        1. Return *false*.\n      ",
  "LiteralPropertyName[2,0].Evaluation" : "\n          1. Let _nbr_ be the NumericValue of |NumericLiteral|.\n          1. Return ! ToString(_nbr_).\n        ",
  "RequireInternalSlot" : "\n        1. If _O_ is not an Object, throw a *TypeError* exception.\n        1. If _O_ does not have an _internalSlot_ internal slot, throw a *TypeError* exception.\n        1. Return ~unused~.\n      ",
  "CaseBlock[0,1].CaseBlockEvaluation" : "\n        1. Let _V_ be *undefined*.\n        1. Let _A_ be the List of |CaseClause| items in |CaseClauses|, in source text order.\n        1. Let _found_ be *false*.\n        1. For each |CaseClause| _C_ of _A_, do\n          1. If _found_ is *false*, then\n            1. Set _found_ to ? CaseClauseIsSelected(_C_, _input_).\n          1. If _found_ is *true*, then\n            1. Let _R_ be Completion(Evaluation of _C_).\n            1. If _R_.[[Value]] is not ~empty~, set _V_ to _R_.[[Value]].\n            1. If _R_ is an abrupt completion, return ? UpdateEmpty(_R_, _V_).\n        1. Return _V_.\n      ",
  "ClassElementList[0,0].PrototypePropertyNameList" : "\n        1. Let _propName_ be PropName of |ClassElement|.\n        1. If _propName_ is ~empty~, return a new empty List.\n        1. If IsStatic of |ClassElement| is *true*, return a new empty List.\n        1. Return ¬´ _propName_ ¬ª.\n      ",
  "PrimaryExpression[6,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "ClassSubtraction[1,0].MayContainStrings" : "\n          1. Return MayContainStrings of the |ClassSubtraction|.\n        ",
  "ForInOfStatement[3,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "OptionalChain[7,0].Contains" : "\n        1. If |OptionalChain| Contains _symbol_ is *true*, return *true*.\n        1. Return *false*.\n      ",
  "AssignmentExpression[4,0].IsFunctionDefinition" : "\n        1. Return *false*.\n      ",
  "ForInOfStatement[4,0].ContainsUndefinedBreakTarget" : "\n        1. Return ContainsUndefinedBreakTarget of |Statement| with argument _labelSet_.\n      ",
  "INTRINSICS.Array.prototype.flat" : "\n          1. Let _O_ be ? ToObject(*this* value).\n          1. Let _sourceLen_ be ? LengthOfArrayLike(_O_).\n          1. Let _depthNum_ be 1.\n          1. If _depth_ is not *undefined*, then\n            1. Set _depthNum_ to ? ToIntegerOrInfinity(_depth_).\n            1. If _depthNum_ < 0, set _depthNum_ to 0.\n          1. Let _A_ be ? ArraySpeciesCreate(_O_, 0).\n          1. Perform ? FlattenIntoArray(_A_, _O_, _sourceLen_, 0, _depthNum_).\n          1. Return _A_.\n        ",
  "SetViewValue" : "\n          1. Perform ? RequireInternalSlot(_view_, [[DataView]]).\n          1. Assert: _view_ has a [[ViewedArrayBuffer]] internal slot.\n          1. Let _getIndex_ be ? ToIndex(_requestIndex_).\n          1. If IsBigIntElementType(_type_) is *true*, let _numberValue_ be ? ToBigInt(_value_).\n          1. Otherwise, let _numberValue_ be ? ToNumber(_value_).\n          1. Set _isLittleEndian_ to ToBoolean(_isLittleEndian_).\n          1. Let _viewOffset_ be _view_.[[ByteOffset]].\n          1. Let _viewRecord_ be MakeDataViewWithBufferWitnessRecord(_view_, ~unordered~).\n          1. NOTE: Bounds checking is not a synchronizing operation when _view_'s backing buffer is a growable SharedArrayBuffer.\n          1. If IsViewOutOfBounds(_viewRecord_) is *true*, throw a *TypeError* exception.\n          1. Let _viewSize_ be GetViewByteLength(_viewRecord_).\n          1. Let _elementSize_ be the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"></emu-xref> for Element Type _type_.\n          1. If _getIndex_ + _elementSize_ > _viewSize_, throw a *RangeError* exception.\n          1. Let _bufferIndex_ be _getIndex_ + _viewOffset_.\n          1. Perform SetValueInBuffer(_view_.[[ViewedArrayBuffer]], _bufferIndex_, _type_, _numberValue_, *false*, ~unordered~, _isLittleEndian_).\n          1. Return *undefined*.\n        ",
  "NewPromiseCapability" : "\n          1. If IsConstructor(_C_) is *false*, throw a *TypeError* exception.\n          1. NOTE: _C_ is assumed to be a constructor function that supports the parameter conventions of the Promise constructor (see <emu-xref href=\"#sec-promise-executor\"></emu-xref>).\n          1. Let _resolvingFunctions_ be the Record { [[Resolve]]: *undefined*, [[Reject]]: *undefined* }.\n          1. Let _executorClosure_ be a new Abstract Closure with parameters (_resolve_, _reject_) that captures _resolvingFunctions_ and performs the following steps when called:\n            1. If _resolvingFunctions_.[[Resolve]] is not *undefined*, throw a *TypeError* exception.\n            1. If _resolvingFunctions_.[[Reject]] is not *undefined*, throw a *TypeError* exception.\n            1. Set _resolvingFunctions_.[[Resolve]] to _resolve_.\n            1. Set _resolvingFunctions_.[[Reject]] to _reject_.\n            1. Return *undefined*.\n          1. Let _executor_ be CreateBuiltinFunction(_executorClosure_, 2, *\"\"*, ¬´ ¬ª).\n          1. Let _promise_ be ? Construct(_C_, ¬´ _executor_ ¬ª).\n          1. If IsCallable(_resolvingFunctions_.[[Resolve]]) is *false*, throw a *TypeError* exception.\n          1. If IsCallable(_resolvingFunctions_.[[Reject]]) is *false*, throw a *TypeError* exception.\n          1. Return the PromiseCapability Record { [[Promise]]: _promise_, [[Resolve]]: _resolvingFunctions_.[[Resolve]], [[Reject]]: _resolvingFunctions_.[[Reject]] }.\n        ",
  "INTRINSICS.Atomics.isLockFree" : "\n        1. Let _n_ be ? ToIntegerOrInfinity(_size_).\n        1. Let _AR_ be the Agent Record of the surrounding agent.\n        1. If _n_ = 1, return _AR_.[[IsLockFree1]].\n        1. If _n_ = 2, return _AR_.[[IsLockFree2]].\n        1. If _n_ = 4, return *true*.\n        1. If _n_ = 8, return _AR_.[[IsLockFree8]].\n        1. Return *false*.\n      ",
  "Statement[1,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "PrivateSet" : "\n        1. Let _entry_ be PrivateElementFind(_O_, _P_).\n        1. If _entry_ is ~empty~, throw a *TypeError* exception.\n        1. If _entry_.[[Kind]] is ~field~, then\n          1. Set _entry_.[[Value]] to _value_.\n        1. Else if _entry_.[[Kind]] is ~method~, then\n          1. Throw a *TypeError* exception.\n        1. Else,\n          1. Assert: _entry_.[[Kind]] is ~accessor~.\n          1. If _entry_.[[Set]] is *undefined*, throw a *TypeError* exception.\n          1. Let _setter_ be _entry_.[[Set]].\n          1. Perform ? Call(_setter_, _O_, ¬´ _value_ ¬ª).\n        1. Return ~unused~.\n      ",
  "INTRINSICS.WeakMap.prototype.delete" : "\n          1. Let _M_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_M_, [[WeakMapData]]).\n          1. If CanBeHeldWeakly(_key_) is *false*, return *false*.\n          1. For each Record { [[Key]], [[Value]] } _p_ of _M_.[[WeakMapData]], do\n            1. If _p_.[[Key]] is not ~empty~ and SameValue(_p_.[[Key]], _key_) is *true*, then\n              1. Set _p_.[[Key]] to ~empty~.\n              1. Set _p_.[[Value]] to ~empty~.\n              1. Return *true*.\n          1. Return *false*.\n        ",
  "ClassAtomNoDash[0,0].CharacterValue" : "\n          1. Let _ch_ be the code point matched by |SourceCharacter|.\n          1. Return the numeric value of _ch_.\n        ",
  "INTRINSICS.EvalError" : null,
  "ObjectLiteral[2,0].Evaluation" : "\n          1. Let _obj_ be OrdinaryObjectCreate(%Object.prototype%).\n          1. Perform ? PropertyDefinitionEvaluation of |PropertyDefinitionList| with argument _obj_.\n          1. Return _obj_.\n        ",
  "IsAnonymousFunctionDefinition" : "\n        1. If IsFunctionDefinition of _expr_ is *false*, return *false*.\n        1. Let _hasName_ be HasName of _expr_.\n        1. If _hasName_ is *true*, return *false*.\n        1. Return *true*.\n      ",
  "UnaryExpression[7,0].Evaluation" : "\n          1. Let _expr_ be ? Evaluation of |UnaryExpression|.\n          1. Let _oldValue_ be ToBoolean(? GetValue(_expr_)).\n          1. If _oldValue_ is *true*, return *false*.\n          1. Return *true*.\n        ",
  "INTRINSICS.get Set[@@species]" : "\n          1. Return the *this* value.\n        ",
  "MemberExpression[3,0].IsIdentifierRef" : "\n        1. Return *false*.\n      ",
  "EscapeRegExpPattern" : "\n            1. If _F_ contains *\"v\"*, then\n              1. Let _patternSymbol_ be |Pattern[+UnicodeMode, +UnicodeSetsMode]|.\n            1. Else if _F_ contains *\"u\"*, then\n              1. Let _patternSymbol_ be |Pattern[+UnicodeMode, ~UnicodeSetsMode]|.\n            1. Else,\n              1. Let _patternSymbol_ be |Pattern[~UnicodeMode, ~UnicodeSetsMode]|.\n            1. Let _S_ be a String in the form of a _patternSymbol_ equivalent to _P_ interpreted as UTF-16 encoded Unicode code points (<emu-xref href=\"#sec-ecmascript-language-types-string-type\"></emu-xref>), in which certain code points are escaped as described below. _S_ may or may not differ from _P_; however, the Abstract Closure that would result from evaluating _S_ as a _patternSymbol_ must behave identically to the Abstract Closure given by the constructed object's [[RegExpMatcher]] internal slot. Multiple calls to this abstract operation using the same values for _P_ and _F_ must produce identical results.\n            1. The code points `/` or any |LineTerminator| occurring in the pattern shall be escaped in _S_ as necessary to ensure that the string-concatenation of *\"/\"*, _S_, *\"/\"*, and _F_ can be parsed (in an appropriate lexical context) as a |RegularExpressionLiteral| that behaves identically to the constructed regular expression. For example, if _P_ is *\"/\"*, then _S_ could be *\"\\\\/\"* or *\"\\\\u002F\"*, among other possibilities, but not *\"/\"*, because `///` followed by _F_ would be parsed as a |SingleLineComment| rather than a |RegularExpressionLiteral|. If _P_ is the empty String, this specification can be met by letting _S_ be *\"(?:)\"*.\n            1. Return _S_.\n          ",
  "LexicalDeclaration[0,0].Evaluation" : "\n          1. Perform ? Evaluation of |BindingList|.\n          1. Return ~empty~.\n        ",
  "AddToKeptObjects" : "\n      1. Let _agentRecord_ be the surrounding agent's Agent Record.\n      1. Append _value_ to _agentRecord_.[[KeptAlive]].\n      1. Return ~unused~.\n    ",
  "MemberExpression[3,0].Evaluation" : "\n          1. Let _tagRef_ be ? Evaluation of |MemberExpression|.\n          1. Let _tagFunc_ be ? GetValue(_tagRef_).\n          1. Let _thisCall_ be this |MemberExpression|.\n          1. Let _tailCall_ be IsInTailPosition(_thisCall_).\n          1. Return ? EvaluateCall(_tagFunc_, _tagRef_, |TemplateLiteral|, _tailCall_).\n        ",
  "GeneratorDeclaration[1,0].Contains" : "\n        1. Return *false*.\n      ",
  "ModuleItemList[0,0].ModuleRequests" : "\n          1. Return ModuleRequests of |ModuleItem|.\n        ",
  "INTRINSICS.Math.floor" : "\n          1. Let _n_ be ? ToNumber(_x_).\n          1. If _n_ is not finite or _n_ is either *+0*<sub>ùîΩ</sub> or *-0*<sub>ùîΩ</sub>, return _n_.\n          1. If _n_ < *1*<sub>ùîΩ</sub> and _n_ > *+0*<sub>ùîΩ</sub>, return *+0*<sub>ùîΩ</sub>.\n          1. If _n_ is an integral Number, return _n_.\n          1. Return the greatest (closest to +‚àû) integral Number value that is not greater than _n_.\n        ",
  "ClassDeclaration[0,0].BindingClassDeclarationEvaluation" : "\n        1. Let _className_ be StringValue of |BindingIdentifier|.\n        1. Let _value_ be ? ClassDefinitionEvaluation of |ClassTail| with arguments _className_ and _className_.\n        1. Set _value_.[[SourceText]] to the source text matched by |ClassDeclaration|.\n        1. Let _env_ be the running execution context's LexicalEnvironment.\n        1. Perform ? InitializeBoundName(_className_, _value_, _env_).\n        1. Return _value_.\n      ",
  "MethodDefinition[4,0].ComputedPropertyContains" : "\n        1. Return the result of ComputedPropertyContains of |ClassElementName| with argument _symbol_.\n      ",
  "NewFunctionEnvironment" : "\n          1. Let _env_ be a new Function Environment Record containing no bindings.\n          1. Set _env_.[[FunctionObject]] to _F_.\n          1. If _F_.[[ThisMode]] is ~lexical~, set _env_.[[ThisBindingStatus]] to ~lexical~.\n          1. Else, set _env_.[[ThisBindingStatus]] to ~uninitialized~.\n          1. Set _env_.[[NewTarget]] to _newTarget_.\n          1. Set _env_.[[OuterEnv]] to _F_.[[Environment]].\n          1. Return _env_.\n        ",
  "MakeArgGetter" : "\n            1. Let _getterClosure_ be a new Abstract Closure with no parameters that captures _name_ and _env_ and performs the following steps when called:\n              1. Return _env_.GetBindingValue(_name_, *false*).\n            1. Let _getter_ be CreateBuiltinFunction(_getterClosure_, 0, *\"\"*, ¬´ ¬ª).\n            1. NOTE: _getter_ is never directly accessible to ECMAScript code.\n            1. Return _getter_.\n          ",
  "ModuleItem[1,0].ContainsUndefinedBreakTarget" : "\n        1. Return *false*.\n      ",
  "AssignmentElisionElement[0,0].IteratorDestructuringAssignmentEvaluation" : "\n          1. Return ? IteratorDestructuringAssignmentEvaluation of |AssignmentElement| with argument _iteratorRecord_.\n        ",
  "DefaultClause[0,0].ContainsUndefinedContinueTarget" : "\n        1. If the |StatementList| is present, return ContainsUndefinedContinueTarget of |StatementList| with arguments _iterationSet_ and ¬´ ¬ª.\n        1. Return *false*.\n      ",
  "IsAccessorDescriptor" : "\n          1. If _Desc_ is *undefined*, return *false*.\n          1. If _Desc_ has a [[Get]] field, return *true*.\n          1. If _Desc_ has a [[Set]] field, return *true*.\n          1. Return *false*.\n        ",
  "INTRINSICS.Atomics.sub" : "\n        1. Let _type_ be TypedArrayElementType(_typedArray_).\n        1. Let _isLittleEndian_ be the value of the [[LittleEndian]] field of the surrounding agent's Agent Record.\n        1. Let _subtract_ be a new read-modify-write modification function with parameters (_xBytes_, _yBytes_) that captures _type_ and _isLittleEndian_ and performs the following steps atomically when called:\n          1. Let _x_ be RawBytesToNumeric(_type_, _xBytes_, _isLittleEndian_).\n          1. Let _y_ be RawBytesToNumeric(_type_, _yBytes_, _isLittleEndian_).\n          1. If _x_ is a Number, then\n            1. Let _difference_ be Number::subtract(_x_, _y_).\n          1. Else,\n            1. Assert: _x_ is a BigInt.\n            1. Let _difference_ be BigInt::subtract(_x_, _y_).\n          1. Let _differenceBytes_ be NumericToRawBytes(_type_, _difference_, _isLittleEndian_).\n          1. Assert: _differenceBytes_, _xBytes_, and _yBytes_ have the same number of elements.\n          1. Return _differenceBytes_.\n        1. Return ? AtomicReadModifyWrite(_typedArray_, _index_, _value_, _subtract_).\n      ",
  "ClassStaticBlockStatementList[0,1].VarDeclaredNames" : "\n        1. Return the TopLevelVarDeclaredNames of |StatementList|.\n      ",
  "UpdateEmpty" : "\n          1. Assert: If _completionRecord_ is either a return completion or a throw completion, then _completionRecord_.[[Value]] is not ~empty~.\n          1. If _completionRecord_.[[Value]] is not ~empty~, return ? _completionRecord_.\n          1. Return Completion Record { [[Type]]: _completionRecord_.[[Type]], [[Value]]: _value_, [[Target]]: _completionRecord_.[[Target]] }.\n        ",
  "RepeatMatcher" : "\n            1. If _max_ = 0, return _c_(_x_).\n            1. Let _d_ be a new MatcherContinuation with parameters (_y_) that captures _m_, _min_, _max_, _greedy_, _x_, _c_, _parenIndex_, and _parenCount_ and performs the following steps when called:\n              1. Assert: _y_ is a MatchState.\n              1. [id=\"step-repeatmatcher-done\"] If _min_ = 0 and _y_.[[EndIndex]] = _x_.[[EndIndex]], return ~failure~.\n              1. If _min_ = 0, let _min2_ be 0; otherwise let _min2_ be _min_ - 1.\n              1. If _max_ = +‚àû, let _max2_ be +‚àû; otherwise let _max2_ be _max_ - 1.\n              1. Return RepeatMatcher(_m_, _min2_, _max2_, _greedy_, _y_, _c_, _parenIndex_, _parenCount_).\n            1. Let _cap_ be a copy of _x_.[[Captures]].\n            1. [id=\"step-repeatmatcher-clear-captures\"] For each integer _k_ in the inclusive interval from _parenIndex_ + 1 to _parenIndex_ + _parenCount_, set _cap_[_k_] to *undefined*.\n            1. Let _Input_ be _x_.[[Input]].\n            1. Let _e_ be _x_.[[EndIndex]].\n            1. Let _xr_ be the MatchState { [[Input]]: _Input_, [[EndIndex]]: _e_, [[Captures]]: _cap_ }.\n            1. If _min_ ‚â† 0, return _m_(_xr_, _d_).\n            1. If _greedy_ is *false*, then\n              1. Let _z_ be _c_(_x_).\n              1. If _z_ is not ~failure~, return _z_.\n              1. Return _m_(_xr_, _d_).\n            1. Let _z_ be _m_(_xr_, _d_).\n            1. If _z_ is not ~failure~, return _z_.\n            1. Return _c_(_x_).\n          ",
  "INTRINSICS.Array.prototype.toReversed" : "\n          1. Let _O_ be ? ToObject(*this* value).\n          1. Let _len_ be ? LengthOfArrayLike(_O_).\n          1. Let _A_ be ? ArrayCreate(_len_).\n          1. Let _k_ be 0.\n          1. Repeat, while _k_ < _len_,\n            1. Let _from_ be ! ToString(ùîΩ(_len_ - _k_ - 1)).\n            1. Let _Pk_ be ! ToString(ùîΩ(_k_)).\n            1. Let _fromValue_ be ? Get(_O_, _from_).\n            1. Perform ! CreateDataPropertyOrThrow(_A_, _Pk_, _fromValue_).\n            1. Set _k_ to _k_ + 1.\n          1. Return _A_.\n        ",
  "CallExpression[3,0].AssignmentTargetType" : "\n        1. Return ~invalid~.\n      ",
  "ToString" : "\n        1. If _argument_ is a String, return _argument_.\n        1. If _argument_ is a Symbol, throw a *TypeError* exception.\n        1. If _argument_ is *undefined*, return *\"undefined\"*.\n        1. If _argument_ is *null*, return *\"null\"*.\n        1. If _argument_ is *true*, return *\"true\"*.\n        1. If _argument_ is *false*, return *\"false\"*.\n        1. If _argument_ is a Number, return Number::toString(_argument_, 10).\n        1. If _argument_ is a BigInt, return BigInt::toString(_argument_, 10).\n        1. Assert: _argument_ is an Object.\n        1. Let _primValue_ be ? ToPrimitive(_argument_, ~string~).\n        1. Assert: _primValue_ is not an Object.\n        1. Return ? ToString(_primValue_).\n      ",
  "INTRINSICS.Math.cos" : "\n          1. Let _n_ be ? ToNumber(_x_).\n          1. If _n_ is not finite, return *NaN*.\n          1. If _n_ is either *+0*<sub>ùîΩ</sub> or *-0*<sub>ùîΩ</sub>, return *1*<sub>ùîΩ</sub>.\n          1. Return an implementation-approximated Number value representing the result of the cosine of ‚Ñù(_n_).\n        ",
  "BindingElementList[1,0].BoundNames" : "\n        1. Let _names1_ be BoundNames of |BindingElementList|.\n        1. Let _names2_ be BoundNames of |BindingElisionElement|.\n        1. Return the list-concatenation of _names1_ and _names2_.\n      ",
  "MethodDefinition[4,0].ContainsArguments" : "\n        1. Return ContainsArguments of |ClassElementName|.\n      ",
  "IdentifierName[1,0].StringValue" : "\n        1. Let _idTextUnescaped_ be IdentifierCodePoints of |IdentifierName|.\n        1. Return CodePointsToString(_idTextUnescaped_).\n      ",
  "INTRINSICS.Array.prototype.pop" : "\n          1. Let _O_ be ? ToObject(*this* value).\n          1. Let _len_ be ? LengthOfArrayLike(_O_).\n          1. If _len_ = 0, then\n            1. Perform ? Set(_O_, *\"length\"*, *+0*<sub>ùîΩ</sub>, *true*).\n            1. Return *undefined*.\n          1. Else,\n            1. Assert: _len_ > 0.\n            1. Let _newLen_ be ùîΩ(_len_ - 1).\n            1. Let _index_ be ! ToString(_newLen_).\n            1. Let _element_ be ? Get(_O_, _index_).\n            1. Perform ? DeletePropertyOrThrow(_O_, _index_).\n            1. Perform ? Set(_O_, *\"length\"*, _newLen_, *true*).\n            1. Return _element_.\n        ",
  "ClassStaticBlockStatementList[0,0].VarScopedDeclarations" : "\n        1. Return a new empty List.\n      ",
  "INTRINSICS.String.prototype.concat" : "\n          1. Let _O_ be ? RequireObjectCoercible(*this* value).\n          1. Let _S_ be ? ToString(_O_).\n          1. Let _R_ be _S_.\n          1. For each element _next_ of _args_, do\n            1. Let _nextString_ be ? ToString(_next_).\n            1. Set _R_ to the string-concatenation of _R_ and _nextString_.\n          1. Return _R_.\n        ",
  "GeneratorExpression[0,1].ContainsArguments" : "\n        1. Return *false*.\n      ",
  "HostEnqueuePromiseJob" : null,
  "INTRINSICS.get RegExp.prototype.flags" : "\n          1. Let _R_ be the *this* value.\n          1. If _R_ is not an Object, throw a *TypeError* exception.\n          1. Let _codeUnits_ be a new empty List.\n          1. Let _hasIndices_ be ToBoolean(? Get(_R_, *\"hasIndices\"*)).\n          1. If _hasIndices_ is *true*, append the code unit 0x0064 (LATIN SMALL LETTER D) to _codeUnits_.\n          1. Let _global_ be ToBoolean(? Get(_R_, *\"global\"*)).\n          1. If _global_ is *true*, append the code unit 0x0067 (LATIN SMALL LETTER G) to _codeUnits_.\n          1. Let _ignoreCase_ be ToBoolean(? Get(_R_, *\"ignoreCase\"*)).\n          1. If _ignoreCase_ is *true*, append the code unit 0x0069 (LATIN SMALL LETTER I) to _codeUnits_.\n          1. Let _multiline_ be ToBoolean(? Get(_R_, *\"multiline\"*)).\n          1. If _multiline_ is *true*, append the code unit 0x006D (LATIN SMALL LETTER M) to _codeUnits_.\n          1. Let _dotAll_ be ToBoolean(? Get(_R_, *\"dotAll\"*)).\n          1. If _dotAll_ is *true*, append the code unit 0x0073 (LATIN SMALL LETTER S) to _codeUnits_.\n          1. Let _unicode_ be ToBoolean(? Get(_R_, *\"unicode\"*)).\n          1. If _unicode_ is *true*, append the code unit 0x0075 (LATIN SMALL LETTER U) to _codeUnits_.\n          1. Let _unicodeSets_ be ToBoolean(? Get(_R_, *\"unicodeSets\"*)).\n          1. If _unicodeSets_ is *true*, append the code unit 0x0076 (LATIN SMALL LETTER V) to _codeUnits_.\n          1. Let _sticky_ be ToBoolean(? Get(_R_, *\"sticky\"*)).\n          1. If _sticky_ is *true*, append the code unit 0x0079 (LATIN SMALL LETTER Y) to _codeUnits_.\n          1. Return the String value whose code units are the elements of the List _codeUnits_. If _codeUnits_ has no elements, the empty String is returned.\n        ",
  "Statement[2,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "Record[FunctionEnvironmentRecord].GetThisBinding" : "\n            1. Assert: _envRec_.[[ThisBindingStatus]] is not ~lexical~.\n            1. If _envRec_.[[ThisBindingStatus]] is ~uninitialized~, throw a *ReferenceError* exception.\n            1. Return _envRec_.[[ThisValue]].\n          ",
  "Statement[8,0].ContainsUndefinedContinueTarget" : "\n        1. Return *false*.\n      ",
  "INTRINSICS.AsyncGeneratorFunction.prototype.prototype.next" : "\n          1. Let _generator_ be the *this* value.\n          1. Let _promiseCapability_ be ! NewPromiseCapability(%Promise%).\n          1. Let _result_ be Completion(AsyncGeneratorValidate(_generator_, ~empty~)).\n          1. IfAbruptRejectPromise(_result_, _promiseCapability_).\n          1. Let _state_ be _generator_.[[AsyncGeneratorState]].\n          1. If _state_ is ~completed~, then\n            1. Let _iteratorResult_ be CreateIterResultObject(*undefined*, *true*).\n            1. Perform ! Call(_promiseCapability_.[[Resolve]], *undefined*, ¬´ _iteratorResult_ ¬ª).\n            1. Return _promiseCapability_.[[Promise]].\n          1. Let _completion_ be NormalCompletion(_value_).\n          1. Perform AsyncGeneratorEnqueue(_generator_, _completion_, _promiseCapability_).\n          1. If _state_ is either ~suspended-start~ or ~suspended-yield~, then\n            1. Perform AsyncGeneratorResume(_generator_, _completion_).\n          1. Else,\n            1. Assert: _state_ is either ~executing~ or ~awaiting-return~.\n          1. Return _promiseCapability_.[[Promise]].\n        ",
  "AssignmentPropertyList[1,0].PropertyDestructuringAssignmentEvaluation" : "\n          1. Let _propertyNames_ be ? PropertyDestructuringAssignmentEvaluation of |AssignmentPropertyList| with argument _value_.\n          1. Let _nextNames_ be ? PropertyDestructuringAssignmentEvaluation of |AssignmentProperty| with argument _value_.\n          1. Return the list-concatenation of _propertyNames_ and _nextNames_.\n        ",
  "ForStatement[2,3].ContainsDuplicateLabels" : "\n        1. Return ContainsDuplicateLabels of |Statement| with argument _labelSet_.\n      ",
  "AsyncGeneratorDeclaration[1,0].ContainsArguments" : "\n        1. Return *false*.\n      ",
  "VariableDeclarationList[1,0].Evaluation" : "\n          1. Perform ? Evaluation of |VariableDeclarationList|.\n          1. Return ? Evaluation of |VariableDeclaration|.\n        ",
  "ConciseBody[0,0].LexicallyScopedDeclarations" : "\n        1. Return a new empty List.\n      ",
  "StatementList[1,0].TopLevelVarDeclaredNames" : "\n        1. Let _names1_ be TopLevelVarDeclaredNames of |StatementList|.\n        1. Let _names2_ be TopLevelVarDeclaredNames of |StatementListItem|.\n        1. Return the list-concatenation of _names1_ and _names2_.\n      ",
  "ForStatement[0,4].HasCallInTailPosition" : "\n        1. Return HasCallInTailPosition of |Statement| with argument _call_.\n      ",
  "INTRINSICS.encodeURI" : "\n          1. Let _uriString_ be ? ToString(_uri_).\n          1. Let _extraUnescaped_ be *\";/?:@&=+$,#\"*.\n          1. Return ? Encode(_uriString_, _extraUnescaped_).\n        ",
  "ClassElementList[1,0].PrivateBoundIdentifiers" : "\n        1. Let _names1_ be PrivateBoundIdentifiers of |ClassElementList|.\n        1. Let _names2_ be PrivateBoundIdentifiers of |ClassElement|.\n        1. Return the list-concatenation of _names1_ and _names2_.\n      ",
  "Statement[6,0].LabelledEvaluation" : "\n        1. Return ? Evaluation of |Statement|.\n      ",
  "IsNoTearConfiguration" : "\n          1. If IsUnclampedIntegerElementType(_type_) is *true*, return *true*.\n          1. If IsBigIntElementType(_type_) is *true* and _order_ is neither ~init~ nor ~unordered~, return *true*.\n          1. Return *false*.\n        ",
  "Await:clo1:cont0" : "\n          1. Let _asyncContext_ be the running execution context.\n          1. Let _promise_ be ? PromiseResolve(%Promise%, _value_).\n          1. Let _fulfilledClosure_ be a new Abstract Closure with parameters (_v_) that captures _asyncContext_ and performs the following steps when called:\n            1. Let _prevContext_ be the running execution context.\n            1. Suspend _prevContext_.\n            1. Push _asyncContext_ onto the execution context stack; _asyncContext_ is now the running execution context.\n            1. <emu-meta effects=\"user-code\">Resume the suspended evaluation of _asyncContext_</emu-meta> using NormalCompletion(_v_) as the result of the operation that suspended it.\n            1. Assert: When we reach this step, _asyncContext_ has already been removed from the execution context stack and _prevContext_ is the currently running execution context.\n            1. Return *undefined*.\n          1. Let _onFulfilled_ be CreateBuiltinFunction(_fulfilledClosure_, 1, *\"\"*, ¬´ ¬ª).\n          1. Let _rejectedClosure_ be a new Abstract Closure with parameters (_reason_) that captures _asyncContext_ and performs the following steps when called:\n            1. Let _prevContext_ be the running execution context.\n            1. Suspend _prevContext_.\n            1. Push _asyncContext_ onto the execution context stack; _asyncContext_ is now the running execution context.\n            1. <emu-meta effects=\"user-code\">Resume the suspended evaluation of _asyncContext_</emu-meta> using ThrowCompletion(_reason_) as the result of the operation that suspended it.\n            1. Assert: When we reach this step, _asyncContext_ has already been removed from the execution context stack and _prevContext_ is the currently running execution context.\n            1. Return *undefined*.\n          1. Let _onRejected_ be CreateBuiltinFunction(_rejectedClosure_, 1, *\"\"*, ¬´ ¬ª).\n          1. Perform PerformPromiseThen(_promise_, _onFulfilled_, _onRejected_).\n          1. Remove _asyncContext_ from the execution context stack and restore the execution context that is at the top of the execution context stack as the running execution context.\n          1. Let _callerContext_ be the running execution context.\n          1. Resume _callerContext_ passing ~empty~. If _asyncContext_ is ever resumed again, let _completion_ be the Completion Record with which it is resumed.\n          1. Assert: If control reaches here, then _asyncContext_ is the running execution context again.\n          1. Return _completion_.\n        ",
  "ToBoolean" : "\n        1. If _argument_ is a Boolean, return _argument_.\n        1. If _argument_ is one of *undefined*, *null*, *+0*<sub>ùîΩ</sub>, *-0*<sub>ùîΩ</sub>, *NaN*, *0*<sub>‚Ñ§</sub>, or the empty String, return *false*.\n        1. [id=\"step-to-boolean-web-compat-insertion-point\"] NOTE: This step is replaced in section <emu-xref href=\"#sec-IsHTMLDDA-internal-slot-to-boolean\"></emu-xref>.\n        1. Return *true*.\n      ",
  "VariableDeclaration[0,0].Evaluation" : "\n          1. Return ~empty~.\n        ",
  "CaseBlock[1,2].ContainsUndefinedContinueTarget" : "\n        1. If the first |CaseClauses| is present, then\n          1. If ContainsUndefinedContinueTarget of the first |CaseClauses| with arguments _iterationSet_ and ¬´ ¬ª is *true*, return *true*.\n        1. If ContainsUndefinedContinueTarget of |DefaultClause| with arguments _iterationSet_ and ¬´ ¬ª is *true*, return *true*.\n        1. If the second |CaseClauses| is not present, return *false*.\n        1. Return ContainsUndefinedContinueTarget of the second |CaseClauses| with arguments _iterationSet_ and ¬´ ¬ª.\n      ",
  "Elision[1,0].ArrayAccumulation" : "\n          1. Return ? ArrayAccumulation of |Elision| with arguments _array_ and (_nextIndex_ + 1).\n        ",
  "ResolvePrivateIdentifier" : "\n          1. Let _names_ be _privEnv_.[[Names]].\n          1. For each Private Name _pn_ of _names_, do\n            1. If _pn_.[[Description]] is _identifier_, then\n              1. Return _pn_.\n          1. Let _outerPrivEnv_ be _privEnv_.[[OuterPrivateEnvironment]].\n          1. Assert: _outerPrivEnv_ is not *null*.\n          1. Return ResolvePrivateIdentifier(_outerPrivEnv_, _identifier_).\n        ",
  "INTRINSICS.TypedArray.prototype.keys" : "\n          1. Let _O_ be the *this* value.\n          1. Perform ? ValidateTypedArray(_O_, ~seq-cst~).\n          1. Return CreateArrayIterator(_O_, ~key~).\n        ",
  "Number::unsignedRightShift" : "\n            1. Let _lnum_ be ! ToUint32(_x_).\n            1. Let _rnum_ be ! ToUint32(_y_).\n            1. Let _shiftCount_ be ‚Ñù(_rnum_) modulo 32.\n            1. Return the result of performing a zero-filling right shift of _lnum_ by _shiftCount_ bits. Vacated bits are filled with zero. The mathematical value of the result is exactly representable as a 32-bit unsigned bit string.\n          ",
  "IteratorClose" : "\n        1. Assert: _iteratorRecord_.[[Iterator]] is an Object.\n        1. Let _iterator_ be _iteratorRecord_.[[Iterator]].\n        1. Let _innerResult_ be Completion(GetMethod(_iterator_, *\"return\"*)).\n        1. If _innerResult_ is a normal completion, then\n          1. Let _return_ be _innerResult_.[[Value]].\n          1. If _return_ is *undefined*, return ? _completion_.\n          1. Set _innerResult_ to Completion(Call(_return_, _iterator_)).\n        1. If _completion_ is a throw completion, return ? _completion_.\n        1. If _innerResult_ is a throw completion, return ? _innerResult_.\n        1. If _innerResult_.[[Value]] is not an Object, throw a *TypeError* exception.\n        1. Return ? _completion_.\n      ",
  "EqualityExpression[1,0].IsFunctionDefinition" : "\n        1. Return *false*.\n      ",
  "AsyncFunctionExpression[0,0].HasName" : "\n        1. Return *false*.\n      ",
  "INTRINSICS.String.prototype.toUpperCase" : null,
  "Record[ProxyExoticObject].GetOwnProperty" : "\n        1. Perform ? ValidateNonRevokedProxy(_O_).\n        1. Let _target_ be _O_.[[ProxyTarget]].\n        1. Let _handler_ be _O_.[[ProxyHandler]].\n        1. Assert: _handler_ is an Object.\n        1. Let _trap_ be ? GetMethod(_handler_, *\"getOwnPropertyDescriptor\"*).\n        1. If _trap_ is *undefined*, then\n          1. Return ? <emu-meta effects=\"user-code\">_target_.[[GetOwnProperty]]</emu-meta>(_P_).\n        1. Let _trapResultObj_ be ? Call(_trap_, _handler_, ¬´ _target_, _P_ ¬ª).\n        1. If _trapResultObj_ is not an Object and _trapResultObj_ is not *undefined*, throw a *TypeError* exception.\n        1. Let _targetDesc_ be ? <emu-meta effects=\"user-code\">_target_.[[GetOwnProperty]]</emu-meta>(_P_).\n        1. If _trapResultObj_ is *undefined*, then\n          1. If _targetDesc_ is *undefined*, return *undefined*.\n          1. If _targetDesc_.[[Configurable]] is *false*, throw a *TypeError* exception.\n          1. Let _extensibleTarget_ be ? IsExtensible(_target_).\n          1. If _extensibleTarget_ is *false*, throw a *TypeError* exception.\n          1. Return *undefined*.\n        1. Let _extensibleTarget_ be ? IsExtensible(_target_).\n        1. Let _resultDesc_ be ? ToPropertyDescriptor(_trapResultObj_).\n        1. Perform CompletePropertyDescriptor(_resultDesc_).\n        1. Let _valid_ be IsCompatiblePropertyDescriptor(_extensibleTarget_, _resultDesc_, _targetDesc_).\n        1. If _valid_ is *false*, throw a *TypeError* exception.\n        1. If _resultDesc_.[[Configurable]] is *false*, then\n          1. If _targetDesc_ is *undefined* or _targetDesc_.[[Configurable]] is *true*, then\n            1. Throw a *TypeError* exception.\n          1. If _resultDesc_ has a [[Writable]] field and _resultDesc_.[[Writable]] is *false*, then\n            1. Assert: _targetDesc_ has a [[Writable]] field.\n            1. If _targetDesc_.[[Writable]] is *true*, throw a *TypeError* exception.\n        1. Return _resultDesc_.\n      ",
  "DefaultClause[0,0].VarDeclaredNames" : "\n        1. If the |StatementList| is present, return the VarDeclaredNames of |StatementList|.\n        1. Return a new empty List.\n      ",
  "INTRINSICS.set Object.prototype.__proto__" : "\n            1. Let _O_ be ? RequireObjectCoercible(*this* value).\n            1. If _proto_ is not an Object and _proto_ is not *null*, return *undefined*.\n            1. If _O_ is not an Object, return *undefined*.\n            1. Let _status_ be ? <emu-meta effects=\"user-code\">_O_.[[SetPrototypeOf]]</emu-meta>(_proto_).\n            1. If _status_ is *false*, throw a *TypeError* exception.\n            1. Return *undefined*.\n          ",
  "IfStatement[0,0].ContainsUndefinedContinueTarget" : "\n        1. Let _hasUndefinedLabels_ be ContainsUndefinedContinueTarget of the first |Statement| with arguments _iterationSet_ and ¬´ ¬ª.\n        1. If _hasUndefinedLabels_ is *true*, return *true*.\n        1. Return ContainsUndefinedContinueTarget of the second |Statement| with arguments _iterationSet_ and ¬´ ¬ª.\n      ",
  "INTRINSICS.String.prototype.slice" : "\n          1. Let _O_ be ? RequireObjectCoercible(*this* value).\n          1. Let _S_ be ? ToString(_O_).\n          1. Let _len_ be the length of _S_.\n          1. Let _intStart_ be ? ToIntegerOrInfinity(_start_).\n          1. If _intStart_ = -‚àû, let _from_ be 0.\n          1. Else if _intStart_ < 0, let _from_ be max(_len_ + _intStart_, 0).\n          1. Else, let _from_ be min(_intStart_, _len_).\n          1. If _end_ is *undefined*, let _intEnd_ be _len_; else let _intEnd_ be ? ToIntegerOrInfinity(_end_).\n          1. If _intEnd_ = -‚àû, let _to_ be 0.\n          1. Else if _intEnd_ < 0, let _to_ be max(_len_ + _intEnd_, 0).\n          1. Else, let _to_ be min(_intEnd_, _len_).\n          1. If _from_ ‚â• _to_, return the empty String.\n          1. Return the substring of _S_ from _from_ to _to_.\n        ",
  "MemberExpression[1,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "NonemptyClassRangesNoDash[1,0].CompileToCharSet" : "\n          1. Let _A_ be CompileToCharSet of |ClassAtomNoDash| with argument _rer_.\n          1. Let _B_ be CompileToCharSet of |NonemptyClassRangesNoDash| with argument _rer_.\n          1. Return the union of CharSets _A_ and _B_.\n        ",
  "FormalParameters[4,0].ExpectedArgumentCount" : "\n        1. Return ExpectedArgumentCount of |FormalParameterList|.\n      ",
  "FunctionStatementList[0,0].Evaluation" : "\n        1. Return *undefined*.\n      ",
  "ExportDeclaration[4,0].ExportedBindings" : "\n          1. Return the BoundNames of this |ExportDeclaration|.\n        ",
  "RelationalExpression[1,0].Evaluation" : "\n        1. Let _lref_ be ? Evaluation of |RelationalExpression|.\n        1. Let _lval_ be ? GetValue(_lref_).\n        1. Let _rref_ be ? Evaluation of |ShiftExpression|.\n        1. Let _rval_ be ? GetValue(_rref_).\n        1. Let _r_ be ? IsLessThan(_lval_, _rval_, *true*).\n        1. If _r_ is *undefined*, return *false*. Otherwise, return _r_.\n      ",
  "BigInt::equal" : "\n            1. If ‚Ñù(_x_) = ‚Ñù(_y_), return *true*; otherwise return *false*.\n          ",
  "ClassTail[0,1].ClassDefinitionEvaluation" : "\n        1. Let _env_ be the LexicalEnvironment of the running execution context.\n        1. Let _classEnv_ be NewDeclarativeEnvironment(_env_).\n        1. If _classBinding_ is not *undefined*, then\n          1. Perform ! _classEnv_.CreateImmutableBinding(_classBinding_, *true*).\n        1. Let _outerPrivateEnvironment_ be the running execution context's PrivateEnvironment.\n        1. Let _classPrivateEnvironment_ be NewPrivateEnvironment(_outerPrivateEnvironment_).\n        1. If |ClassBody| is present, then\n          1. For each String _dn_ of the PrivateBoundIdentifiers of |ClassBody|, do\n            1. If _classPrivateEnvironment_.[[Names]] contains a Private Name _pn_ such that _pn_.[[Description]] is _dn_, then\n              1. Assert: This is only possible for getter/setter pairs.\n            1. Else,\n              1. Let _name_ be a new Private Name whose [[Description]] is _dn_.\n              1. Append _name_ to _classPrivateEnvironment_.[[Names]].\n        1. If |ClassHeritage| is not present, then\n          1. Let _protoParent_ be %Object.prototype%.\n          1. Let _constructorParent_ be %Function.prototype%.\n        1. Else,\n          1. Set the running execution context's LexicalEnvironment to _classEnv_.\n          1. NOTE: The running execution context's PrivateEnvironment is _outerPrivateEnvironment_ when evaluating |ClassHeritage|.\n          1. Let _superclassRef_ be Completion(Evaluation of |ClassHeritage|).\n          1. Set the running execution context's LexicalEnvironment to _env_.\n          1. Let _superclass_ be ? GetValue(? _superclassRef_).\n          1. If _superclass_ is *null*, then\n            1. Let _protoParent_ be *null*.\n            1. Let _constructorParent_ be %Function.prototype%.\n          1. Else if IsConstructor(_superclass_) is *false*, then\n            1. Throw a *TypeError* exception.\n          1. Else,\n            1. Let _protoParent_ be ? Get(_superclass_, *\"prototype\"*).\n            1. If _protoParent_ is not an Object and _protoParent_ is not *null*, throw a *TypeError* exception.\n            1. Let _constructorParent_ be _superclass_.\n        1. Let _proto_ be OrdinaryObjectCreate(_protoParent_).\n        1. If |ClassBody| is not present, let _constructor_ be ~empty~.\n        1. Else, let _constructor_ be ConstructorMethod of |ClassBody|.\n        1. Set the running execution context's LexicalEnvironment to _classEnv_.\n        1. Set the running execution context's PrivateEnvironment to _classPrivateEnvironment_.\n        1. If _constructor_ is ~empty~, then\n          1. Let _defaultConstructor_ be a new Abstract Closure with no parameters that captures nothing and performs the following steps when called:\n            1. Let _args_ be the List of arguments that was passed to this function by [[Call]] or [[Construct]].\n            1. If NewTarget is *undefined*, throw a *TypeError* exception.\n            1. Let _F_ be the active function object.\n            1. If _F_.[[ConstructorKind]] is ~derived~, then\n              1. NOTE: This branch behaves similarly to `constructor(...args) { super(...args); }`. The most notable distinction is that while the aforementioned ECMAScript source text observably calls the @@iterator method on `%Array.prototype%`, this function does not.\n              1. Let _func_ be ! _F_.[[GetPrototypeOf]]().\n              1. If IsConstructor(_func_) is *false*, throw a *TypeError* exception.\n              1. Let _result_ be ? Construct(_func_, _args_, NewTarget).\n            1. Else,\n              1. NOTE: This branch behaves similarly to `constructor() {}`.\n              1. Let _result_ be ? OrdinaryCreateFromConstructor(NewTarget, *\"%Object.prototype%\"*).\n            1. Perform ? InitializeInstanceElements(_result_, _F_).\n            1. Return _result_.\n          1. Let _F_ be CreateBuiltinFunction(_defaultConstructor_, 0, _className_, ¬´ [[ConstructorKind]], [[SourceText]] ¬ª, the current Realm Record, _constructorParent_).\n        1. Else,\n          1. Let _constructorInfo_ be ! DefineMethod of _constructor_ with arguments _proto_ and _constructorParent_.\n          1. Let _F_ be _constructorInfo_.[[Closure]].\n          1. Perform MakeClassConstructor(_F_).\n          1. Perform SetFunctionName(_F_, _className_).\n        1. Perform MakeConstructor(_F_, *false*, _proto_).\n        1. If |ClassHeritage| is present, set _F_.[[ConstructorKind]] to ~derived~.\n        1. Perform ! DefineMethodProperty(_proto_, *\"constructor\"*, _F_, *false*).\n        1. If |ClassBody| is not present, let _elements_ be a new empty List.\n        1. Else, let _elements_ be NonConstructorElements of |ClassBody|.\n        1. Let _instancePrivateMethods_ be a new empty List.\n        1. Let _staticPrivateMethods_ be a new empty List.\n        1. Let _instanceFields_ be a new empty List.\n        1. Let _staticElements_ be a new empty List.\n        1. For each |ClassElement| _e_ of _elements_, do\n          1. If IsStatic of _e_ is *false*, then\n            1. Let _element_ be Completion(ClassElementEvaluation of _e_ with argument _proto_).\n          1. Else,\n            1. Let _element_ be Completion(ClassElementEvaluation of _e_ with argument _F_).\n          1. If _element_ is an abrupt completion, then\n            1. Set the running execution context's LexicalEnvironment to _env_.\n            1. Set the running execution context's PrivateEnvironment to _outerPrivateEnvironment_.\n            1. Return ? _element_.\n          1. Set _element_ to ! _element_.\n          1. If _element_ is a PrivateElement, then\n            1. Assert: _element_.[[Kind]] is either ~method~ or ~accessor~.\n            1. If IsStatic of _e_ is *false*, let _container_ be _instancePrivateMethods_.\n            1. Else, let _container_ be _staticPrivateMethods_.\n            1. If _container_ contains a PrivateElement _pe_ such that _pe_.[[Key]] is _element_.[[Key]], then\n              1. Assert: _element_.[[Kind]] and _pe_.[[Kind]] are both ~accessor~.\n              1. If _element_.[[Get]] is *undefined*, then\n                1. Let _combined_ be PrivateElement { [[Key]]: _element_.[[Key]], [[Kind]]: ~accessor~, [[Get]]: _pe_.[[Get]], [[Set]]: _element_.[[Set]] }.\n              1. Else,\n                1. Let _combined_ be PrivateElement { [[Key]]: _element_.[[Key]], [[Kind]]: ~accessor~, [[Get]]: _element_.[[Get]], [[Set]]: _pe_.[[Set]] }.\n              1. Replace _pe_ in _container_ with _combined_.\n            1. Else,\n              1. Append _element_ to _container_.\n          1. Else if _element_ is a ClassFieldDefinition Record, then\n            1. If IsStatic of _e_ is *false*, append _element_ to _instanceFields_.\n            1. Else, append _element_ to _staticElements_.\n          1. Else if _element_ is a ClassStaticBlockDefinition Record, then\n            1. Append _element_ to _staticElements_.\n        1. Set the running execution context's LexicalEnvironment to _env_.\n        1. If _classBinding_ is not *undefined*, then\n          1. Perform ! _classEnv_.InitializeBinding(_classBinding_, _F_).\n        1. Set _F_.[[PrivateMethods]] to _instancePrivateMethods_.\n        1. Set _F_.[[Fields]] to _instanceFields_.\n        1. For each PrivateElement _method_ of _staticPrivateMethods_, do\n          1. Perform ! PrivateMethodOrAccessorAdd(_F_, _method_).\n        1. For each element _elementRecord_ of _staticElements_, do\n          1. If _elementRecord_ is a ClassFieldDefinition Record, then\n            1. Let _result_ be Completion(DefineField(_F_, _elementRecord_)).\n          1. Else,\n            1. Assert: _elementRecord_ is a ClassStaticBlockDefinition Record.\n            1. Let _result_ be Completion(Call(_elementRecord_.[[BodyFunction]], _F_)).\n          1. If _result_ is an abrupt completion, then\n            1. Set the running execution context's PrivateEnvironment to _outerPrivateEnvironment_.\n            1. Return ? _result_.\n        1. Set the running execution context's PrivateEnvironment to _outerPrivateEnvironment_.\n        1. Return _F_.\n      ",
  "INTRINSICS.RegExp.prototype[@@match]" : "\n          1. Let _rx_ be the *this* value.\n          1. If _rx_ is not an Object, throw a *TypeError* exception.\n          1. Let _S_ be ? ToString(_string_).\n          1. Let _flags_ be ? ToString(? Get(_rx_, *\"flags\"*)).\n          1. If _flags_ does not contain *\"g\"*, then\n            1. Return ? RegExpExec(_rx_, _S_).\n          1. Else,\n            1. If _flags_ contains *\"u\"* or _flags_ contains *\"v\"*, let _fullUnicode_ be *true*. Otherwise, let _fullUnicode_ be *false*.\n            1. Perform ? Set(_rx_, *\"lastIndex\"*, *+0*<sub>ùîΩ</sub>, *true*).\n            1. Let _A_ be ! ArrayCreate(0).\n            1. Let _n_ be 0.\n            1. Repeat,\n              1. Let _result_ be ? RegExpExec(_rx_, _S_).\n              1. If _result_ is *null*, then\n                1. If _n_ = 0, return *null*.\n                1. Return _A_.\n              1. Else,\n                1. Let _matchStr_ be ? ToString(? Get(_result_, *\"0\"*)).\n                1. Perform ! CreateDataPropertyOrThrow(_A_, ! ToString(ùîΩ(_n_)), _matchStr_).\n                1. If _matchStr_ is the empty String, then\n                  1. Let _thisIndex_ be ‚Ñù(? ToLength(? Get(_rx_, *\"lastIndex\"*))).\n                  1. Let _nextIndex_ be AdvanceStringIndex(_S_, _thisIndex_, _fullUnicode_).\n                  1. Perform ? Set(_rx_, *\"lastIndex\"*, ùîΩ(_nextIndex_), *true*).\n                1. Set _n_ to _n_ + 1.\n        ",
  "UnaryExpression[4,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "Quantifier[0,0].CompileQuantifier" : "\n          1. Let _qp_ be CompileQuantifierPrefix of |QuantifierPrefix|.\n          1. Return the Record { [[Min]]: _qp_.[[Min]], [[Max]]: _qp_.[[Max]], [[Greedy]]: *true* }.\n        ",
  "Record[FunctionEnvironmentRecord].BindThisValue" : "\n            1. Assert: _envRec_.[[ThisBindingStatus]] is not ~lexical~.\n            1. If _envRec_.[[ThisBindingStatus]] is ~initialized~, throw a *ReferenceError* exception.\n            1. Set _envRec_.[[ThisValue]] to _V_.\n            1. Set _envRec_.[[ThisBindingStatus]] to ~initialized~.\n            1. Return _V_.\n          ",
  "INTRINSICS.Array" : "\n          1. If NewTarget is *undefined*, let _newTarget_ be the active function object; else let _newTarget_ be NewTarget.\n          1. Let _proto_ be ? GetPrototypeFromConstructor(_newTarget_, *\"%Array.prototype%\"*).\n          1. Let _numberOfArgs_ be the number of elements in _values_.\n          1. If _numberOfArgs_ = 0, then\n            1. Return ! ArrayCreate(0, _proto_).\n          1. Else if _numberOfArgs_ = 1, then\n            1. Let _len_ be _values_[0].\n            1. Let _array_ be ! ArrayCreate(0, _proto_).\n            1. If _len_ is not a Number, then\n              1. Perform ! CreateDataPropertyOrThrow(_array_, *\"0\"*, _len_).\n              1. Let _intLen_ be *1*<sub>ùîΩ</sub>.\n            1. Else,\n              1. Let _intLen_ be ! ToUint32(_len_).\n              1. If SameValueZero(_intLen_, _len_) is *false*, throw a *RangeError* exception.\n            1. Perform ! Set(_array_, *\"length\"*, _intLen_, *true*).\n            1. Return _array_.\n          1. Else,\n            1. Assert: _numberOfArgs_ ‚â• 2.\n            1. Let _array_ be ? ArrayCreate(_numberOfArgs_, _proto_).\n            1. Let _k_ be 0.\n            1. Repeat, while _k_ < _numberOfArgs_,\n              1. Let _Pk_ be ! ToString(ùîΩ(_k_)).\n              1. Let _itemK_ be _values_[_k_].\n              1. Perform ! CreateDataPropertyOrThrow(_array_, _Pk_, _itemK_).\n              1. Set _k_ to _k_ + 1.\n            1. Assert: The mathematical value of _array_'s *\"length\"* property is _numberOfArgs_.\n            1. Return _array_.\n        ",
  "ThisBooleanValue" : "\n            1. If _value_ is a Boolean, return _value_.\n            1. If _value_ is an Object and _value_ has a [[BooleanData]] internal slot, then\n              1. Let _b_ be _value_.[[BooleanData]].\n              1. Assert: _b_ is a Boolean.\n              1. Return _b_.\n            1. Throw a *TypeError* exception.\n          ",
  "INTRINSICS.Array.prototype.lastIndexOf" : "\n          1. Let _O_ be ? ToObject(*this* value).\n          1. Let _len_ be ? LengthOfArrayLike(_O_).\n          1. If _len_ = 0, return *-1*<sub>ùîΩ</sub>.\n          1. If _fromIndex_ is present, let _n_ be ? ToIntegerOrInfinity(_fromIndex_); else let _n_ be _len_ - 1.\n          1. If _n_ = -‚àû, return *-1*<sub>ùîΩ</sub>.\n          1. If _n_ ‚â• 0, then\n            1. Let _k_ be min(_n_, _len_ - 1).\n          1. Else,\n            1. Let _k_ be _len_ + _n_.\n          1. Repeat, while _k_ ‚â• 0,\n            1. Let _kPresent_ be ? HasProperty(_O_, ! ToString(ùîΩ(_k_))).\n            1. If _kPresent_ is *true*, then\n              1. Let _elementK_ be ? Get(_O_, ! ToString(ùîΩ(_k_))).\n              1. If IsStrictlyEqual(_searchElement_, _elementK_) is *true*, return ùîΩ(_k_).\n            1. Set _k_ to _k_ - 1.\n          1. Return *-1*<sub>ùîΩ</sub>.\n        ",
  "Term[2,0].CompileSubpattern" : "\n          1. Let _m_ be CompileAtom of |Atom| with arguments _rer_ and _direction_.\n          1. Let _q_ be CompileQuantifier of |Quantifier|.\n          1. Assert: _q_.[[Min]] ‚â§ _q_.[[Max]].\n          1. Let _parenIndex_ be CountLeftCapturingParensBefore(|Term|).\n          1. Let _parenCount_ be CountLeftCapturingParensWithin(|Atom|).\n          1. Return a new Matcher with parameters (_x_, _c_) that captures _m_, _q_, _parenIndex_, and _parenCount_ and performs the following steps when called:\n            1. Assert: _x_ is a MatchState.\n            1. Assert: _c_ is a MatcherContinuation.\n            1. Return RepeatMatcher(_m_, _q_.[[Min]], _q_.[[Max]], _q_.[[Greedy]], _x_, _c_, _parenIndex_, _parenCount_).\n        ",
  "AssignmentExpression[2,0].IsFunctionDefinition" : "\n        1. Return *true*.\n      ",
  "AsyncFunctionDeclaration[1,0].BoundNames" : "\n        1. Return ¬´ *\"\\*default\\*\"* ¬ª.\n      ",
  "ModuleItemList[1,0].LexicallyDeclaredNames" : "\n        1. Let _names1_ be LexicallyDeclaredNames of |ModuleItemList|.\n        1. Let _names2_ be LexicallyDeclaredNames of |ModuleItem|.\n        1. Return the list-concatenation of _names1_ and _names2_.\n      ",
  "DoWhileStatement[0,0].ContainsUndefinedContinueTarget" : "\n        1. Return ContainsUndefinedContinueTarget of |Statement| with arguments _iterationSet_ and ¬´ ¬ª.\n      ",
  "TemplateSpans[0,0].SubstitutionEvaluation" : "\n          1. Return a new empty List.\n        ",
  "ValidateNonRevokedProxy" : "\n        1. If _proxy_.[[ProxyTarget]] is *null*, throw a *TypeError* exception.\n        1. Assert: _proxy_.[[ProxyHandler]] is not *null*.\n        1. Return ~unused~.\n      ",
  "INTRINSICS._TypedArray_" : "\n          1. If NewTarget is *undefined*, throw a *TypeError* exception.\n          1. Let _constructorName_ be the String value of the Constructor Name value specified in <emu-xref href=\"#table-the-typedarray-constructors\"></emu-xref> for this <var>TypedArray</var> constructor.\n          1. Let _proto_ be <code>\"%<var>TypedArray</var>.prototype%\"</code>.\n          1. Let _numberOfArgs_ be the number of elements in _args_.\n          1. If _numberOfArgs_ = 0, then\n            1. Return ? AllocateTypedArray(_constructorName_, NewTarget, _proto_, 0).\n          1. Else,\n            1. Let _firstArgument_ be _args_[0].\n            1. If _firstArgument_ is an Object, then\n              1. Let _O_ be ? AllocateTypedArray(_constructorName_, NewTarget, _proto_).\n              1. If _firstArgument_ has a [[TypedArrayName]] internal slot, then\n                1. Perform ? InitializeTypedArrayFromTypedArray(_O_, _firstArgument_).\n              1. Else if _firstArgument_ has an [[ArrayBufferData]] internal slot, then\n                1. If _numberOfArgs_ > 1, let _byteOffset_ be _args_[1]; else let _byteOffset_ be *undefined*.\n                1. If _numberOfArgs_ > 2, let _length_ be _args_[2]; else let _length_ be *undefined*.\n                1. Perform ? InitializeTypedArrayFromArrayBuffer(_O_, _firstArgument_, _byteOffset_, _length_).\n              1. Else,\n                1. Assert: _firstArgument_ is an Object and _firstArgument_ does not have either a [[TypedArrayName]] or an [[ArrayBufferData]] internal slot.\n                1. Let _usingIterator_ be ? GetMethod(_firstArgument_, @@iterator).\n                1. If _usingIterator_ is not *undefined*, then\n                  1. Let _values_ be ? IteratorToList(? GetIteratorFromMethod(_firstArgument_, _usingIterator_)).\n                  1. Perform ? InitializeTypedArrayFromList(_O_, _values_).\n                1. Else,\n                  1. NOTE: _firstArgument_ is not an Iterable so assume it is already an array-like object.\n                  1. Perform ? InitializeTypedArrayFromArrayLike(_O_, _firstArgument_).\n              1. Return _O_.\n            1. Else,\n              1. Assert: _firstArgument_ is not an Object.\n              1. Let _elementLength_ be ? ToIndex(_firstArgument_).\n              1. Return ? AllocateTypedArray(_constructorName_, NewTarget, _proto_, _elementLength_).\n        ",
  "Record[FunctionEnvironmentRecord].HasThisBinding" : "\n            1. If _envRec_.[[ThisBindingStatus]] is ~lexical~, return *false*; otherwise, return *true*.\n          ",
  "GeneratorDeclaration[0,0].IsConstantDeclaration" : "\n        1. Return *false*.\n      ",
  "TimeZoneString" : "\n            1. Let _systemTimeZoneIdentifier_ be SystemTimeZoneIdentifier().\n            1. If IsTimeZoneOffsetString(_systemTimeZoneIdentifier_) is *true*, then\n              1. Let _offsetNs_ be ParseTimeZoneOffsetString(_systemTimeZoneIdentifier_).\n            1. Else,\n              1. Let _offsetNs_ be GetNamedTimeZoneOffsetNanoseconds(_systemTimeZoneIdentifier_, ‚Ñ§(‚Ñù(_tv_) √ó 10<sup>6</sup>)).\n            1. Let _offset_ be ùîΩ(truncate(_offsetNs_ / 10<sup>6</sup>)).\n            1. If _offset_ is *+0*<sub>ùîΩ</sub> or _offset_ > *+0*<sub>ùîΩ</sub>, then\n              1. Let _offsetSign_ be *\"+\"*.\n              1. Let _absOffset_ be _offset_.\n            1. Else,\n              1. Let _offsetSign_ be *\"-\"*.\n              1. Let _absOffset_ be -_offset_.\n            1. Let _offsetMin_ be ToZeroPaddedDecimalString(‚Ñù(MinFromTime(_absOffset_)), 2).\n            1. Let _offsetHour_ be ToZeroPaddedDecimalString(‚Ñù(HourFromTime(_absOffset_)), 2).\n            1. Let _tzName_ be an implementation-defined string that is either the empty String or the string-concatenation of the code unit 0x0020 (SPACE), the code unit 0x0028 (LEFT PARENTHESIS), an implementation-defined timezone name, and the code unit 0x0029 (RIGHT PARENTHESIS).\n            1. Return the string-concatenation of _offsetSign_, _offsetHour_, _offsetMin_, and _tzName_.\n          ",
  "ImportSpecifier[1,0].ImportEntriesForModule" : "\n          1. Let _importName_ be the StringValue of |ModuleExportName|.\n          1. Let _localName_ be the StringValue of |ImportedBinding|.\n          1. Let _entry_ be the ImportEntry Record { [[ModuleRequest]]: _module_, [[ImportName]]: _importName_, [[LocalName]]: _localName_ }.\n          1. Return ¬´ _entry_ ¬ª.\n        ",
  "PrimaryExpression[8,0].IsIdentifierRef" : "\n        1. Return *false*.\n      ",
  "Catch[0,0].HasCallInTailPosition" : "\n        1. Return HasCallInTailPosition of |Block| with argument _call_.\n      ",
  "ClassElementName[1,0].Evaluation" : "\n        1. Let _privateIdentifier_ be StringValue of |PrivateIdentifier|.\n        1. Let _privateEnvRec_ be the running execution context's PrivateEnvironment.\n        1. Let _names_ be _privateEnvRec_.[[Names]].\n        1. Assert: Exactly one element of _names_ is a Private Name whose [[Description]] is _privateIdentifier_.\n        1. Let _privateName_ be the Private Name in _names_ whose [[Description]] is _privateIdentifier_.\n        1. Return _privateName_.\n      ",
  "FulfillPromise" : "\n          1. Assert: The value of _promise_.[[PromiseState]] is ~pending~.\n          1. Let _reactions_ be _promise_.[[PromiseFulfillReactions]].\n          1. Set _promise_.[[PromiseResult]] to _value_.\n          1. Set _promise_.[[PromiseFulfillReactions]] to *undefined*.\n          1. Set _promise_.[[PromiseRejectReactions]] to *undefined*.\n          1. Set _promise_.[[PromiseState]] to ~fulfilled~.\n          1. Perform TriggerPromiseReactions(_reactions_, _value_).\n          1. Return ~unused~.\n        ",
  "ExportDeclaration[3,0].ExportedNames" : "\n          1. Return the BoundNames of |Declaration|.\n        ",
  "ArrayBindingPattern[2,0].ContainsExpression" : "\n        1. Return ContainsExpression of |BindingElementList|.\n      ",
  "CaseClause[0,1].VarScopedDeclarations" : "\n        1. If the |StatementList| is present, return the VarScopedDeclarations of |StatementList|.\n        1. Return a new empty List.\n      ",
  "ComputedPropertyName[0,0].PropName" : "\n        1. Return ~empty~.\n      ",
  "INTRINSICS.yet:`Promise.all`ResolveElementFunction" : "\n            1. Let _F_ be the active function object.\n            1. If _F_.[[AlreadyCalled]] is *true*, return *undefined*.\n            1. Set _F_.[[AlreadyCalled]] to *true*.\n            1. Let _index_ be _F_.[[Index]].\n            1. Let _values_ be _F_.[[Values]].\n            1. Let _promiseCapability_ be _F_.[[Capability]].\n            1. Let _remainingElementsCount_ be _F_.[[RemainingElements]].\n            1. Set _values_[_index_] to _x_.\n            1. Set _remainingElementsCount_.[[Value]] to _remainingElementsCount_.[[Value]] - 1.\n            1. If _remainingElementsCount_.[[Value]] = 0, then\n              1. Let _valuesArray_ be CreateArrayFromList(_values_).\n              1. Return ? Call(_promiseCapability_.[[Resolve]], *undefined*, ¬´ _valuesArray_ ¬ª).\n            1. Return *undefined*.\n          ",
  "RegularExpressionLiteral[0,0].FlagText" : "\n          1. Return the source text that was recognized as |RegularExpressionFlags|.\n        ",
  "OrdinaryOwnPropertyKeys" : "\n          1. Let _keys_ be a new empty List.\n          1. For each own property key _P_ of _O_ such that _P_ is an array index, in ascending numeric index order, do\n            1. Append _P_ to _keys_.\n          1. For each own property key _P_ of _O_ such that _P_ is a String and _P_ is not an array index, in ascending chronological order of property creation, do\n            1. Append _P_ to _keys_.\n          1. For each own property key _P_ of _O_ such that _P_ is a Symbol, in ascending chronological order of property creation, do\n            1. Append _P_ to _keys_.\n          1. Return _keys_.\n        ",
  "Statement[13,0].VarScopedDeclarations" : "\n        1. Return a new empty List.\n      ",
  "OptionalChain[0,0].ChainEvaluation" : "\n          1. Let _thisChain_ be this |OptionalChain|.\n          1. Let _tailCall_ be IsInTailPosition(_thisChain_).\n          1. Return ? EvaluateCall(_baseValue_, _baseReference_, |Arguments|, _tailCall_).\n        ",
  "ForStatement[1,1].VarDeclaredNames" : "\n        1. Let _names1_ be BoundNames of |VariableDeclarationList|.\n        1. Let _names2_ be VarDeclaredNames of |Statement|.\n        1. Return the list-concatenation of _names1_ and _names2_.\n      ",
  "ForStatement[2,0].VarScopedDeclarations" : "\n        1. Return the VarScopedDeclarations of |Statement|.\n      ",
  "ClassElement[1,0].IsStatic" : "\n        1. Return *true*.\n      ",
  "ValidateAndApplyPropertyDescriptor" : "\n          1. Assert: IsPropertyKey(_P_) is *true*.\n          1. If _current_ is *undefined*, then\n            1. If _extensible_ is *false*, return *false*.\n            1. If _O_ is *undefined*, return *true*.\n            1. If IsAccessorDescriptor(_Desc_) is *true*, then\n              1. Create an own accessor property named _P_ of object _O_ whose [[Get]], [[Set]], [[Enumerable]], and [[Configurable]] attributes are set to the value of the corresponding field in _Desc_ if _Desc_ has that field, or to the attribute's <emu-xref href=\"#table-object-property-attributes\">default value</emu-xref> otherwise.\n            1. Else,\n              1. Create an own data property named _P_ of object _O_ whose [[Value]], [[Writable]], [[Enumerable]], and [[Configurable]] attributes are set to the value of the corresponding field in _Desc_ if _Desc_ has that field, or to the attribute's <emu-xref href=\"#table-object-property-attributes\">default value</emu-xref> otherwise.\n            1. Return *true*.\n          1. Assert: _current_ is a fully populated Property Descriptor.\n          1. If _Desc_ does not have any fields, return *true*.\n          1. If _current_.[[Configurable]] is *false*, then\n            1. If _Desc_ has a [[Configurable]] field and _Desc_.[[Configurable]] is *true*, return *false*.\n            1. If _Desc_ has an [[Enumerable]] field and _Desc_.[[Enumerable]] is not _current_.[[Enumerable]], return *false*.\n            1. If IsGenericDescriptor(_Desc_) is *false* and IsAccessorDescriptor(_Desc_) is not IsAccessorDescriptor(_current_), return *false*.\n            1. If IsAccessorDescriptor(_current_) is *true*, then\n              1. If _Desc_ has a [[Get]] field and SameValue(_Desc_.[[Get]], _current_.[[Get]]) is *false*, return *false*.\n              1. If _Desc_ has a [[Set]] field and SameValue(_Desc_.[[Set]], _current_.[[Set]]) is *false*, return *false*.\n            1. Else if _current_.[[Writable]] is *false*, then\n              1. If _Desc_ has a [[Writable]] field and _Desc_.[[Writable]] is *true*, return *false*.\n              1. If _Desc_ has a [[Value]] field and SameValue(_Desc_.[[Value]], _current_.[[Value]]) is *false*, return *false*.\n          1. If _O_ is not *undefined*, then\n            1. If IsDataDescriptor(_current_) is *true* and IsAccessorDescriptor(_Desc_) is *true*, then\n              1. If _Desc_ has a [[Configurable]] field, let _configurable_ be _Desc_.[[Configurable]]; else let _configurable_ be _current_.[[Configurable]].\n              1. If _Desc_ has a [[Enumerable]] field, let _enumerable_ be _Desc_.[[Enumerable]]; else let _enumerable_ be _current_.[[Enumerable]].\n              1. Replace the property named _P_ of object _O_ with an accessor property whose [[Configurable]] and [[Enumerable]] attributes are set to _configurable_ and _enumerable_, respectively, and whose [[Get]] and [[Set]] attributes are set to the value of the corresponding field in _Desc_ if _Desc_ has that field, or to the attribute's <emu-xref href=\"#table-object-property-attributes\">default value</emu-xref> otherwise.\n            1. Else if IsAccessorDescriptor(_current_) is *true* and IsDataDescriptor(_Desc_) is *true*, then\n              1. If _Desc_ has a [[Configurable]] field, let _configurable_ be _Desc_.[[Configurable]]; else let _configurable_ be _current_.[[Configurable]].\n              1. If _Desc_ has a [[Enumerable]] field, let _enumerable_ be _Desc_.[[Enumerable]]; else let _enumerable_ be _current_.[[Enumerable]].\n              1. Replace the property named _P_ of object _O_ with a data property whose [[Configurable]] and [[Enumerable]] attributes are set to _configurable_ and _enumerable_, respectively, and whose [[Value]] and [[Writable]] attributes are set to the value of the corresponding field in _Desc_ if _Desc_ has that field, or to the attribute's <emu-xref href=\"#table-object-property-attributes\">default value</emu-xref> otherwise.\n            1. Else,\n              1. For each field of _Desc_, set the corresponding attribute of the property named _P_ of object _O_ to the value of the field.\n          1. Return *true*.\n        ",
  "INTRINSICS.Promise.reject" : "\n          1. Let _C_ be the *this* value.\n          1. Let _promiseCapability_ be ? NewPromiseCapability(_C_).\n          1. Perform ? Call(_promiseCapability_.[[Reject]], *undefined*, ¬´ _r_ ¬ª).\n          1. Return _promiseCapability_.[[Promise]].\n        ",
  "StatementListItem[0,0].TopLevelLexicallyScopedDeclarations" : "\n        1. Return a new empty List.\n      ",
  "AssignmentExpression[3,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "GeneratorDeclaration[0,0].InstantiateGeneratorFunctionObject" : "\n        1. Let _name_ be StringValue of |BindingIdentifier|.\n        1. Let _sourceText_ be the source text matched by |GeneratorDeclaration|.\n        1. Let _F_ be OrdinaryFunctionCreate(%GeneratorFunction.prototype%, _sourceText_, |FormalParameters|, |GeneratorBody|, ~non-lexical-this~, _env_, _privateEnv_).\n        1. Perform SetFunctionName(_F_, _name_).\n        1. Let _prototype_ be OrdinaryObjectCreate(%GeneratorFunction.prototype.prototype%).\n        1. Perform ! DefinePropertyOrThrow(_F_, *\"prototype\"*, PropertyDescriptor { [[Value]]: _prototype_, [[Writable]]: *true*, [[Enumerable]]: *false*, [[Configurable]]: *false* }).\n        1. Return _F_.\n      ",
  "ExponentiationExpression[1,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "FunctionExpression[0,0].IsFunctionDefinition" : "\n        1. Return *true*.\n      ",
  "ClassUnion[0,0].CompileToCharSet" : "\n          1. Let _A_ be CompileToCharSet of |ClassSetRange| with argument _rer_.\n          1. If |ClassUnion| is present, then\n            1. Let _B_ be CompileToCharSet of |ClassUnion| with argument _rer_.\n            1. Return the union of CharSets _A_ and _B_.\n          1. Return _A_.\n        ",
  "BigInt::add" : "\n            1. Return _x_ + _y_.\n          ",
  "CanonicalNumericIndexString" : "\n        1. If _argument_ is *\"-0\"*, return *-0*<sub>ùîΩ</sub>.\n        1. Let _n_ be ! ToNumber(_argument_).\n        1. If ! ToString(_n_) is _argument_, return _n_.\n        1. Return *undefined*.\n      ",
  "INTRINSICS.Array.prototype.splice" : "\n          1. Let _O_ be ? ToObject(*this* value).\n          1. Let _len_ be ? LengthOfArrayLike(_O_).\n          1. Let _relativeStart_ be ? ToIntegerOrInfinity(_start_).\n          1. If _relativeStart_ = -‚àû, let _actualStart_ be 0.\n          1. Else if _relativeStart_ < 0, let _actualStart_ be max(_len_ + _relativeStart_, 0).\n          1. Else, let _actualStart_ be min(_relativeStart_, _len_).\n          1. Let _itemCount_ be the number of elements in _items_.\n          1. If _start_ is not present, then\n            1. Let _actualDeleteCount_ be 0.\n          1. Else if _deleteCount_ is not present, then\n            1. Let _actualDeleteCount_ be _len_ - _actualStart_.\n          1. Else,\n            1. Let _dc_ be ? ToIntegerOrInfinity(_deleteCount_).\n            1. Let _actualDeleteCount_ be the result of clamping _dc_ between 0 and _len_ - _actualStart_.\n          1. If _len_ + _itemCount_ - _actualDeleteCount_ > 2<sup>53</sup> - 1, throw a *TypeError* exception.\n          1. Let _A_ be ? ArraySpeciesCreate(_O_, _actualDeleteCount_).\n          1. Let _k_ be 0.\n          1. Repeat, while _k_ < _actualDeleteCount_,\n            1. Let _from_ be ! ToString(ùîΩ(_actualStart_ + _k_)).\n            1. If ? HasProperty(_O_, _from_) is *true*, then\n              1. Let _fromValue_ be ? Get(_O_, _from_).\n              1. Perform ? CreateDataPropertyOrThrow(_A_, ! ToString(ùîΩ(_k_)), _fromValue_).\n            1. Set _k_ to _k_ + 1.\n          1. [id=\"step-array-proto-splice-set-length\"] Perform ? Set(_A_, *\"length\"*, ùîΩ(_actualDeleteCount_), *true*).\n          1. If _itemCount_ < _actualDeleteCount_, then\n            1. Set _k_ to _actualStart_.\n            1. Repeat, while _k_ < (_len_ - _actualDeleteCount_),\n              1. Let _from_ be ! ToString(ùîΩ(_k_ + _actualDeleteCount_)).\n              1. Let _to_ be ! ToString(ùîΩ(_k_ + _itemCount_)).\n              1. If ? HasProperty(_O_, _from_) is *true*, then\n                1. Let _fromValue_ be ? Get(_O_, _from_).\n                1. Perform ? Set(_O_, _to_, _fromValue_, *true*).\n              1. Else,\n                1. Perform ? DeletePropertyOrThrow(_O_, _to_).\n              1. Set _k_ to _k_ + 1.\n            1. Set _k_ to _len_.\n            1. Repeat, while _k_ > (_len_ - _actualDeleteCount_ + _itemCount_),\n              1. Perform ? DeletePropertyOrThrow(_O_, ! ToString(ùîΩ(_k_ - 1))).\n              1. Set _k_ to _k_ - 1.\n          1. Else if _itemCount_ > _actualDeleteCount_, then\n            1. Set _k_ to (_len_ - _actualDeleteCount_).\n            1. Repeat, while _k_ > _actualStart_,\n              1. Let _from_ be ! ToString(ùîΩ(_k_ + _actualDeleteCount_ - 1)).\n              1. Let _to_ be ! ToString(ùîΩ(_k_ + _itemCount_ - 1)).\n              1. If ? HasProperty(_O_, _from_) is *true*, then\n                1. Let _fromValue_ be ? Get(_O_, _from_).\n                1. Perform ? Set(_O_, _to_, _fromValue_, *true*).\n              1. Else,\n                1. Perform ? DeletePropertyOrThrow(_O_, _to_).\n              1. Set _k_ to _k_ - 1.\n          1. Set _k_ to _actualStart_.\n          1. For each element _E_ of _items_, do\n            1. Perform ? Set(_O_, ! ToString(ùîΩ(_k_)), _E_, *true*).\n            1. Set _k_ to _k_ + 1.\n          1. [id=\"step-array-proto-splice-set-length-2\"] Perform ? Set(_O_, *\"length\"*, ùîΩ(_len_ - _actualDeleteCount_ + _itemCount_), *true*).\n          1. Return _A_.\n        ",
  "__APPEND_LIST__" : null,
  "ForStatement[2,0].ForLoopEvaluation" : "\n          1. Let _oldEnv_ be the running execution context's LexicalEnvironment.\n          1. Let _loopEnv_ be NewDeclarativeEnvironment(_oldEnv_).\n          1. Let _isConst_ be IsConstantDeclaration of |LexicalDeclaration|.\n          1. Let _boundNames_ be the BoundNames of |LexicalDeclaration|.\n          1. For each element _dn_ of _boundNames_, do\n            1. If _isConst_ is *true*, then\n              1. Perform ! _loopEnv_.CreateImmutableBinding(_dn_, *true*).\n            1. Else,\n              1. Perform ! _loopEnv_.CreateMutableBinding(_dn_, *false*).\n          1. Set the running execution context's LexicalEnvironment to _loopEnv_.\n          1. Let _forDcl_ be Completion(Evaluation of |LexicalDeclaration|).\n          1. If _forDcl_ is an abrupt completion, then\n            1. Set the running execution context's LexicalEnvironment to _oldEnv_.\n            1. Return ? _forDcl_.\n          1. If _isConst_ is *false*, let _perIterationLets_ be _boundNames_; otherwise let _perIterationLets_ be a new empty List.\n          1. If the first |Expression| is present, let _test_ be the first |Expression|; otherwise, let _test_ be ~empty~.\n          1. If the second |Expression| is present, let _increment_ be the second |Expression|; otherwise, let _increment_ be ~empty~.\n          1. Let _bodyResult_ be Completion(ForBodyEvaluation(_test_, _increment_, |Statement|, _perIterationLets_, _labelSet_)).\n          1. Set the running execution context's LexicalEnvironment to _oldEnv_.\n          1. Return ? _bodyResult_.\n        ",
  "IdentifierReference[1,0].StringValue" : "\n        1. Return *\"yield\"*.\n      ",
  "VariableDeclaration[0,0].BoundNames" : "\n        1. Return the BoundNames of |BindingIdentifier|.\n      ",
  "INTRINSICS.Date.prototype.getHours" : "\n          1. Let _dateObject_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_dateObject_, [[DateValue]]).\n          1. Let _t_ be _dateObject_.[[DateValue]].\n          1. If _t_ is *NaN*, return *NaN*.\n          1. Return HourFromTime(LocalTime(_t_)).\n        ",
  "ResolveThisBinding" : "\n        1. Let _envRec_ be GetThisEnvironment().\n        1. Return ? _envRec_.GetThisBinding().\n      ",
  "MemberExpression[6,0].IsIdentifierRef" : "\n        1. Return *false*.\n      ",
  "UnaryExpression[8,0].IsFunctionDefinition" : "\n        1. Return *false*.\n      ",
  "CaseClauses[1,0].VarScopedDeclarations" : "\n        1. Let _declarations1_ be VarScopedDeclarations of |CaseClauses|.\n        1. Let _declarations2_ be VarScopedDeclarations of |CaseClause|.\n        1. Return the list-concatenation of _declarations1_ and _declarations2_.\n      ",
  "INTRINSICS.Object.prototype.toString" : "\n          1. If the *this* value is *undefined*, return *\"[object Undefined]\"*.\n          1. If the *this* value is *null*, return *\"[object Null]\"*.\n          1. Let _O_ be ! ToObject(*this* value).\n          1. Let _isArray_ be ? IsArray(_O_).\n          1. If _isArray_ is *true*, let _builtinTag_ be *\"Array\"*.\n          1. Else if _O_ has a [[ParameterMap]] internal slot, let _builtinTag_ be *\"Arguments\"*.\n          1. Else if _O_ has a [[Call]] internal method, let _builtinTag_ be *\"Function\"*.\n          1. Else if _O_ has an [[ErrorData]] internal slot, let _builtinTag_ be *\"Error\"*.\n          1. Else if _O_ has a [[BooleanData]] internal slot, let _builtinTag_ be *\"Boolean\"*.\n          1. Else if _O_ has a [[NumberData]] internal slot, let _builtinTag_ be *\"Number\"*.\n          1. Else if _O_ has a [[StringData]] internal slot, let _builtinTag_ be *\"String\"*.\n          1. Else if _O_ has a [[DateValue]] internal slot, let _builtinTag_ be *\"Date\"*.\n          1. Else if _O_ has a [[RegExpMatcher]] internal slot, let _builtinTag_ be *\"RegExp\"*.\n          1. Else, let _builtinTag_ be *\"Object\"*.\n          1. Let _tag_ be ? Get(_O_, @@toStringTag).\n          1. If _tag_ is not a String, set _tag_ to _builtinTag_.\n          1. Return the string-concatenation of *\"[object \"*, _tag_, and *\"]\"*.\n        ",
  "Literal[2,0].Evaluation" : "\n          1. Return the NumericValue of |NumericLiteral| as defined in <emu-xref href=\"#sec-literals-numeric-literals\"></emu-xref>.\n        ",
  "GeneratorDeclaration[1,0].InstantiateGeneratorFunctionObject" : "\n        1. Let _sourceText_ be the source text matched by |GeneratorDeclaration|.\n        1. Let _F_ be OrdinaryFunctionCreate(%GeneratorFunction.prototype%, _sourceText_, |FormalParameters|, |GeneratorBody|, ~non-lexical-this~, _env_, _privateEnv_).\n        1. Perform SetFunctionName(_F_, *\"default\"*).\n        1. Let _prototype_ be OrdinaryObjectCreate(%GeneratorFunction.prototype.prototype%).\n        1. Perform ! DefinePropertyOrThrow(_F_, *\"prototype\"*, PropertyDescriptor { [[Value]]: _prototype_, [[Writable]]: *true*, [[Enumerable]]: *false*, [[Configurable]]: *false* }).\n        1. Return _F_.\n      ",
  "ForIn/OfHeadEvaluation" : "\n          1. Let _oldEnv_ be the running execution context's LexicalEnvironment.\n          1. If _uninitializedBoundNames_ is not empty, then\n            1. Assert: _uninitializedBoundNames_ has no duplicate entries.\n            1. Let _newEnv_ be NewDeclarativeEnvironment(_oldEnv_).\n            1. For each String _name_ of _uninitializedBoundNames_, do\n              1. Perform ! _newEnv_.CreateMutableBinding(_name_, *false*).\n            1. Set the running execution context's LexicalEnvironment to _newEnv_.\n          1. Let _exprRef_ be Completion(Evaluation of _expr_).\n          1. Set the running execution context's LexicalEnvironment to _oldEnv_.\n          1. Let _exprValue_ be ? GetValue(? _exprRef_).\n          1. If _iterationKind_ is ~enumerate~, then\n            1. If _exprValue_ is either *undefined* or *null*, then\n              1. Return Completion Record { [[Type]]: ~break~, [[Value]]: ~empty~, [[Target]]: ~empty~ }.\n            1. Let _obj_ be ! ToObject(_exprValue_).\n            1. Let _iterator_ be EnumerateObjectProperties(_obj_).\n            1. Let _nextMethod_ be ! GetV(_iterator_, *\"next\"*).\n            1. Return the Iterator Record { [[Iterator]]: _iterator_, [[NextMethod]]: _nextMethod_, [[Done]]: *false* }.\n          1. Else,\n            1. Assert: _iterationKind_ is either ~iterate~ or ~async-iterate~.\n            1. If _iterationKind_ is ~async-iterate~, let _iteratorKind_ be ~async~.\n            1. Else, let _iteratorKind_ be ~sync~.\n            1. Return ? GetIterator(_exprValue_, _iteratorKind_).\n        ",
  "ForStatement[1,3].VarScopedDeclarations" : "\n        1. Let _declarations1_ be VarScopedDeclarations of |VariableDeclarationList|.\n        1. Let _declarations2_ be VarScopedDeclarations of |Statement|.\n        1. Return the list-concatenation of _declarations1_ and _declarations2_.\n      ",
  "INTRINSICS.Array.prototype.reverse" : "\n          1. Let _O_ be ? ToObject(*this* value).\n          1. Let _len_ be ? LengthOfArrayLike(_O_).\n          1. Let _middle_ be floor(_len_ / 2).\n          1. Let _lower_ be 0.\n          1. Repeat, while _lower_ ‚â† _middle_,\n            1. Let _upper_ be _len_ - _lower_ - 1.\n            1. Let _upperP_ be ! ToString(ùîΩ(_upper_)).\n            1. Let _lowerP_ be ! ToString(ùîΩ(_lower_)).\n            1. Let _lowerExists_ be ? HasProperty(_O_, _lowerP_).\n            1. If _lowerExists_ is *true*, then\n              1. Let _lowerValue_ be ? Get(_O_, _lowerP_).\n            1. Let _upperExists_ be ? HasProperty(_O_, _upperP_).\n            1. If _upperExists_ is *true*, then\n              1. Let _upperValue_ be ? Get(_O_, _upperP_).\n            1. If _lowerExists_ is *true* and _upperExists_ is *true*, then\n              1. Perform ? Set(_O_, _lowerP_, _upperValue_, *true*).\n              1. Perform ? Set(_O_, _upperP_, _lowerValue_, *true*).\n            1. Else if _lowerExists_ is *false* and _upperExists_ is *true*, then\n              1. Perform ? Set(_O_, _lowerP_, _upperValue_, *true*).\n              1. Perform ? DeletePropertyOrThrow(_O_, _upperP_).\n            1. Else if _lowerExists_ is *true* and _upperExists_ is *false*, then\n              1. Perform ? DeletePropertyOrThrow(_O_, _lowerP_).\n              1. Perform ? Set(_O_, _upperP_, _lowerValue_, *true*).\n            1. Else,\n              1. Assert: _lowerExists_ and _upperExists_ are both *false*.\n              1. NOTE: No action is required.\n            1. Set _lower_ to _lower_ + 1.\n          1. Return _O_.\n        ",
  "UnicodeMatchProperty" : "\n            1. If _rer_.[[UnicodeSets]] is *true* and _p_ is a Unicode <emu-not-ref>property name</emu-not-ref> listed in the ‚Äú<emu-not-ref>Property name</emu-not-ref>‚Äù column of <emu-xref href=\"#table-binary-unicode-properties-of-strings\"></emu-xref>, then\n              1. Return the List of Unicode code points _p_.\n            1. Assert: _p_ is a Unicode <emu-not-ref>property name</emu-not-ref> or property alias listed in the ‚Äú<emu-not-ref>Property name</emu-not-ref> and aliases‚Äù column of <emu-xref href=\"#table-nonbinary-unicode-properties\"></emu-xref> or <emu-xref href=\"#table-binary-unicode-properties\"></emu-xref>.\n            1. Let _c_ be the canonical <emu-not-ref>property name</emu-not-ref> of _p_ as given in the ‚ÄúCanonical <emu-not-ref>property name</emu-not-ref>‚Äù column of the corresponding row.\n            1. Return the List of Unicode code points _c_.\n          ",
  "StrUnsignedDecimalLiteral[1,0].StringNumericValue" : "\n            1. Let _a_ be MV of the first |DecimalDigits|.\n            1. If the second |DecimalDigits| is present, then\n              1. Let _b_ be MV of the second |DecimalDigits|.\n              1. Let _n_ be the number of code points in the second |DecimalDigits|.\n            1. Else,\n              1. Let _b_ be 0.\n              1. Let _n_ be 0.\n            1. If |ExponentPart| is present, let _e_ be MV of |ExponentPart|. Otherwise, let _e_ be 0.\n            1. Return RoundMVResult((_a_ + (_b_ √ó 10<sup>-_n_</sup>)) √ó 10<sup>_e_</sup>).\n          ",
  "OptionalChain[1,0].ChainEvaluation" : "\n          1. If the source text matched by this |OptionalChain| is strict mode code, let _strict_ be *true*; else let _strict_ be *false*.\n          1. Return ? EvaluatePropertyAccessWithExpressionKey(_baseValue_, |Expression|, _strict_).\n        ",
  "MakeArgGetter:clo0" : "\n            1. Let _getterClosure_ be a new Abstract Closure with no parameters that captures _name_ and _env_ and performs the following steps when called:\n              1. Return _env_.GetBindingValue(_name_, *false*).\n            1. Let _getter_ be CreateBuiltinFunction(_getterClosure_, 0, *\"\"*, ¬´ ¬ª).\n            1. NOTE: _getter_ is never directly accessible to ECMAScript code.\n            1. Return _getter_.\n          ",
  "INTRINSICS.Object.setPrototypeOf" : "\n          1. Set _O_ to ? RequireObjectCoercible(_O_).\n          1. If _proto_ is not an Object and _proto_ is not *null*, throw a *TypeError* exception.\n          1. If _O_ is not an Object, return _O_.\n          1. Let _status_ be ? <emu-meta effects=\"user-code\">_O_.[[SetPrototypeOf]]</emu-meta>(_proto_).\n          1. If _status_ is *false*, throw a *TypeError* exception.\n          1. Return _O_.\n        ",
  "SwitchStatement[0,0].ContainsUndefinedContinueTarget" : "\n        1. Return ContainsUndefinedContinueTarget of |CaseBlock| with arguments _iterationSet_ and ¬´ ¬ª.\n      ",
  "ValidateAtomicAccessOnIntegerTypedArray" : "\n          1. If _waitable_ is not present, set _waitable_ to *false*.\n          1. Let _taRecord_ be ? ValidateIntegerTypedArray(_typedArray_, _waitable_).\n          1. Return ? ValidateAtomicAccess(_taRecord_, _requestIndex_).\n        ",
  "PrimaryExpression[4,0].IsFunctionDefinition" : "\n        1. Return *false*.\n      ",
  "Invoke" : "\n        1. If _argumentsList_ is not present, set _argumentsList_ to a new empty List.\n        1. Let _func_ be ? GetV(_V_, _P_).\n        1. Return ? Call(_func_, _V_, _argumentsList_).\n      ",
  "IdentifierName[1,0].IdentifierCodePoints" : "\n          1. Let _cps_ be IdentifierCodePoints of the derived |IdentifierName|.\n          1. Let _cp_ be IdentifierCodePoint of |IdentifierPart|.\n          1. Return the list-concatenation of _cps_ and ¬´ _cp_ ¬ª.\n        ",
  "ArrayBindingPattern[0,3].IteratorBindingInitialization" : "\n        1. If |Elision| is present, then\n          1. Perform ? IteratorDestructuringAssignmentEvaluation of |Elision| with argument _iteratorRecord_.\n        1. Return ? IteratorBindingInitialization of |BindingRestElement| with arguments _iteratorRecord_ and _environment_.\n      ",
  "MethodDefinition[5,0].PrivateBoundIdentifiers" : "\n        1. Return PrivateBoundIdentifiers of |ClassElementName|.\n      ",
  "ForStatement[0,4].ContainsUndefinedBreakTarget" : "\n        1. Return ContainsUndefinedBreakTarget of |Statement| with argument _labelSet_.\n      ",
  "ForStatement[2,1].ContainsUndefinedBreakTarget" : "\n        1. Return ContainsUndefinedBreakTarget of |Statement| with argument _labelSet_.\n      ",
  "Declaration[2,0].DeclarationPart" : "\n        1. Return |LexicalDeclaration|.\n      ",
  "ModuleBody[0,0].Evaluation" : "\n          1. Let _result_ be Completion(Evaluation of |ModuleItemList|).\n          1. If _result_ is a normal completion and _result_.[[Value]] is ~empty~, then\n            1. Return *undefined*.\n          1. Return ? _result_.\n        ",
  "ClassElement[0,0].ClassElementKind" : "\n        1. If PropName of |MethodDefinition| is *\"constructor\"*, return ~constructor-method~.\n        1. Return ~non-constructor-method~.\n      ",
  "MemberExpression[6,0].IsFunctionDefinition" : "\n        1. Return *false*.\n      ",
  "AsyncBlockStart" : "\n          1. Assert: _promiseCapability_ is a PromiseCapability Record.\n          1. Let _runningContext_ be the running execution context.\n          1. Let _closure_ be a new Abstract Closure with no parameters that captures _promiseCapability_ and _asyncBody_ and performs the following steps when called:\n            1. Let _acAsyncContext_ be the running execution context.\n            1. Let _result_ be Completion(Evaluation of _asyncBody_).\n            1. Assert: If we return here, the async function either threw an exception or performed an implicit or explicit return; all awaiting is done.\n            1. Remove _acAsyncContext_ from the execution context stack and restore the execution context that is at the top of the execution context stack as the running execution context.\n            1. If _result_ is a normal completion, then\n              1. Perform ! Call(_promiseCapability_.[[Resolve]], *undefined*, ¬´ *undefined* ¬ª).\n            1. Else if _result_ is a return completion, then\n              1. Perform ! Call(_promiseCapability_.[[Resolve]], *undefined*, ¬´ _result_.[[Value]] ¬ª).\n            1. Else,\n              1. Assert: _result_ is a throw completion.\n              1. Perform ! Call(_promiseCapability_.[[Reject]], *undefined*, ¬´ _result_.[[Value]] ¬ª).\n            1. [id=\"step-asyncblockstart-return-undefined\"] Return ~unused~.\n          1. Set the code evaluation state of _asyncContext_ such that when evaluation is resumed for that execution context, _closure_ will be called with no arguments.\n          1. Push _asyncContext_ onto the execution context stack; _asyncContext_ is now the running execution context.\n          1. <emu-meta effects=\"user-code\">Resume the suspended evaluation of _asyncContext_</emu-meta>. Let _result_ be the value returned by the resumed computation.\n          1. Assert: When we return here, _asyncContext_ has already been removed from the execution context stack and _runningContext_ is the currently running execution context.\n          1. Assert: _result_ is a normal completion with a value of ~unused~. The possible sources of this value are Await or, if the async function doesn't await anything, step <emu-xref href=\"#step-asyncblockstart-return-undefined\"></emu-xref> above.\n          1. Return ~unused~.\n        ",
  "EqualityExpression[1,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "ParseText" : "\n        1. Attempt to parse _sourceText_ using _goalSymbol_ as the goal symbol, and analyse the parse result for any early error conditions. Parsing and early error detection may be interleaved in an implementation-defined manner.\n        1. If the parse succeeded and no early errors were found, return the Parse Node (an instance of _goalSymbol_) at the root of the parse tree resulting from the parse.\n        1. Otherwise, return a List of one or more *SyntaxError* objects representing the parsing errors and/or early errors. If more than one parsing error or early error is present, the number and ordering of error objects in the list is implementation-defined, but at least one must be present.\n      ",
  "PrimaryExpression[10,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "LexicalBinding[0,1].BoundNames" : "\n        1. Return the BoundNames of |BindingIdentifier|.\n      ",
  "StatementList[1,0].ContainsUndefinedContinueTarget" : "\n        1. Let _hasUndefinedLabels_ be ContainsUndefinedContinueTarget of |StatementList| with arguments _iterationSet_ and ¬´ ¬ª.\n        1. If _hasUndefinedLabels_ is *true*, return *true*.\n        1. Return ContainsUndefinedContinueTarget of |StatementListItem| with arguments _iterationSet_ and ¬´ ¬ª.\n      ",
  "ForStatement[0,3].ContainsUndefinedContinueTarget" : "\n        1. Return ContainsUndefinedContinueTarget of |Statement| with arguments _iterationSet_ and ¬´ ¬ª.\n      ",
  "SwitchStatement[0,0].VarScopedDeclarations" : "\n        1. Return the VarScopedDeclarations of |CaseBlock|.\n      ",
  "AssignmentExpression[8,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "AdditiveExpression[2,0].Evaluation" : "\n          1. Return ? EvaluateStringOrNumericBinaryExpression(|AdditiveExpression|, `-`, |MultiplicativeExpression|).\n        ",
  "Block[0,0].VarScopedDeclarations" : "\n        1. Return a new empty List.\n      ",
  "Get" : "\n        1. Return ? <emu-meta effects=\"user-code\">_O_.[[Get]]</emu-meta>(_P_, _O_).\n      ",
  "StatementListItem[0,0].LexicallyDeclaredNames" : "\n        1. If |Statement| is <emu-grammar>Statement : LabelledStatement</emu-grammar>, return LexicallyDeclaredNames of |LabelledStatement|.\n        1. Return a new empty List.\n      ",
  "Statement[8,0].VarDeclaredNames" : "\n        1. Return a new empty List.\n      ",
  "LabelledItem[1,0].VarScopedDeclarations" : "\n        1. Return a new empty List.\n      ",
  "MethodDefinition[4,0].PropName" : "\n        1. Return PropName of |ClassElementName|.\n      ",
  "AsyncGeneratorAwaitReturn:clo1" : "\n          1. Let _queue_ be _generator_.[[AsyncGeneratorQueue]].\n          1. Assert: _queue_ is not empty.\n          1. Let _next_ be the first element of _queue_.\n          1. Let _completion_ be Completion(_next_.[[Completion]]).\n          1. Assert: _completion_ is a return completion.\n          1. Let _promise_ be ? PromiseResolve(%Promise%, _completion_.[[Value]]).\n          1. Let _fulfilledClosure_ be a new Abstract Closure with parameters (_value_) that captures _generator_ and performs the following steps when called:\n            1. Set _generator_.[[AsyncGeneratorState]] to ~completed~.\n            1. Let _result_ be NormalCompletion(_value_).\n            1. Perform AsyncGeneratorCompleteStep(_generator_, _result_, *true*).\n            1. Perform AsyncGeneratorDrainQueue(_generator_).\n            1. Return *undefined*.\n          1. Let _onFulfilled_ be CreateBuiltinFunction(_fulfilledClosure_, 1, *\"\"*, ¬´ ¬ª).\n          1. Let _rejectedClosure_ be a new Abstract Closure with parameters (_reason_) that captures _generator_ and performs the following steps when called:\n            1. Set _generator_.[[AsyncGeneratorState]] to ~completed~.\n            1. Let _result_ be ThrowCompletion(_reason_).\n            1. Perform AsyncGeneratorCompleteStep(_generator_, _result_, *true*).\n            1. Perform AsyncGeneratorDrainQueue(_generator_).\n            1. Return *undefined*.\n          1. Let _onRejected_ be CreateBuiltinFunction(_rejectedClosure_, 1, *\"\"*, ¬´ ¬ª).\n          1. Perform PerformPromiseThen(_promise_, _onFulfilled_, _onRejected_).\n          1. Return ~unused~.\n        ",
  "INTRINSICS.Math.atan2" : "\n          1. Let _ny_ be ? ToNumber(_y_).\n          1. Let _nx_ be ? ToNumber(_x_).\n          1. If _ny_ is *NaN* or _nx_ is *NaN*, return *NaN*.\n          1. If _ny_ is *+‚àû*<sub>ùîΩ</sub>, then\n            1. If _nx_ is *+‚àû*<sub>ùîΩ</sub>, return an implementation-approximated Number value representing œÄ / 4.\n            1. If _nx_ is *-‚àû*<sub>ùîΩ</sub>, return an implementation-approximated Number value representing 3œÄ / 4.\n            1. Return an implementation-approximated Number value representing œÄ / 2.\n          1. If _ny_ is *-‚àû*<sub>ùîΩ</sub>, then\n            1. If _nx_ is *+‚àû*<sub>ùîΩ</sub>, return an implementation-approximated Number value representing -œÄ / 4.\n            1. If _nx_ is *-‚àû*<sub>ùîΩ</sub>, return an implementation-approximated Number value representing -3œÄ / 4.\n            1. Return an implementation-approximated Number value representing -œÄ / 2.\n          1. If _ny_ is *+0*<sub>ùîΩ</sub>, then\n            1. If _nx_ > *+0*<sub>ùîΩ</sub> or _nx_ is *+0*<sub>ùîΩ</sub>, return *+0*<sub>ùîΩ</sub>.\n            1. Return an implementation-approximated Number value representing œÄ.\n          1. If _ny_ is *-0*<sub>ùîΩ</sub>, then\n            1. If _nx_ > *+0*<sub>ùîΩ</sub> or _nx_ is *+0*<sub>ùîΩ</sub>, return *-0*<sub>ùîΩ</sub>.\n            1. Return an implementation-approximated Number value representing -œÄ.\n          1. Assert: _ny_ is finite and is neither *+0*<sub>ùîΩ</sub> nor *-0*<sub>ùîΩ</sub>.\n          1. If _ny_ > *+0*<sub>ùîΩ</sub>, then\n            1. If _nx_ is *+‚àû*<sub>ùîΩ</sub>, return *+0*<sub>ùîΩ</sub>.\n            1. If _nx_ is *-‚àû*<sub>ùîΩ</sub>, return an implementation-approximated Number value representing œÄ.\n            1. If _nx_ is either *+0*<sub>ùîΩ</sub> or *-0*<sub>ùîΩ</sub>, return an implementation-approximated Number value representing œÄ / 2.\n          1. If _ny_ < *-0*<sub>ùîΩ</sub>, then\n            1. If _nx_ is *+‚àû*<sub>ùîΩ</sub>, return *-0*<sub>ùîΩ</sub>.\n            1. If _nx_ is *-‚àû*<sub>ùîΩ</sub>, return an implementation-approximated Number value representing -œÄ.\n            1. If _nx_ is either *+0*<sub>ùîΩ</sub> or *-0*<sub>ùîΩ</sub>, return an implementation-approximated Number value representing -œÄ / 2.\n          1. Assert: _nx_ is finite and is neither *+0*<sub>ùîΩ</sub> nor *-0*<sub>ùîΩ</sub>.\n          1. Let _r_ be the inverse tangent of abs(‚Ñù(_ny_) / ‚Ñù(_nx_)).\n          1. If _nx_ < *-0*<sub>ùîΩ</sub>, then\n            1. If _ny_ > *+0*<sub>ùîΩ</sub>, set _r_ to œÄ - _r_.\n            1. Else, set _r_ to -œÄ + _r_.\n          1. Else,\n            1. If _ny_ < *-0*<sub>ùîΩ</sub>, set _r_ to -_r_.\n          1. Return an implementation-approximated Number value representing _r_.\n        ",
  "INTRINSICS.DataView.prototype.setUint32" : "\n          1. Let _v_ be the *this* value.\n          1. If _littleEndian_ is not present, set _littleEndian_ to *false*.\n          1. Return ? SetViewValue(_v_, _byteOffset_, _littleEndian_, ~uint32~, _value_).\n        ",
  "INTRINSICS.MapIteratorPrototype.next" : "\n            1. Return ? <emu-meta suppress-effects=\"user-code\">GeneratorResume(*this* value, ~empty~, *\"%MapIteratorPrototype%\"*)</emu-meta>.\n          ",
  "StrUnsignedDecimalLiteral[2,0].StringNumericValue" : "\n            1. Let _b_ be MV of |DecimalDigits|.\n            1. If |ExponentPart| is present, let _e_ be MV of |ExponentPart|. Otherwise, let _e_ be 0.\n            1. Let _n_ be the number of code points in |DecimalDigits|.\n            1. Return RoundMVResult(_b_ √ó 10<sup>_e_ - _n_</sup>).\n          ",
  "ForInOfStatement[4,0].VarScopedDeclarations" : "\n        1. Let _declarations1_ be ¬´ |ForBinding| ¬ª.\n        1. Let _declarations2_ be VarScopedDeclarations of |Statement|.\n        1. Return the list-concatenation of _declarations1_ and _declarations2_.\n      ",
  "ForStatement[0,4].ContainsDuplicateLabels" : "\n        1. Return ContainsDuplicateLabels of |Statement| with argument _labelSet_.\n      ",
  "AsyncArrowFunction[0,0].InstantiateAsyncArrowFunctionExpression" : "\n        1. If _name_ is not present, set _name_ to *\"\"*.\n        1. Let _env_ be the LexicalEnvironment of the running execution context.\n        1. Let _privateEnv_ be the running execution context's PrivateEnvironment.\n        1. Let _sourceText_ be the source text matched by |AsyncArrowFunction|.\n        1. Let _parameters_ be |AsyncArrowBindingIdentifier|.\n        1. Let _closure_ be OrdinaryFunctionCreate(%AsyncFunction.prototype%, _sourceText_, _parameters_, |AsyncConciseBody|, ~lexical-this~, _env_, _privateEnv_).\n        1. Perform SetFunctionName(_closure_, _name_).\n        1. Return _closure_.\n      ",
  "ObjectAssignmentPattern[3,0].DestructuringAssignmentEvaluation" : "\n          1. Perform ? RequireObjectCoercible(_value_).\n          1. Perform ? PropertyDestructuringAssignmentEvaluation of |AssignmentPropertyList| with argument _value_.\n          1. Return ~unused~.\n        ",
  "MemberExpression[2,0].IsFunctionDefinition" : "\n        1. Return *false*.\n      ",
  "RegExpCreate" : "\n          1. Let _obj_ be ! RegExpAlloc(%RegExp%).\n          1. Return ? RegExpInitialize(_obj_, _P_, _F_).\n        ",
  "FormalParameters[0,0].IteratorBindingInitialization" : "\n        1. Return ~unused~.\n      ",
  "INTRINSICS.SharedArrayBuffer.prototype.slice" : "\n          1. Let _O_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_O_, [[ArrayBufferData]]).\n          1. If IsSharedArrayBuffer(_O_) is *false*, throw a *TypeError* exception.\n          1. Let _len_ be ArrayBufferByteLength(_O_, ~seq-cst~).\n          1. Let _relativeStart_ be ? ToIntegerOrInfinity(_start_).\n          1. If _relativeStart_ = -‚àû, let _first_ be 0.\n          1. Else if _relativeStart_ < 0, let _first_ be max(_len_ + _relativeStart_, 0).\n          1. Else, let _first_ be min(_relativeStart_, _len_).\n          1. If _end_ is *undefined*, let _relativeEnd_ be _len_; else let _relativeEnd_ be ? ToIntegerOrInfinity(_end_).\n          1. If _relativeEnd_ = -‚àû, let _final_ be 0.\n          1. Else if _relativeEnd_ < 0, let _final_ be max(_len_ + _relativeEnd_, 0).\n          1. Else, let _final_ be min(_relativeEnd_, _len_).\n          1. Let _newLen_ be max(_final_ - _first_, 0).\n          1. Let _ctor_ be ? SpeciesConstructor(_O_, %SharedArrayBuffer%).\n          1. Let _new_ be ? Construct(_ctor_, ¬´ ùîΩ(_newLen_) ¬ª).\n          1. Perform ? RequireInternalSlot(_new_, [[ArrayBufferData]]).\n          1. If IsSharedArrayBuffer(_new_) is *false*, throw a *TypeError* exception.\n          1. If _new_.[[ArrayBufferData]] is _O_.[[ArrayBufferData]], throw a *TypeError* exception.\n          1. If ArrayBufferByteLength(_new_, ~seq-cst~) < _newLen_, throw a *TypeError* exception.\n          1. Let _fromBuf_ be _O_.[[ArrayBufferData]].\n          1. Let _toBuf_ be _new_.[[ArrayBufferData]].\n          1. Perform CopyDataBlockBytes(_toBuf_, 0, _fromBuf_, _first_, _newLen_).\n          1. Return _new_.\n        ",
  "ClassBody[0,0].AllPrivateIdentifiersValid" : "\n        1. Let _newNames_ be the list-concatenation of _names_ and PrivateBoundIdentifiers of |ClassBody|.\n        1. Return AllPrivateIdentifiersValid of |ClassElementList| with argument _newNames_.\n      ",
  "BigInt::unaryMinus" : "\n            1. If _x_ is *0*<sub>‚Ñ§</sub>, return *0*<sub>‚Ñ§</sub>.\n            1. Return -_x_.\n          ",
  "INTRINSICS.Date.prototype.getSeconds" : "\n          1. Let _dateObject_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_dateObject_, [[DateValue]]).\n          1. Let _t_ be _dateObject_.[[DateValue]].\n          1. If _t_ is *NaN*, return *NaN*.\n          1. Return SecFromTime(LocalTime(_t_)).\n        ",
  "RegExpAlloc" : "\n          1. Let _obj_ be ? OrdinaryCreateFromConstructor(_newTarget_, *\"%RegExp.prototype%\"*, ¬´ [[OriginalSource]], [[OriginalFlags]], [[RegExpRecord]], [[RegExpMatcher]] ¬ª).\n          1. Perform ! DefinePropertyOrThrow(_obj_, *\"lastIndex\"*, PropertyDescriptor { [[Writable]]: *true*, [[Enumerable]]: *false*, [[Configurable]]: *false* }).\n          1. Return _obj_.\n        ",
  "ExportDeclaration[2,0].ExportedBindings" : "\n          1. Return the BoundNames of |VariableStatement|.\n        ",
  "OrdinaryGet" : "\n          1. Let _desc_ be ? <emu-meta effects=\"user-code\">_O_.[[GetOwnProperty]]</emu-meta>(_P_).\n          1. If _desc_ is *undefined*, then\n            1. Let _parent_ be ? <emu-meta effects=\"user-code\">_O_.[[GetPrototypeOf]]</emu-meta>().\n            1. If _parent_ is *null*, return *undefined*.\n            1. Return ? <emu-meta effects=\"user-code\">_parent_.[[Get]]</emu-meta>(_P_, _Receiver_).\n          1. If IsDataDescriptor(_desc_) is *true*, return _desc_.[[Value]].\n          1. Assert: IsAccessorDescriptor(_desc_) is *true*.\n          1. Let _getter_ be _desc_.[[Get]].\n          1. If _getter_ is *undefined*, return *undefined*.\n          1. Return ? Call(_getter_, _Receiver_).\n        ",
  "GeneratorBody[0,0].EvaluateGeneratorBody" : "\n        1. Perform ? FunctionDeclarationInstantiation(_functionObject_, _argumentsList_).\n        1. Let _G_ be ? OrdinaryCreateFromConstructor(_functionObject_, *\"%GeneratorFunction.prototype.prototype%\"*, ¬´ [[GeneratorState]], [[GeneratorContext]], [[GeneratorBrand]] ¬ª).\n        1. Set _G_.[[GeneratorBrand]] to ~empty~.\n        1. Set _G_.[[GeneratorState]] to *undefined*.\n        1. Perform GeneratorStart(_G_, |FunctionBody|).\n        1. Return Completion Record { [[Type]]: ~return~, [[Value]]: _G_, [[Target]]: ~empty~ }.\n      ",
  "ExportSpecifier[1,0].ExportEntriesForModule" : "\n          1. Let _sourceName_ be the StringValue of the first |ModuleExportName|.\n          1. Let _exportName_ be the StringValue of the second |ModuleExportName|.\n          1. If _module_ is *null*, then\n            1. Let _localName_ be _sourceName_.\n            1. Let _importName_ be *null*.\n          1. Else,\n            1. Let _localName_ be *null*.\n            1. Let _importName_ be _sourceName_.\n          1. Return a List whose sole element is a new ExportEntry Record { [[ModuleRequest]]: _module_, [[ImportName]]: _importName_, [[LocalName]]: _localName_, [[ExportName]]: _exportName_ }.\n        ",
  "ForStatement[2,2].HasCallInTailPosition" : "\n        1. Return HasCallInTailPosition of |Statement| with argument _call_.\n      ",
  "LeftHandSideExpression[1,0].IsDestructuring" : "\n          1. Return *false*.\n        ",
  "BindingElisionElement[0,1].ContainsExpression" : "\n        1. Return ContainsExpression of |BindingElement|.\n      ",
  "RelationalExpression[1,0].AssignmentTargetType" : "\n        1. Return ~invalid~.\n      ",
  "INTRINSICS.Function.prototype" : null,
  "MakeSuperPropertyReference" : "\n          1. Let _env_ be GetThisEnvironment().\n          1. Assert: _env_.HasSuperBinding() is *true*.\n          1. Let _baseValue_ be ? _env_.GetSuperBase().\n          1. Return the Reference Record { [[Base]]: _baseValue_, [[ReferencedName]]: _propertyKey_, [[Strict]]: _strict_, [[ThisValue]]: _actualThis_ }.\n        ",
  "Statement[1,0].ContainsDuplicateLabels" : "\n        1. Return *false*.\n      ",
  "SingleNameBinding[0,0].IsSimpleParameterList" : "\n        1. Return *true*.\n      ",
  "UnaryExpression[1,0].Evaluation" : "\n          1. Let _ref_ be ? Evaluation of |UnaryExpression|.\n          1. If _ref_ is not a Reference Record, return *true*.\n          1. If IsUnresolvableReference(_ref_) is *true*, then\n            1. Assert: _ref_.[[Strict]] is *false*.\n            1. Return *true*.\n          1. If IsPropertyReference(_ref_) is *true*, then\n            1. Assert: IsPrivateReference(_ref_) is *false*.\n            1. If IsSuperReference(_ref_) is *true*, throw a *ReferenceError* exception.\n            1. [id=\"step-delete-operator-toobject\"] Let _baseObj_ be ? ToObject(_ref_.[[Base]]).\n            1. Let _deleteStatus_ be ? <emu-meta effects=\"user-code\">_baseObj_.[[Delete]]</emu-meta>(_ref_.[[ReferencedName]]).\n            1. If _deleteStatus_ is *false* and _ref_.[[Strict]] is *true*, throw a *TypeError* exception.\n            1. Return _deleteStatus_.\n          1. Else,\n            1. Let _base_ be _ref_.[[Base]].\n            1. Assert: _base_ is an Environment Record.\n            1. Return ? <emu-meta effects=\"user-code\">_base_.DeleteBinding</emu-meta>(_ref_.[[ReferencedName]]).\n        ",
  "Number::exponentiate" : "\n            1. If _exponent_ is *NaN*, return *NaN*.\n            1. If _exponent_ is either *+0*<sub>ùîΩ</sub> or *-0*<sub>ùîΩ</sub>, return *1*<sub>ùîΩ</sub>.\n            1. If _base_ is *NaN*, return *NaN*.\n            1. If _base_ is *+‚àû*<sub>ùîΩ</sub>, then\n              1. If _exponent_ > *+0*<sub>ùîΩ</sub>, return *+‚àû*<sub>ùîΩ</sub>. Otherwise, return *+0*<sub>ùîΩ</sub>.\n            1. If _base_ is *-‚àû*<sub>ùîΩ</sub>, then\n              1. If _exponent_ > *+0*<sub>ùîΩ</sub>, then\n                1. If _exponent_ is an odd integral Number, return *-‚àû*<sub>ùîΩ</sub>. Otherwise, return *+‚àû*<sub>ùîΩ</sub>.\n              1. Else,\n                1. If _exponent_ is an odd integral Number, return *-0*<sub>ùîΩ</sub>. Otherwise, return *+0*<sub>ùîΩ</sub>.\n            1. If _base_ is *+0*<sub>ùîΩ</sub>, then\n              1. If _exponent_ > *+0*<sub>ùîΩ</sub>, return *+0*<sub>ùîΩ</sub>. Otherwise, return *+‚àû*<sub>ùîΩ</sub>.\n            1. If _base_ is *-0*<sub>ùîΩ</sub>, then\n              1. If _exponent_ > *+0*<sub>ùîΩ</sub>, then\n                1. If _exponent_ is an odd integral Number, return *-0*<sub>ùîΩ</sub>. Otherwise, return *+0*<sub>ùîΩ</sub>.\n              1. Else,\n                1. If _exponent_ is an odd integral Number, return *-‚àû*<sub>ùîΩ</sub>. Otherwise, return *+‚àû*<sub>ùîΩ</sub>.\n            1. Assert: _base_ is finite and is neither *+0*<sub>ùîΩ</sub> nor *-0*<sub>ùîΩ</sub>.\n            1. If _exponent_ is *+‚àû*<sub>ùîΩ</sub>, then\n              1. If abs(‚Ñù(_base_)) > 1, return *+‚àû*<sub>ùîΩ</sub>.\n              1. If abs(‚Ñù(_base_)) = 1, return *NaN*.\n              1. If abs(‚Ñù(_base_)) < 1, return *+0*<sub>ùîΩ</sub>.\n            1. If _exponent_ is *-‚àû*<sub>ùîΩ</sub>, then\n              1. If abs(‚Ñù(_base_)) > 1, return *+0*<sub>ùîΩ</sub>.\n              1. If abs(‚Ñù(_base_)) = 1, return *NaN*.\n              1. If abs(‚Ñù(_base_)) < 1, return *+‚àû*<sub>ùîΩ</sub>.\n            1. Assert: _exponent_ is finite and is neither *+0*<sub>ùîΩ</sub> nor *-0*<sub>ùîΩ</sub>.\n            1. If _base_ < *-0*<sub>ùîΩ</sub> and _exponent_ is not an integral Number, return *NaN*.\n            1. Return an implementation-approximated Number value representing the result of raising ‚Ñù(_base_) to the ‚Ñù(_exponent_) power.\n          ",
  "ForStatement[2,1].ContainsUndefinedContinueTarget" : "\n        1. Return ContainsUndefinedContinueTarget of |Statement| with arguments _iterationSet_ and ¬´ ¬ª.\n      ",
  "DetachArrayBuffer" : "\n          1. Assert: IsSharedArrayBuffer(_arrayBuffer_) is *false*.\n          1. If _key_ is not present, set _key_ to *undefined*.\n          1. If _arrayBuffer_.[[ArrayBufferDetachKey]] is not _key_, throw a *TypeError* exception.\n          1. Set _arrayBuffer_.[[ArrayBufferData]] to *null*.\n          1. Set _arrayBuffer_.[[ArrayBufferByteLength]] to 0.\n          1. Return ~unused~.\n        ",
  "INTRINSICS.Map.groupBy" : "\n          1. Let _groups_ be ? GroupBy(_items_, _callbackfn_, ~zero~).\n          1. Let _map_ be ! Construct(%Map%).\n          1. For each Record { [[Key]], [[Elements]] } _g_ of _groups_, do\n            1. Let _elements_ be CreateArrayFromList(_g_.[[Elements]]).\n            1. Let _entry_ be the Record { [[Key]]: _g_.[[Key]], [[Value]]: _elements_ }.\n            1. Append _entry_ to _map_.[[MapData]].\n          1. Return _map_.\n        ",
  "FunctionStatementList[0,1].VarDeclaredNames" : "\n        1. Return TopLevelVarDeclaredNames of |StatementList|.\n      ",
  "ModuleItemList[1,0].Evaluation" : "\n          1. Let _sl_ be ? Evaluation of |ModuleItemList|.\n          1. Let _s_ be Completion(Evaluation of |ModuleItem|).\n          1. Return ? UpdateEmpty(_s_, _sl_).\n        ",
  "MethodDefinition[0,0].DefineMethod" : "\n        1. Let _propKey_ be ? Evaluation of |ClassElementName|.\n        1. Let _env_ be the running execution context's LexicalEnvironment.\n        1. Let _privateEnv_ be the running execution context's PrivateEnvironment.\n        1. If _functionPrototype_ is present, then\n          1. Let _prototype_ be _functionPrototype_.\n        1. Else,\n          1. Let _prototype_ be %Function.prototype%.\n        1. Let _sourceText_ be the source text matched by |MethodDefinition|.\n        1. Let _closure_ be OrdinaryFunctionCreate(_prototype_, _sourceText_, |UniqueFormalParameters|, |FunctionBody|, ~non-lexical-this~, _env_, _privateEnv_).\n        1. Perform MakeMethod(_closure_, _object_).\n        1. Return the Record { [[Key]]: _propKey_, [[Closure]]: _closure_ }.\n      ",
  "ForInOfStatement[2,0].ContainsDuplicateLabels" : "\n        1. Return ContainsDuplicateLabels of |Statement| with argument _labelSet_.\n      ",
  "RelationalExpression[7,0].AssignmentTargetType" : "\n        1. Return ~invalid~.\n      ",
  "GeneratorResumeAbrupt:cont0" : "\n          1. Let _state_ be ? GeneratorValidate(_generator_, _generatorBrand_).\n          1. If _state_ is ~suspended-start~, then\n            1. Set _generator_.[[GeneratorState]] to ~completed~.\n            1. NOTE: Once a generator enters the ~completed~ state it never leaves it and its associated execution context is never resumed. Any execution state associated with _generator_ can be discarded at this point.\n            1. Set _state_ to ~completed~.\n          1. If _state_ is ~completed~, then\n            1. If _abruptCompletion_ is a return completion, then\n              1. Return CreateIterResultObject(_abruptCompletion_.[[Value]], *true*).\n            1. Return ? _abruptCompletion_.\n          1. Assert: _state_ is ~suspended-yield~.\n          1. Let _genContext_ be _generator_.[[GeneratorContext]].\n          1. Let _methodContext_ be the running execution context.\n          1. Suspend _methodContext_.\n          1. Set _generator_.[[GeneratorState]] to ~executing~.\n          1. Push _genContext_ onto the execution context stack; _genContext_ is now the running execution context.\n          1. <emu-meta effects=\"user-code\">Resume the suspended evaluation of _genContext_</emu-meta> using _abruptCompletion_ as the result of the operation that suspended it. Let _result_ be the Completion Record returned by the resumed computation.\n          1. Assert: When we return here, _genContext_ has already been removed from the execution context stack and _methodContext_ is the currently running execution context.\n          1. Return ? _result_.\n        ",
  "ClassDeclaration[1,0].BindingClassDeclarationEvaluation" : "\n        1. Let _value_ be ? ClassDefinitionEvaluation of |ClassTail| with arguments *undefined* and *\"default\"*.\n        1. Set _value_.[[SourceText]] to the source text matched by |ClassDeclaration|.\n        1. Return _value_.\n      ",
  "ExportFromClause[0,0].ExportedNames" : "\n          1. Return a new empty List.\n        ",
  "ForInOfStatement[6,0].ContainsUndefinedBreakTarget" : "\n        1. Return ContainsUndefinedBreakTarget of |Statement| with argument _labelSet_.\n      ",
  "MultiplicativeExpression[1,0].Evaluation" : "\n        1. Let _opText_ be the source text matched by |MultiplicativeOperator|.\n        1. Return ? EvaluateStringOrNumericBinaryExpression(|MultiplicativeExpression|, _opText_, |ExponentiationExpression|).\n      ",
  "GeneratorYield" : "\n          1. Let _genContext_ be the running execution context.\n          1. Assert: _genContext_ is the execution context of a generator.\n          1. Let _generator_ be the value of the Generator component of _genContext_.\n          1. Assert: GetGeneratorKind() is ~sync~.\n          1. Set _generator_.[[GeneratorState]] to ~suspended-yield~.\n          1. Remove _genContext_ from the execution context stack and restore the execution context that is at the top of the execution context stack as the running execution context.\n          1. Let _callerContext_ be the running execution context.\n          1. Resume _callerContext_ passing NormalCompletion(_iterNextObj_). If _genContext_ is ever resumed again, let _resumptionValue_ be the Completion Record with which it is resumed.\n          1. Assert: If control reaches here, then _genContext_ is the running execution context again.\n          1. Return _resumptionValue_.\n        ",
  "ArrowFunction[0,0].NamedEvaluation" : "\n        1. Return InstantiateArrowFunctionExpression of |ArrowFunction| with argument _name_.\n      ",
  "AsyncGeneratorCompleteStep" : "\n          1. Assert: _generator_.[[AsyncGeneratorQueue]] is not empty.\n          1. Let _next_ be the first element of _generator_.[[AsyncGeneratorQueue]].\n          1. Remove the first element from _generator_.[[AsyncGeneratorQueue]].\n          1. Let _promiseCapability_ be _next_.[[Capability]].\n          1. Let _value_ be _completion_.[[Value]].\n          1. If _completion_ is a throw completion, then\n            1. Perform ! Call(_promiseCapability_.[[Reject]], *undefined*, ¬´ _value_ ¬ª).\n          1. Else,\n            1. Assert: _completion_ is a normal completion.\n            1. If _realm_ is present, then\n              1. Let _oldRealm_ be the running execution context's Realm.\n              1. Set the running execution context's Realm to _realm_.\n              1. Let _iteratorResult_ be CreateIterResultObject(_value_, _done_).\n              1. Set the running execution context's Realm to _oldRealm_.\n            1. Else,\n              1. Let _iteratorResult_ be CreateIterResultObject(_value_, _done_).\n            1. Perform ! Call(_promiseCapability_.[[Resolve]], *undefined*, ¬´ _iteratorResult_ ¬ª).\n          1. Return ~unused~.\n        ",
  "AgentCanSuspend" : "\n        1. Let _AR_ be the Agent Record of the surrounding agent.\n        1. Return _AR_.[[CanBlock]].\n      ",
  "Await:clo1" : "\n          1. Let _asyncContext_ be the running execution context.\n          1. Let _promise_ be ? PromiseResolve(%Promise%, _value_).\n          1. Let _fulfilledClosure_ be a new Abstract Closure with parameters (_v_) that captures _asyncContext_ and performs the following steps when called:\n            1. Let _prevContext_ be the running execution context.\n            1. Suspend _prevContext_.\n            1. Push _asyncContext_ onto the execution context stack; _asyncContext_ is now the running execution context.\n            1. <emu-meta effects=\"user-code\">Resume the suspended evaluation of _asyncContext_</emu-meta> using NormalCompletion(_v_) as the result of the operation that suspended it.\n            1. Assert: When we reach this step, _asyncContext_ has already been removed from the execution context stack and _prevContext_ is the currently running execution context.\n            1. Return *undefined*.\n          1. Let _onFulfilled_ be CreateBuiltinFunction(_fulfilledClosure_, 1, *\"\"*, ¬´ ¬ª).\n          1. Let _rejectedClosure_ be a new Abstract Closure with parameters (_reason_) that captures _asyncContext_ and performs the following steps when called:\n            1. Let _prevContext_ be the running execution context.\n            1. Suspend _prevContext_.\n            1. Push _asyncContext_ onto the execution context stack; _asyncContext_ is now the running execution context.\n            1. <emu-meta effects=\"user-code\">Resume the suspended evaluation of _asyncContext_</emu-meta> using ThrowCompletion(_reason_) as the result of the operation that suspended it.\n            1. Assert: When we reach this step, _asyncContext_ has already been removed from the execution context stack and _prevContext_ is the currently running execution context.\n            1. Return *undefined*.\n          1. Let _onRejected_ be CreateBuiltinFunction(_rejectedClosure_, 1, *\"\"*, ¬´ ¬ª).\n          1. Perform PerformPromiseThen(_promise_, _onFulfilled_, _onRejected_).\n          1. Remove _asyncContext_ from the execution context stack and restore the execution context that is at the top of the execution context stack as the running execution context.\n          1. Let _callerContext_ be the running execution context.\n          1. Resume _callerContext_ passing ~empty~. If _asyncContext_ is ever resumed again, let _completion_ be the Completion Record with which it is resumed.\n          1. Assert: If control reaches here, then _asyncContext_ is the running execution context again.\n          1. Return _completion_.\n        ",
  "ClassElement[0,0].ClassElementEvaluation" : "\n        1. Return ? MethodDefinitionEvaluation of |MethodDefinition| with arguments _object_ and *false*.\n      ",
  "FunctionStatementList[0,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "INTRINSICS.Date.prototype.setHours" : "\n          1. Let _dateObject_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_dateObject_, [[DateValue]]).\n          1. Let _t_ be _dateObject_.[[DateValue]].\n          1. Let _h_ be ? ToNumber(_hour_).\n          1. If _min_ is present, let _m_ be ? ToNumber(_min_).\n          1. If _sec_ is present, let _s_ be ? ToNumber(_sec_).\n          1. If _ms_ is present, let _milli_ be ? ToNumber(_ms_).\n          1. If _t_ is *NaN*, return *NaN*.\n          1. Set _t_ to LocalTime(_t_).\n          1. If _min_ is not present, let _m_ be MinFromTime(_t_).\n          1. If _sec_ is not present, let _s_ be SecFromTime(_t_).\n          1. If _ms_ is not present, let _milli_ be msFromTime(_t_).\n          1. Let _date_ be MakeDate(Day(_t_), MakeTime(_h_, _m_, _s_, _milli_)).\n          1. Let _u_ be TimeClip(UTC(_date_)).\n          1. Set _dateObject_.[[DateValue]] to _u_.\n          1. Return _u_.\n        ",
  "ConciseBody[0,0].VarDeclaredNames" : "\n        1. Return a new empty List.\n      ",
  "BitwiseORExpression[1,0].Evaluation" : "\n        1. Return ? EvaluateStringOrNumericBinaryExpression(|BitwiseORExpression|, `|`, |BitwiseXORExpression|).\n      ",
  "OrdinaryGetOwnProperty" : "\n          1. If _O_ does not have an own property with key _P_, return *undefined*.\n          1. Let _D_ be a newly created Property Descriptor with no fields.\n          1. Let _X_ be _O_'s own property whose key is _P_.\n          1. If _X_ is a data property, then\n            1. Set _D_.[[Value]] to the value of _X_'s [[Value]] attribute.\n            1. Set _D_.[[Writable]] to the value of _X_'s [[Writable]] attribute.\n          1. Else,\n            1. Assert: _X_ is an accessor property.\n            1. Set _D_.[[Get]] to the value of _X_'s [[Get]] attribute.\n            1. Set _D_.[[Set]] to the value of _X_'s [[Set]] attribute.\n          1. Set _D_.[[Enumerable]] to the value of _X_'s [[Enumerable]] attribute.\n          1. Set _D_.[[Configurable]] to the value of _X_'s [[Configurable]] attribute.\n          1. Return _D_.\n        ",
  "Script[0,1].IsStrict" : "\n        1. If |ScriptBody| is present and the Directive Prologue of |ScriptBody| contains a Use Strict Directive, return *true*; otherwise, return *false*.\n      ",
  "INTRINSICS.Math.round" : "\n          1. Let _n_ be ? ToNumber(_x_).\n          1. If _n_ is not finite or _n_ is an integral Number, return _n_.\n          1. If _n_ < *0.5*<sub>ùîΩ</sub> and _n_ > *+0*<sub>ùîΩ</sub>, return *+0*<sub>ùîΩ</sub>.\n          1. If _n_ < *-0*<sub>ùîΩ</sub> and _n_ ‚â• *-0.5*<sub>ùîΩ</sub>, return *-0*<sub>ùîΩ</sub>.\n          1. Return the integral Number closest to _n_, preferring the Number closer to +‚àû in the case of a tie.\n        ",
  "ClassStaticBlockStatementList[0,0].Evaluation" : "\n        1. Return *undefined*.\n      ",
  "DateFromTime" : "\n          1. Let _inLeapYear_ be InLeapYear(_t_).\n          1. Let _dayWithinYear_ be DayWithinYear(_t_).\n          1. Let _month_ be MonthFromTime(_t_).\n          1. If _month_ is *+0*<sub>ùîΩ</sub>, return _dayWithinYear_ + *1*<sub>ùîΩ</sub>.\n          1. If _month_ is *1*<sub>ùîΩ</sub>, return _dayWithinYear_ - *30*<sub>ùîΩ</sub>.\n          1. If _month_ is *2*<sub>ùîΩ</sub>, return _dayWithinYear_ - *58*<sub>ùîΩ</sub> - _inLeapYear_.\n          1. If _month_ is *3*<sub>ùîΩ</sub>, return _dayWithinYear_ - *89*<sub>ùîΩ</sub> - _inLeapYear_.\n          1. If _month_ is *4*<sub>ùîΩ</sub>, return _dayWithinYear_ - *119*<sub>ùîΩ</sub> - _inLeapYear_.\n          1. If _month_ is *5*<sub>ùîΩ</sub>, return _dayWithinYear_ - *150*<sub>ùîΩ</sub> - _inLeapYear_.\n          1. If _month_ is *6*<sub>ùîΩ</sub>, return _dayWithinYear_ - *180*<sub>ùîΩ</sub> - _inLeapYear_.\n          1. If _month_ is *7*<sub>ùîΩ</sub>, return _dayWithinYear_ - *211*<sub>ùîΩ</sub> - _inLeapYear_.\n          1. If _month_ is *8*<sub>ùîΩ</sub>, return _dayWithinYear_ - *242*<sub>ùîΩ</sub> - _inLeapYear_.\n          1. If _month_ is *9*<sub>ùîΩ</sub>, return _dayWithinYear_ - *272*<sub>ùîΩ</sub> - _inLeapYear_.\n          1. If _month_ is *10*<sub>ùîΩ</sub>, return _dayWithinYear_ - *303*<sub>ùîΩ</sub> - _inLeapYear_.\n          1. Assert: _month_ is *11*<sub>ùîΩ</sub>.\n          1. Return _dayWithinYear_ - *333*<sub>ùîΩ</sub> - _inLeapYear_.\n        ",
  "ExportDeclaration[4,0].BoundNames" : "\n        1. Let _declarationNames_ be the BoundNames of |HoistableDeclaration|.\n        1. If _declarationNames_ does not include the element *\"\\*default\\*\"*, append *\"\\*default\\*\"* to _declarationNames_.\n        1. Return _declarationNames_.\n      ",
  "CopyDataBlockBytes" : "\n          1. Assert: _fromBlock_ and _toBlock_ are distinct values.\n          1. Let _fromSize_ be the number of bytes in _fromBlock_.\n          1. Assert: _fromIndex_ + _count_ ‚â§ _fromSize_.\n          1. Let _toSize_ be the number of bytes in _toBlock_.\n          1. Assert: _toIndex_ + _count_ ‚â§ _toSize_.\n          1. Repeat, while _count_ > 0,\n            1. If _fromBlock_ is a Shared Data Block, then\n              1. Let _execution_ be the [[CandidateExecution]] field of the surrounding agent's Agent Record.\n              1. Let _eventsRecord_ be the Agent Events Record of _execution_.[[EventsRecords]] whose [[AgentSignifier]] is AgentSignifier().\n              1. Let _bytes_ be a List whose sole element is a nondeterministically chosen byte value.\n              1. NOTE: In implementations, _bytes_ is the result of a non-atomic read instruction on the underlying hardware. The nondeterminism is a semantic prescription of the memory model to describe observable behaviour of hardware with weak consistency.\n              1. Let _readEvent_ be ReadSharedMemory { [[Order]]: ~unordered~, [[NoTear]]: *true*, [[Block]]: _fromBlock_, [[ByteIndex]]: _fromIndex_, [[ElementSize]]: 1 }.\n              1. Append _readEvent_ to _eventsRecord_.[[EventList]].\n              1. Append Chosen Value Record { [[Event]]: _readEvent_, [[ChosenValue]]: _bytes_ } to _execution_.[[ChosenValues]].\n              1. If _toBlock_ is a Shared Data Block, then\n                1. Append WriteSharedMemory { [[Order]]: ~unordered~, [[NoTear]]: *true*, [[Block]]: _toBlock_, [[ByteIndex]]: _toIndex_, [[ElementSize]]: 1, [[Payload]]: _bytes_ } to _eventsRecord_.[[EventList]].\n              1. Else,\n                1. Set _toBlock_[_toIndex_] to _bytes_[0].\n            1. Else,\n              1. Assert: _toBlock_ is not a Shared Data Block.\n              1. Set _toBlock_[_toIndex_] to _fromBlock_[_fromIndex_].\n            1. Set _toIndex_ to _toIndex_ + 1.\n            1. Set _fromIndex_ to _fromIndex_ + 1.\n            1. Set _count_ to _count_ - 1.\n          1. Return ~unused~.\n        ",
  "ClassSetOperand[2,0].MayContainStrings" : "\n          1. Return *false*.\n        ",
  "BindingList[1,0].Evaluation" : "\n          1. Perform ? Evaluation of |BindingList|.\n          1. Return ? Evaluation of |LexicalBinding|.\n        ",
  "AsyncMethod[0,0].ContainsArguments" : "\n        1. Return ContainsArguments of |ClassElementName|.\n      ",
  "ExportSpecifier[1,0].ExportedNames" : "\n          1. Return a List whose sole element is the StringValue of the second |ModuleExportName|.\n        ",
  "INTRINSICS.AsyncFromSyncIteratorPrototype.next" : "\n            1. Let _O_ be the *this* value.\n            1. Assert: _O_ is an Object that has a [[SyncIteratorRecord]] internal slot.\n            1. Let _promiseCapability_ be ! NewPromiseCapability(%Promise%).\n            1. Let _syncIteratorRecord_ be _O_.[[SyncIteratorRecord]].\n            1. If _value_ is present, then\n              1. Let _result_ be Completion(IteratorNext(_syncIteratorRecord_, _value_)).\n            1. Else,\n              1. Let _result_ be Completion(IteratorNext(_syncIteratorRecord_)).\n            1. IfAbruptRejectPromise(_result_, _promiseCapability_).\n            1. Return AsyncFromSyncIteratorContinuation(_result_, _promiseCapability_).\n          ",
  "TryStatement[0,0].VarDeclaredNames" : "\n        1. Let _names1_ be VarDeclaredNames of |Block|.\n        1. Let _names2_ be VarDeclaredNames of |Catch|.\n        1. Return the list-concatenation of _names1_ and _names2_.\n      ",
  "INTRINSICS.get Object.prototype.__proto__" : "\n            1. Let _O_ be ? ToObject(*this* value).\n            1. Return ? <emu-meta effects=\"user-code\">_O_.[[GetPrototypeOf]]()</emu-meta>.\n          ",
  "MemberExpression[2,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "BindingElisionElement[0,0].BoundNames" : "\n        1. Return BoundNames of |BindingElement|.\n      ",
  "ArrayAssignmentPattern[2,2].DestructuringAssignmentEvaluation" : "\n          1. Let _iteratorRecord_ be ? GetIterator(_value_, ~sync~).\n          1. Let _status_ be Completion(IteratorDestructuringAssignmentEvaluation of |AssignmentElementList| with argument _iteratorRecord_).\n          1. If _status_ is an abrupt completion, then\n            1. If _iteratorRecord_.[[Done]] is *false*, return ? IteratorClose(_iteratorRecord_, _status_).\n            1. Return ? _status_.\n          1. If |Elision| is present, then\n            1. Set _status_ to Completion(IteratorDestructuringAssignmentEvaluation of |Elision| with argument _iteratorRecord_).\n            1. If _status_ is an abrupt completion, then\n              1. Assert: _iteratorRecord_.[[Done]] is *true*.\n              1. Return ? _status_.\n          1. If |AssignmentRestElement| is present, then\n            1. Set _status_ to Completion(IteratorDestructuringAssignmentEvaluation of |AssignmentRestElement| with argument _iteratorRecord_).\n          1. If _iteratorRecord_.[[Done]] is *false*, return ? IteratorClose(_iteratorRecord_, _status_).\n          1. Return ? _status_.\n        ",
  "Yield" : "\n          1. Let _generatorKind_ be GetGeneratorKind().\n          1. If _generatorKind_ is ~async~, return ? AsyncGeneratorYield(? Await(_value_)).\n          1. Otherwise, return ? GeneratorYield(CreateIterResultObject(_value_, *false*)).\n        ",
  "ForStatement[2,3].VarScopedDeclarations" : "\n        1. Return the VarScopedDeclarations of |Statement|.\n      ",
  "Record[ModuleEnvironmentRecord].GetBindingValue" : "\n            1. Assert: _S_ is *true*.\n            1. Assert: _envRec_ has a binding for _N_.\n            1. If the binding for _N_ is an indirect binding, then\n              1. Let _M_ and _N2_ be the indirection values provided when this binding for _N_ was created.\n              1. Let _targetEnv_ be _M_.[[Environment]].\n              1. If _targetEnv_ is ~empty~, throw a *ReferenceError* exception.\n              1. Return ? <emu-meta effects=\"user-code\">_targetEnv_.GetBindingValue</emu-meta>(_N2_, *true*).\n            1. If the binding for _N_ in _envRec_ is an uninitialized binding, throw a *ReferenceError* exception.\n            1. Return the value currently bound to _N_ in _envRec_.\n          ",
  "FieldDefinition[0,1].ClassFieldDefinitionEvaluation" : "\n        1. Let _name_ be ? Evaluation of |ClassElementName|.\n        1. If |Initializer| is present, then\n          1. Let _formalParameterList_ be an instance of the production <emu-grammar>FormalParameters : [empty]</emu-grammar>.\n          1. Let _env_ be the LexicalEnvironment of the running execution context.\n          1. Let _privateEnv_ be the running execution context's PrivateEnvironment.\n          1. Let _sourceText_ be the empty sequence of Unicode code points.\n          1. Let _initializer_ be OrdinaryFunctionCreate(%Function.prototype%, _sourceText_, _formalParameterList_, |Initializer|, ~non-lexical-this~, _env_, _privateEnv_).\n          1. Perform MakeMethod(_initializer_, _homeObject_).\n          1. Set _initializer_.[[ClassFieldInitializerName]] to _name_.\n        1. Else,\n          1. Let _initializer_ be ~empty~.\n        1. Return the ClassFieldDefinition Record { [[Name]]: _name_, [[Initializer]]: _initializer_ }.\n      ",
  "ClassTail[0,0].ClassDefinitionEvaluation:clo0" : "\n        1. Let _env_ be the LexicalEnvironment of the running execution context.\n        1. Let _classEnv_ be NewDeclarativeEnvironment(_env_).\n        1. If _classBinding_ is not *undefined*, then\n          1. Perform ! _classEnv_.CreateImmutableBinding(_classBinding_, *true*).\n        1. Let _outerPrivateEnvironment_ be the running execution context's PrivateEnvironment.\n        1. Let _classPrivateEnvironment_ be NewPrivateEnvironment(_outerPrivateEnvironment_).\n        1. If |ClassBody| is present, then\n          1. For each String _dn_ of the PrivateBoundIdentifiers of |ClassBody|, do\n            1. If _classPrivateEnvironment_.[[Names]] contains a Private Name _pn_ such that _pn_.[[Description]] is _dn_, then\n              1. Assert: This is only possible for getter/setter pairs.\n            1. Else,\n              1. Let _name_ be a new Private Name whose [[Description]] is _dn_.\n              1. Append _name_ to _classPrivateEnvironment_.[[Names]].\n        1. If |ClassHeritage| is not present, then\n          1. Let _protoParent_ be %Object.prototype%.\n          1. Let _constructorParent_ be %Function.prototype%.\n        1. Else,\n          1. Set the running execution context's LexicalEnvironment to _classEnv_.\n          1. NOTE: The running execution context's PrivateEnvironment is _outerPrivateEnvironment_ when evaluating |ClassHeritage|.\n          1. Let _superclassRef_ be Completion(Evaluation of |ClassHeritage|).\n          1. Set the running execution context's LexicalEnvironment to _env_.\n          1. Let _superclass_ be ? GetValue(? _superclassRef_).\n          1. If _superclass_ is *null*, then\n            1. Let _protoParent_ be *null*.\n            1. Let _constructorParent_ be %Function.prototype%.\n          1. Else if IsConstructor(_superclass_) is *false*, then\n            1. Throw a *TypeError* exception.\n          1. Else,\n            1. Let _protoParent_ be ? Get(_superclass_, *\"prototype\"*).\n            1. If _protoParent_ is not an Object and _protoParent_ is not *null*, throw a *TypeError* exception.\n            1. Let _constructorParent_ be _superclass_.\n        1. Let _proto_ be OrdinaryObjectCreate(_protoParent_).\n        1. If |ClassBody| is not present, let _constructor_ be ~empty~.\n        1. Else, let _constructor_ be ConstructorMethod of |ClassBody|.\n        1. Set the running execution context's LexicalEnvironment to _classEnv_.\n        1. Set the running execution context's PrivateEnvironment to _classPrivateEnvironment_.\n        1. If _constructor_ is ~empty~, then\n          1. Let _defaultConstructor_ be a new Abstract Closure with no parameters that captures nothing and performs the following steps when called:\n            1. Let _args_ be the List of arguments that was passed to this function by [[Call]] or [[Construct]].\n            1. If NewTarget is *undefined*, throw a *TypeError* exception.\n            1. Let _F_ be the active function object.\n            1. If _F_.[[ConstructorKind]] is ~derived~, then\n              1. NOTE: This branch behaves similarly to `constructor(...args) { super(...args); }`. The most notable distinction is that while the aforementioned ECMAScript source text observably calls the @@iterator method on `%Array.prototype%`, this function does not.\n              1. Let _func_ be ! _F_.[[GetPrototypeOf]]().\n              1. If IsConstructor(_func_) is *false*, throw a *TypeError* exception.\n              1. Let _result_ be ? Construct(_func_, _args_, NewTarget).\n            1. Else,\n              1. NOTE: This branch behaves similarly to `constructor() {}`.\n              1. Let _result_ be ? OrdinaryCreateFromConstructor(NewTarget, *\"%Object.prototype%\"*).\n            1. Perform ? InitializeInstanceElements(_result_, _F_).\n            1. Return _result_.\n          1. Let _F_ be CreateBuiltinFunction(_defaultConstructor_, 0, _className_, ¬´ [[ConstructorKind]], [[SourceText]] ¬ª, the current Realm Record, _constructorParent_).\n        1. Else,\n          1. Let _constructorInfo_ be ! DefineMethod of _constructor_ with arguments _proto_ and _constructorParent_.\n          1. Let _F_ be _constructorInfo_.[[Closure]].\n          1. Perform MakeClassConstructor(_F_).\n          1. Perform SetFunctionName(_F_, _className_).\n        1. Perform MakeConstructor(_F_, *false*, _proto_).\n        1. If |ClassHeritage| is present, set _F_.[[ConstructorKind]] to ~derived~.\n        1. Perform ! DefineMethodProperty(_proto_, *\"constructor\"*, _F_, *false*).\n        1. If |ClassBody| is not present, let _elements_ be a new empty List.\n        1. Else, let _elements_ be NonConstructorElements of |ClassBody|.\n        1. Let _instancePrivateMethods_ be a new empty List.\n        1. Let _staticPrivateMethods_ be a new empty List.\n        1. Let _instanceFields_ be a new empty List.\n        1. Let _staticElements_ be a new empty List.\n        1. For each |ClassElement| _e_ of _elements_, do\n          1. If IsStatic of _e_ is *false*, then\n            1. Let _element_ be Completion(ClassElementEvaluation of _e_ with argument _proto_).\n          1. Else,\n            1. Let _element_ be Completion(ClassElementEvaluation of _e_ with argument _F_).\n          1. If _element_ is an abrupt completion, then\n            1. Set the running execution context's LexicalEnvironment to _env_.\n            1. Set the running execution context's PrivateEnvironment to _outerPrivateEnvironment_.\n            1. Return ? _element_.\n          1. Set _element_ to ! _element_.\n          1. If _element_ is a PrivateElement, then\n            1. Assert: _element_.[[Kind]] is either ~method~ or ~accessor~.\n            1. If IsStatic of _e_ is *false*, let _container_ be _instancePrivateMethods_.\n            1. Else, let _container_ be _staticPrivateMethods_.\n            1. If _container_ contains a PrivateElement _pe_ such that _pe_.[[Key]] is _element_.[[Key]], then\n              1. Assert: _element_.[[Kind]] and _pe_.[[Kind]] are both ~accessor~.\n              1. If _element_.[[Get]] is *undefined*, then\n                1. Let _combined_ be PrivateElement { [[Key]]: _element_.[[Key]], [[Kind]]: ~accessor~, [[Get]]: _pe_.[[Get]], [[Set]]: _element_.[[Set]] }.\n              1. Else,\n                1. Let _combined_ be PrivateElement { [[Key]]: _element_.[[Key]], [[Kind]]: ~accessor~, [[Get]]: _element_.[[Get]], [[Set]]: _pe_.[[Set]] }.\n              1. Replace _pe_ in _container_ with _combined_.\n            1. Else,\n              1. Append _element_ to _container_.\n          1. Else if _element_ is a ClassFieldDefinition Record, then\n            1. If IsStatic of _e_ is *false*, append _element_ to _instanceFields_.\n            1. Else, append _element_ to _staticElements_.\n          1. Else if _element_ is a ClassStaticBlockDefinition Record, then\n            1. Append _element_ to _staticElements_.\n        1. Set the running execution context's LexicalEnvironment to _env_.\n        1. If _classBinding_ is not *undefined*, then\n          1. Perform ! _classEnv_.InitializeBinding(_classBinding_, _F_).\n        1. Set _F_.[[PrivateMethods]] to _instancePrivateMethods_.\n        1. Set _F_.[[Fields]] to _instanceFields_.\n        1. For each PrivateElement _method_ of _staticPrivateMethods_, do\n          1. Perform ! PrivateMethodOrAccessorAdd(_F_, _method_).\n        1. For each element _elementRecord_ of _staticElements_, do\n          1. If _elementRecord_ is a ClassFieldDefinition Record, then\n            1. Let _result_ be Completion(DefineField(_F_, _elementRecord_)).\n          1. Else,\n            1. Assert: _elementRecord_ is a ClassStaticBlockDefinition Record.\n            1. Let _result_ be Completion(Call(_elementRecord_.[[BodyFunction]], _F_)).\n          1. If _result_ is an abrupt completion, then\n            1. Set the running execution context's PrivateEnvironment to _outerPrivateEnvironment_.\n            1. Return ? _result_.\n        1. Set the running execution context's PrivateEnvironment to _outerPrivateEnvironment_.\n        1. Return _F_.\n      ",
  "AsyncFunctionExpression[0,1].InstantiateAsyncFunctionExpression" : "\n        1. Assert: _name_ is not present.\n        1. Set _name_ to StringValue of |BindingIdentifier|.\n        1. Let _outerEnv_ be the LexicalEnvironment of the running execution context.\n        1. Let _funcEnv_ be NewDeclarativeEnvironment(_outerEnv_).\n        1. Perform ! _funcEnv_.CreateImmutableBinding(_name_, *false*).\n        1. Let _privateEnv_ be the running execution context's PrivateEnvironment.\n        1. Let _sourceText_ be the source text matched by |AsyncFunctionExpression|.\n        1. Let _closure_ be OrdinaryFunctionCreate(%AsyncFunction.prototype%, _sourceText_, |FormalParameters|, |AsyncFunctionBody|, ~non-lexical-this~, _funcEnv_, _privateEnv_).\n        1. Perform SetFunctionName(_closure_, _name_).\n        1. Perform ! _funcEnv_.InitializeBinding(_name_, _closure_).\n        1. Return _closure_.\n      ",
  "CallExpression[5,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "Record[ArgumentsExoticObject].Get" : "\n          1. Let _map_ be _args_.[[ParameterMap]].\n          1. Let _isMapped_ be ! HasOwnProperty(_map_, _P_).\n          1. If _isMapped_ is *false*, then\n            1. Return ? OrdinaryGet(_args_, _P_, _Receiver_).\n          1. Else,\n            1. Assert: _map_ contains a formal parameter mapping for _P_.\n            1. Return ! Get(_map_, _P_).\n        ",
  "ForStatement[0,5].VarScopedDeclarations" : "\n        1. Return the VarScopedDeclarations of |Statement|.\n      ",
  "UpdateExpression[1,0].AssignmentTargetType" : "\n        1. Return ~invalid~.\n      ",
  "ForInOfStatement[6,0].ContainsUndefinedContinueTarget" : "\n        1. Return ContainsUndefinedContinueTarget of |Statement| with arguments _iterationSet_ and ¬´ ¬ª.\n      ",
  "MethodDefinition[4,0].MethodDefinitionEvaluation" : "\n        1. Let _propKey_ be ? Evaluation of |ClassElementName|.\n        1. Let _env_ be the running execution context's LexicalEnvironment.\n        1. Let _privateEnv_ be the running execution context's PrivateEnvironment.\n        1. Let _sourceText_ be the source text matched by |MethodDefinition|.\n        1. Let _formalParameterList_ be an instance of the production <emu-grammar>FormalParameters : [empty]</emu-grammar>.\n        1. Let _closure_ be OrdinaryFunctionCreate(%Function.prototype%, _sourceText_, _formalParameterList_, |FunctionBody|, ~non-lexical-this~, _env_, _privateEnv_).\n        1. Perform MakeMethod(_closure_, _object_).\n        1. Perform SetFunctionName(_closure_, _propKey_, *\"get\"*).\n        1. If _propKey_ is a Private Name, then\n          1. Return PrivateElement { [[Key]]: _propKey_, [[Kind]]: ~accessor~, [[Get]]: _closure_, [[Set]]: *undefined* }.\n        1. Else,\n          1. Let _desc_ be the PropertyDescriptor { [[Get]]: _closure_, [[Enumerable]]: _enumerable_, [[Configurable]]: *true* }.\n          1. Perform ? DefinePropertyOrThrow(_object_, _propKey_, _desc_).\n          1. Return ~unused~.\n      ",
  "GeneratorStart:cont1" : "\n          1. Assert: The value of _generator_.[[GeneratorState]] is *undefined*.\n          1. Let _genContext_ be the running execution context.\n          1. Set the Generator component of _genContext_ to _generator_.\n          1. Let _closure_ be a new Abstract Closure with no parameters that captures _generatorBody_ and performs the following steps when called:\n            1. Let _acGenContext_ be the running execution context.\n            1. Let _acGenerator_ be the Generator component of _acGenContext_.\n            1. If _generatorBody_ is a Parse Node, then\n              1. Let _result_ be Completion(Evaluation of _generatorBody_).\n            1. Else,\n              1. Assert: _generatorBody_ is an Abstract Closure with no parameters.\n              1. Let _result_ be _generatorBody_().\n            1. Assert: If we return here, the generator either threw an exception or performed either an implicit or explicit return.\n            1. Remove _acGenContext_ from the execution context stack and restore the execution context that is at the top of the execution context stack as the running execution context.\n            1. Set _acGenerator_.[[GeneratorState]] to ~completed~.\n            1. NOTE: Once a generator enters the ~completed~ state it never leaves it and its associated execution context is never resumed. Any execution state associated with _acGenerator_ can be discarded at this point.\n            1. If _result_ is a normal completion, then\n              1. Let _resultValue_ be *undefined*.\n            1. Else if _result_ is a return completion, then\n              1. Let _resultValue_ be _result_.[[Value]].\n            1. Else,\n              1. Assert: _result_ is a throw completion.\n              1. Return ? _result_.\n            1. Return CreateIterResultObject(_resultValue_, *true*).\n          1. Set the code evaluation state of _genContext_ such that when evaluation is resumed for that execution context, _closure_ will be called with no arguments.\n          1. Set _generator_.[[GeneratorContext]] to _genContext_.\n          1. Set _generator_.[[GeneratorState]] to ~suspended-start~.\n          1. Return ~unused~.\n        ",
  "AssignmentExpression[5,0].IsFunctionDefinition" : "\n        1. Return *false*.\n      ",
  "Block[0,0].VarDeclaredNames" : "\n        1. Return a new empty List.\n      ",
  "AsyncModuleExecutionFulfilled" : "\n              1. If _module_.[[Status]] is ~evaluated~, then\n                1. Assert: _module_.[[EvaluationError]] is not ~empty~.\n                1. Return ~unused~.\n              1. Assert: _module_.[[Status]] is ~evaluating-async~.\n              1. Assert: _module_.[[AsyncEvaluation]] is *true*.\n              1. Assert: _module_.[[EvaluationError]] is ~empty~.\n              1. Set _module_.[[AsyncEvaluation]] to *false*.\n              1. Set _module_.[[Status]] to ~evaluated~.\n              1. If _module_.[[TopLevelCapability]] is not ~empty~, then\n                1. Assert: _module_.[[CycleRoot]] is _module_.\n                1. Perform ! Call(_module_.[[TopLevelCapability]].[[Resolve]], *undefined*, ¬´ *undefined* ¬ª).\n              1. Let _execList_ be a new empty List.\n              1. Perform GatherAvailableAncestors(_module_, _execList_).\n              1. Let _sortedExecList_ be a List whose elements are the elements of _execList_, in the order in which they had their [[AsyncEvaluation]] fields set to *true* in InnerModuleEvaluation.\n              1. Assert: All elements of _sortedExecList_ have their [[AsyncEvaluation]] field set to *true*, [[PendingAsyncDependencies]] field set to 0, and [[EvaluationError]] field set to ~empty~.\n              1. For each Cyclic Module Record _m_ of _sortedExecList_, do\n                1. If _m_.[[Status]] is ~evaluated~, then\n                  1. Assert: _m_.[[EvaluationError]] is not ~empty~.\n                1. Else if _m_.[[HasTLA]] is *true*, then\n                  1. Perform ExecuteAsyncModule(_m_).\n                1. Else,\n                  1. Let _result_ be <emu-meta effects=\"user-code\">_m_.ExecuteModule()</emu-meta>.\n                  1. If _result_ is an abrupt completion, then\n                    1. Perform AsyncModuleExecutionRejected(_m_, _result_.[[Value]]).\n                  1. Else,\n                    1. Set _m_.[[Status]] to ~evaluated~.\n                    1. If _m_.[[TopLevelCapability]] is not ~empty~, then\n                      1. Assert: _m_.[[CycleRoot]] is _m_.\n                      1. Perform ! Call(_m_.[[TopLevelCapability]].[[Resolve]], *undefined*, ¬´ *undefined* ¬ª).\n              1. Return ~unused~.\n            ",
  "QuantifierPrefix[1,0].CompileQuantifierPrefix" : "\n          1. Return the Record { [[Min]]: 1, [[Max]]: +‚àû }.\n        ",
  "INTRINSICS.String.prototype.indexOf" : "\n          1. Let _O_ be ? RequireObjectCoercible(*this* value).\n          1. Let _S_ be ? ToString(_O_).\n          1. Let _searchStr_ be ? ToString(_searchString_).\n          1. Let _pos_ be ? ToIntegerOrInfinity(_position_).\n          1. Assert: If _position_ is *undefined*, then _pos_ is 0.\n          1. Let _len_ be the length of _S_.\n          1. Let _start_ be the result of clamping _pos_ between 0 and _len_.\n          1. Return ùîΩ(StringIndexOf(_S_, _searchStr_, _start_)).\n        ",
  "ClassStaticBlockBody[0,0].EvaluateBody" : "\n          1. Assert: _argumentsList_ is empty.\n          1. Return ? EvaluateClassStaticBlockBody of |ClassStaticBlockBody| with argument _functionObject_.\n        ",
  "FunctionDeclaration[1,0].BoundNames" : "\n        1. Return ¬´ *\"\\*default\\*\"* ¬ª.\n      ",
  "MethodDefinition[0,0].HasDirectSuper" : "\n        1. If |UniqueFormalParameters| Contains |SuperCall| is *true*, return *true*.\n        1. Return |FunctionBody| Contains |SuperCall|.\n      ",
  "INTRINSICS.Date.prototype.getTimezoneOffset" : "\n          1. Let _dateObject_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_dateObject_, [[DateValue]]).\n          1. Let _t_ be _dateObject_.[[DateValue]].\n          1. If _t_ is *NaN*, return *NaN*.\n          1. Return (_t_ - LocalTime(_t_)) / msPerMinute.\n        ",
  "CaseBlock[1,2].CaseBlockEvaluation" : "\n        1. Let _V_ be *undefined*.\n        1. If the first |CaseClauses| is present, then\n          1. Let _A_ be the List of |CaseClause| items in the first |CaseClauses|, in source text order.\n        1. Else,\n          1. Let _A_ be a new empty List.\n        1. Let _found_ be *false*.\n        1. For each |CaseClause| _C_ of _A_, do\n          1. If _found_ is *false*, then\n            1. Set _found_ to ? CaseClauseIsSelected(_C_, _input_).\n          1. If _found_ is *true*, then\n            1. Let _R_ be Completion(Evaluation of _C_).\n            1. If _R_.[[Value]] is not ~empty~, set _V_ to _R_.[[Value]].\n            1. If _R_ is an abrupt completion, return ? UpdateEmpty(_R_, _V_).\n        1. Let _foundInB_ be *false*.\n        1. If the second |CaseClauses| is present, then\n          1. Let _B_ be the List of |CaseClause| items in the second |CaseClauses|, in source text order.\n        1. Else,\n          1. Let _B_ be a new empty List.\n        1. If _found_ is *false*, then\n          1. For each |CaseClause| _C_ of _B_, do\n            1. If _foundInB_ is *false*, then\n              1. Set _foundInB_ to ? CaseClauseIsSelected(_C_, _input_).\n            1. If _foundInB_ is *true*, then\n              1. Let _R_ be Completion(Evaluation of |CaseClause| _C_).\n              1. If _R_.[[Value]] is not ~empty~, set _V_ to _R_.[[Value]].\n              1. If _R_ is an abrupt completion, return ? UpdateEmpty(_R_, _V_).\n        1. If _foundInB_ is *true*, return _V_.\n        1. Let _defaultR_ be Completion(Evaluation of |DefaultClause|).\n        1. If _defaultR_.[[Value]] is not ~empty~, set _V_ to _defaultR_.[[Value]].\n        1. If _defaultR_ is an abrupt completion, return ? UpdateEmpty(_defaultR_, _V_).\n        1. NOTE: The following is another complete iteration of the second |CaseClauses|.\n        1. For each |CaseClause| _C_ of _B_, do\n          1. Let _R_ be Completion(Evaluation of |CaseClause| _C_).\n          1. If _R_.[[Value]] is not ~empty~, set _V_ to _R_.[[Value]].\n          1. If _R_ is an abrupt completion, return ? UpdateEmpty(_R_, _V_).\n        1. Return _V_.\n      ",
  "UnaryExpression[4,0].AssignmentTargetType" : "\n        1. Return ~invalid~.\n      ",
  "AssignmentExpression[5,0].Evaluation" : "\n        1. Let _lref_ be ? Evaluation of |LeftHandSideExpression|.\n        1. [id=\"step-assignmentexpression-evaluation-compound-getvalue\"] Let _lval_ be ? GetValue(_lref_).\n        1. Let _rref_ be ? Evaluation of |AssignmentExpression|.\n        1. Let _rval_ be ? GetValue(_rref_).\n        1. Let _assignmentOpText_ be the source text matched by |AssignmentOperator|.\n        1. Let _opText_ be the sequence of Unicode code points associated with _assignmentOpText_ in the following table:\n          <figure>\n            <!-- emu-format ignore -->\n            <table class=\"lightweight-table\">\n              <tbody><tr><th> _assignmentOpText_ </th><th> _opText_       </th></tr>\n              <tr><td> `**=`              </td><td> `**`           </td></tr>\n              <tr><td> `*=`               </td><td> `*`            </td></tr>\n              <tr><td> `/=`               </td><td> `/`            </td></tr>\n              <tr><td> `%=`               </td><td> `%`            </td></tr>\n              <tr><td> `+=`               </td><td> `+`            </td></tr>\n              <tr><td> `-=`               </td><td> `-`            </td></tr>\n              <tr><td> `<<=`        </td><td> `<<`     </td></tr>\n              <tr><td> `>>=`        </td><td> `>>`     </td></tr>\n              <tr><td> `>>>=`    </td><td> `>>>` </td></tr>\n              <tr><td> `&=`           </td><td> `&`        </td></tr>\n              <tr><td> `^=`               </td><td> `^`            </td></tr>\n              <tr><td> `|=`               </td><td> `|`            </td></tr>\n            </tbody></table>\n          </figure>\n        1. Let _r_ be ? ApplyStringOrNumericBinaryOperator(_lval_, _opText_, _rval_).\n        1. [id=\"step-assignmentexpression-evaluation-compound-putvalue\"] Perform ? PutValue(_lref_, _r_).\n        1. Return _r_.\n      ",
  "Statement[2,0].ContainsDuplicateLabels" : "\n        1. Return *false*.\n      ",
  "StrUnsignedDecimalLiteral[0,0].StringNumericValue" : "\n            1. Return *+‚àû*<sub>ùîΩ</sub>.\n          ",
  "PrimaryExpression[3,0].IsIdentifierRef" : "\n        1. Return *false*.\n      ",
  "MemberExpression[7,0].IsDestructuring" : "\n          1. Return *false*.\n        ",
  "PrimaryExpression[12,0].IsIdentifierRef" : "\n        1. Return *false*.\n      ",
  "INTRINSICS.Object.values" : "\n          1. Let _obj_ be ? ToObject(_O_).\n          1. Let _valueList_ be ? EnumerableOwnProperties(_obj_, ~value~).\n          1. Return CreateArrayFromList(_valueList_).\n        ",
  "INTRINSICS.Object.prototype.__lookupSetter__" : "\n            1. Let _O_ be ? ToObject(*this* value).\n            1. Let _key_ be ? ToPropertyKey(_P_).\n            1. Repeat,\n              1. Let _desc_ be ? <emu-meta effects=\"user-code\">_O_.[[GetOwnProperty]]</emu-meta>(_key_).\n              1. If _desc_ is not *undefined*, then\n                1. If IsAccessorDescriptor(_desc_) is *true*, return _desc_.[[Set]].\n                1. Return *undefined*.\n              1. Set _O_ to ? <emu-meta effects=\"user-code\">_O_.[[GetPrototypeOf]]()</emu-meta>.\n              1. If _O_ is *null*, return *undefined*.\n          ",
  "ExportDeclaration[0,0].Evaluation" : "\n          1. Return ~empty~.\n        ",
  "ForStatement[0,1].HasCallInTailPosition" : "\n        1. Return HasCallInTailPosition of |Statement| with argument _call_.\n      ",
  "ExportDeclaration[1,0].BoundNames" : "\n        1. Return a new empty List.\n      ",
  "BreakableStatement[0,0].Evaluation" : "\n        1. Let _newLabelSet_ be a new empty List.\n        1. Return ? LabelledEvaluation of this |BreakableStatement| with argument _newLabelSet_.\n      ",
  "GeneratorExpression[0,1].Contains" : "\n        1. Return *false*.\n      ",
  "ImportDeclaration[0,0].ModuleRequests" : "\n          1. Return ModuleRequests of |FromClause|.\n        ",
  "LeaveCriticalSection" : "\n          1. Assert: The surrounding agent is in the critical section for _WL_.\n          1. Let _execution_ be the [[CandidateExecution]] field of the surrounding agent's Agent Record.\n          1. Let _eventsRecord_ be the Agent Events Record of _execution_.[[EventsRecords]] whose [[AgentSignifier]] is AgentSignifier().\n          1. Let _leaveEvent_ be a new Synchronize event.\n          1. Append _leaveEvent_ to _eventsRecord_.[[EventList]].\n          1. Set _WL_.[[MostRecentLeaveEvent]] to _leaveEvent_.\n          1. Leave the critical section for _WL_.\n          1. Return ~unused~.\n        ",
  "EventSet" : "\n        1. Let _events_ be an empty Set.\n        1. For each Agent Events Record _aer_ of _execution_.[[EventsRecords]], do\n          1. For each event _E_ of _aer_.[[EventList]], do\n            1. Add _E_ to _events_.\n        1. Return _events_.\n      ",
  "ClassStaticBlock[0,0].ClassStaticBlockDefinitionEvaluation" : "\n        1. Let _lex_ be the running execution context's LexicalEnvironment.\n        1. Let _privateEnv_ be the running execution context's PrivateEnvironment.\n        1. Let _sourceText_ be the empty sequence of Unicode code points.\n        1. Let _formalParameters_ be an instance of the production <emu-grammar>FormalParameters : [empty]</emu-grammar>.\n        1. [id=\"step-synthetic-class-static-block-fn\"] Let _bodyFunction_ be OrdinaryFunctionCreate(%Function.prototype%, _sourceText_, _formalParameters_, |ClassStaticBlockBody|, ~non-lexical-this~, _lex_, _privateEnv_).\n        1. Perform MakeMethod(_bodyFunction_, _homeObject_).\n        1. Return the ClassStaticBlockDefinition Record { [[BodyFunction]]: _bodyFunction_ }.\n      ",
  "UTC" : "\n          1. If _t_ is not finite, return *NaN*.\n          1. Let _systemTimeZoneIdentifier_ be SystemTimeZoneIdentifier().\n          1. If IsTimeZoneOffsetString(_systemTimeZoneIdentifier_) is *true*, then\n            1. Let _offsetNs_ be ParseTimeZoneOffsetString(_systemTimeZoneIdentifier_).\n          1. Else,\n            1. Let _possibleInstants_ be GetNamedTimeZoneEpochNanoseconds(_systemTimeZoneIdentifier_, ‚Ñù(YearFromTime(_t_)), ‚Ñù(MonthFromTime(_t_)) + 1, ‚Ñù(DateFromTime(_t_)), ‚Ñù(HourFromTime(_t_)), ‚Ñù(MinFromTime(_t_)), ‚Ñù(SecFromTime(_t_)), ‚Ñù(msFromTime(_t_)), 0, 0).\n            1. NOTE: The following steps ensure that when _t_ represents local time repeating multiple times at a negative time zone transition (e.g. when the daylight saving time ends or the time zone offset is decreased due to a time zone rule change) or skipped local time at a positive time zone transition (e.g. when the daylight saving time starts or the time zone offset is increased due to a time zone rule change), _t_ is interpreted using the time zone offset before the transition.\n            1. If _possibleInstants_ is not empty, then\n              1. Let _disambiguatedInstant_ be _possibleInstants_[0].\n            1. Else,\n              1. NOTE: _t_ represents a local time skipped at a positive time zone transition (e.g. due to daylight saving time starting or a time zone rule change increasing the UTC offset).\n              1. [declared=\"tBefore\"] Let _possibleInstantsBefore_ be GetNamedTimeZoneEpochNanoseconds(_systemTimeZoneIdentifier_, ‚Ñù(YearFromTime(_tBefore_)), ‚Ñù(MonthFromTime(_tBefore_)) + 1, ‚Ñù(DateFromTime(_tBefore_)), ‚Ñù(HourFromTime(_tBefore_)), ‚Ñù(MinFromTime(_tBefore_)), ‚Ñù(SecFromTime(_tBefore_)), ‚Ñù(msFromTime(_tBefore_)), 0, 0), where _tBefore_ is the largest integral Number < _t_ for which _possibleInstantsBefore_ is not empty (i.e., _tBefore_ represents the last local time before the transition).\n              1. Let _disambiguatedInstant_ be the last element of _possibleInstantsBefore_.\n            1. Let _offsetNs_ be GetNamedTimeZoneOffsetNanoseconds(_systemTimeZoneIdentifier_, _disambiguatedInstant_).\n          1. Let _offsetMs_ be truncate(_offsetNs_ / 10<sup>6</sup>).\n          1. Return _t_ - ùîΩ(_offsetMs_).\n        ",
  "NewExpression[1,0].IsIdentifierRef" : "\n        1. Return *false*.\n      ",
  "FromPropertyDescriptor" : "\n          1. If _Desc_ is *undefined*, return *undefined*.\n          1. Let _obj_ be OrdinaryObjectCreate(%Object.prototype%).\n          1. Assert: _obj_ is an extensible ordinary object with no own properties.\n          1. If _Desc_ has a [[Value]] field, then\n            1. Perform ! CreateDataPropertyOrThrow(_obj_, *\"value\"*, _Desc_.[[Value]]).\n          1. If _Desc_ has a [[Writable]] field, then\n            1. Perform ! CreateDataPropertyOrThrow(_obj_, *\"writable\"*, _Desc_.[[Writable]]).\n          1. If _Desc_ has a [[Get]] field, then\n            1. Perform ! CreateDataPropertyOrThrow(_obj_, *\"get\"*, _Desc_.[[Get]]).\n          1. If _Desc_ has a [[Set]] field, then\n            1. Perform ! CreateDataPropertyOrThrow(_obj_, *\"set\"*, _Desc_.[[Set]]).\n          1. If _Desc_ has an [[Enumerable]] field, then\n            1. Perform ! CreateDataPropertyOrThrow(_obj_, *\"enumerable\"*, _Desc_.[[Enumerable]]).\n          1. If _Desc_ has a [[Configurable]] field, then\n            1. Perform ! CreateDataPropertyOrThrow(_obj_, *\"configurable\"*, _Desc_.[[Configurable]]).\n          1. Return _obj_.\n        ",
  "MakeClassConstructor" : "\n        1. Assert: _F_.[[IsClassConstructor]] is *false*.\n        1. Set _F_.[[IsClassConstructor]] to *true*.\n        1. Return ~unused~.\n      ",
  "IteratorStepValue" : "\n        1. Let _result_ be Completion(IteratorNext(_iteratorRecord_)).\n        1. If _result_ is a throw completion, then\n          1. Set _iteratorRecord_.[[Done]] to *true*.\n          1. Return ? _result_.\n        1. Set _result_ to ! _result_.\n        1. Let _done_ be Completion(IteratorComplete(_result_)).\n        1. If _done_ is a throw completion, then\n          1. Set _iteratorRecord_.[[Done]] to *true*.\n          1. Return ? _done_.\n        1. Set _done_ to ! _done_.\n        1. If _done_ is *true*, then\n          1. Set _iteratorRecord_.[[Done]] to *true*.\n          1. Return ~done~.\n        1. Let _value_ be Completion(Get(_result_, *\"value\"*)).\n        1. If _value_ is a throw completion, then\n          1. Set _iteratorRecord_.[[Done]] to *true*.\n        1. Return ? _value_.\n      ",
  "INTRINSICS.Object.prototype.toLocaleString" : "\n          1. Let _O_ be the *this* value.\n          1. Return ? Invoke(_O_, *\"toString\"*).\n        ",
  "ArrayAssignmentPattern[0,2].DestructuringAssignmentEvaluation" : "\n          1. Let _iteratorRecord_ be ? GetIterator(_value_, ~sync~).\n          1. Let _result_ be Completion(IteratorDestructuringAssignmentEvaluation of |Elision| with argument _iteratorRecord_).\n          1. If _iteratorRecord_.[[Done]] is *false*, return ? IteratorClose(_iteratorRecord_, _result_).\n          1. Return _result_.\n        ",
  "RoundMVResult" : "\n            1. If the decimal representation of _n_ has 20 or fewer significant digits, return ùîΩ(_n_).\n            1. Let _option1_ be the mathematical value denoted by the result of replacing each significant digit in the decimal representation of _n_ after the 20th with a 0 digit.\n            1. Let _option2_ be the mathematical value denoted by the result of replacing each significant digit in the decimal representation of _n_ after the 20th with a 0 digit and then incrementing it at the 20th position (with carrying as necessary).\n            1. Let _chosen_ be an implementation-defined choice of either _option1_ or _option2_.\n            1. Return ùîΩ(_chosen_).\n          ",
  "ClassElementList[1,0].ConstructorMethod" : "\n        1. Let _head_ be ConstructorMethod of |ClassElementList|.\n        1. If _head_ is not ~empty~, return _head_.\n        1. If ClassElementKind of |ClassElement| is ~constructor-method~, return |ClassElement|.\n        1. Return ~empty~.\n      ",
  "AsyncGeneratorDeclaration[0,0].ContainsArguments" : "\n        1. Return *false*.\n      ",
  "FieldDefinition[0,0].PrivateBoundIdentifiers" : "\n        1. Return PrivateBoundIdentifiers of |ClassElementName|.\n      ",
  "AsyncMethod[0,0].MethodDefinitionEvaluation" : "\n        1. Let _propKey_ be ? Evaluation of |ClassElementName|.\n        1. Let _env_ be the LexicalEnvironment of the running execution context.\n        1. Let _privateEnv_ be the running execution context's PrivateEnvironment.\n        1. Let _sourceText_ be the source text matched by |AsyncMethod|.\n        1. Let _closure_ be OrdinaryFunctionCreate(%AsyncFunction.prototype%, _sourceText_, |UniqueFormalParameters|, |AsyncFunctionBody|, ~non-lexical-this~, _env_, _privateEnv_).\n        1. Perform MakeMethod(_closure_, _object_).\n        1. Perform SetFunctionName(_closure_, _propKey_).\n        1. Return ? DefineMethodProperty(_object_, _propKey_, _closure_, _enumerable_).\n      ",
  "IfStatement[0,0].ContainsUndefinedBreakTarget" : "\n        1. Let _hasUndefinedLabels_ be ContainsUndefinedBreakTarget of the first |Statement| with argument _labelSet_.\n        1. If _hasUndefinedLabels_ is *true*, return *true*.\n        1. Return ContainsUndefinedBreakTarget of the second |Statement| with argument _labelSet_.\n      ",
  "Literal[3,0].Evaluation" : "\n          1. Return the SV of |StringLiteral| as defined in <emu-xref href=\"#sec-static-semantics-sv\"></emu-xref>.\n        ",
  "Statement[0,0].ContainsUndefinedContinueTarget" : "\n        1. Return ContainsUndefinedContinueTarget of |BlockStatement| with arguments _iterationSet_ and ¬´ ¬ª.\n      ",
  "CaseBlock[0,0].ContainsDuplicateLabels" : "\n        1. Return *false*.\n      ",
  "AsyncGeneratorDeclaration[1,0].IsConstantDeclaration" : "\n        1. Return *false*.\n      ",
  "ModuleItemList[1,0].LexicallyScopedDeclarations" : "\n        1. Let _declarations1_ be LexicallyScopedDeclarations of |ModuleItemList|.\n        1. Let _declarations2_ be LexicallyScopedDeclarations of |ModuleItem|.\n        1. Return the list-concatenation of _declarations1_ and _declarations2_.\n      ",
  "PropertyDefinition[0,0].PropertyDefinitionEvaluation" : "\n          1. Let _propName_ be StringValue of |IdentifierReference|.\n          1. Let _exprValue_ be ? Evaluation of |IdentifierReference|.\n          1. Let _propValue_ be ? GetValue(_exprValue_).\n          1. Assert: _object_ is an ordinary, extensible object with no non-configurable properties.\n          1. Perform ! CreateDataPropertyOrThrow(_object_, _propName_, _propValue_).\n          1. Return ~unused~.\n        ",
  "AllocateArrayBuffer" : "\n          1. Let _slots_ be ¬´ [[ArrayBufferData]], [[ArrayBufferByteLength]], [[ArrayBufferDetachKey]] ¬ª.\n          1. If _maxByteLength_ is present and _maxByteLength_ is not ~empty~, let _allocatingResizableBuffer_ be *true*; otherwise let _allocatingResizableBuffer_ be *false*.\n          1. If _allocatingResizableBuffer_ is *true*, then\n            1. If _byteLength_ > _maxByteLength_, throw a *RangeError* exception.\n            1. Append [[ArrayBufferMaxByteLength]] to _slots_.\n          1. Let _obj_ be ? OrdinaryCreateFromConstructor(_constructor_, *\"%ArrayBuffer.prototype%\"*, _slots_).\n          1. Let _block_ be ? CreateByteDataBlock(_byteLength_).\n          1. Set _obj_.[[ArrayBufferData]] to _block_.\n          1. Set _obj_.[[ArrayBufferByteLength]] to _byteLength_.\n          1. If _allocatingResizableBuffer_ is *true*, then\n            1. If it is not possible to create a Data Block _block_ consisting of _maxByteLength_ bytes, throw a *RangeError* exception.\n            1. NOTE: Resizable ArrayBuffers are designed to be implementable with in-place growth. Implementations may throw if, for example, virtual memory cannot be reserved up front.\n            1. Set _obj_.[[ArrayBufferMaxByteLength]] to _maxByteLength_.\n          1. Return _obj_.\n        ",
  "AsyncGeneratorMethod[0,0].HasDirectSuper" : "\n        1. If |UniqueFormalParameters| Contains |SuperCall| is *true*, return *true*.\n        1. Return |AsyncGeneratorBody| Contains |SuperCall|.\n      ",
  "StrUnsignedDecimalLiteral[1,3].StringNumericValue" : "\n            1. Let _a_ be MV of the first |DecimalDigits|.\n            1. If the second |DecimalDigits| is present, then\n              1. Let _b_ be MV of the second |DecimalDigits|.\n              1. Let _n_ be the number of code points in the second |DecimalDigits|.\n            1. Else,\n              1. Let _b_ be 0.\n              1. Let _n_ be 0.\n            1. If |ExponentPart| is present, let _e_ be MV of |ExponentPart|. Otherwise, let _e_ be 0.\n            1. Return RoundMVResult((_a_ + (_b_ √ó 10<sup>-_n_</sup>)) √ó 10<sup>_e_</sup>).\n          ",
  "ForStatement[0,0].ForLoopEvaluation" : "\n          1. If the first |Expression| is present, then\n            1. Let _exprRef_ be ? Evaluation of the first |Expression|.\n            1. Perform ? GetValue(_exprRef_).\n          1. If the second |Expression| is present, let _test_ be the second |Expression|; otherwise, let _test_ be ~empty~.\n          1. If the third |Expression| is present, let _increment_ be the third |Expression|; otherwise, let _increment_ be ~empty~.\n          1. Return ? ForBodyEvaluation(_test_, _increment_, |Statement|, ¬´ ¬ª, _labelSet_).\n        ",
  "INTRINSICS.Object.prototype.hasOwnProperty" : "\n          1. [id=\"step-hasownproperty-topropertykey\"] Let _P_ be ? ToPropertyKey(_V_).\n          1. [id=\"step-hasownproperty-toobject\"] Let _O_ be ? ToObject(*this* value).\n          1. Return ? HasOwnProperty(_O_, _P_).\n        ",
  "AssignmentExpression[7,0].Evaluation" : "\n        1. Let _lref_ be ? Evaluation of |LeftHandSideExpression|.\n        1. [id=\"step-assignmentexpression-evaluation-lgcl-or-getvalue\"] Let _lval_ be ? GetValue(_lref_).\n        1. Let _lbool_ be ToBoolean(_lval_).\n        1. If _lbool_ is *true*, return _lval_.\n        1. If IsAnonymousFunctionDefinition(|AssignmentExpression|) is *true* and IsIdentifierRef of |LeftHandSideExpression| is *true*, then\n          1. Let _rval_ be ? NamedEvaluation of |AssignmentExpression| with argument _lref_.[[ReferencedName]].\n        1. Else,\n          1. Let _rref_ be ? Evaluation of |AssignmentExpression|.\n          1. Let _rval_ be ? GetValue(_rref_).\n        1. [id=\"step-assignmentexpression-evaluation-lgcl-or-putvalue\"] Perform ? PutValue(_lref_, _rval_).\n        1. Return _rval_.\n      ",
  "Record[OrdinaryObject].HasProperty" : "\n        1. Return ? OrdinaryHasProperty(_O_, _P_).\n      ",
  "GeneratorYield:cont0" : "\n          1. Let _genContext_ be the running execution context.\n          1. Assert: _genContext_ is the execution context of a generator.\n          1. Let _generator_ be the value of the Generator component of _genContext_.\n          1. Assert: GetGeneratorKind() is ~sync~.\n          1. Set _generator_.[[GeneratorState]] to ~suspended-yield~.\n          1. Remove _genContext_ from the execution context stack and restore the execution context that is at the top of the execution context stack as the running execution context.\n          1. Let _callerContext_ be the running execution context.\n          1. Resume _callerContext_ passing NormalCompletion(_iterNextObj_). If _genContext_ is ever resumed again, let _resumptionValue_ be the Completion Record with which it is resumed.\n          1. Assert: If control reaches here, then _genContext_ is the running execution context again.\n          1. Return _resumptionValue_.\n        ",
  "SuperProperty[1,0].Contains" : "\n        1. If _symbol_ is the |ReservedWord| `super`, return *true*.\n        1. Return *false*.\n      ",
  "ElementList[3,1].ArrayAccumulation" : "\n          1. Set _nextIndex_ to ? ArrayAccumulation of |ElementList| with arguments _array_ and _nextIndex_.\n          1. If |Elision| is present, then\n            1. Set _nextIndex_ to ? ArrayAccumulation of |Elision| with arguments _array_ and _nextIndex_.\n          1. Return ? ArrayAccumulation of |SpreadElement| with arguments _array_ and _nextIndex_.\n        ",
  "ClassEscape[3,0].CompileToCharSet" : "\n          1. Let _cv_ be the CharacterValue of this |ClassEscape|.\n          1. Let _c_ be the character whose character value is _cv_.\n          1. Return the CharSet containing the single character _c_.\n        ",
  "CaseBlock[1,3].LexicallyDeclaredNames" : "\n        1. If the first |CaseClauses| is present, let _names1_ be the LexicallyDeclaredNames of the first |CaseClauses|.\n        1. Else, let _names1_ be a new empty List.\n        1. Let _names2_ be LexicallyDeclaredNames of |DefaultClause|.\n        1. If the second |CaseClauses| is present, let _names3_ be the LexicallyDeclaredNames of the second |CaseClauses|.\n        1. Else, let _names3_ be a new empty List.\n        1. Return the list-concatenation of _names1_, _names2_, and _names3_.\n      ",
  "INTRINSICS.TypedArray.prototype.toSorted" : "\n          1. If _comparefn_ is not *undefined* and IsCallable(_comparefn_) is *false*, throw a *TypeError* exception.\n          1. Let _O_ be the *this* value.\n          1. Let _taRecord_ be ? ValidateTypedArray(_O_, ~seq-cst~).\n          1. Let _len_ be TypedArrayLength(_taRecord_).\n          1. Let _A_ be ? TypedArrayCreateSameType(_O_, ¬´ ùîΩ(_len_) ¬ª).\n          1. NOTE: The following closure performs a numeric comparison rather than the string comparison used in <emu-xref href=\"#sec-array.prototype.tosorted\"></emu-xref>.\n          1. Let _SortCompare_ be a new Abstract Closure with parameters (_x_, _y_) that captures _comparefn_ and performs the following steps when called:\n            1. Return ? CompareTypedArrayElements(_x_, _y_, _comparefn_).\n          1. Let _sortedList_ be ? SortIndexedProperties(_O_, _len_, _SortCompare_, ~read-through-holes~).\n          1. Let _j_ be 0.\n          1. Repeat, while _j_ < _len_,\n            1. Perform ! Set(_A_, ! ToString(ùîΩ(_j_)), _sortedList_[_j_], *true*).\n            1. Set _j_ to _j_ + 1.\n          1. Return _A_.\n        ",
  "Record[SourceTextModuleRecord].ResolveExport" : "\n            1. Assert: _module_.[[Status]] is not ~new~.\n            1. If _resolveSet_ is not present, set _resolveSet_ to a new empty List.\n            1. For each Record { [[Module]], [[ExportName]] } _r_ of _resolveSet_, do\n              1. If _module_ and _r_.[[Module]] are the same Module Record and SameValue(_exportName_, _r_.[[ExportName]]) is *true*, then\n                1. Assert: This is a circular import request.\n                1. Return *null*.\n            1. Append the Record { [[Module]]: _module_, [[ExportName]]: _exportName_ } to _resolveSet_.\n            1. For each ExportEntry Record _e_ of _module_.[[LocalExportEntries]], do\n              1. If SameValue(_exportName_, _e_.[[ExportName]]) is *true*, then\n                1. Assert: _module_ provides the direct binding for this export.\n                1. Return ResolvedBinding Record { [[Module]]: _module_, [[BindingName]]: _e_.[[LocalName]] }.\n            1. For each ExportEntry Record _e_ of _module_.[[IndirectExportEntries]], do\n              1. If SameValue(_exportName_, _e_.[[ExportName]]) is *true*, then\n                1. Assert: _e_.[[ModuleRequest]] is not *null*.\n                1. Let _importedModule_ be GetImportedModule(_module_, _e_.[[ModuleRequest]]).\n                1. If _e_.[[ImportName]] is ~all~, then\n                  1. Assert: _module_ does not provide the direct binding for this export.\n                  1. Return ResolvedBinding Record { [[Module]]: _importedModule_, [[BindingName]]: ~namespace~ }.\n                1. Else,\n                  1. Assert: _module_ imports a specific binding for this export.\n                  1. Return _importedModule_.ResolveExport(_e_.[[ImportName]], _resolveSet_).\n            1. If SameValue(_exportName_, *\"default\"*) is *true*, then\n              1. Assert: A `default` export was not explicitly defined by this module.\n              1. Return *null*.\n              1. NOTE: A `default` export cannot be provided by an `export * from \"mod\"` declaration.\n            1. Let _starResolution_ be *null*.\n            1. For each ExportEntry Record _e_ of _module_.[[StarExportEntries]], do\n              1. Assert: _e_.[[ModuleRequest]] is not *null*.\n              1. Let _importedModule_ be GetImportedModule(_module_, _e_.[[ModuleRequest]]).\n              1. Let _resolution_ be _importedModule_.ResolveExport(_exportName_, _resolveSet_).\n              1. If _resolution_ is ~ambiguous~, return ~ambiguous~.\n              1. If _resolution_ is not *null*, then\n                1. Assert: _resolution_ is a ResolvedBinding Record.\n                1. If _starResolution_ is *null*, then\n                  1. Set _starResolution_ to _resolution_.\n                1. Else,\n                  1. Assert: There is more than one `*` import that includes the requested name.\n                  1. If _resolution_.[[Module]] and _starResolution_.[[Module]] are not the same Module Record, return ~ambiguous~.\n                  1. If _resolution_.[[BindingName]] is not _starResolution_.[[BindingName]] and either _resolution_.[[BindingName]] or _starResolution_.[[BindingName]] is ~namespace~, return ~ambiguous~.\n                  1. If _resolution_.[[BindingName]] is a String, _starResolution_.[[BindingName]] is a String, and SameValue(_resolution_.[[BindingName]], _starResolution_.[[BindingName]]) is *false*, return ~ambiguous~.\n            1. Return _starResolution_.\n          ",
  "EnqueueAtomicsWaitAsyncTimeoutJob:clo0" : "\n          1. Let _timeoutJob_ be a new Job Abstract Closure with no parameters that captures _WL_ and _waiterRecord_ and performs the following steps when called:\n            1. Perform EnterCriticalSection(_WL_).\n            1. If _WL_.[[Waiters]] contains _waiterRecord_, then\n              1. Let _timeOfJobExecution_ be the time value (UTC) identifying the current time.\n              1. Assert: ‚Ñù(_timeOfJobExecution_) ‚â• _waiterRecord_.[[TimeoutTime]] (ignoring potential non-monotonicity of time values).\n              1. Set _waiterRecord_.[[Result]] to *\"timed-out\"*.\n              1. Perform RemoveWaiter(_WL_, _waiterRecord_).\n              1. Perform NotifyWaiter(_WL_, _waiterRecord_).\n            1. Perform LeaveCriticalSection(_WL_).\n            1. Return ~unused~.\n          1. Let _now_ be the time value (UTC) identifying the current time.\n          1. Let _currentRealm_ be the current Realm Record.\n          1. Perform HostEnqueueTimeoutJob(_timeoutJob_, _currentRealm_, ùîΩ(_waiterRecord_.[[TimeoutTime]]) - _now_).\n          1. Return ~unused~.\n        ",
  "FunctionDeclaration[0,0].InstantiateFunctionObject" : "\n        1. Return InstantiateOrdinaryFunctionObject of |FunctionDeclaration| with arguments _env_ and _privateEnv_.\n      ",
  "AsyncGeneratorDeclaration[1,0].BoundNames" : "\n        1. Return ¬´ *\"\\*default\\*\"* ¬ª.\n      ",
  "ModuleItemList[1,0].ContainsUndefinedContinueTarget" : "\n        1. Let _hasUndefinedLabels_ be ContainsUndefinedContinueTarget of |ModuleItemList| with arguments _iterationSet_ and ¬´ ¬ª.\n        1. If _hasUndefinedLabels_ is *true*, return *true*.\n        1. Return ContainsUndefinedContinueTarget of |ModuleItem| with arguments _iterationSet_ and ¬´ ¬ª.\n      ",
  "BinaryAnd" : "\n            1. If _x_ = 1 and _y_ = 1, return 1.\n            1. Else, return 0.\n          ",
  "OrdinaryCallEvaluateBody" : "\n          1. Return ? EvaluateBody of _F_.[[ECMAScriptCode]] with arguments _F_ and _argumentsList_.\n        ",
  "ForStatement[1,3].ContainsUndefinedContinueTarget" : "\n        1. Return ContainsUndefinedContinueTarget of |Statement| with arguments _iterationSet_ and ¬´ ¬ª.\n      ",
  "BindingProperty[1,0].PropertyBindingInitialization" : "\n          1. Let _P_ be ? Evaluation of |PropertyName|.\n          1. Perform ? KeyedBindingInitialization of |BindingElement| with arguments _value_, _environment_, and _P_.\n          1. Return ¬´ _P_ ¬ª.\n        ",
  "INTRINSICS.WeakMap" : "\n          1. If NewTarget is *undefined*, throw a *TypeError* exception.\n          1. Let _map_ be ? OrdinaryCreateFromConstructor(NewTarget, *\"%WeakMap.prototype%\"*, ¬´ [[WeakMapData]] ¬ª).\n          1. Set _map_.[[WeakMapData]] to a new empty List.\n          1. If _iterable_ is either *undefined* or *null*, return _map_.\n          1. Let _adder_ be ? Get(_map_, *\"set\"*).\n          1. If IsCallable(_adder_) is *false*, throw a *TypeError* exception.\n          1. Return ? AddEntriesFromIterable(_map_, _iterable_, _adder_).\n        ",
  "INTRINSICS.AsyncFunction" : "\n          1. Let _C_ be the active function object.\n          1. If _bodyArg_ is not present, set _bodyArg_ to the empty String.\n          1. Return ? CreateDynamicFunction(_C_, NewTarget, ~async~, _parameterArgs_, _bodyArg_).\n        ",
  "Record[GlobalEnvironmentRecord].CanDeclareGlobalFunction" : "\n            1. Let _ObjRec_ be _envRec_.[[ObjectRecord]].\n            1. Let _globalObject_ be _ObjRec_.[[BindingObject]].\n            1. Let _existingProp_ be ? <emu-meta effects=\"user-code\">_globalObject_.[[GetOwnProperty]]</emu-meta>(_N_).\n            1. If _existingProp_ is *undefined*, return ? IsExtensible(_globalObject_).\n            1. If _existingProp_.[[Configurable]] is *true*, return *true*.\n            1. If IsDataDescriptor(_existingProp_) is *true* and _existingProp_ has attribute values { [[Writable]]: *true*, [[Enumerable]]: *true* }, return *true*.\n            1. Return *false*.\n          ",
  "Record[BuiltinFunctionObject].Construct" : "\n        1. Return ? BuiltinCallOrConstruct(_F_, ~uninitialized~, _argumentsList_, _newTarget_).\n      ",
  "INTRINSICS.String.prototype.trimEnd" : "\n          1. Let _S_ be the *this* value.\n          1. Return ? TrimString(_S_, ~end~).\n        ",
  "INTRINSICS.AsyncFromSyncIteratorPrototype.return" : "\n            1. Let _O_ be the *this* value.\n            1. Assert: _O_ is an Object that has a [[SyncIteratorRecord]] internal slot.\n            1. Let _promiseCapability_ be ! NewPromiseCapability(%Promise%).\n            1. Let _syncIterator_ be _O_.[[SyncIteratorRecord]].[[Iterator]].\n            1. Let _return_ be Completion(GetMethod(_syncIterator_, *\"return\"*)).\n            1. IfAbruptRejectPromise(_return_, _promiseCapability_).\n            1. If _return_ is *undefined*, then\n              1. Let _iterResult_ be CreateIterResultObject(_value_, *true*).\n              1. Perform ! Call(_promiseCapability_.[[Resolve]], *undefined*, ¬´ _iterResult_ ¬ª).\n              1. Return _promiseCapability_.[[Promise]].\n            1. If _value_ is present, then\n              1. Let _result_ be Completion(Call(_return_, _syncIterator_, ¬´ _value_ ¬ª)).\n            1. Else,\n              1. Let _result_ be Completion(Call(_return_, _syncIterator_)).\n            1. IfAbruptRejectPromise(_result_, _promiseCapability_).\n            1. If _result_ is not an Object, then\n              1. Perform ! Call(_promiseCapability_.[[Reject]], *undefined*, ¬´ a newly created *TypeError* object ¬ª).\n              1. Return _promiseCapability_.[[Promise]].\n            1. Return AsyncFromSyncIteratorContinuation(_result_, _promiseCapability_).\n          ",
  "AsyncGeneratorEnqueue" : "\n          1. Let _request_ be AsyncGeneratorRequest { [[Completion]]: _completion_, [[Capability]]: _promiseCapability_ }.\n          1. Append _request_ to _generator_.[[AsyncGeneratorQueue]].\n          1. Return ~unused~.\n        ",
  "ClassUnion[1,1].CompileToCharSet" : "\n          1. Let _A_ be CompileToCharSet of |ClassSetOperand| with argument _rer_.\n          1. If |ClassUnion| is present, then\n            1. Let _B_ be CompileToCharSet of |ClassUnion| with argument _rer_.\n            1. Return the union of CharSets _A_ and _B_.\n          1. Return _A_.\n        ",
  "ObjectBindingPattern[3,1].ContainsExpression" : "\n        1. Return ContainsExpression of |BindingPropertyList|.\n      ",
  "INTRINSICS.Proxy.revocable" : "\n          1. Let _proxy_ be ? ProxyCreate(_target_, _handler_).\n          1. Let _revokerClosure_ be a new Abstract Closure with no parameters that captures nothing and performs the following steps when called:\n            1. Let _F_ be the active function object.\n            1. Let _p_ be _F_.[[RevocableProxy]].\n            1. If _p_ is *null*, return *undefined*.\n            1. Set _F_.[[RevocableProxy]] to *null*.\n            1. Assert: _p_ is a Proxy exotic object.\n            1. Set _p_.[[ProxyTarget]] to *null*.\n            1. Set _p_.[[ProxyHandler]] to *null*.\n            1. Return *undefined*.\n          1. Let _revoker_ be CreateBuiltinFunction(_revokerClosure_, 0, *\"\"*, ¬´ [[RevocableProxy]] ¬ª).\n          1. Set _revoker_.[[RevocableProxy]] to _proxy_.\n          1. Let _result_ be OrdinaryObjectCreate(%Object.prototype%).\n          1. Perform ! CreateDataPropertyOrThrow(_result_, *\"proxy\"*, _proxy_).\n          1. Perform ! CreateDataPropertyOrThrow(_result_, *\"revoke\"*, _revoker_).\n          1. Return _result_.\n        ",
  "INTRINSICS.WeakSet" : "\n          1. If NewTarget is *undefined*, throw a *TypeError* exception.\n          1. Let _set_ be ? OrdinaryCreateFromConstructor(NewTarget, *\"%WeakSet.prototype%\"*, ¬´ [[WeakSetData]] ¬ª).\n          1. Set _set_.[[WeakSetData]] to a new empty List.\n          1. If _iterable_ is either *undefined* or *null*, return _set_.\n          1. Let _adder_ be ? Get(_set_, *\"add\"*).\n          1. If IsCallable(_adder_) is *false*, throw a *TypeError* exception.\n          1. Let _iteratorRecord_ be ? GetIterator(_iterable_, ~sync~).\n          1. Repeat,\n            1. Let _next_ be ? IteratorStepValue(_iteratorRecord_).\n            1. If _next_ is ~done~, return _set_.\n            1. Let _status_ be Completion(Call(_adder_, _set_, ¬´ _next_ ¬ª)).\n            1. IfAbruptCloseIterator(_status_, _iteratorRecord_).\n        ",
  "MethodDefinition[0,0].MethodDefinitionEvaluation" : "\n        1. Let _methodDef_ be ? DefineMethod of |MethodDefinition| with argument _object_.\n        1. Perform SetFunctionName(_methodDef_.[[Closure]], _methodDef_.[[Key]]).\n        1. Return ? DefineMethodProperty(_object_, _methodDef_.[[Key]], _methodDef_.[[Closure]], _enumerable_).\n      ",
  "ImportsList[1,0].BoundNames" : "\n        1. Let _names1_ be the BoundNames of |ImportsList|.\n        1. Let _names2_ be the BoundNames of |ImportSpecifier|.\n        1. Return the list-concatenation of _names1_ and _names2_.\n      ",
  "ClassUnion[1,0].CompileToCharSet" : "\n          1. Let _A_ be CompileToCharSet of |ClassSetOperand| with argument _rer_.\n          1. If |ClassUnion| is present, then\n            1. Let _B_ be CompileToCharSet of |ClassUnion| with argument _rer_.\n            1. Return the union of CharSets _A_ and _B_.\n          1. Return _A_.\n        ",
  "StringCreate" : "\n          1. Let _S_ be MakeBasicObject(¬´ [[Prototype]], [[Extensible]], [[StringData]] ¬ª).\n          1. Set _S_.[[Prototype]] to _prototype_.\n          1. Set _S_.[[StringData]] to _value_.\n          1. Set _S_.[[GetOwnProperty]] as specified in <emu-xref href=\"#sec-string-exotic-objects-getownproperty-p\"></emu-xref>.\n          1. Set _S_.[[DefineOwnProperty]] as specified in <emu-xref href=\"#sec-string-exotic-objects-defineownproperty-p-desc\"></emu-xref>.\n          1. Set _S_.[[OwnPropertyKeys]] as specified in <emu-xref href=\"#sec-string-exotic-objects-ownpropertykeys\"></emu-xref>.\n          1. Let _length_ be the length of _value_.\n          1. Perform ! DefinePropertyOrThrow(_S_, *\"length\"*, PropertyDescriptor { [[Value]]: ùîΩ(_length_), [[Writable]]: *false*, [[Enumerable]]: *false*, [[Configurable]]: *false* }).\n          1. Return _S_.\n        ",
  "ObjectBindingPattern[1,0].BindingInitialization" : "\n        1. Let _excludedNames_ be a new empty List.\n        1. Return ? RestBindingInitialization of |BindingRestProperty| with arguments _value_, _environment_, and _excludedNames_.\n      ",
  "ModuleItemList[1,0].ExportedNames" : "\n          1. Let _names1_ be ExportedNames of |ModuleItemList|.\n          1. Let _names2_ be ExportedNames of |ModuleItem|.\n          1. Return the list-concatenation of _names1_ and _names2_.\n        ",
  "ToInt32" : "\n        1. Let _number_ be ? ToNumber(_argument_).\n        1. If _number_ is not finite or _number_ is either *+0*<sub>ùîΩ</sub> or *-0*<sub>ùîΩ</sub>, return *+0*<sub>ùîΩ</sub>.\n        1. Let _int_ be truncate(‚Ñù(_number_)).\n        1. Let _int32bit_ be _int_ modulo 2<sup>32</sup>.\n        1. If _int32bit_ ‚â• 2<sup>31</sup>, return ùîΩ(_int32bit_ - 2<sup>32</sup>); otherwise return ùîΩ(_int32bit_).\n      ",
  "ConciseBody[1,0].ConciseBodyContainsUseStrict" : "\n        1. Return FunctionBodyContainsUseStrict of |FunctionBody|.\n      ",
  "PropertyDefinition[4,0].PropName" : "\n        1. Return ~empty~.\n      ",
  "MemberExpression[3,0].HasCallInTailPosition" : "\n        1. If this |MemberExpression| is _call_, return *true*.\n        1. Return *false*.\n      ",
  "InitializeTypedArrayFromArrayBuffer" : "\n            1. Let _elementSize_ be TypedArrayElementSize(_O_).\n            1. Let _offset_ be ? ToIndex(_byteOffset_).\n            1. If _offset_ modulo _elementSize_ ‚â† 0, throw a *RangeError* exception.\n            1. Let _bufferIsFixedLength_ be IsFixedLengthArrayBuffer(_buffer_).\n            1. If _length_ is not *undefined*, then\n              1. Let _newLength_ be ? ToIndex(_length_).\n            1. If IsDetachedBuffer(_buffer_) is *true*, throw a *TypeError* exception.\n            1. Let _bufferByteLength_ be ArrayBufferByteLength(_buffer_, ~seq-cst~).\n            1. If _length_ is *undefined* and _bufferIsFixedLength_ is *false*, then\n              1. If _offset_ > _bufferByteLength_, throw a *RangeError* exception.\n              1. Set _O_.[[ByteLength]] to ~auto~.\n              1. Set _O_.[[ArrayLength]] to ~auto~.\n            1. Else,\n              1. If _length_ is *undefined*, then\n                1. If _bufferByteLength_ modulo _elementSize_ ‚â† 0, throw a *RangeError* exception.\n                1. Let _newByteLength_ be _bufferByteLength_ - _offset_.\n                1. If _newByteLength_ < 0, throw a *RangeError* exception.\n              1. Else,\n                1. Let _newByteLength_ be _newLength_ √ó _elementSize_.\n                1. If _offset_ + _newByteLength_ > _bufferByteLength_, throw a *RangeError* exception.\n              1. Set _O_.[[ByteLength]] to _newByteLength_.\n              1. Set _O_.[[ArrayLength]] to _newByteLength_ / _elementSize_.\n            1. Set _O_.[[ViewedArrayBuffer]] to _buffer_.\n            1. Set _O_.[[ByteOffset]] to _offset_.\n            1. Return ~unused~.\n          ",
  "BitwiseORExpression[1,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "LogicalORExpression[1,0].HasCallInTailPosition" : "\n        1. Return HasCallInTailPosition of |LogicalANDExpression| with argument _call_.\n      ",
  "UnaryExpression[1,0].IsFunctionDefinition" : "\n        1. Return *false*.\n      ",
  "PrimaryExpression[12,0].HasName" : "\n        1. Let _expr_ be the |ParenthesizedExpression| that is covered by |CoverParenthesizedExpressionAndArrowParameterList|.\n        1. If IsFunctionDefinition of _expr_ is *false*, return *false*.\n        1. Return HasName of _expr_.\n      ",
  "ClassElement[0,0].IsStatic" : "\n        1. Return *false*.\n      ",
  "ModuleItemList[1,0].VarScopedDeclarations" : "\n        1. Let _declarations1_ be VarScopedDeclarations of |ModuleItemList|.\n        1. Let _declarations2_ be VarScopedDeclarations of |ModuleItem|.\n        1. Return the list-concatenation of _declarations1_ and _declarations2_.\n      ",
  "INTRINSICS.get DataView.prototype.buffer" : "\n          1. Let _O_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_O_, [[DataView]]).\n          1. Assert: _O_ has a [[ViewedArrayBuffer]] internal slot.\n          1. Let _buffer_ be _O_.[[ViewedArrayBuffer]].\n          1. Return _buffer_.\n        ",
  "BindingPropertyList[1,0].BoundNames" : "\n        1. Let _names1_ be BoundNames of |BindingPropertyList|.\n        1. Let _names2_ be BoundNames of |BindingProperty|.\n        1. Return the list-concatenation of _names1_ and _names2_.\n      ",
  "Record[ArgumentsExoticObject].DefineOwnProperty" : "\n          1. Let _map_ be _args_.[[ParameterMap]].\n          1. Let _isMapped_ be ! HasOwnProperty(_map_, _P_).\n          1. Let _newArgDesc_ be _Desc_.\n          1. If _isMapped_ is *true* and IsDataDescriptor(_Desc_) is *true*, then\n            1. If _Desc_ does not have a [[Value]] field, _Desc_ has a [[Writable]] field, and _Desc_.[[Writable]] is *false*, then\n              1. Set _newArgDesc_ to a copy of _Desc_.\n              1. Set _newArgDesc_.[[Value]] to ! Get(_map_, _P_).\n          1. Let _allowed_ be ! OrdinaryDefineOwnProperty(_args_, _P_, _newArgDesc_).\n          1. If _allowed_ is *false*, return *false*.\n          1. If _isMapped_ is *true*, then\n            1. If IsAccessorDescriptor(_Desc_) is *true*, then\n              1. Perform ! _map_.[[Delete]](_P_).\n            1. Else,\n              1. If _Desc_ has a [[Value]] field, then\n                1. Assert: The following Set will succeed, since formal parameters mapped by arguments objects are always writable.\n                1. Perform ! Set(_map_, _P_, _Desc_.[[Value]], *false*).\n              1. If _Desc_ has a [[Writable]] field and _Desc_.[[Writable]] is *false*, then\n                1. Perform ! _map_.[[Delete]](_P_).\n          1. Return *true*.\n        ",
  "BindingRestProperty[0,0].RestBindingInitialization" : "\n          1. Let _lhs_ be ? ResolveBinding(StringValue of |BindingIdentifier|, _environment_).\n          1. Let _restObj_ be OrdinaryObjectCreate(%Object.prototype%).\n          1. Perform ? CopyDataProperties(_restObj_, _value_, _excludedNames_).\n          1. If _environment_ is *undefined*, return ? PutValue(_lhs_, _restObj_).\n          1. Return ? InitializeReferencedBinding(_lhs_, _restObj_).\n        ",
  "GeneratorMethod[0,0].ComputedPropertyContains" : "\n        1. Return the result of ComputedPropertyContains of |ClassElementName| with argument _symbol_.\n      ",
  "INTRINSICS.Date.prototype.setDate" : "\n          1. Let _dateObject_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_dateObject_, [[DateValue]]).\n          1. Let _t_ be _dateObject_.[[DateValue]].\n          1. Let _dt_ be ? ToNumber(_date_).\n          1. If _t_ is *NaN*, return *NaN*.\n          1. Set _t_ to LocalTime(_t_).\n          1. Let _newDate_ be MakeDate(MakeDay(YearFromTime(_t_), MonthFromTime(_t_), _dt_), TimeWithinDay(_t_)).\n          1. Let _u_ be TimeClip(UTC(_newDate_)).\n          1. Set _dateObject_.[[DateValue]] to _u_.\n          1. Return _u_.\n        ",
  "PrimaryExpression[0,0].IsIdentifierRef" : "\n        1. Return *false*.\n      ",
  "PrimaryExpression[0,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "PrimaryExpression[2,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "INTRINSICS.TypedArray.prototype.some" : "\n          1. Let _O_ be the *this* value.\n          1. Let _taRecord_ be ? ValidateTypedArray(_O_, ~seq-cst~).\n          1. Let _len_ be TypedArrayLength(_taRecord_).\n          1. If IsCallable(_callbackfn_) is *false*, throw a *TypeError* exception.\n          1. Let _k_ be 0.\n          1. Repeat, while _k_ < _len_,\n            1. Let _Pk_ be ! ToString(ùîΩ(_k_)).\n            1. Let _kValue_ be ! Get(_O_, _Pk_).\n            1. Let _testResult_ be ToBoolean(? Call(_callbackfn_, _thisArg_, ¬´ _kValue_, ùîΩ(_k_), _O_ ¬ª)).\n            1. If _testResult_ is *true*, return *true*.\n            1. Set _k_ to _k_ + 1.\n          1. Return *false*.\n        ",
  "AsyncFunctionDeclaration[1,0].InstantiateFunctionObject" : "\n        1. Return InstantiateAsyncFunctionObject of |AsyncFunctionDeclaration| with arguments _env_ and _privateEnv_.\n      ",
  "ExportDeclaration[4,0].LexicallyScopedDeclarations" : "\n        1. Return a List whose sole element is DeclarationPart of |HoistableDeclaration|.\n      ",
  "Record[ModuleNamespaceExoticObject].GetOwnProperty" : "\n          1. If _P_ is a Symbol, return OrdinaryGetOwnProperty(_O_, _P_).\n          1. Let _exports_ be _O_.[[Exports]].\n          1. If _exports_ does not contain _P_, return *undefined*.\n          1. Let _value_ be ? _O_.[[Get]](_P_, _O_).\n          1. Return PropertyDescriptor { [[Value]]: _value_, [[Writable]]: *true*, [[Enumerable]]: *true*, [[Configurable]]: *false* }.\n        ",
  "ToNumber" : "\n        1. If _argument_ is a Number, return _argument_.\n        1. If _argument_ is either a Symbol or a BigInt, throw a *TypeError* exception.\n        1. If _argument_ is *undefined*, return *NaN*.\n        1. If _argument_ is either *null* or *false*, return *+0*<sub>ùîΩ</sub>.\n        1. If _argument_ is *true*, return *1*<sub>ùîΩ</sub>.\n        1. If _argument_ is a String, return StringToNumber(_argument_).\n        1. Assert: _argument_ is an Object.\n        1. Let _primValue_ be ? ToPrimitive(_argument_, ~number~).\n        1. Assert: _primValue_ is not an Object.\n        1. Return ? ToNumber(_primValue_).\n      ",
  "BindingPattern[0,0].BindingInitialization" : "\n        1. Perform ? RequireObjectCoercible(_value_).\n        1. Return ? BindingInitialization of |ObjectBindingPattern| with arguments _value_ and _environment_.\n      ",
  "ClassTail[0,2].ClassDefinitionEvaluation" : "\n        1. Let _env_ be the LexicalEnvironment of the running execution context.\n        1. Let _classEnv_ be NewDeclarativeEnvironment(_env_).\n        1. If _classBinding_ is not *undefined*, then\n          1. Perform ! _classEnv_.CreateImmutableBinding(_classBinding_, *true*).\n        1. Let _outerPrivateEnvironment_ be the running execution context's PrivateEnvironment.\n        1. Let _classPrivateEnvironment_ be NewPrivateEnvironment(_outerPrivateEnvironment_).\n        1. If |ClassBody| is present, then\n          1. For each String _dn_ of the PrivateBoundIdentifiers of |ClassBody|, do\n            1. If _classPrivateEnvironment_.[[Names]] contains a Private Name _pn_ such that _pn_.[[Description]] is _dn_, then\n              1. Assert: This is only possible for getter/setter pairs.\n            1. Else,\n              1. Let _name_ be a new Private Name whose [[Description]] is _dn_.\n              1. Append _name_ to _classPrivateEnvironment_.[[Names]].\n        1. If |ClassHeritage| is not present, then\n          1. Let _protoParent_ be %Object.prototype%.\n          1. Let _constructorParent_ be %Function.prototype%.\n        1. Else,\n          1. Set the running execution context's LexicalEnvironment to _classEnv_.\n          1. NOTE: The running execution context's PrivateEnvironment is _outerPrivateEnvironment_ when evaluating |ClassHeritage|.\n          1. Let _superclassRef_ be Completion(Evaluation of |ClassHeritage|).\n          1. Set the running execution context's LexicalEnvironment to _env_.\n          1. Let _superclass_ be ? GetValue(? _superclassRef_).\n          1. If _superclass_ is *null*, then\n            1. Let _protoParent_ be *null*.\n            1. Let _constructorParent_ be %Function.prototype%.\n          1. Else if IsConstructor(_superclass_) is *false*, then\n            1. Throw a *TypeError* exception.\n          1. Else,\n            1. Let _protoParent_ be ? Get(_superclass_, *\"prototype\"*).\n            1. If _protoParent_ is not an Object and _protoParent_ is not *null*, throw a *TypeError* exception.\n            1. Let _constructorParent_ be _superclass_.\n        1. Let _proto_ be OrdinaryObjectCreate(_protoParent_).\n        1. If |ClassBody| is not present, let _constructor_ be ~empty~.\n        1. Else, let _constructor_ be ConstructorMethod of |ClassBody|.\n        1. Set the running execution context's LexicalEnvironment to _classEnv_.\n        1. Set the running execution context's PrivateEnvironment to _classPrivateEnvironment_.\n        1. If _constructor_ is ~empty~, then\n          1. Let _defaultConstructor_ be a new Abstract Closure with no parameters that captures nothing and performs the following steps when called:\n            1. Let _args_ be the List of arguments that was passed to this function by [[Call]] or [[Construct]].\n            1. If NewTarget is *undefined*, throw a *TypeError* exception.\n            1. Let _F_ be the active function object.\n            1. If _F_.[[ConstructorKind]] is ~derived~, then\n              1. NOTE: This branch behaves similarly to `constructor(...args) { super(...args); }`. The most notable distinction is that while the aforementioned ECMAScript source text observably calls the @@iterator method on `%Array.prototype%`, this function does not.\n              1. Let _func_ be ! _F_.[[GetPrototypeOf]]().\n              1. If IsConstructor(_func_) is *false*, throw a *TypeError* exception.\n              1. Let _result_ be ? Construct(_func_, _args_, NewTarget).\n            1. Else,\n              1. NOTE: This branch behaves similarly to `constructor() {}`.\n              1. Let _result_ be ? OrdinaryCreateFromConstructor(NewTarget, *\"%Object.prototype%\"*).\n            1. Perform ? InitializeInstanceElements(_result_, _F_).\n            1. Return _result_.\n          1. Let _F_ be CreateBuiltinFunction(_defaultConstructor_, 0, _className_, ¬´ [[ConstructorKind]], [[SourceText]] ¬ª, the current Realm Record, _constructorParent_).\n        1. Else,\n          1. Let _constructorInfo_ be ! DefineMethod of _constructor_ with arguments _proto_ and _constructorParent_.\n          1. Let _F_ be _constructorInfo_.[[Closure]].\n          1. Perform MakeClassConstructor(_F_).\n          1. Perform SetFunctionName(_F_, _className_).\n        1. Perform MakeConstructor(_F_, *false*, _proto_).\n        1. If |ClassHeritage| is present, set _F_.[[ConstructorKind]] to ~derived~.\n        1. Perform ! DefineMethodProperty(_proto_, *\"constructor\"*, _F_, *false*).\n        1. If |ClassBody| is not present, let _elements_ be a new empty List.\n        1. Else, let _elements_ be NonConstructorElements of |ClassBody|.\n        1. Let _instancePrivateMethods_ be a new empty List.\n        1. Let _staticPrivateMethods_ be a new empty List.\n        1. Let _instanceFields_ be a new empty List.\n        1. Let _staticElements_ be a new empty List.\n        1. For each |ClassElement| _e_ of _elements_, do\n          1. If IsStatic of _e_ is *false*, then\n            1. Let _element_ be Completion(ClassElementEvaluation of _e_ with argument _proto_).\n          1. Else,\n            1. Let _element_ be Completion(ClassElementEvaluation of _e_ with argument _F_).\n          1. If _element_ is an abrupt completion, then\n            1. Set the running execution context's LexicalEnvironment to _env_.\n            1. Set the running execution context's PrivateEnvironment to _outerPrivateEnvironment_.\n            1. Return ? _element_.\n          1. Set _element_ to ! _element_.\n          1. If _element_ is a PrivateElement, then\n            1. Assert: _element_.[[Kind]] is either ~method~ or ~accessor~.\n            1. If IsStatic of _e_ is *false*, let _container_ be _instancePrivateMethods_.\n            1. Else, let _container_ be _staticPrivateMethods_.\n            1. If _container_ contains a PrivateElement _pe_ such that _pe_.[[Key]] is _element_.[[Key]], then\n              1. Assert: _element_.[[Kind]] and _pe_.[[Kind]] are both ~accessor~.\n              1. If _element_.[[Get]] is *undefined*, then\n                1. Let _combined_ be PrivateElement { [[Key]]: _element_.[[Key]], [[Kind]]: ~accessor~, [[Get]]: _pe_.[[Get]], [[Set]]: _element_.[[Set]] }.\n              1. Else,\n                1. Let _combined_ be PrivateElement { [[Key]]: _element_.[[Key]], [[Kind]]: ~accessor~, [[Get]]: _element_.[[Get]], [[Set]]: _pe_.[[Set]] }.\n              1. Replace _pe_ in _container_ with _combined_.\n            1. Else,\n              1. Append _element_ to _container_.\n          1. Else if _element_ is a ClassFieldDefinition Record, then\n            1. If IsStatic of _e_ is *false*, append _element_ to _instanceFields_.\n            1. Else, append _element_ to _staticElements_.\n          1. Else if _element_ is a ClassStaticBlockDefinition Record, then\n            1. Append _element_ to _staticElements_.\n        1. Set the running execution context's LexicalEnvironment to _env_.\n        1. If _classBinding_ is not *undefined*, then\n          1. Perform ! _classEnv_.InitializeBinding(_classBinding_, _F_).\n        1. Set _F_.[[PrivateMethods]] to _instancePrivateMethods_.\n        1. Set _F_.[[Fields]] to _instanceFields_.\n        1. For each PrivateElement _method_ of _staticPrivateMethods_, do\n          1. Perform ! PrivateMethodOrAccessorAdd(_F_, _method_).\n        1. For each element _elementRecord_ of _staticElements_, do\n          1. If _elementRecord_ is a ClassFieldDefinition Record, then\n            1. Let _result_ be Completion(DefineField(_F_, _elementRecord_)).\n          1. Else,\n            1. Assert: _elementRecord_ is a ClassStaticBlockDefinition Record.\n            1. Let _result_ be Completion(Call(_elementRecord_.[[BodyFunction]], _F_)).\n          1. If _result_ is an abrupt completion, then\n            1. Set the running execution context's PrivateEnvironment to _outerPrivateEnvironment_.\n            1. Return ? _result_.\n        1. Set the running execution context's PrivateEnvironment to _outerPrivateEnvironment_.\n        1. Return _F_.\n      ",
  "Record[OrdinaryObject].IsExtensible" : "\n        1. Return OrdinaryIsExtensible(_O_).\n      ",
  "INTRINSICS.String.prototype.at" : "\n          1. Let _O_ be ? RequireObjectCoercible(*this* value).\n          1. Let _S_ be ? ToString(_O_).\n          1. Let _len_ be the length of _S_.\n          1. Let _relativeIndex_ be ? ToIntegerOrInfinity(_index_).\n          1. If _relativeIndex_ ‚â• 0, then\n            1. Let _k_ be _relativeIndex_.\n          1. Else,\n            1. Let _k_ be _len_ + _relativeIndex_.\n          1. If _k_ < 0 or _k_ ‚â• _len_, return *undefined*.\n          1. Return the substring of _S_ from _k_ to _k_ + 1.\n        ",
  "ConciseBody[0,0].VarScopedDeclarations" : "\n        1. Return a new empty List.\n      ",
  "ExponentiationExpression[1,0].AssignmentTargetType" : "\n        1. Return ~invalid~.\n      ",
  "CaseBlock[1,0].LexicallyScopedDeclarations" : "\n        1. If the first |CaseClauses| is present, let _declarations1_ be the LexicallyScopedDeclarations of the first |CaseClauses|.\n        1. Else, let _declarations1_ be a new empty List.\n        1. Let _declarations2_ be LexicallyScopedDeclarations of |DefaultClause|.\n        1. If the second |CaseClauses| is present, let _declarations3_ be the LexicallyScopedDeclarations of the second |CaseClauses|.\n        1. Else, let _declarations3_ be a new empty List.\n        1. Return the list-concatenation of _declarations1_, _declarations2_, and _declarations3_.\n      ",
  "ModuleItemList[1,0].ImportEntries" : "\n          1. Let _entries1_ be ImportEntries of |ModuleItemList|.\n          1. Let _entries2_ be ImportEntries of |ModuleItem|.\n          1. Return the list-concatenation of _entries1_ and _entries2_.\n        ",
  "INTRINSICS.Date.prototype[@@toPrimitive]" : "\n          1. Let _O_ be the *this* value.\n          1. If _O_ is not an Object, throw a *TypeError* exception.\n          1. If _hint_ is either *\"string\"* or *\"default\"*, then\n            1. Let _tryFirst_ be ~string~.\n          1. Else if _hint_ is *\"number\"*, then\n            1. Let _tryFirst_ be ~number~.\n          1. Else,\n            1. Throw a *TypeError* exception.\n          1. Return ? OrdinaryToPrimitive(_O_, _tryFirst_).\n        ",
  "Statement[3,0].VarScopedDeclarations" : "\n        1. Return a new empty List.\n      ",
  "FormalParameterList[1,0].BoundNames" : "\n        1. Let _names1_ be BoundNames of |FormalParameterList|.\n        1. Let _names2_ be BoundNames of |FormalParameter|.\n        1. Return the list-concatenation of _names1_ and _names2_.\n      ",
  "ForStatement[0,1].ContainsDuplicateLabels" : "\n        1. Return ContainsDuplicateLabels of |Statement| with argument _labelSet_.\n      ",
  "MethodDefinition[3,0].SpecialMethod" : "\n        1. Return *true*.\n      ",
  "ForStatement[0,5].VarDeclaredNames" : "\n        1. Return the VarDeclaredNames of |Statement|.\n      ",
  "OrdinaryCallBindThis" : "\n          1. Let _thisMode_ be _F_.[[ThisMode]].\n          1. If _thisMode_ is ~lexical~, return ~unused~.\n          1. Let _calleeRealm_ be _F_.[[Realm]].\n          1. Let _localEnv_ be the LexicalEnvironment of _calleeContext_.\n          1. If _thisMode_ is ~strict~, then\n            1. Let _thisValue_ be _thisArgument_.\n          1. Else,\n            1. If _thisArgument_ is either *undefined* or *null*, then\n              1. Let _globalEnv_ be _calleeRealm_.[[GlobalEnv]].\n              1. Assert: _globalEnv_ is a Global Environment Record.\n              1. Let _thisValue_ be _globalEnv_.[[GlobalThisValue]].\n            1. Else,\n              1. Let _thisValue_ be ! ToObject(_thisArgument_).\n              1. NOTE: ToObject produces wrapper objects using _calleeRealm_.\n          1. Assert: _localEnv_ is a Function Environment Record.\n          1. Assert: The next step never returns an abrupt completion because _localEnv_.[[ThisBindingStatus]] is not ~initialized~.\n          1. Perform ! _localEnv_.BindThisValue(_thisValue_).\n          1. Return ~unused~.\n        ",
  "INTRINSICS.String.prototype.codePointAt" : "\n          1. Let _O_ be ? RequireObjectCoercible(*this* value).\n          1. Let _S_ be ? ToString(_O_).\n          1. Let _position_ be ? ToIntegerOrInfinity(_pos_).\n          1. Let _size_ be the length of _S_.\n          1. If _position_ < 0 or _position_ ‚â• _size_, return *undefined*.\n          1. Let _cp_ be CodePointAt(_S_, _position_).\n          1. Return ùîΩ(_cp_.[[CodePoint]]).\n        ",
  "INTRINSICS.ArrayBuffer.prototype.transferToFixedLength" : "\n          1. Let _O_ be the *this* value.\n          1. Return ? ArrayBufferCopyAndDetach(_O_, _newLength_, ~fixed-length~).\n        ",
  "INTRINSICS.Object.prototype.__defineSetter__" : "\n            1. Let _O_ be ? ToObject(*this* value).\n            1. If IsCallable(_setter_) is *false*, throw a *TypeError* exception.\n            1. Let _desc_ be PropertyDescriptor { [[Set]]: _setter_, [[Enumerable]]: *true*, [[Configurable]]: *true* }.\n            1. Let _key_ be ? ToPropertyKey(_P_).\n            1. Perform ? DefinePropertyOrThrow(_O_, _key_, _desc_).\n            1. Return *undefined*.\n          ",
  "ModuleItem[0,0].ExportedBindings" : "\n          1. Return a new empty List.\n        ",
  "BigIntBitwiseOp" : "\n            1. Set _x_ to ‚Ñù(_x_).\n            1. Set _y_ to ‚Ñù(_y_).\n            1. Let _result_ be 0.\n            1. Let _shift_ be 0.\n            1. Repeat, until (_x_ = 0 or _x_ = -1) and (_y_ = 0 or _y_ = -1),\n              1. Let _xDigit_ be _x_ modulo 2.\n              1. Let _yDigit_ be _y_ modulo 2.\n              1. If _op_ is `&`, then\n                1. Set _result_ to _result_ + 2<sup>_shift_</sup> √ó BinaryAnd(_xDigit_, _yDigit_).\n              1. Else if _op_ is `|`, then\n                1. Set _result_ to _result_ + 2<sup>_shift_</sup> √ó BinaryOr(_xDigit_, _yDigit_).\n              1. Else,\n                1. Assert: _op_ is `^`.\n                1. Set _result_ to _result_ + 2<sup>_shift_</sup> √ó BinaryXor(_xDigit_, _yDigit_).\n              1. Set _shift_ to _shift_ + 1.\n              1. Set _x_ to (_x_ - _xDigit_) / 2.\n              1. Set _y_ to (_y_ - _yDigit_) / 2.\n            1. If _op_ is `&`, then\n              1. Let _tmp_ be BinaryAnd(_x_ modulo 2, _y_ modulo 2).\n            1. Else if _op_ is `|`, then\n              1. Let _tmp_ be BinaryOr(_x_ modulo 2, _y_ modulo 2).\n            1. Else,\n              1. Assert: _op_ is `^`.\n              1. Let _tmp_ be BinaryXor(_x_ modulo 2, _y_ modulo 2).\n            1. If _tmp_ ‚â† 0, then\n              1. Set _result_ to _result_ - 2<sup>_shift_</sup>.\n              1. NOTE: This extends the sign.\n            1. Return the BigInt value for _result_.\n          ",
  "RelationalExpression[4,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "ForStatement[0,5].ContainsUndefinedBreakTarget" : "\n        1. Return ContainsUndefinedBreakTarget of |Statement| with argument _labelSet_.\n      ",
  "INTRINSICS.String.prototype.endsWith" : "\n          1. Let _O_ be ? RequireObjectCoercible(*this* value).\n          1. Let _S_ be ? ToString(_O_).\n          1. Let _isRegExp_ be ? IsRegExp(_searchString_).\n          1. If _isRegExp_ is *true*, throw a *TypeError* exception.\n          1. Let _searchStr_ be ? ToString(_searchString_).\n          1. Let _len_ be the length of _S_.\n          1. If _endPosition_ is *undefined*, let _pos_ be _len_; else let _pos_ be ? ToIntegerOrInfinity(_endPosition_).\n          1. Let _end_ be the result of clamping _pos_ between 0 and _len_.\n          1. Let _searchLength_ be the length of _searchStr_.\n          1. If _searchLength_ = 0, return *true*.\n          1. Let _start_ be _end_ - _searchLength_.\n          1. If _start_ < 0, return *false*.\n          1. Let _substring_ be the substring of _S_ from _start_ to _end_.\n          1. If _substring_ is _searchStr_, return *true*.\n          1. Return *false*.\n        ",
  "IdentifierStart[0,0].IdentifierCodePoint" : "\n          1. Return the code point matched by |IdentifierStartChar|.\n        ",
  "ExportDeclaration[4,0].ModuleRequests" : "\n          1. Return a new empty List.\n        ",
  "INTRINSICS.Array.of" : "\n          1. Let _len_ be the number of elements in _items_.\n          1. Let _lenNumber_ be ùîΩ(_len_).\n          1. Let _C_ be the *this* value.\n          1. If IsConstructor(_C_) is *true*, then\n            1. Let _A_ be ? Construct(_C_, ¬´ _lenNumber_ ¬ª).\n          1. Else,\n            1. Let _A_ be ? ArrayCreate(_len_).\n          1. Let _k_ be 0.\n          1. Repeat, while _k_ < _len_,\n            1. Let _kValue_ be _items_[_k_].\n            1. Let _Pk_ be ! ToString(ùîΩ(_k_)).\n            1. Perform ? CreateDataPropertyOrThrow(_A_, _Pk_, _kValue_).\n            1. Set _k_ to _k_ + 1.\n          1. Perform ? Set(_A_, *\"length\"*, _lenNumber_, *true*).\n          1. Return _A_.\n        ",
  "INTRINSICS.Array.prototype.with" : "\n          1. Let _O_ be ? ToObject(*this* value).\n          1. Let _len_ be ? LengthOfArrayLike(_O_).\n          1. Let _relativeIndex_ be ? ToIntegerOrInfinity(_index_).\n          1. If _relativeIndex_ ‚â• 0, let _actualIndex_ be _relativeIndex_.\n          1. Else, let _actualIndex_ be _len_ + _relativeIndex_.\n          1. If _actualIndex_ ‚â• _len_ or _actualIndex_ < 0, throw a *RangeError* exception.\n          1. Let _A_ be ? ArrayCreate(_len_).\n          1. Let _k_ be 0.\n          1. Repeat, while _k_ < _len_,\n            1. Let _Pk_ be ! ToString(ùîΩ(_k_)).\n            1. If _k_ is _actualIndex_, let _fromValue_ be _value_.\n            1. Else, let _fromValue_ be ? Get(_O_, _Pk_).\n            1. Perform ! CreateDataPropertyOrThrow(_A_, _Pk_, _fromValue_).\n            1. Set _k_ to _k_ + 1.\n          1. Return _A_.\n        ",
  "ExportDeclaration[0,0].ExportedNames" : "\n          1. Return the ExportedNames of |ExportFromClause|.\n        ",
  "FunctionDeclaration[1,0].IsConstantDeclaration" : "\n        1. Return *false*.\n      ",
  "HoistableDeclaration[1,0].Evaluation" : "\n        1. Return ~empty~.\n      ",
  "DebuggerStatement[0,0].Evaluation" : "\n        1. If an implementation-defined debugging facility is available and enabled, then\n          1. Perform an implementation-defined debugging action.\n          1. Return a new implementation-defined Completion Record.\n        1. Else,\n          1. Return ~empty~.\n      ",
  "IsDataDescriptor" : "\n          1. If _Desc_ is *undefined*, return *false*.\n          1. If _Desc_ has a [[Value]] field, return *true*.\n          1. If _Desc_ has a [[Writable]] field, return *true*.\n          1. Return *false*.\n        ",
  "CaseBlock[1,2].ContainsUndefinedBreakTarget" : "\n        1. If the first |CaseClauses| is present, then\n          1. If ContainsUndefinedBreakTarget of the first |CaseClauses| with argument _labelSet_ is *true*, return *true*.\n        1. If ContainsUndefinedBreakTarget of |DefaultClause| with argument _labelSet_ is *true*, return *true*.\n        1. If the second |CaseClauses| is not present, return *false*.\n        1. Return ContainsUndefinedBreakTarget of the second |CaseClauses| with argument _labelSet_.\n      ",
  "AsyncArrowFunction[1,0].InstantiateAsyncArrowFunctionExpression" : "\n        1. If _name_ is not present, set _name_ to *\"\"*.\n        1. Let _env_ be the LexicalEnvironment of the running execution context.\n        1. Let _privateEnv_ be the running execution context's PrivateEnvironment.\n        1. Let _sourceText_ be the source text matched by |AsyncArrowFunction|.\n        1. Let _head_ be the |AsyncArrowHead| that is covered by |CoverCallExpressionAndAsyncArrowHead|.\n        1. Let _parameters_ be the |ArrowFormalParameters| of _head_.\n        1. Let _closure_ be OrdinaryFunctionCreate(%AsyncFunction.prototype%, _sourceText_, _parameters_, |AsyncConciseBody|, ~lexical-this~, _env_, _privateEnv_).\n        1. Perform SetFunctionName(_closure_, _name_).\n        1. Return _closure_.\n      ",
  "BindingIdentifier[2,0].Evaluation" : "\n          1. Let _bindingId_ be StringValue of |BindingIdentifier|.\n          1. Return ? ResolveBinding(_bindingId_).\n        ",
  "FunctionExpression[0,0].Contains" : "\n        1. Return *false*.\n      ",
  "AdditiveExpression[1,0].AssignmentTargetType" : "\n        1. Return ~invalid~.\n      ",
  "ForInOfStatement[8,0].VarScopedDeclarations" : "\n        1. Return the VarScopedDeclarations of |Statement|.\n      ",
  "Script[0,0].LexicallyDeclaredNames" : "\n        1. Return a new empty List.\n      ",
  "AsyncArrowBindingIdentifier[0,0].IsSimpleParameterList" : "\n        1. Return *true*.\n      ",
  "Record[ModuleNamespaceExoticObject].Get" : "\n          1. If _P_ is a Symbol, then\n            1. Return ! OrdinaryGet(_O_, _P_, _Receiver_).\n          1. Let _exports_ be _O_.[[Exports]].\n          1. If _exports_ does not contain _P_, return *undefined*.\n          1. Let _m_ be _O_.[[Module]].\n          1. Let _binding_ be _m_.ResolveExport(_P_).\n          1. Assert: _binding_ is a ResolvedBinding Record.\n          1. Let _targetModule_ be _binding_.[[Module]].\n          1. Assert: _targetModule_ is not *undefined*.\n          1. If _binding_.[[BindingName]] is ~namespace~, then\n            1. Return GetModuleNamespace(_targetModule_).\n          1. Let _targetEnv_ be _targetModule_.[[Environment]].\n          1. If _targetEnv_ is ~empty~, throw a *ReferenceError* exception.\n          1. Return ? _targetEnv_.GetBindingValue(_binding_.[[BindingName]], *true*).\n        ",
  "BindingIdentifier[1,0].StringValue" : "\n        1. Return *\"yield\"*.\n      ",
  "Statement[13,0].ContainsUndefinedBreakTarget" : "\n        1. Return *false*.\n      ",
  "INTRINSICS.yet:PromiseResolveFunction" : "\n            1. Let _F_ be the active function object.\n            1. Assert: _F_ has a [[Promise]] internal slot whose value is an Object.\n            1. Let _promise_ be _F_.[[Promise]].\n            1. Let _alreadyResolved_ be _F_.[[AlreadyResolved]].\n            1. If _alreadyResolved_.[[Value]] is *true*, return *undefined*.\n            1. Set _alreadyResolved_.[[Value]] to *true*.\n            1. If SameValue(_resolution_, _promise_) is *true*, then\n              1. Let _selfResolutionError_ be a newly created *TypeError* object.\n              1. Perform RejectPromise(_promise_, _selfResolutionError_).\n              1. Return *undefined*.\n            1. If _resolution_ is not an Object, then\n              1. Perform FulfillPromise(_promise_, _resolution_).\n              1. Return *undefined*.\n            1. Let _then_ be Completion(Get(_resolution_, *\"then\"*)).\n            1. If _then_ is an abrupt completion, then\n              1. Perform RejectPromise(_promise_, _then_.[[Value]]).\n              1. Return *undefined*.\n            1. Let _thenAction_ be _then_.[[Value]].\n            1. If IsCallable(_thenAction_) is *false*, then\n              1. Perform FulfillPromise(_promise_, _resolution_).\n              1. Return *undefined*.\n            1. Let _thenJobCallback_ be HostMakeJobCallback(_thenAction_).\n            1. Let _job_ be NewPromiseResolveThenableJob(_promise_, _resolution_, _thenJobCallback_).\n            1. Perform HostEnqueuePromiseJob(_job_.[[Job]], _job_.[[Realm]]).\n            1. Return *undefined*.\n          ",
  "RegExpIdentifierStart[0,0].RegExpIdentifierCodePoint" : "\n          1. Return the code point matched by |IdentifierStartChar|.\n        ",
  "GetPromiseResolve" : "\n            1. Let _promiseResolve_ be ? Get(_promiseConstructor_, *\"resolve\"*).\n            1. If IsCallable(_promiseResolve_) is *false*, throw a *TypeError* exception.\n            1. Return _promiseResolve_.\n          ",
  "DoWhileStatement[0,0].ContainsUndefinedBreakTarget" : "\n        1. Return ContainsUndefinedBreakTarget of |Statement| with argument _labelSet_.\n      ",
  "AssignmentExpression[6,0].AssignmentTargetType" : "\n        1. Return ~invalid~.\n      ",
  "OptionalExpression[2,0].HasCallInTailPosition" : "\n        1. Return HasCallInTailPosition of |OptionalChain| with argument _call_.\n      ",
  "PrimaryExpression[12,0].IsFunctionDefinition" : "\n        1. Let _expr_ be the |ParenthesizedExpression| that is covered by |CoverParenthesizedExpressionAndArrowParameterList|.\n        1. Return IsFunctionDefinition of _expr_.\n      ",
  "UnaryExpression[5,0].AssignmentTargetType" : "\n        1. Return ~invalid~.\n      ",
  "INTRINSICS._NativeError_" : "\n            1. If NewTarget is *undefined*, let _newTarget_ be the active function object; else let _newTarget_ be NewTarget.\n            1. [id=\"step-nativerror-ordinarycreatefromconstructor\"] Let _O_ be ? OrdinaryCreateFromConstructor(_newTarget_, <code>\"%<var>NativeError</var>.prototype%\"</code>, ¬´ [[ErrorData]] ¬ª).\n            1. If _message_ is not *undefined*, then\n              1. Let _msg_ be ? ToString(_message_).\n              1. Perform CreateNonEnumerableDataPropertyOrThrow(_O_, *\"message\"*, _msg_).\n            1. Perform ? InstallErrorCause(_O_, _options_).\n            1. Return _O_.\n          ",
  "Module[0,0].ImportEntries" : "\n          1. Return a new empty List.\n        ",
  "CreateSetIterator" : "\n          1. Perform ? RequireInternalSlot(_set_, [[SetData]]).\n          1. Let _closure_ be a new Abstract Closure with no parameters that captures _set_ and _kind_ and performs the following steps when called:\n            1. Let _index_ be 0.\n            1. Let _entries_ be _set_.[[SetData]].\n            1. Let _numEntries_ be the number of elements in _entries_.\n            1. Repeat, while _index_ < _numEntries_,\n              1. Let _e_ be _entries_[_index_].\n              1. Set _index_ to _index_ + 1.\n              1. If _e_ is not ~empty~, then\n                1. If _kind_ is ~key+value~, then\n                  1. Let _result_ be CreateArrayFromList(¬´ _e_, _e_ ¬ª).\n                  1. Perform ? GeneratorYield(CreateIterResultObject(_result_, *false*)).\n                1. Else,\n                  1. Assert: _kind_ is ~value~.\n                  1. Perform ? GeneratorYield(CreateIterResultObject(_e_, *false*)).\n                1. NOTE: The number of elements in _entries_ may have increased while execution of this abstract operation was paused by Yield.\n                1. Set _numEntries_ to the number of elements in _entries_.\n            1. Return NormalCompletion(*undefined*).\n          1. Return CreateIteratorFromClosure(_closure_, *\"%SetIteratorPrototype%\"*, %SetIteratorPrototype%).\n        ",
  "Record[ECMAScriptFunctionObject].Construct" : "\n        1. Let _callerContext_ be the running execution context.\n        1. Let _kind_ be _F_.[[ConstructorKind]].\n        1. If _kind_ is ~base~, then\n          1. Let _thisArgument_ be ? OrdinaryCreateFromConstructor(_newTarget_, *\"%Object.prototype%\"*).\n        1. Let _calleeContext_ be PrepareForOrdinaryCall(_F_, _newTarget_).\n        1. Assert: _calleeContext_ is now the running execution context.\n        1. If _kind_ is ~base~, then\n          1. Perform OrdinaryCallBindThis(_F_, _calleeContext_, _thisArgument_).\n          1. Let _initializeResult_ be Completion(InitializeInstanceElements(_thisArgument_, _F_)).\n          1. If _initializeResult_ is an abrupt completion, then\n            1. Remove _calleeContext_ from the execution context stack and restore _callerContext_ as the running execution context.\n            1. Return ? _initializeResult_.\n        1. Let _constructorEnv_ be the LexicalEnvironment of _calleeContext_.\n        1. Let _result_ be Completion(OrdinaryCallEvaluateBody(_F_, _argumentsList_)).\n        1. Remove _calleeContext_ from the execution context stack and restore _callerContext_ as the running execution context.\n        1. If _result_ is a return completion, then\n          1. If _result_.[[Value]] is an Object, return _result_.[[Value]].\n          1. If _kind_ is ~base~, return _thisArgument_.\n          1. If _result_.[[Value]] is not *undefined*, throw a *TypeError* exception.\n        1. Else,\n          1. ReturnIfAbrupt(_result_).\n        1. Let _thisBinding_ be ? _constructorEnv_.GetThisBinding().\n        1. Assert: _thisBinding_ is an Object.\n        1. Return _thisBinding_.\n      ",
  "CallExpression[5,0].AssignmentTargetType" : "\n        1. Return ~simple~.\n      ",
  "RemoveWaiters" : "\n          1. Assert: The surrounding agent is in the critical section for _WL_.\n          1. Let _len_ be the number of elements in _WL_.[[Waiters]].\n          1. Let _n_ be min(_c_, _len_).\n          1. Let _L_ be a List whose elements are the first _n_ elements of _WL_.[[Waiters]].\n          1. Remove the first _n_ elements of _WL_.[[Waiters]].\n          1. Return _L_.\n        ",
  "CreateMapIterator" : "\n          1. Perform ? RequireInternalSlot(_map_, [[MapData]]).\n          1. Let _closure_ be a new Abstract Closure with no parameters that captures _map_ and _kind_ and performs the following steps when called:\n            1. Let _entries_ be _map_.[[MapData]].\n            1. Let _index_ be 0.\n            1. Let _numEntries_ be the number of elements in _entries_.\n            1. Repeat, while _index_ < _numEntries_,\n              1. Let _e_ be _entries_[_index_].\n              1. Set _index_ to _index_ + 1.\n              1. If _e_.[[Key]] is not ~empty~, then\n                1. If _kind_ is ~key~, then\n                  1. Let _result_ be _e_.[[Key]].\n                1. Else if _kind_ is ~value~, then\n                  1. Let _result_ be _e_.[[Value]].\n                1. Else,\n                  1. Assert: _kind_ is ~key+value~.\n                  1. Let _result_ be CreateArrayFromList(¬´ _e_.[[Key]], _e_.[[Value]] ¬ª).\n                1. Perform ? GeneratorYield(CreateIterResultObject(_result_, *false*)).\n                1. NOTE: The number of elements in _entries_ may have increased while execution of this abstract operation was paused by Yield.\n                1. Set _numEntries_ to the number of elements in _entries_.\n            1. Return NormalCompletion(*undefined*).\n          1. Return CreateIteratorFromClosure(_closure_, *\"%MapIteratorPrototype%\"*, %MapIteratorPrototype%).\n        ",
  "SuspendThisAgent" : "\n          1. Assert: The surrounding agent is in the critical section for _WL_.\n          1. Assert: _WL_.[[Waiters]] contains _waiterRecord_.\n          1. Let _thisAgent_ be AgentSignifier().\n          1. Assert: _waiterRecord_.[[AgentSignifier]] is _thisAgent_.\n          1. Assert: _waiterRecord_.[[PromiseCapability]] is ~blocking~.\n          1. Assert: AgentCanSuspend() is *true*.\n          1. Perform LeaveCriticalSection(_WL_) and suspend the surrounding agent until the time is _waiterRecord_.[[TimeoutTime]], performing the combined operation in such a way that a notification that arrives after the critical section is exited but before the suspension takes effect is not lost. The surrounding agent can only wake from suspension due to a timeout or due to another agent calling NotifyWaiter with arguments _WL_ and _thisAgent_ (i.e. via a call to `Atomics.notify`).\n          1. Perform EnterCriticalSection(_WL_).\n          1. Return ~unused~.\n        ",
  "ExecuteAsyncModule:clo1" : "\n              1. Assert: _module_.[[Status]] is either ~evaluating~ or ~evaluating-async~.\n              1. Assert: _module_.[[HasTLA]] is *true*.\n              1. Let _capability_ be ! NewPromiseCapability(%Promise%).\n              1. Let _fulfilledClosure_ be a new Abstract Closure with no parameters that captures _module_ and performs the following steps when called:\n                1. Perform AsyncModuleExecutionFulfilled(_module_).\n                1. Return *undefined*.\n              1. Let _onFulfilled_ be CreateBuiltinFunction(_fulfilledClosure_, 0, *\"\"*, ¬´ ¬ª).\n              1. Let _rejectedClosure_ be a new Abstract Closure with parameters (_error_) that captures _module_ and performs the following steps when called:\n                1. Perform AsyncModuleExecutionRejected(_module_, _error_).\n                1. Return *undefined*.\n              1. Let _onRejected_ be CreateBuiltinFunction(_rejectedClosure_, 0, *\"\"*, ¬´ ¬ª).\n              1. Perform PerformPromiseThen(_capability_.[[Promise]], _onFulfilled_, _onRejected_).\n              1. Perform ! <emu-meta effects=\"user-code\">_module_.ExecuteModule</emu-meta>(_capability_).\n              1. Return ~unused~.\n            ",
  "ExportDeclaration[6,0].Evaluation" : "\n          1. If IsAnonymousFunctionDefinition(|AssignmentExpression|) is *true*, then\n            1. Let _value_ be ? NamedEvaluation of |AssignmentExpression| with argument *\"default\"*.\n          1. Else,\n            1. Let _rhs_ be ? Evaluation of |AssignmentExpression|.\n            1. Let _value_ be ? GetValue(_rhs_).\n          1. Let _env_ be the running execution context's LexicalEnvironment.\n          1. Perform ? InitializeBoundName(*\"\\*default\\*\"*, _value_, _env_).\n          1. Return ~empty~.\n        ",
  "PropertyDefinition[3,0].Contains" : "\n        1. If _symbol_ is |MethodDefinition|, return *true*.\n        1. Return the result of ComputedPropertyContains of |MethodDefinition| with argument _symbol_.\n      ",
  "Number::bitwiseAND" : "\n            1. Return NumberBitwiseOp(`&`, _x_, _y_).\n          ",
  "ClassElementName[1,0].PropName" : "\n        1. Return ~empty~.\n      ",
  "DefaultClause[0,0].LexicallyDeclaredNames" : "\n        1. If the |StatementList| is present, return the LexicallyDeclaredNames of |StatementList|.\n        1. Return a new empty List.\n      ",
  "Record[OrdinaryObject].Set" : "\n        1. Return ? OrdinarySet(_O_, _P_, _V_, _Receiver_).\n      ",
  "INTRINSICS.Date.prototype.setSeconds" : "\n          1. Let _dateObject_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_dateObject_, [[DateValue]]).\n          1. Let _t_ be _dateObject_.[[DateValue]].\n          1. Let _s_ be ? ToNumber(_sec_).\n          1. If _ms_ is present, let _milli_ be ? ToNumber(_ms_).\n          1. If _t_ is *NaN*, return *NaN*.\n          1. Set _t_ to LocalTime(_t_).\n          1. If _ms_ is not present, let _milli_ be msFromTime(_t_).\n          1. Let _date_ be MakeDate(Day(_t_), MakeTime(HourFromTime(_t_), MinFromTime(_t_), _s_, _milli_)).\n          1. Let _u_ be TimeClip(UTC(_date_)).\n          1. Set _dateObject_.[[DateValue]] to _u_.\n          1. Return _u_.\n        ",
  "CreateIntrinsics" : "\n        1. Set _realmRec_.[[Intrinsics]] to a new Record.\n        1. [declared=\"steps,name,length,slots,prototype\"] Set fields of _realmRec_.[[Intrinsics]] with the values listed in <emu-xref href=\"#table-well-known-intrinsic-objects\"></emu-xref>. The field names are the names listed in column one of the table. The value of each field is a new object value fully and recursively populated with property values as defined by the specification of each object in clauses <emu-xref href=\"#sec-global-object\"></emu-xref> through <emu-xref href=\"#sec-reflection\"></emu-xref>. All object property values are newly created object values. All values that are built-in function objects are created by performing CreateBuiltinFunction(_steps_, _length_, _name_, _slots_, _realmRec_, _prototype_) where _steps_ is the definition of that function provided by this specification, _name_ is the initial value of the function's *\"name\"* property, _length_ is the initial value of the function's *\"length\"* property, _slots_ is a list of the names, if any, of the function's specified internal slots, and _prototype_ is the specified value of the function's [[Prototype]] internal slot. The creation of the intrinsics and their properties must be ordered to avoid any dependencies upon objects that have not yet been created.\n        1. Perform AddRestrictedFunctionProperties(_realmRec_.[[Intrinsics]].[[%Function.prototype%]], _realmRec_).\n        1. Return ~unused~.\n      ",
  "CaseClause[0,0].HasCallInTailPosition" : "\n        1. If |StatementList| is present, return HasCallInTailPosition of |StatementList| with argument _call_.\n        1. Return *false*.\n      ",
  "ToZeroPaddedDecimalString" : "\n            1. Let _S_ be the String representation of _n_, formatted as a decimal number.\n            1. Return StringPad(_S_, _minLength_, *\"0\"*, ~start~).\n          ",
  "INTRINSICS.Date.prototype.getUTCDate" : "\n          1. Let _dateObject_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_dateObject_, [[DateValue]]).\n          1. Let _t_ be _dateObject_.[[DateValue]].\n          1. If _t_ is *NaN*, return *NaN*.\n          1. Return DateFromTime(_t_).\n        ",
  "Statement[8,0].LabelledEvaluation" : "\n        1. Return ? Evaluation of |Statement|.\n      ",
  "WhileStatement[0,0].WhileLoopEvaluation" : "\n          1. Let _V_ be *undefined*.\n          1. Repeat,\n            1. Let _exprRef_ be ? Evaluation of |Expression|.\n            1. Let _exprValue_ be ? GetValue(_exprRef_).\n            1. If ToBoolean(_exprValue_) is *false*, return _V_.\n            1. Let _stmtResult_ be Completion(Evaluation of |Statement|).\n            1. If LoopContinues(_stmtResult_, _labelSet_) is *false*, return ? UpdateEmpty(_stmtResult_, _V_).\n            1. If _stmtResult_.[[Value]] is not ~empty~, set _V_ to _stmtResult_.[[Value]].\n        ",
  "IsInTailPosition" : "\n        1. If the source text matched by _call_ is non-strict code, return *false*.\n        1. If _call_ is not contained within a |FunctionBody|, a |ConciseBody|, or an |AsyncConciseBody|, return *false*.\n        1. Let _body_ be the |FunctionBody|, |ConciseBody|, or |AsyncConciseBody| that most closely contains _call_.\n        1. If _body_ is the |FunctionBody| of a |GeneratorBody|, return *false*.\n        1. If _body_ is the |FunctionBody| of an |AsyncFunctionBody|, return *false*.\n        1. If _body_ is the |FunctionBody| of an |AsyncGeneratorBody|, return *false*.\n        1. If _body_ is an |AsyncConciseBody|, return *false*.\n        1. Return the result of HasCallInTailPosition of _body_ with argument _call_.\n      ",
  "INTRINSICS.Boolean" : "\n          1. Let _b_ be ToBoolean(_value_).\n          1. If NewTarget is *undefined*, return _b_.\n          1. Let _O_ be ? OrdinaryCreateFromConstructor(NewTarget, *\"%Boolean.prototype%\"*, ¬´ [[BooleanData]] ¬ª).\n          1. Set _O_.[[BooleanData]] to _b_.\n          1. Return _O_.\n        ",
  "MultiplicativeExpression[1,0].IsFunctionDefinition" : "\n        1. Return *false*.\n      ",
  "ClassElementList[0,0].ConstructorMethod" : "\n        1. If ClassElementKind of |ClassElement| is ~constructor-method~, return |ClassElement|.\n        1. Return ~empty~.\n      ",
  "GetSubstitution" : "\n            1. Let _stringLength_ be the length of _str_.\n            1. Assert: _position_ ‚â§ _stringLength_.\n            1. Let _result_ be the empty String.\n            1. Let _templateRemainder_ be _replacementTemplate_.\n            1. Repeat, while _templateRemainder_ is not the empty String,\n              1. [declared=\"ref,refReplacement\"] NOTE: The following steps isolate _ref_ (a prefix of _templateRemainder_), determine _refReplacement_ (its replacement), and then append that replacement to _result_.\n              1. If _templateRemainder_ starts with *\"$$\"*, then\n                1. Let _ref_ be *\"$$\"*.\n                1. Let _refReplacement_ be *\"$\"*.\n              1. Else if _templateRemainder_ starts with *\"$`\"*, then\n                1. Let _ref_ be *\"$`\"*.\n                1. Let _refReplacement_ be the substring of _str_ from 0 to _position_.\n              1. Else if _templateRemainder_ starts with *\"$&\"*, then\n                1. Let _ref_ be *\"$&\"*.\n                1. Let _refReplacement_ be _matched_.\n              1. Else if _templateRemainder_ starts with *\"$'\"* (0x0024 (DOLLAR SIGN) followed by 0x0027 (APOSTROPHE)), then\n                1. Let _ref_ be *\"$'\"*.\n                1. Let _matchLength_ be the length of _matched_.\n                1. Let _tailPos_ be _position_ + _matchLength_.\n                1. Let _refReplacement_ be the substring of _str_ from min(_tailPos_, _stringLength_).\n                1. NOTE: _tailPos_ can exceed _stringLength_ only if this abstract operation was invoked by a call to the intrinsic @@replace method of %RegExp.prototype% on an object whose *\"exec\"* property is not the intrinsic %RegExp.prototype.exec%.\n              1. Else if _templateRemainder_ starts with *\"$\"* followed by 1 or more decimal digits, then\n                1. If _templateRemainder_ starts with *\"$\"* followed by 2 or more decimal digits, let _digitCount_ be 2. Otherwise, let _digitCount_ be 1.\n                1. Let _digits_ be the substring of _templateRemainder_ from 1 to 1 + _digitCount_.\n                1. Let _index_ be ‚Ñù(StringToNumber(_digits_)).\n                1. Assert: 0 ‚â§ _index_ ‚â§ 99.\n                1. Let _captureLen_ be the number of elements in _captures_.\n                1. If _index_ > _captureLen_ and _digitCount_ = 2, then\n                  1. NOTE: When a two-digit replacement pattern specifies an index exceeding the count of capturing groups, it is treated as a one-digit replacement pattern followed by a literal digit.\n                  1. Set _digitCount_ to 1.\n                  1. Set _digits_ to the substring of _digits_ from 0 to 1.\n                  1. Set _index_ to ‚Ñù(StringToNumber(_digits_)).\n                1. Let _ref_ be the substring of _templateRemainder_ from 0 to 1 + _digitCount_.\n                1. If 1 ‚â§ _index_ ‚â§ _captureLen_, then\n                  1. Let _capture_ be _captures_[_index_ - 1].\n                  1. If _capture_ is *undefined*, then\n                    1. Let _refReplacement_ be the empty String.\n                  1. Else,\n                    1. Let _refReplacement_ be _capture_.\n                1. Else,\n                  1. Let _refReplacement_ be _ref_.\n              1. Else if _templateRemainder_ starts with *\"$<\"*, then\n                1. Let _gtPos_ be StringIndexOf(_templateRemainder_, *\">\"*, 0).\n                1. If _gtPos_ = -1 or _namedCaptures_ is *undefined*, then\n                  1. Let _ref_ be *\"$<\"*.\n                  1. Let _refReplacement_ be _ref_.\n                1. Else,\n                  1. Let _ref_ be the substring of _templateRemainder_ from 0 to _gtPos_ + 1.\n                  1. Let _groupName_ be the substring of _templateRemainder_ from 2 to _gtPos_.\n                  1. Assert: _namedCaptures_ is an Object.\n                  1. Let _capture_ be ? Get(_namedCaptures_, _groupName_).\n                  1. If _capture_ is *undefined*, then\n                    1. Let _refReplacement_ be the empty String.\n                  1. Else,\n                    1. Let _refReplacement_ be ? ToString(_capture_).\n              1. Else,\n                1. Let _ref_ be the substring of _templateRemainder_ from 0 to 1.\n                1. Let _refReplacement_ be _ref_.\n              1. Let _refLength_ be the length of _ref_.\n              1. Set _templateRemainder_ to the substring of _templateRemainder_ from _refLength_.\n              1. Set _result_ to the string-concatenation of _result_ and _refReplacement_.\n            1. Return _result_.\n          ",
  "INTRINSICS.yet:`Promise.any`RejectElementFunction" : "\n            1. Let _F_ be the active function object.\n            1. If _F_.[[AlreadyCalled]] is *true*, return *undefined*.\n            1. Set _F_.[[AlreadyCalled]] to *true*.\n            1. Let _index_ be _F_.[[Index]].\n            1. Let _errors_ be _F_.[[Errors]].\n            1. Let _promiseCapability_ be _F_.[[Capability]].\n            1. Let _remainingElementsCount_ be _F_.[[RemainingElements]].\n            1. Set _errors_[_index_] to _x_.\n            1. Set _remainingElementsCount_.[[Value]] to _remainingElementsCount_.[[Value]] - 1.\n            1. If _remainingElementsCount_.[[Value]] = 0, then\n              1. Let _error_ be a newly created *AggregateError* object.\n              1. Perform ! DefinePropertyOrThrow(_error_, *\"errors\"*, PropertyDescriptor { [[Configurable]]: *true*, [[Enumerable]]: *false*, [[Writable]]: *true*, [[Value]]: CreateArrayFromList(_errors_) }).\n              1. Return ? Call(_promiseCapability_.[[Reject]], *undefined*, ¬´ _error_ ¬ª).\n            1. Return *undefined*.\n          ",
  "FormalParameters[0,0].ContainsExpression" : "\n        1. Return *false*.\n      ",
  "HostGetImportMetaProperties" : null,
  "INTRINSICS.decodeURIComponent" : "\n          1. Let _componentString_ be ? ToString(_encodedURIComponent_).\n          1. Let _preserveEscapeSet_ be the empty String.\n          1. Return ? Decode(_componentString_, _preserveEscapeSet_).\n        ",
  "OrdinaryPreventExtensions" : "\n          1. Set _O_.[[Extensible]] to *false*.\n          1. Return *true*.\n        ",
  "INTRINSICS.get SharedArrayBuffer.prototype.maxByteLength" : "\n          1. Let _O_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_O_, [[ArrayBufferData]]).\n          1. If IsSharedArrayBuffer(_O_) is *false*, throw a *TypeError* exception.\n          1. If IsFixedLengthArrayBuffer(_O_) is *true*, then\n            1. Let _length_ be _O_.[[ArrayBufferByteLength]].\n          1. Else,\n            1. Let _length_ be _O_.[[ArrayBufferMaxByteLength]].\n          1. Return ùîΩ(_length_).\n        ",
  "IsStrictlyEqual" : "\n        1. If Type(_x_) is not Type(_y_), return *false*.\n        1. If _x_ is a Number, then\n          1. Return Number::equal(_x_, _y_).\n        1. Return SameValueNonNumber(_x_, _y_).\n      ",
  "KeyForSymbol" : "\n          1. For each element _e_ of the GlobalSymbolRegistry List, do\n            1. If SameValue(_e_.[[Symbol]], _sym_) is *true*, return _e_.[[Key]].\n          1. Assert: GlobalSymbolRegistry does not currently contain an entry for _sym_.\n          1. Return *undefined*.\n        ",
  "GetOwnPropertyKeys" : "\n            1. Let _obj_ be ? ToObject(_O_).\n            1. Let _keys_ be ? <emu-meta effects=\"user-code\">_obj_.[[OwnPropertyKeys]]()</emu-meta>.\n            1. Let _nameList_ be a new empty List.\n            1. For each element _nextKey_ of _keys_, do\n              1. If _nextKey_ is a Symbol and _type_ is ~symbol~, or if _nextKey_ is a String and _type_ is ~string~, then\n                1. Append _nextKey_ to _nameList_.\n            1. Return _nameList_.\n          ",
  "Record[TypedArray].GetOwnProperty" : "\n          1. If _P_ is a String, then\n            1. Let _numericIndex_ be CanonicalNumericIndexString(_P_).\n            1. If _numericIndex_ is not *undefined*, then\n              1. Let _value_ be TypedArrayGetElement(_O_, _numericIndex_).\n              1. If _value_ is *undefined*, return *undefined*.\n              1. Return the PropertyDescriptor { [[Value]]: _value_, [[Writable]]: *true*, [[Enumerable]]: *true*, [[Configurable]]: *true* }.\n          1. Return OrdinaryGetOwnProperty(_O_, _P_).\n        ",
  "INTRINSICS.String.prototype.toString" : "\n          1. Return ? ThisStringValue(*this* value).\n        ",
  "FinishLoadingImportedModule" : "\n          1. If _result_ is a normal completion, then\n            1. If _referrer_.[[LoadedModules]] contains a Record whose [[Specifier]] is _specifier_, then\n              1. Assert: That Record's [[Module]] is _result_.[[Value]].\n            1. Else,\n              1. Append the Record { [[Specifier]]: _specifier_, [[Module]]: _result_.[[Value]] } to _referrer_.[[LoadedModules]].\n          1. If _payload_ is a GraphLoadingState Record, then\n            1. Perform ContinueModuleLoading(_payload_, _result_).\n          1. Else,\n            1. Perform ContinueDynamicImport(_payload_, _result_).\n          1. Return ~unused~.\n        ",
  "ExportDeclaration[6,0].ExportedNames" : "\n          1. Return ¬´ *\"default\"* ¬ª.\n        ",
  "BindingElement[1,1].ContainsExpression" : "\n        1. Return *true*.\n      ",
  "Record[GlobalEnvironmentRecord].WithBaseObject" : "\n            1. Return *undefined*.\n          ",
  "Statement[2,0].VarScopedDeclarations" : "\n        1. Return a new empty List.\n      ",
  "INTRINSICS.get Array[@@species]" : "\n          1. Return the *this* value.\n        ",
  "ObjectLiteral[1,0].Evaluation" : "\n          1. Let _obj_ be OrdinaryObjectCreate(%Object.prototype%).\n          1. Perform ? PropertyDefinitionEvaluation of |PropertyDefinitionList| with argument _obj_.\n          1. Return _obj_.\n        ",
  "DoWhileStatement[0,0].VarScopedDeclarations" : "\n        1. Return the VarScopedDeclarations of |Statement|.\n      ",
  "ForStatement[0,5].ContainsUndefinedContinueTarget" : "\n        1. Return ContainsUndefinedContinueTarget of |Statement| with arguments _iterationSet_ and ¬´ ¬ª.\n      ",
  "CaseBlock[1,3].ContainsUndefinedBreakTarget" : "\n        1. If the first |CaseClauses| is present, then\n          1. If ContainsUndefinedBreakTarget of the first |CaseClauses| with argument _labelSet_ is *true*, return *true*.\n        1. If ContainsUndefinedBreakTarget of |DefaultClause| with argument _labelSet_ is *true*, return *true*.\n        1. If the second |CaseClauses| is not present, return *false*.\n        1. Return ContainsUndefinedBreakTarget of the second |CaseClauses| with argument _labelSet_.\n      ",
  "AdditiveExpression[1,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "UnaryExpression[5,0].Evaluation" : "\n          1. Let _expr_ be ? Evaluation of |UnaryExpression|.\n          1. Let _oldValue_ be ? ToNumeric(? GetValue(_expr_)).\n          1. If _oldValue_ is a Number, then\n            1. Return Number::unaryMinus(_oldValue_).\n          1. Else,\n            1. Assert: _oldValue_ is a BigInt.\n            1. Return BigInt::unaryMinus(_oldValue_).\n        ",
  "TypedArraySetElement" : "\n          1. If _O_.[[ContentType]] is ~bigint~, let _numValue_ be ? ToBigInt(_value_).\n          1. Otherwise, let _numValue_ be ? ToNumber(_value_).\n          1. If IsValidIntegerIndex(_O_, _index_) is *true*, then\n            1. Let _offset_ be _O_.[[ByteOffset]].\n            1. Let _elementSize_ be TypedArrayElementSize(_O_).\n            1. Let _byteIndexInBuffer_ be (‚Ñù(_index_) √ó _elementSize_) + _offset_.\n            1. Let _elementType_ be TypedArrayElementType(_O_).\n            1. Perform SetValueInBuffer(_O_.[[ViewedArrayBuffer]], _byteIndexInBuffer_, _elementType_, _numValue_, *true*, ~unordered~).\n          1. Return ~unused~.\n        ",
  "PropertyDefinition[0,0].PropName" : "\n        1. Return StringValue of |IdentifierReference|.\n      ",
  "INTRINSICS.ForInIteratorPrototype.next" : "\n              1. Let _O_ be the *this* value.\n              1. Assert: _O_ is an Object.\n              1. Assert: _O_ has all of the internal slots of a For-In Iterator Instance (<emu-xref href=\"#sec-properties-of-for-in-iterator-instances\"></emu-xref>).\n              1. Let _object_ be _O_.[[Object]].\n              1. Repeat,\n                1. If _O_.[[ObjectWasVisited]] is *false*, then\n                  1. Let _keys_ be ? <emu-meta effects=\"user-code\">_object_.[[OwnPropertyKeys]]()</emu-meta>.\n                  1. For each element _key_ of _keys_, do\n                    1. If _key_ is a String, then\n                      1. Append _key_ to _O_.[[RemainingKeys]].\n                  1. Set _O_.[[ObjectWasVisited]] to *true*.\n                1. Repeat, while _O_.[[RemainingKeys]] is not empty,\n                  1. Let _r_ be the first element of _O_.[[RemainingKeys]].\n                  1. Remove the first element from _O_.[[RemainingKeys]].\n                  1. If there does not exist an element _v_ of _O_.[[VisitedKeys]] such that SameValue(_r_, _v_) is *true*, then\n                    1. Let _desc_ be ? <emu-meta effects=\"user-code\">_object_.[[GetOwnProperty]]</emu-meta>(_r_).\n                    1. If _desc_ is not *undefined*, then\n                      1. Append _r_ to _O_.[[VisitedKeys]].\n                      1. If _desc_.[[Enumerable]] is *true*, return CreateIterResultObject(_r_, *false*).\n                1. Set _object_ to ? <emu-meta effects=\"user-code\">_object_.[[GetPrototypeOf]]()</emu-meta>.\n                1. Set _O_.[[Object]] to _object_.\n                1. Set _O_.[[ObjectWasVisited]] to *false*.\n                1. If _object_ is *null*, return CreateIterResultObject(*undefined*, *true*).\n            ",
  "RegExpUnicodeEscapeSequence[0,0].CharacterValue" : "\n          1. Let _lead_ be the CharacterValue of |HexLeadSurrogate|.\n          1. Let _trail_ be the CharacterValue of |HexTrailSurrogate|.\n          1. Let _cp_ be UTF16SurrogatePairToCodePoint(_lead_, _trail_).\n          1. Return the numeric value of _cp_.\n        ",
  "GetValueFromBuffer" : "\n          1. Assert: IsDetachedBuffer(_arrayBuffer_) is *false*.\n          1. Assert: There are sufficient bytes in _arrayBuffer_ starting at _byteIndex_ to represent a value of _type_.\n          1. Let _block_ be _arrayBuffer_.[[ArrayBufferData]].\n          1. Let _elementSize_ be the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"></emu-xref> for Element Type _type_.\n          1. If IsSharedArrayBuffer(_arrayBuffer_) is *true*, then\n            1. Assert: _block_ is a Shared Data Block.\n            1. Let _rawValue_ be GetRawBytesFromSharedBlock(_block_, _byteIndex_, _type_, _isTypedArray_, _order_).\n          1. Else,\n            1. Let _rawValue_ be a List whose elements are bytes from _block_ at indices in the interval from _byteIndex_ (inclusive) to _byteIndex_ + _elementSize_ (exclusive).\n          1. Assert: The number of elements in _rawValue_ is _elementSize_.\n          1. If _isLittleEndian_ is not present, set _isLittleEndian_ to the value of the [[LittleEndian]] field of the surrounding agent's Agent Record.\n          1. Return RawBytesToNumeric(_type_, _rawValue_, _isLittleEndian_).\n        ",
  "AsyncGeneratorStart" : "\n          1. Assert: _generator_.[[AsyncGeneratorState]] is *undefined*.\n          1. Let _genContext_ be the running execution context.\n          1. Set the Generator component of _genContext_ to _generator_.\n          1. Let _closure_ be a new Abstract Closure with no parameters that captures _generatorBody_ and performs the following steps when called:\n            1. Let _acGenContext_ be the running execution context.\n            1. Let _acGenerator_ be the Generator component of _acGenContext_.\n            1. If _generatorBody_ is a Parse Node, then\n              1. Let _result_ be Completion(Evaluation of _generatorBody_).\n            1. Else,\n              1. Assert: _generatorBody_ is an Abstract Closure with no parameters.\n              1. Let _result_ be Completion(_generatorBody_()).\n            1. Assert: If we return here, the async generator either threw an exception or performed either an implicit or explicit return.\n            1. Remove _acGenContext_ from the execution context stack and restore the execution context that is at the top of the execution context stack as the running execution context.\n            1. Set _acGenerator_.[[AsyncGeneratorState]] to ~completed~.\n            1. If _result_ is a normal completion, set _result_ to NormalCompletion(*undefined*).\n            1. If _result_ is a return completion, set _result_ to NormalCompletion(_result_.[[Value]]).\n            1. Perform AsyncGeneratorCompleteStep(_acGenerator_, _result_, *true*).\n            1. Perform AsyncGeneratorDrainQueue(_acGenerator_).\n            1. Return *undefined*.\n          1. Set the code evaluation state of _genContext_ such that when evaluation is resumed for that execution context, _closure_ will be called with no arguments.\n          1. Set _generator_.[[AsyncGeneratorContext]] to _genContext_.\n          1. Set _generator_.[[AsyncGeneratorState]] to ~suspended-start~.\n          1. Set _generator_.[[AsyncGeneratorQueue]] to a new empty List.\n          1. Return ~unused~.\n        ",
  "Record[ArgumentsExoticObject].GetOwnProperty" : "\n          1. Let _desc_ be OrdinaryGetOwnProperty(_args_, _P_).\n          1. If _desc_ is *undefined*, return *undefined*.\n          1. Let _map_ be _args_.[[ParameterMap]].\n          1. Let _isMapped_ be ! HasOwnProperty(_map_, _P_).\n          1. If _isMapped_ is *true*, then\n            1. Set _desc_.[[Value]] to ! Get(_map_, _P_).\n          1. Return _desc_.\n        ",
  "InstallErrorCause" : "\n          1. If _options_ is an Object and ? HasProperty(_options_, *\"cause\"*) is *true*, then\n            1. Let _cause_ be ? Get(_options_, *\"cause\"*).\n            1. Perform CreateNonEnumerableDataPropertyOrThrow(_O_, *\"cause\"*, _cause_).\n          1. Return ~unused~.\n        ",
  "INTRINSICS.RegExp.prototype[@@split]" : "\n          1. Let _rx_ be the *this* value.\n          1. If _rx_ is not an Object, throw a *TypeError* exception.\n          1. Let _S_ be ? ToString(_string_).\n          1. Let _C_ be ? SpeciesConstructor(_rx_, %RegExp%).\n          1. Let _flags_ be ? ToString(? Get(_rx_, *\"flags\"*)).\n          1. If _flags_ contains *\"u\"* or _flags_ contains *\"v\"*, let _unicodeMatching_ be *true*.\n          1. Else, let _unicodeMatching_ be *false*.\n          1. If _flags_ contains *\"y\"*, let _newFlags_ be _flags_.\n          1. Else, let _newFlags_ be the string-concatenation of _flags_ and *\"y\"*.\n          1. Let _splitter_ be ? Construct(_C_, ¬´ _rx_, _newFlags_ ¬ª).\n          1. Let _A_ be ! ArrayCreate(0).\n          1. Let _lengthA_ be 0.\n          1. If _limit_ is *undefined*, let _lim_ be 2<sup>32</sup> - 1; else let _lim_ be ‚Ñù(? ToUint32(_limit_)).\n          1. If _lim_ = 0, return _A_.\n          1. If _S_ is the empty String, then\n            1. Let _z_ be ? RegExpExec(_splitter_, _S_).\n            1. If _z_ is not *null*, return _A_.\n            1. Perform ! CreateDataPropertyOrThrow(_A_, *\"0\"*, _S_).\n            1. Return _A_.\n          1. Let _size_ be the length of _S_.\n          1. Let _p_ be 0.\n          1. Let _q_ be _p_.\n          1. Repeat, while _q_ < _size_,\n            1. Perform ? Set(_splitter_, *\"lastIndex\"*, ùîΩ(_q_), *true*).\n            1. Let _z_ be ? RegExpExec(_splitter_, _S_).\n            1. If _z_ is *null*, then\n              1. Set _q_ to AdvanceStringIndex(_S_, _q_, _unicodeMatching_).\n            1. Else,\n              1. Let _e_ be ‚Ñù(? ToLength(? Get(_splitter_, *\"lastIndex\"*))).\n              1. Set _e_ to min(_e_, _size_).\n              1. If _e_ = _p_, then\n                1. Set _q_ to AdvanceStringIndex(_S_, _q_, _unicodeMatching_).\n              1. Else,\n                1. Let _T_ be the substring of _S_ from _p_ to _q_.\n                1. Perform ! CreateDataPropertyOrThrow(_A_, ! ToString(ùîΩ(_lengthA_)), _T_).\n                1. Set _lengthA_ to _lengthA_ + 1.\n                1. If _lengthA_ = _lim_, return _A_.\n                1. Set _p_ to _e_.\n                1. Let _numberOfCaptures_ be ? LengthOfArrayLike(_z_).\n                1. Set _numberOfCaptures_ to max(_numberOfCaptures_ - 1, 0).\n                1. Let _i_ be 1.\n                1. Repeat, while _i_ ‚â§ _numberOfCaptures_,\n                  1. Let _nextCapture_ be ? Get(_z_, ! ToString(ùîΩ(_i_))).\n                  1. Perform ! CreateDataPropertyOrThrow(_A_, ! ToString(ùîΩ(_lengthA_)), _nextCapture_).\n                  1. Set _i_ to _i_ + 1.\n                  1. Set _lengthA_ to _lengthA_ + 1.\n                  1. If _lengthA_ = _lim_, return _A_.\n                1. Set _q_ to _p_.\n          1. Let _T_ be the substring of _S_ from _p_ to _size_.\n          1. Perform ! CreateDataPropertyOrThrow(_A_, ! ToString(ùîΩ(_lengthA_)), _T_).\n          1. Return _A_.\n        ",
  "INTRINSICS.Atomics.store" : "\n        1. Let _byteIndexInBuffer_ be ? ValidateAtomicAccessOnIntegerTypedArray(_typedArray_, _index_).\n        1. If _typedArray_.[[ContentType]] is ~bigint~, let _v_ be ? ToBigInt(_value_).\n        1. Otherwise, let _v_ be ùîΩ(? ToIntegerOrInfinity(_value_)).\n        1. Perform ? RevalidateAtomicAccess(_typedArray_, _byteIndexInBuffer_).\n        1. Let _buffer_ be _typedArray_.[[ViewedArrayBuffer]].\n        1. Let _elementType_ be TypedArrayElementType(_typedArray_).\n        1. Perform SetValueInBuffer(_buffer_, _byteIndexInBuffer_, _elementType_, _v_, *true*, ~seq-cst~).\n        1. Return _v_.\n      ",
  "INTRINSICS.Math.pow" : "\n          1. Set _base_ to ? ToNumber(_base_).\n          1. Set _exponent_ to ? ToNumber(_exponent_).\n          1. Return Number::exponentiate(_base_, _exponent_).\n        ",
  "NonEmptyClassString[0,0].CompileClassSetString" : "\n          1. Let _cs_ be CompileToCharSet of |ClassSetCharacter| with argument _rer_.\n          1. Let _s1_ be the sequence of characters that is the single CharSetElement of _cs_.\n          1. If |NonEmptyClassString| is present, then\n            1. Let _s2_ be CompileClassSetString of |NonEmptyClassString| with argument _rer_.\n            1. Return the concatenation of _s1_ and _s2_.\n          1. Return _s1_.\n        ",
  "INTRINSICS.Date.prototype.setUTCMinutes" : "\n          1. Let _dateObject_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_dateObject_, [[DateValue]]).\n          1. Let _t_ be _dateObject_.[[DateValue]].\n          1. Let _m_ be ? ToNumber(_min_).\n          1. If _sec_ is present, let _s_ be ? ToNumber(_sec_).\n          1. If _ms_ is present, let _milli_ be ? ToNumber(_ms_).\n          1. If _t_ is *NaN*, return *NaN*.\n          1. If _sec_ is not present, let _s_ be SecFromTime(_t_).\n          1. If _ms_ is not present, let _milli_ be msFromTime(_t_).\n          1. Let _date_ be MakeDate(Day(_t_), MakeTime(HourFromTime(_t_), _m_, _s_, _milli_)).\n          1. Let _v_ be TimeClip(_date_).\n          1. Set _dateObject_.[[DateValue]] to _v_.\n          1. Return _v_.\n        ",
  "INTRINSICS.Array.prototype.shift" : "\n          1. Let _O_ be ? ToObject(*this* value).\n          1. Let _len_ be ? LengthOfArrayLike(_O_).\n          1. If _len_ = 0, then\n            1. Perform ? Set(_O_, *\"length\"*, *+0*<sub>ùîΩ</sub>, *true*).\n            1. Return *undefined*.\n          1. Let _first_ be ? Get(_O_, *\"0\"*).\n          1. Let _k_ be 1.\n          1. Repeat, while _k_ < _len_,\n            1. Let _from_ be ! ToString(ùîΩ(_k_)).\n            1. Let _to_ be ! ToString(ùîΩ(_k_ - 1)).\n            1. Let _fromPresent_ be ? HasProperty(_O_, _from_).\n            1. If _fromPresent_ is *true*, then\n              1. Let _fromVal_ be ? Get(_O_, _from_).\n              1. Perform ? Set(_O_, _to_, _fromVal_, *true*).\n            1. Else,\n              1. Assert: _fromPresent_ is *false*.\n              1. Perform ? DeletePropertyOrThrow(_O_, _to_).\n            1. Set _k_ to _k_ + 1.\n          1. Perform ? DeletePropertyOrThrow(_O_, ! ToString(ùîΩ(_len_ - 1))).\n          1. Perform ? Set(_O_, *\"length\"*, ùîΩ(_len_ - 1), *true*).\n          1. Return _first_.\n        ",
  "SystemTimeZoneIdentifier" : "\n          1. If the implementation only supports the UTC time zone, return *\"UTC\"*.\n          1. Let _systemTimeZoneString_ be the String representing the host environment's current time zone, either a primary time zone identifier or an offset time zone identifier.\n          1. Return _systemTimeZoneString_.\n        ",
  "INTRINSICS.Reflect.isExtensible" : "\n        1. If _target_ is not an Object, throw a *TypeError* exception.\n        1. Return ? <emu-meta effects=\"user-code\">_target_.[[IsExtensible]]()</emu-meta>.\n      ",
  "PrimaryExpression[5,0].AssignmentTargetType" : "\n        1. Return ~invalid~.\n      ",
  "IfStatement[0,0].ContainsDuplicateLabels" : "\n        1. Let _hasDuplicate_ be ContainsDuplicateLabels of the first |Statement| with argument _labelSet_.\n        1. If _hasDuplicate_ is *true*, return *true*.\n        1. Return ContainsDuplicateLabels of the second |Statement| with argument _labelSet_.\n      ",
  "CaseClause[0,1].HasCallInTailPosition" : "\n        1. If |StatementList| is present, return HasCallInTailPosition of |StatementList| with argument _call_.\n        1. Return *false*.\n      ",
  "BigInt::unsignedRightShift" : "\n            1. Throw a *TypeError* exception.\n          ",
  "StringNumericLiteral[0,0].StringNumericValue" : "\n            1. Return *+0*<sub>ùîΩ</sub>.\n          ",
  "MemberExpression[1,0].AssignmentTargetType" : "\n        1. Return ~simple~.\n      ",
  "ClassSetCharacter[2,0].CharacterValue" : "\n          1. Let _ch_ be the code point matched by |ClassSetReservedPunctuator|.\n          1. Return the numeric value of _ch_.\n        ",
  "CharacterClassEscape[5,0].MayContainStrings" : "\n          1. Return *false*.\n        ",
  "PrimaryExpression[6,0].AssignmentTargetType" : "\n        1. Return ~invalid~.\n      ",
  "INTRINSICS.GeneratorFunction" : "\n          1. Let _C_ be the active function object.\n          1. If _bodyArg_ is not present, set _bodyArg_ to the empty String.\n          1. Return ? CreateDynamicFunction(_C_, NewTarget, ~generator~, _parameterArgs_, _bodyArg_).\n        ",
  "BoundFunctionCreate" : "\n          1. Let _proto_ be ? <emu-meta effects=\"user-code\">_targetFunction_.[[GetPrototypeOf]]</emu-meta>().\n          1. Let _internalSlotsList_ be the list-concatenation of ¬´ [[Prototype]], [[Extensible]] ¬ª and the internal slots listed in <emu-xref href=\"#table-internal-slots-of-bound-function-exotic-objects\"></emu-xref>.\n          1. Let _obj_ be MakeBasicObject(_internalSlotsList_).\n          1. Set _obj_.[[Prototype]] to _proto_.\n          1. Set _obj_.[[Call]] as described in <emu-xref href=\"#sec-bound-function-exotic-objects-call-thisargument-argumentslist\"></emu-xref>.\n          1. If IsConstructor(_targetFunction_) is *true*, then\n            1. Set _obj_.[[Construct]] as described in <emu-xref href=\"#sec-bound-function-exotic-objects-construct-argumentslist-newtarget\"></emu-xref>.\n          1. Set _obj_.[[BoundTargetFunction]] to _targetFunction_.\n          1. Set _obj_.[[BoundThis]] to _boundThis_.\n          1. Set _obj_.[[BoundArguments]] to _boundArgs_.\n          1. Return _obj_.\n        ",
  "ClassElement[3,0].ClassElementEvaluation" : "\n        1. Return ? ClassFieldDefinitionEvaluation of |FieldDefinition| with argument _object_.\n      ",
  "Record[GlobalEnvironmentRecord].HasBinding" : "\n            1. Let _DclRec_ be _envRec_.[[DeclarativeRecord]].\n            1. If ! _DclRec_.HasBinding(_N_) is *true*, return *true*.\n            1. Let _ObjRec_ be _envRec_.[[ObjectRecord]].\n            1. Return ? <emu-meta effects=\"user-code\">_ObjRec_.HasBinding</emu-meta>(_N_).\n          ",
  "GetMatchIndexPair" : "\n          1. Assert: _match_.[[StartIndex]] ‚â§ _match_.[[EndIndex]] ‚â§ the length of _S_.\n          1. Return CreateArrayFromList(¬´ ùîΩ(_match_.[[StartIndex]]), ùîΩ(_match_.[[EndIndex]]) ¬ª).\n        ",
  "ImportClause[4,0].BoundNames" : "\n        1. Let _names1_ be the BoundNames of |ImportedDefaultBinding|.\n        1. Let _names2_ be the BoundNames of |NamedImports|.\n        1. Return the list-concatenation of _names1_ and _names2_.\n      ",
  "BindingElement[1,0].BoundNames" : "\n        1. Return the BoundNames of |BindingPattern|.\n      ",
  "ByteListBitwiseOp" : "\n          1. Assert: _xBytes_ and _yBytes_ have the same number of elements.\n          1. Let _result_ be a new empty List.\n          1. Let _i_ be 0.\n          1. For each element _xByte_ of _xBytes_, do\n            1. Let _yByte_ be _yBytes_[_i_].\n            1. If _op_ is `&`, then\n              1. Let _resultByte_ be the result of applying the bitwise AND operation to _xByte_ and _yByte_.\n            1. Else if _op_ is `^`, then\n              1. Let _resultByte_ be the result of applying the bitwise exclusive OR (XOR) operation to _xByte_ and _yByte_.\n            1. Else,\n              1. Assert: _op_ is `|`.\n              1. Let _resultByte_ be the result of applying the bitwise inclusive OR operation to _xByte_ and _yByte_.\n            1. Set _i_ to _i_ + 1.\n            1. Append _resultByte_ to _result_.\n          1. Return _result_.\n        ",
  "Statement[1,0].ContainsUndefinedContinueTarget" : "\n        1. Return *false*.\n      ",
  "ClassTail[0,1].Contains" : "\n        1. If _symbol_ is |ClassBody|, return *true*.\n        1. If _symbol_ is |ClassHeritage|, then\n          1. If |ClassHeritage| is present, return *true*; otherwise return *false*.\n        1. If |ClassHeritage| is present, then\n          1. If |ClassHeritage| Contains _symbol_ is *true*, return *true*.\n        1. Return the result of ComputedPropertyContains of |ClassBody| with argument _symbol_.\n      ",
  "UnicodePropertyValueExpression[1,0].MayContainStrings" : "\n          1. If the source text matched by |LoneUnicodePropertyNameOrValue| is a binary property of strings listed in the ‚ÄúProperty name‚Äù column of <emu-xref href=\"#table-binary-unicode-properties-of-strings\"></emu-xref>, return *true*.\n          1. Return *false*.\n        ",
  "AssignmentExpression[6,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "TypedArrayCreateSameType" : "\n          1. Let _constructor_ be the intrinsic object associated with the constructor name _exemplar_.[[TypedArrayName]] in <emu-xref href=\"#table-the-typedarray-constructors\"></emu-xref>.\n          1. Let _result_ be ? TypedArrayCreateFromConstructor(_constructor_, _argumentList_).\n          1. Assert: _result_ has [[TypedArrayName]] and [[ContentType]] internal slots.\n          1. Assert: _result_.[[ContentType]] is _exemplar_.[[ContentType]].\n          1. Return _result_.\n        ",
  "ForIn/OfBodyEvaluation" : "\n          1. If _iteratorKind_ is not present, set _iteratorKind_ to ~sync~.\n          1. Let _oldEnv_ be the running execution context's LexicalEnvironment.\n          1. Let _V_ be *undefined*.\n          1. Let _destructuring_ be IsDestructuring of _lhs_.\n          1. If _destructuring_ is *true* and _lhsKind_ is ~assignment~, then\n            1. Assert: _lhs_ is a |LeftHandSideExpression|.\n            1. Let _assignmentPattern_ be the |AssignmentPattern| that is covered by _lhs_.\n          1. Repeat,\n            1. Let _nextResult_ be ? Call(_iteratorRecord_.[[NextMethod]], _iteratorRecord_.[[Iterator]]).\n            1. If _iteratorKind_ is ~async~, set _nextResult_ to ? Await(_nextResult_).\n            1. If _nextResult_ is not an Object, throw a *TypeError* exception.\n            1. Let _done_ be ? IteratorComplete(_nextResult_).\n            1. If _done_ is *true*, return _V_.\n            1. Let _nextValue_ be ? IteratorValue(_nextResult_).\n            1. If _lhsKind_ is either ~assignment~ or ~var-binding~, then\n              1. If _destructuring_ is *true*, then\n                1. If _lhsKind_ is ~assignment~, then\n                  1. Let _status_ be Completion(DestructuringAssignmentEvaluation of _assignmentPattern_ with argument _nextValue_).\n                1. Else,\n                  1. Assert: _lhsKind_ is ~var-binding~.\n                  1. Assert: _lhs_ is a |ForBinding|.\n                  1. Let _status_ be Completion(BindingInitialization of _lhs_ with arguments _nextValue_ and *undefined*).\n              1. Else,\n                1. Let _lhsRef_ be Completion(Evaluation of _lhs_). (It may be evaluated repeatedly.)\n                1. If _lhsRef_ is an abrupt completion, then\n                  1. Let _status_ be _lhsRef_.\n                1. Else,\n                  1. Let _status_ be Completion(PutValue(_lhsRef_.[[Value]], _nextValue_)).\n            1. Else,\n              1. Assert: _lhsKind_ is ~lexical-binding~.\n              1. Assert: _lhs_ is a |ForDeclaration|.\n              1. Let _iterationEnv_ be NewDeclarativeEnvironment(_oldEnv_).\n              1. Perform ForDeclarationBindingInstantiation of _lhs_ with argument _iterationEnv_.\n              1. Set the running execution context's LexicalEnvironment to _iterationEnv_.\n              1. If _destructuring_ is *true*, then\n                1. Let _status_ be Completion(ForDeclarationBindingInitialization of _lhs_ with arguments _nextValue_ and _iterationEnv_).\n              1. Else,\n                1. Assert: _lhs_ binds a single name.\n                1. Let _lhsName_ be the sole element of BoundNames of _lhs_.\n                1. Let _lhsRef_ be ! ResolveBinding(_lhsName_).\n                1. Let _status_ be Completion(InitializeReferencedBinding(_lhsRef_, _nextValue_)).\n            1. If _status_ is an abrupt completion, then\n              1. Set the running execution context's LexicalEnvironment to _oldEnv_.\n              1. If _iteratorKind_ is ~async~, return ? AsyncIteratorClose(_iteratorRecord_, _status_).\n              1. If _iterationKind_ is ~enumerate~, then\n                1. Return ? _status_.\n              1. Else,\n                1. Assert: _iterationKind_ is ~iterate~.\n                1. Return ? IteratorClose(_iteratorRecord_, _status_).\n            1. Let _result_ be Completion(Evaluation of _stmt_).\n            1. Set the running execution context's LexicalEnvironment to _oldEnv_.\n            1. If LoopContinues(_result_, _labelSet_) is *false*, then\n              1. If _iterationKind_ is ~enumerate~, then\n                1. Return ? UpdateEmpty(_result_, _V_).\n              1. Else,\n                1. Assert: _iterationKind_ is ~iterate~.\n                1. Set _status_ to Completion(UpdateEmpty(_result_, _V_)).\n                1. If _iteratorKind_ is ~async~, return ? AsyncIteratorClose(_iteratorRecord_, _status_).\n                1. Return ? IteratorClose(_iteratorRecord_, _status_).\n            1. If _result_.[[Value]] is not ~empty~, set _V_ to _result_.[[Value]].\n        ",
  "ForStatement[2,0].VarDeclaredNames" : "\n        1. Return the VarDeclaredNames of |Statement|.\n      ",
  "ForInOfStatement[1,0].ContainsUndefinedBreakTarget" : "\n        1. Return ContainsUndefinedBreakTarget of |Statement| with argument _labelSet_.\n      ",
  "EqualityExpression[4,0].IsFunctionDefinition" : "\n        1. Return *false*.\n      ",
  "Statement[11,0].LabelledEvaluation" : "\n        1. Return ? Evaluation of |Statement|.\n      ",
  "BigInt::lessThan" : "\n            1. If ‚Ñù(_x_) < ‚Ñù(_y_), return *true*; otherwise return *false*.\n          ",
  "Assertion[6,0].CompileAssertion" : "\n          1. Let _m_ be CompileSubpattern of |Disjunction| with arguments _rer_ and ~backward~.\n          1. Return a new Matcher with parameters (_x_, _c_) that captures _m_ and performs the following steps when called:\n            1. Assert: _x_ is a MatchState.\n            1. Assert: _c_ is a MatcherContinuation.\n            1. Let _d_ be a new MatcherContinuation with parameters (_y_) that captures nothing and performs the following steps when called:\n              1. Assert: _y_ is a MatchState.\n              1. Return _y_.\n            1. Let _r_ be _m_(_x_, _d_).\n            1. If _r_ is ~failure~, return ~failure~.\n            1. Assert: _r_ is a MatchState.\n            1. Let _cap_ be _r_.[[Captures]].\n            1. Let _Input_ be _x_.[[Input]].\n            1. Let _xe_ be _x_.[[EndIndex]].\n            1. Let _z_ be the MatchState { [[Input]]: _Input_, [[EndIndex]]: _xe_, [[Captures]]: _cap_ }.\n            1. Return _c_(_z_).\n        ",
  "Record[ModuleEnvironmentRecord].HasThisBinding" : "\n            1. Return *true*.\n          ",
  "INTRINSICS.Object.isSealed" : "\n          1. If _O_ is not an Object, return *true*.\n          1. Return ? TestIntegrityLevel(_O_, ~sealed~).\n        ",
  "OptionalChain[2,0].ChainEvaluation" : "\n          1. If the source text matched by this |OptionalChain| is strict mode code, let _strict_ be *true*; else let _strict_ be *false*.\n          1. Return EvaluatePropertyAccessWithIdentifierKey(_baseValue_, |IdentifierName|, _strict_).\n        ",
  "CaseBlock[1,0].ContainsUndefinedContinueTarget" : "\n        1. If the first |CaseClauses| is present, then\n          1. If ContainsUndefinedContinueTarget of the first |CaseClauses| with arguments _iterationSet_ and ¬´ ¬ª is *true*, return *true*.\n        1. If ContainsUndefinedContinueTarget of |DefaultClause| with arguments _iterationSet_ and ¬´ ¬ª is *true*, return *true*.\n        1. If the second |CaseClauses| is not present, return *false*.\n        1. Return ContainsUndefinedContinueTarget of the second |CaseClauses| with arguments _iterationSet_ and ¬´ ¬ª.\n      ",
  "ArrayBindingPattern[2,1].ContainsExpression" : "\n        1. Let _has_ be ContainsExpression of |BindingElementList|.\n        1. If _has_ is *true*, return *true*.\n        1. Return ContainsExpression of |BindingRestElement|.\n      ",
  "AssignmentExpression[3,0].IsFunctionDefinition" : "\n        1. Return *true*.\n      ",
  "EqualityExpression[2,0].IsFunctionDefinition" : "\n        1. Return *false*.\n      ",
  "LabelledStatement[0,0].TopLevelVarDeclaredNames" : "\n        1. Return the TopLevelVarDeclaredNames of |LabelledItem|.\n      ",
  "ExportDeclaration[6,0].ExportedBindings" : "\n          1. Return the BoundNames of this |ExportDeclaration|.\n        ",
  "ClassSetCharacter[0,0].CompileToCharSet" : "\n          1. Let _cv_ be the CharacterValue of this |ClassSetCharacter|.\n          1. Let _c_ be the character whose character value is _cv_.\n          1. Return the CharSet containing the single character _c_.\n        ",
  "IfStatement[1,0].HasCallInTailPosition" : "\n        1. Return HasCallInTailPosition of |Statement| with argument _call_.\n      ",
  "ClassContents[0,0].CompileToCharSet" : "\n          1. Return the empty CharSet.\n        ",
  "AsyncMethod[0,0].PropName" : "\n        1. Return PropName of |ClassElementName|.\n      ",
  "WithStatement[0,0].VarDeclaredNames" : "\n        1. Return the VarDeclaredNames of |Statement|.\n      ",
  "Script[0,0].Evaluation" : "\n        1. Return *undefined*.\n      ",
  "INTRINSICS.Object.is" : "\n          1. Return SameValue(_value1_, _value2_).\n        ",
  "FormalParameterList[1,0].ExpectedArgumentCount" : "\n        1. Let _count_ be ExpectedArgumentCount of |FormalParameterList|.\n        1. If HasInitializer of |FormalParameterList| is *true* or HasInitializer of |FormalParameter| is *true*, return _count_.\n        1. Return _count_ + 1.\n      ",
  "ForStatement[1,1].ContainsUndefinedContinueTarget" : "\n        1. Return ContainsUndefinedContinueTarget of |Statement| with arguments _iterationSet_ and ¬´ ¬ª.\n      ",
  "NewPromiseResolveThenableJob:clo0" : "\n          1. Let _job_ be a new Job Abstract Closure with no parameters that captures _promiseToResolve_, _thenable_, and _then_ and performs the following steps when called:\n            1. Let _resolvingFunctions_ be CreateResolvingFunctions(_promiseToResolve_).\n            1. Let _thenCallResult_ be Completion(HostCallJobCallback(_then_, _thenable_, ¬´ _resolvingFunctions_.[[Resolve]], _resolvingFunctions_.[[Reject]] ¬ª)).\n            1. If _thenCallResult_ is an abrupt completion, then\n              1. Return ? Call(_resolvingFunctions_.[[Reject]], *undefined*, ¬´ _thenCallResult_.[[Value]] ¬ª).\n            1. Return ? _thenCallResult_.\n          1. Let _getThenRealmResult_ be Completion(GetFunctionRealm(_then_.[[Callback]])).\n          1. If _getThenRealmResult_ is a normal completion, let _thenRealm_ be _getThenRealmResult_.[[Value]].\n          1. Else, let _thenRealm_ be the current Realm Record.\n          1. NOTE: _thenRealm_ is never *null*. When _then_.[[Callback]] is a revoked Proxy and no code runs, _thenRealm_ is used to create error objects.\n          1. Return the Record { [[Job]]: _job_, [[Realm]]: _thenRealm_ }.\n        ",
  "RawBytesToNumeric" : "\n          1. Let _elementSize_ be the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"></emu-xref> for Element Type _type_.\n          1. If _isLittleEndian_ is *false*, reverse the order of the elements of _rawBytes_.\n          1. If _type_ is ~float32~, then\n            1. Let _value_ be the byte elements of _rawBytes_ concatenated and interpreted as a little-endian bit string encoding of an IEEE 754-2019 binary32 value.\n            1. If _value_ is an IEEE 754-2019 binary32 NaN value, return the *NaN* Number value.\n            1. Return the Number value that corresponds to _value_.\n          1. If _type_ is ~float64~, then\n            1. Let _value_ be the byte elements of _rawBytes_ concatenated and interpreted as a little-endian bit string encoding of an IEEE 754-2019 binary64 value.\n            1. If _value_ is an IEEE 754-2019 binary64 NaN value, return the *NaN* Number value.\n            1. Return the Number value that corresponds to _value_.\n          1. If IsUnsignedElementType(_type_) is *true*, then\n            1. Let _intValue_ be the byte elements of _rawBytes_ concatenated and interpreted as a bit string encoding of an unsigned little-endian binary number.\n          1. Else,\n            1. Let _intValue_ be the byte elements of _rawBytes_ concatenated and interpreted as a bit string encoding of a binary little-endian two's complement number of bit length _elementSize_ √ó 8.\n          1. If IsBigIntElementType(_type_) is *true*, return the BigInt value that corresponds to _intValue_.\n          1. Otherwise, return the Number value that corresponds to _intValue_.\n        ",
  "ValueOfReadEvent" : "\n        1. Let _Ws_ be _execution_.[[ReadsBytesFrom]](_R_).\n        1. Assert: _Ws_ is a List of WriteSharedMemory or ReadModifyWriteSharedMemory events with length equal to _R_.[[ElementSize]].\n        1. Return ComposeWriteEventBytes(_execution_, _R_.[[ByteIndex]], _Ws_).\n      ",
  "Await" : "\n          1. Let _asyncContext_ be the running execution context.\n          1. Let _promise_ be ? PromiseResolve(%Promise%, _value_).\n          1. Let _fulfilledClosure_ be a new Abstract Closure with parameters (_v_) that captures _asyncContext_ and performs the following steps when called:\n            1. Let _prevContext_ be the running execution context.\n            1. Suspend _prevContext_.\n            1. Push _asyncContext_ onto the execution context stack; _asyncContext_ is now the running execution context.\n            1. <emu-meta effects=\"user-code\">Resume the suspended evaluation of _asyncContext_</emu-meta> using NormalCompletion(_v_) as the result of the operation that suspended it.\n            1. Assert: When we reach this step, _asyncContext_ has already been removed from the execution context stack and _prevContext_ is the currently running execution context.\n            1. Return *undefined*.\n          1. Let _onFulfilled_ be CreateBuiltinFunction(_fulfilledClosure_, 1, *\"\"*, ¬´ ¬ª).\n          1. Let _rejectedClosure_ be a new Abstract Closure with parameters (_reason_) that captures _asyncContext_ and performs the following steps when called:\n            1. Let _prevContext_ be the running execution context.\n            1. Suspend _prevContext_.\n            1. Push _asyncContext_ onto the execution context stack; _asyncContext_ is now the running execution context.\n            1. <emu-meta effects=\"user-code\">Resume the suspended evaluation of _asyncContext_</emu-meta> using ThrowCompletion(_reason_) as the result of the operation that suspended it.\n            1. Assert: When we reach this step, _asyncContext_ has already been removed from the execution context stack and _prevContext_ is the currently running execution context.\n            1. Return *undefined*.\n          1. Let _onRejected_ be CreateBuiltinFunction(_rejectedClosure_, 1, *\"\"*, ¬´ ¬ª).\n          1. Perform PerformPromiseThen(_promise_, _onFulfilled_, _onRejected_).\n          1. Remove _asyncContext_ from the execution context stack and restore the execution context that is at the top of the execution context stack as the running execution context.\n          1. Let _callerContext_ be the running execution context.\n          1. Resume _callerContext_ passing ~empty~. If _asyncContext_ is ever resumed again, let _completion_ be the Completion Record with which it is resumed.\n          1. Assert: If control reaches here, then _asyncContext_ is the running execution context again.\n          1. Return _completion_.\n        ",
  "OptionalExpression[0,0].HasCallInTailPosition" : "\n        1. Return HasCallInTailPosition of |OptionalChain| with argument _call_.\n      ",
  "RelationalExpression[4,0].IsFunctionDefinition" : "\n        1. Return *false*.\n      ",
  "Statement[7,0].VarScopedDeclarations" : "\n        1. Return a new empty List.\n      ",
  "INTRINSICS.BigInt.asUintN" : "\n          1. Set _bits_ to ? ToIndex(_bits_).\n          1. Set _bigint_ to ? ToBigInt(_bigint_).\n          1. Return ‚Ñ§(‚Ñù(_bigint_) modulo 2<sup>_bits_</sup>).\n        ",
  "INTRINSICS.DataView.prototype.setBigUint64" : "\n          1. Let _v_ be the *this* value.\n          1. Return ? SetViewValue(_v_, _byteOffset_, _littleEndian_, ~biguint64~, _value_).\n        ",
  "ToBigInt" : "\n        1. Let _prim_ be ? ToPrimitive(_argument_, ~number~).\n        1. Return the value that _prim_ corresponds to in <emu-xref href=\"#table-tobigint\"></emu-xref>.\n      ",
  "LiteralPropertyName[1,0].Evaluation" : "\n          1. Return the SV of |StringLiteral|.\n        ",
  "INTRINSICS.Error.prototype.toString" : "\n          1. Let _O_ be the *this* value.\n          1. If _O_ is not an Object, throw a *TypeError* exception.\n          1. Let _name_ be ? Get(_O_, *\"name\"*).\n          1. If _name_ is *undefined*, set _name_ to *\"Error\"*; otherwise set _name_ to ? ToString(_name_).\n          1. Let _msg_ be ? Get(_O_, *\"message\"*).\n          1. If _msg_ is *undefined*, set _msg_ to the empty String; otherwise set _msg_ to ? ToString(_msg_).\n          1. If _name_ is the empty String, return _msg_.\n          1. If _msg_ is the empty String, return _name_.\n          1. Return the string-concatenation of _name_, the code unit 0x003A (COLON), the code unit 0x0020 (SPACE), and _msg_.\n        ",
  "SetIntegrityLevel" : "\n        1. Let _status_ be ? _O_.[[PreventExtensions]]().\n        1. If _status_ is *false*, return *false*.\n        1. Let _keys_ be ? _O_.[[OwnPropertyKeys]]().\n        1. If _level_ is ~sealed~, then\n          1. For each element _k_ of _keys_, do\n            1. Perform ? DefinePropertyOrThrow(_O_, _k_, PropertyDescriptor { [[Configurable]]: *false* }).\n        1. Else,\n          1. Assert: _level_ is ~frozen~.\n          1. For each element _k_ of _keys_, do\n            1. Let _currentDesc_ be ? <emu-meta effects=\"user-code\">_O_.[[GetOwnProperty]]</emu-meta>(_k_).\n            1. If _currentDesc_ is not *undefined*, then\n              1. If IsAccessorDescriptor(_currentDesc_) is *true*, then\n                1. Let _desc_ be the PropertyDescriptor { [[Configurable]]: *false* }.\n              1. Else,\n                1. Let _desc_ be the PropertyDescriptor { [[Configurable]]: *false*, [[Writable]]: *false* }.\n              1. Perform ? DefinePropertyOrThrow(_O_, _k_, _desc_).\n        1. Return *true*.\n      ",
  "Number::multiply" : "\n            1. If _x_ is *NaN* or _y_ is *NaN*, return *NaN*.\n            1. If _x_ is either *+‚àû*<sub>ùîΩ</sub> or *-‚àû*<sub>ùîΩ</sub>, then\n              1. If _y_ is either *+0*<sub>ùîΩ</sub> or *-0*<sub>ùîΩ</sub>, return *NaN*.\n              1. If _y_ > *+0*<sub>ùîΩ</sub>, return _x_.\n              1. Return -_x_.\n            1. If _y_ is either *+‚àû*<sub>ùîΩ</sub> or *-‚àû*<sub>ùîΩ</sub>, then\n              1. If _x_ is either *+0*<sub>ùîΩ</sub> or *-0*<sub>ùîΩ</sub>, return *NaN*.\n              1. If _x_ > *+0*<sub>ùîΩ</sub>, return _y_.\n              1. Return -_y_.\n            1. If _x_ is *-0*<sub>ùîΩ</sub>, then\n              1. If _y_ is *-0*<sub>ùîΩ</sub> or _y_ < *-0*<sub>ùîΩ</sub>, return *+0*<sub>ùîΩ</sub>.\n              1. Else, return *-0*<sub>ùîΩ</sub>.\n            1. If _y_ is *-0*<sub>ùîΩ</sub>, then\n              1. If _x_ < *-0*<sub>ùîΩ</sub>, return *+0*<sub>ùîΩ</sub>.\n              1. Else, return *-0*<sub>ùîΩ</sub>.\n            1. Return ùîΩ(‚Ñù(_x_) √ó ‚Ñù(_y_)).\n          ",
  "ForInOfStatement[8,0].VarDeclaredNames" : "\n        1. Return the VarDeclaredNames of |Statement|.\n      ",
  "INTRINSICS.Symbol.keyFor" : "\n          1. If _sym_ is not a Symbol, throw a *TypeError* exception.\n          1. Return KeyForSymbol(_sym_).\n        ",
  "ModuleExportName[1,0].StringValue" : "\n        1. Return the SV of |StringLiteral|.\n      ",
  "INTRINSICS.WeakMap.prototype.get" : "\n          1. Let _M_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_M_, [[WeakMapData]]).\n          1. If CanBeHeldWeakly(_key_) is *false*, return *undefined*.\n          1. For each Record { [[Key]], [[Value]] } _p_ of _M_.[[WeakMapData]], do\n            1. If _p_.[[Key]] is not ~empty~ and SameValue(_p_.[[Key]], _key_) is *true*, return _p_.[[Value]].\n          1. Return *undefined*.\n        ",
  "INTRINSICS.Promise.prototype.catch" : "\n          1. Let _promise_ be the *this* value.\n          1. Return ? Invoke(_promise_, *\"then\"*, ¬´ *undefined*, _onRejected_ ¬ª).\n        ",
  "NestedClass[1,0].CompileToCharSet" : "\n          1. Let _A_ be CompileToCharSet of |ClassContents| with argument _rer_.\n          1. Return CharacterComplement(_rer_, _A_).\n        ",
  "FunctionBody[0,0].FunctionBodyContainsUseStrict" : "\n        1. If the Directive Prologue of |FunctionBody| contains a Use Strict Directive, return *true*; otherwise, return *false*.\n      ",
  "AsyncGeneratorMethod[0,0].PrivateBoundIdentifiers" : "\n        1. Return PrivateBoundIdentifiers of |ClassElementName|.\n      ",
  "CharacterClassEscape[5,0].CompileToCharSet" : "\n          1. Let _S_ be the CharSet returned by <emu-grammar>CharacterClassEscape :: `w`</emu-grammar>.\n          1. Return CharacterComplement(_rer_, _S_).\n        ",
  "INTRINSICS.TypedArray" : "\n          1. Throw a *TypeError* exception.\n        ",
  "MakeBasicObject" : "\n        1. Let _obj_ be a newly created object with an internal slot for each name in _internalSlotsList_.\n        1. Set _obj_'s essential internal methods to the default ordinary object definitions specified in <emu-xref href=\"#sec-ordinary-object-internal-methods-and-internal-slots\"></emu-xref>.\n        1. Assert: If the caller will not be overriding both _obj_'s [[GetPrototypeOf]] and [[SetPrototypeOf]] essential internal methods, then _internalSlotsList_ contains [[Prototype]].\n        1. Assert: If the caller will not be overriding all of _obj_'s [[SetPrototypeOf]], [[IsExtensible]], and [[PreventExtensions]] essential internal methods, then _internalSlotsList_ contains [[Extensible]].\n        1. If _internalSlotsList_ contains [[Extensible]], set _obj_.[[Extensible]] to *true*.\n        1. Return _obj_.\n      ",
  "UnaryExpression[5,0].IsFunctionDefinition" : "\n        1. Return *false*.\n      ",
  "ExportDeclaration[1,0].ExportedBindings" : "\n          1. Return the ExportedBindings of |NamedExports|.\n        ",
  "Record[ProxyExoticObject].IsExtensible" : "\n        1. Perform ? ValidateNonRevokedProxy(_O_).\n        1. Let _target_ be _O_.[[ProxyTarget]].\n        1. Let _handler_ be _O_.[[ProxyHandler]].\n        1. Assert: _handler_ is an Object.\n        1. Let _trap_ be ? GetMethod(_handler_, *\"isExtensible\"*).\n        1. If _trap_ is *undefined*, then\n          1. Return ? IsExtensible(_target_).\n        1. Let _booleanTrapResult_ be ToBoolean(? Call(_trap_, _handler_, ¬´ _target_ ¬ª)).\n        1. Let _targetResult_ be ? IsExtensible(_target_).\n        1. If _booleanTrapResult_ is not _targetResult_, throw a *TypeError* exception.\n        1. Return _booleanTrapResult_.\n      ",
  "CaseBlock[1,1].LexicallyDeclaredNames" : "\n        1. If the first |CaseClauses| is present, let _names1_ be the LexicallyDeclaredNames of the first |CaseClauses|.\n        1. Else, let _names1_ be a new empty List.\n        1. Let _names2_ be LexicallyDeclaredNames of |DefaultClause|.\n        1. If the second |CaseClauses| is present, let _names3_ be the LexicallyDeclaredNames of the second |CaseClauses|.\n        1. Else, let _names3_ be a new empty List.\n        1. Return the list-concatenation of _names1_, _names2_, and _names3_.\n      ",
  "Statement[3,0].LabelledEvaluation" : "\n        1. Return ? Evaluation of |Statement|.\n      ",
  "OptionalChain[5,0].ChainEvaluation" : "\n          1. Let _optionalChain_ be |OptionalChain|.\n          1. Let _newReference_ be ? ChainEvaluation of _optionalChain_ with arguments _baseValue_ and _baseReference_.\n          1. Let _newValue_ be ? GetValue(_newReference_).\n          1. Let _thisChain_ be this |OptionalChain|.\n          1. Let _tailCall_ be IsInTailPosition(_thisChain_).\n          1. Return ? EvaluateCall(_newValue_, _newReference_, |Arguments|, _tailCall_).\n        ",
  "INTRINSICS.Math.atan" : "\n          1. Let _n_ be ? ToNumber(_x_).\n          1. If _n_ is one of *NaN*, *+0*<sub>ùîΩ</sub>, or *-0*<sub>ùîΩ</sub>, return _n_.\n          1. If _n_ is *+‚àû*<sub>ùîΩ</sub>, return an implementation-approximated Number value representing œÄ / 2.\n          1. If _n_ is *-‚àû*<sub>ùîΩ</sub>, return an implementation-approximated Number value representing -œÄ / 2.\n          1. Return an implementation-approximated Number value representing the result of the inverse tangent of ‚Ñù(_n_).\n        ",
  "HostEnsureCanCompileStrings" : null,
  "StringPad" : "\n            1. Let _stringLength_ be the length of _S_.\n            1. If _maxLength_ ‚â§ _stringLength_, return _S_.\n            1. If _fillString_ is the empty String, return _S_.\n            1. Let _fillLen_ be _maxLength_ - _stringLength_.\n            1. Let _truncatedStringFiller_ be the String value consisting of repeated concatenations of _fillString_ truncated to length _fillLen_.\n            1. If _placement_ is ~start~, return the string-concatenation of _truncatedStringFiller_ and _S_.\n            1. Else, return the string-concatenation of _S_ and _truncatedStringFiller_.\n          ",
  "TriggerPromiseReactions" : "\n          1. For each element _reaction_ of _reactions_, do\n            1. Let _job_ be NewPromiseReactionJob(_reaction_, _argument_).\n            1. Perform HostEnqueuePromiseJob(_job_.[[Job]], _job_.[[Realm]]).\n          1. Return ~unused~.\n        ",
  "AsyncFunctionDeclaration[0,0].ContainsArguments" : "\n        1. Return *false*.\n      ",
  "ForStatement[1,2].VarDeclaredNames" : "\n        1. Let _names1_ be BoundNames of |VariableDeclarationList|.\n        1. Let _names2_ be VarDeclaredNames of |Statement|.\n        1. Return the list-concatenation of _names1_ and _names2_.\n      ",
  "INTRINSICS.Array.prototype.toString" : "\n          1. Let _array_ be ? ToObject(*this* value).\n          1. Let _func_ be ? Get(_array_, *\"join\"*).\n          1. If IsCallable(_func_) is *false*, set _func_ to the intrinsic function %Object.prototype.toString%.\n          1. Return ? Call(_func_, _array_).\n        ",
  "INTRINSICS.Reflect.preventExtensions" : "\n        1. If _target_ is not an Object, throw a *TypeError* exception.\n        1. Return ? <emu-meta effects=\"user-code\">_target_.[[PreventExtensions]]()</emu-meta>.\n      ",
  "AsyncConciseBody[0,0].LexicallyScopedDeclarations" : "\n        1. Return a new empty List.\n      ",
  "Record[OrdinaryObject].PreventExtensions" : "\n        1. Return OrdinaryPreventExtensions(_O_).\n      ",
  "INTRINSICS.Map.prototype.values" : "\n          1. Let _M_ be the *this* value.\n          1. Return ? CreateMapIterator(_M_, ~value~).\n        ",
  "ForInOfStatement[1,0].VarDeclaredNames" : "\n        1. Let _names1_ be the BoundNames of |ForBinding|.\n        1. Let _names2_ be the VarDeclaredNames of |Statement|.\n        1. Return the list-concatenation of _names1_ and _names2_.\n      ",
  "EmptyMatcher" : "\n            1. Return a new Matcher with parameters (_x_, _c_) that captures nothing and performs the following steps when called:\n              1. Assert: _x_ is a MatchState.\n              1. Assert: _c_ is a MatcherContinuation.\n              1. Return _c_(_x_).\n          ",
  "ExportDeclaration[1,0].LexicallyScopedDeclarations" : "\n        1. Return a new empty List.\n      ",
  "Record[ModuleNamespaceExoticObject].HasProperty" : "\n          1. If _P_ is a Symbol, return ! OrdinaryHasProperty(_O_, _P_).\n          1. Let _exports_ be _O_.[[Exports]].\n          1. If _exports_ contains _P_, return *true*.\n          1. Return *false*.\n        ",
  "FunctionExpression[0,1].HasName" : "\n        1. Return *true*.\n      ",
  "CaseClause[0,0].LexicallyScopedDeclarations" : "\n        1. If the |StatementList| is present, return the LexicallyScopedDeclarations of |StatementList|.\n        1. Return a new empty List.\n      ",
  "ForInOfStatement[5,0].VarScopedDeclarations" : "\n        1. Return the VarScopedDeclarations of |Statement|.\n      ",
  "INTRINSICS.Boolean.prototype.valueOf" : "\n          1. Return ? ThisBooleanValue(*this* value).\n        ",
  "CharacterSetMatcher" : "\n            1. If _rer_.[[UnicodeSets]] is *true*, then\n              1. Assert: _invert_ is *false*.\n              1. Assert: Every CharSetElement of _A_ consists of a single character.\n            1. Return a new Matcher with parameters (_x_, _c_) that captures _rer_, _A_, _invert_, and _direction_ and performs the following steps when called:\n              1. Assert: _x_ is a MatchState.\n              1. Assert: _c_ is a MatcherContinuation.\n              1. Let _Input_ be _x_.[[Input]].\n              1. Let _e_ be _x_.[[EndIndex]].\n              1. If _direction_ is ~forward~, let _f_ be _e_ + 1.\n              1. Else, let _f_ be _e_ - 1.\n              1. Let _InputLength_ be the number of elements in _Input_.\n              1. If _f_ < 0 or _f_ > _InputLength_, return ~failure~.\n              1. Let _index_ be min(_e_, _f_).\n              1. Let _ch_ be the character _Input_[_index_].\n              1. Let _cc_ be Canonicalize(_rer_, _ch_).\n              1. If there exists a CharSetElement in _A_ containing exactly one character _a_ such that Canonicalize(_rer_, _a_) is _cc_, let _found_ be *true*. Otherwise, let _found_ be *false*.\n              1. If _invert_ is *false* and _found_ is *false*, return ~failure~.\n              1. If _invert_ is *true* and _found_ is *true*, return ~failure~.\n              1. Let _cap_ be _x_.[[Captures]].\n              1. Let _y_ be the MatchState { [[Input]]: _Input_, [[EndIndex]]: _f_, [[Captures]]: _cap_ }.\n              1. Return _c_(_y_).\n          ",
  "INTRINSICS.JSON.stringify" : "\n        1. Let _stack_ be a new empty List.\n        1. Let _indent_ be the empty String.\n        1. Let _PropertyList_ be *undefined*.\n        1. Let _ReplacerFunction_ be *undefined*.\n        1. If _replacer_ is an Object, then\n          1. If IsCallable(_replacer_) is *true*, then\n            1. Set _ReplacerFunction_ to _replacer_.\n          1. Else,\n            1. Let _isArray_ be ? IsArray(_replacer_).\n            1. If _isArray_ is *true*, then\n              1. Set _PropertyList_ to a new empty List.\n              1. Let _len_ be ? LengthOfArrayLike(_replacer_).\n              1. Let _k_ be 0.\n              1. Repeat, while _k_ < _len_,\n                1. Let _prop_ be ! ToString(ùîΩ(_k_)).\n                1. Let _v_ be ? Get(_replacer_, _prop_).\n                1. Let _item_ be *undefined*.\n                1. If _v_ is a String, then\n                  1. Set _item_ to _v_.\n                1. Else if _v_ is a Number, then\n                  1. Set _item_ to ! ToString(_v_).\n                1. Else if _v_ is an Object, then\n                  1. If _v_ has a [[StringData]] or [[NumberData]] internal slot, set _item_ to ? ToString(_v_).\n                1. If _item_ is not *undefined* and _PropertyList_ does not contain _item_, then\n                  1. Append _item_ to _PropertyList_.\n                1. Set _k_ to _k_ + 1.\n        1. If _space_ is an Object, then\n          1. If _space_ has a [[NumberData]] internal slot, then\n            1. Set _space_ to ? ToNumber(_space_).\n          1. Else if _space_ has a [[StringData]] internal slot, then\n            1. Set _space_ to ? ToString(_space_).\n        1. If _space_ is a Number, then\n          1. Let _spaceMV_ be ! ToIntegerOrInfinity(_space_).\n          1. Set _spaceMV_ to min(10, _spaceMV_).\n          1. If _spaceMV_ < 1, let _gap_ be the empty String; otherwise let _gap_ be the String value containing _spaceMV_ occurrences of the code unit 0x0020 (SPACE).\n        1. Else if _space_ is a String, then\n          1. If the length of _space_ ‚â§ 10, let _gap_ be _space_; otherwise let _gap_ be the substring of _space_ from 0 to 10.\n        1. Else,\n          1. Let _gap_ be the empty String.\n        1. Let _wrapper_ be OrdinaryObjectCreate(%Object.prototype%).\n        1. Perform ! CreateDataPropertyOrThrow(_wrapper_, the empty String, _value_).\n        1. Let _state_ be the JSON Serialization Record { [[ReplacerFunction]]: _ReplacerFunction_, [[Stack]]: _stack_, [[Indent]]: _indent_, [[Gap]]: _gap_, [[PropertyList]]: _PropertyList_ }.\n        1. Return ? SerializeJSONProperty(_state_, the empty String, _wrapper_).\n      ",
  "GeneratorDeclaration[0,0].InstantiateFunctionObject" : "\n        1. Return InstantiateGeneratorFunctionObject of |GeneratorDeclaration| with arguments _env_ and _privateEnv_.\n      ",
  "IteratorStep" : "\n        1. Let _result_ be ? IteratorNext(_iteratorRecord_).\n        1. Let _done_ be ? IteratorComplete(_result_).\n        1. If _done_ is *true*, return *false*.\n        1. Return _result_.\n      ",
  "LeftHandSideExpression[2,0].IsIdentifierRef" : "\n        1. Return *false*.\n      ",
  "Statement[2,0].LabelledEvaluation" : "\n        1. Return ? Evaluation of |Statement|.\n      ",
  "NewPromiseReactionJob:clo0" : "\n          1. Let _job_ be a new Job Abstract Closure with no parameters that captures _reaction_ and _argument_ and performs the following steps when called:\n            1. Let _promiseCapability_ be _reaction_.[[Capability]].\n            1. Let _type_ be _reaction_.[[Type]].\n            1. Let _handler_ be _reaction_.[[Handler]].\n            1. If _handler_ is ~empty~, then\n              1. If _type_ is ~fulfill~, then\n                1. Let _handlerResult_ be NormalCompletion(_argument_).\n              1. Else,\n                1. Assert: _type_ is ~reject~.\n                1. Let _handlerResult_ be ThrowCompletion(_argument_).\n            1. Else,\n              1. Let _handlerResult_ be Completion(HostCallJobCallback(_handler_, *undefined*, ¬´ _argument_ ¬ª)).\n            1. If _promiseCapability_ is *undefined*, then\n              1. Assert: _handlerResult_ is not an abrupt completion.\n              1. Return ~empty~.\n            1. Assert: _promiseCapability_ is a PromiseCapability Record.\n            1. If _handlerResult_ is an abrupt completion, then\n              1. Return ? Call(_promiseCapability_.[[Reject]], *undefined*, ¬´ _handlerResult_.[[Value]] ¬ª).\n            1. Else,\n              1. Return ? Call(_promiseCapability_.[[Resolve]], *undefined*, ¬´ _handlerResult_.[[Value]] ¬ª).\n          1. Let _handlerRealm_ be *null*.\n          1. If _reaction_.[[Handler]] is not ~empty~, then\n            1. Let _getHandlerRealmResult_ be Completion(GetFunctionRealm(_reaction_.[[Handler]].[[Callback]])).\n            1. If _getHandlerRealmResult_ is a normal completion, set _handlerRealm_ to _getHandlerRealmResult_.[[Value]].\n            1. Else, set _handlerRealm_ to the current Realm Record.\n            1. NOTE: _handlerRealm_ is never *null* unless the handler is *undefined*. When the handler is a revoked Proxy and no ECMAScript code runs, _handlerRealm_ is used to create error objects.\n          1. Return the Record { [[Job]]: _job_, [[Realm]]: _handlerRealm_ }.\n        ",
  "AsyncConciseBody[0,0].AsyncConciseBodyContainsUseStrict" : "\n        1. Return *false*.\n      ",
  "QuantifierPrefix[5,0].CompileQuantifierPrefix" : "\n          1. Let _i_ be the MV of the first |DecimalDigits|.\n          1. Let _j_ be the MV of the second |DecimalDigits|.\n          1. Return the Record { [[Min]]: _i_, [[Max]]: _j_ }.\n        ",
  "ConditionalExpression[1,0].HasCallInTailPosition" : "\n        1. Let _has_ be HasCallInTailPosition of the first |AssignmentExpression| with argument _call_.\n        1. If _has_ is *true*, return *true*.\n        1. Return HasCallInTailPosition of the second |AssignmentExpression| with argument _call_.\n      ",
  "RelationalExpression[2,0].AssignmentTargetType" : "\n        1. Return ~invalid~.\n      ",
  "HoistableDeclaration[0,0].DeclarationPart" : "\n        1. Return |FunctionDeclaration|.\n      ",
  "AsyncFunctionDeclaration[0,0].InstantiateFunctionObject" : "\n        1. Return InstantiateAsyncFunctionObject of |AsyncFunctionDeclaration| with arguments _env_ and _privateEnv_.\n      ",
  "UnaryExpression[8,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "MethodDefinition[5,0].MethodDefinitionEvaluation" : "\n        1. Let _propKey_ be ? Evaluation of |ClassElementName|.\n        1. Let _env_ be the running execution context's LexicalEnvironment.\n        1. Let _privateEnv_ be the running execution context's PrivateEnvironment.\n        1. Let _sourceText_ be the source text matched by |MethodDefinition|.\n        1. Let _closure_ be OrdinaryFunctionCreate(%Function.prototype%, _sourceText_, |PropertySetParameterList|, |FunctionBody|, ~non-lexical-this~, _env_, _privateEnv_).\n        1. Perform MakeMethod(_closure_, _object_).\n        1. Perform SetFunctionName(_closure_, _propKey_, *\"set\"*).\n        1. If _propKey_ is a Private Name, then\n          1. Return PrivateElement { [[Key]]: _propKey_, [[Kind]]: ~accessor~, [[Get]]: *undefined*, [[Set]]: _closure_ }.\n        1. Else,\n          1. Let _desc_ be the PropertyDescriptor { [[Set]]: _closure_, [[Enumerable]]: _enumerable_, [[Configurable]]: *true* }.\n          1. Perform ? DefinePropertyOrThrow(_object_, _propKey_, _desc_).\n          1. Return ~unused~.\n      ",
  "InitializeBoundName" : "\n          1. If _environment_ is not *undefined*, then\n            1. Perform ! _environment_.InitializeBinding(_name_, _value_).\n            1. Return ~unused~.\n          1. Else,\n            1. Let _lhs_ be ? ResolveBinding(_name_).\n            1. Return ? PutValue(_lhs_, _value_).\n        ",
  "INTRINSICS.Reflect.setPrototypeOf" : "\n        1. If _target_ is not an Object, throw a *TypeError* exception.\n        1. If _proto_ is not an Object and _proto_ is not *null*, throw a *TypeError* exception.\n        1. Return ? <emu-meta effects=\"user-code\">_target_.[[SetPrototypeOf]]</emu-meta>(_proto_).\n      ",
  "Record[ECMAScriptFunctionObject].Call" : "\n        1. Let _callerContext_ be the running execution context.\n        1. Let _calleeContext_ be PrepareForOrdinaryCall(_F_, *undefined*).\n        1. Assert: _calleeContext_ is now the running execution context.\n        1. If _F_.[[IsClassConstructor]] is *true*, then\n          1. Let _error_ be a newly created *TypeError* object.\n          1. NOTE: _error_ is created in _calleeContext_ with _F_'s associated Realm Record.\n          1. Remove _calleeContext_ from the execution context stack and restore _callerContext_ as the running execution context.\n          1. Return ThrowCompletion(_error_).\n        1. Perform OrdinaryCallBindThis(_F_, _calleeContext_, _thisArgument_).\n        1. Let _result_ be Completion(OrdinaryCallEvaluateBody(_F_, _argumentsList_)).\n        1. [id=\"step-call-pop-context-stack\"] Remove _calleeContext_ from the execution context stack and restore _callerContext_ as the running execution context.\n        1. If _result_ is a return completion, return _result_.[[Value]].\n        1. ReturnIfAbrupt(_result_).\n        1. Return *undefined*.\n      ",
  "INTRINSICS.eval" : "\n        1. Return ? PerformEval(_x_, *false*, *false*).\n      ",
  "MemberExpression[6,0].Evaluation" : "\n          1. Return ? EvaluateNew(|MemberExpression|, |Arguments|).\n        ",
  "TemplateLiteral[0,0].ArgumentListEvaluation" : "\n          1. Let _templateLiteral_ be this |TemplateLiteral|.\n          1. Let _siteObj_ be GetTemplateObject(_templateLiteral_).\n          1. Return ¬´ _siteObj_ ¬ª.\n        ",
  "StatementList[1,0].VarScopedDeclarations" : "\n        1. Let _declarations1_ be VarScopedDeclarations of |StatementList|.\n        1. Let _declarations2_ be VarScopedDeclarations of |StatementListItem|.\n        1. Return the list-concatenation of _declarations1_ and _declarations2_.\n      ",
  "Number::sameValue" : "\n            1. If _x_ is *NaN* and _y_ is *NaN*, return *true*.\n            1. If _x_ is *+0*<sub>ùîΩ</sub> and _y_ is *-0*<sub>ùîΩ</sub>, return *false*.\n            1. If _x_ is *-0*<sub>ùîΩ</sub> and _y_ is *+0*<sub>ùîΩ</sub>, return *false*.\n            1. If _x_ is _y_, return *true*.\n            1. Return *false*.\n          ",
  "ClassSetCharacter[3,0].CompileToCharSet" : "\n          1. Return the CharSet containing the single character U+0008 (BACKSPACE).\n        ",
  "INTRINSICS.String.raw" : "\n          1. Let _substitutionCount_ be the number of elements in _substitutions_.\n          1. Let _cooked_ be ? ToObject(_template_).\n          1. Let _literals_ be ? ToObject(? Get(_cooked_, *\"raw\"*)).\n          1. Let _literalCount_ be ? LengthOfArrayLike(_literals_).\n          1. If _literalCount_ ‚â§ 0, return the empty String.\n          1. Let _R_ be the empty String.\n          1. Let _nextIndex_ be 0.\n          1. Repeat,\n            1. Let _nextLiteralVal_ be ? Get(_literals_, ! ToString(ùîΩ(_nextIndex_))).\n            1. Let _nextLiteral_ be ? ToString(_nextLiteralVal_).\n            1. Set _R_ to the string-concatenation of _R_ and _nextLiteral_.\n            1. If _nextIndex_ + 1 = _literalCount_, return _R_.\n            1. If _nextIndex_ < _substitutionCount_, then\n              1. Let _nextSubVal_ be _substitutions_[_nextIndex_].\n              1. Let _nextSub_ be ? ToString(_nextSubVal_).\n              1. Set _R_ to the string-concatenation of _R_ and _nextSub_.\n            1. Set _nextIndex_ to _nextIndex_ + 1.\n        ",
  "ExportSpecifier[0,0].ExportedNames" : "\n          1. Return a List whose sole element is the StringValue of |ModuleExportName|.\n        ",
  "TypedArrayCreateFromConstructor" : "\n          1. Let _newTypedArray_ be ? Construct(_constructor_, _argumentList_).\n          1. Let _taRecord_ be ? ValidateTypedArray(_newTypedArray_, ~seq-cst~).\n          1. If the number of elements in _argumentList_ is 1 and _argumentList_[0] is a Number, then\n            1. If IsTypedArrayOutOfBounds(_taRecord_) is *true*, throw a *TypeError* exception.\n            1. Let _length_ be TypedArrayLength(_taRecord_).\n            1. If _length_ < ‚Ñù(_argumentList_[0]), throw a *TypeError* exception.\n          1. Return _newTypedArray_.\n        ",
  "ClassAtom[0,0].CharacterValue" : "\n          1. Return the numeric value of U+002D (HYPHEN-MINUS).\n        ",
  "INTRINSICS.Symbol.prototype[@@toPrimitive]" : "\n          1. Return ? ThisSymbolValue(*this* value).\n        ",
  "INTRINSICS.String.prototype.toLocaleUpperCase" : null,
  "Record[ModuleEnvironmentRecord].GetThisBinding" : "\n            1. Return *undefined*.\n          ",
  "ForStatement[0,3].ForLoopEvaluation" : "\n          1. If the first |Expression| is present, then\n            1. Let _exprRef_ be ? Evaluation of the first |Expression|.\n            1. Perform ? GetValue(_exprRef_).\n          1. If the second |Expression| is present, let _test_ be the second |Expression|; otherwise, let _test_ be ~empty~.\n          1. If the third |Expression| is present, let _increment_ be the third |Expression|; otherwise, let _increment_ be ~empty~.\n          1. Return ? ForBodyEvaluation(_test_, _increment_, |Statement|, ¬´ ¬ª, _labelSet_).\n        ",
  "BindingRestElement[1,0].IteratorBindingInitialization" : "\n        1. Let _A_ be ! ArrayCreate(0).\n        1. Let _n_ be 0.\n        1. Repeat,\n          1. Let _next_ be ~done~.\n          1. If _iteratorRecord_.[[Done]] is *false*, then\n            1. Set _next_ to ? IteratorStepValue(_iteratorRecord_).\n          1. If _next_ is ~done~, then\n            1. Return ? BindingInitialization of |BindingPattern| with arguments _A_ and _environment_.\n          1. Perform ! CreateDataPropertyOrThrow(_A_, ! ToString(ùîΩ(_n_)), _next_).\n          1. Set _n_ to _n_ + 1.\n      ",
  "INTRINSICS.Date.prototype.setUTCSeconds" : "\n          1. Let _dateObject_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_dateObject_, [[DateValue]]).\n          1. Let _t_ be _dateObject_.[[DateValue]].\n          1. Let _s_ be ? ToNumber(_sec_).\n          1. If _ms_ is present, let _milli_ be ? ToNumber(_ms_).\n          1. If _t_ is *NaN*, return *NaN*.\n          1. If _ms_ is not present, let _milli_ be msFromTime(_t_).\n          1. Let _date_ be MakeDate(Day(_t_), MakeTime(HourFromTime(_t_), MinFromTime(_t_), _s_, _milli_)).\n          1. Let _v_ be TimeClip(_date_).\n          1. Set _dateObject_.[[DateValue]] to _v_.\n          1. Return _v_.\n        ",
  "UnaryExpression[7,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "ComputedPropertyName[0,0].Evaluation" : "\n          1. Let _exprValue_ be ? Evaluation of |AssignmentExpression|.\n          1. Let _propName_ be ? GetValue(_exprValue_).\n          1. Return ? ToPropertyKey(_propName_).\n        ",
  "INTRINSICS.TypedArray.prototype.reduceRight" : "\n          1. Let _O_ be the *this* value.\n          1. Let _taRecord_ be ? ValidateTypedArray(_O_, ~seq-cst~).\n          1. Let _len_ be TypedArrayLength(_taRecord_).\n          1. If IsCallable(_callbackfn_) is *false*, throw a *TypeError* exception.\n          1. If _len_ = 0 and _initialValue_ is not present, throw a *TypeError* exception.\n          1. Let _k_ be _len_ - 1.\n          1. Let _accumulator_ be *undefined*.\n          1. If _initialValue_ is present, then\n            1. Set _accumulator_ to _initialValue_.\n          1. Else,\n            1. Let _Pk_ be ! ToString(ùîΩ(_k_)).\n            1. Set _accumulator_ to ! Get(_O_, _Pk_).\n            1. Set _k_ to _k_ - 1.\n          1. Repeat, while _k_ ‚â• 0,\n            1. Let _Pk_ be ! ToString(ùîΩ(_k_)).\n            1. Let _kValue_ be ! Get(_O_, _Pk_).\n            1. Set _accumulator_ to ? Call(_callbackfn_, *undefined*, ¬´ _accumulator_, _kValue_, ùîΩ(_k_), _O_ ¬ª).\n            1. Set _k_ to _k_ - 1.\n          1. Return _accumulator_.\n        ",
  "PropertyName[1,0].ComputedPropertyContains" : "\n        1. Return the result of |ComputedPropertyName| Contains _symbol_.\n      ",
  "AsyncConciseBody[0,0].VarScopedDeclarations" : "\n        1. Return a new empty List.\n      ",
  "AsyncGeneratorDeclaration[0,0].Contains" : "\n        1. Return *false*.\n      ",
  "ScriptEvaluation" : "\n        1. Let _globalEnv_ be _scriptRecord_.[[Realm]].[[GlobalEnv]].\n        1. Let _scriptContext_ be a new ECMAScript code execution context.\n        1. Set the Function of _scriptContext_ to *null*.\n        1. Set the Realm of _scriptContext_ to _scriptRecord_.[[Realm]].\n        1. Set the ScriptOrModule of _scriptContext_ to _scriptRecord_.\n        1. Set the VariableEnvironment of _scriptContext_ to _globalEnv_.\n        1. Set the LexicalEnvironment of _scriptContext_ to _globalEnv_.\n        1. Set the PrivateEnvironment of _scriptContext_ to *null*.\n        1. Suspend the running execution context.\n        1. Push _scriptContext_ onto the execution context stack; _scriptContext_ is now the running execution context.\n        1. Let _script_ be _scriptRecord_.[[ECMAScriptCode]].\n        1. Let _result_ be Completion(GlobalDeclarationInstantiation(_script_, _globalEnv_)).\n        1. If _result_ is a normal completion, then\n          1. Set _result_ to Completion(Evaluation of _script_).\n          1. If _result_ is a normal completion and _result_.[[Value]] is ~empty~, then\n            1. Set _result_ to NormalCompletion(*undefined*).\n        1. Suspend _scriptContext_ and remove it from the execution context stack.\n        1. Assert: The execution context stack is not empty.\n        1. Resume the context that is now on the top of the execution context stack as the running execution context.\n        1. Return ? _result_.\n      ",
  "NewExpression[1,0].AssignmentTargetType" : "\n        1. Return ~invalid~.\n      ",
  "StringIndexOf" : "\n          1. Let _len_ be the length of _string_.\n          1. If _searchValue_ is the empty String and _fromIndex_ ‚â§ _len_, return _fromIndex_.\n          1. Let _searchLen_ be the length of _searchValue_.\n          1. For each integer _i_ such that _fromIndex_ ‚â§ _i_ ‚â§ _len_ - _searchLen_, in ascending order, do\n            1. Let _candidate_ be the substring of _string_ from _i_ to _i_ + _searchLen_.\n            1. If _candidate_ is _searchValue_, return _i_.\n          1. Return -1.\n        ",
  "TryStatement[1,0].ContainsDuplicateLabels" : "\n        1. Let _hasDuplicates_ be ContainsDuplicateLabels of |Block| with argument _labelSet_.\n        1. If _hasDuplicates_ is *true*, return *true*.\n        1. Return ContainsDuplicateLabels of |Finally| with argument _labelSet_.\n      ",
  "GetPrototypeFromConstructor" : "\n        1. Assert: _intrinsicDefaultProto_ is this specification's name of an intrinsic object. The corresponding object must be an intrinsic that is intended to be used as the [[Prototype]] value of an object.\n        1. Let _proto_ be ? Get(_constructor_, *\"prototype\"*).\n        1. If _proto_ is not an Object, then\n          1. Let _realm_ be ? GetFunctionRealm(_constructor_).\n          1. Set _proto_ to _realm_'s intrinsic object named _intrinsicDefaultProto_.\n        1. Return _proto_.\n      ",
  "LogicalORExpression[1,0].Evaluation" : "\n        1. Let _lref_ be ? Evaluation of |LogicalORExpression|.\n        1. Let _lval_ be ? GetValue(_lref_).\n        1. Let _lbool_ be ToBoolean(_lval_).\n        1. If _lbool_ is *true*, return _lval_.\n        1. Let _rref_ be ? Evaluation of |LogicalANDExpression|.\n        1. Return ? GetValue(_rref_).\n      ",
  "ContinueDynamicImport" : "\n            1. If _moduleCompletion_ is an abrupt completion, then\n              1. Perform ! Call(_promiseCapability_.[[Reject]], *undefined*, ¬´ _moduleCompletion_.[[Value]] ¬ª).\n              1. Return ~unused~.\n            1. Let _module_ be _moduleCompletion_.[[Value]].\n            1. Let _loadPromise_ be _module_.LoadRequestedModules().\n            1. Let _rejectedClosure_ be a new Abstract Closure with parameters (_reason_) that captures _promiseCapability_ and performs the following steps when called:\n              1. Perform ! Call(_promiseCapability_.[[Reject]], *undefined*, ¬´ _reason_ ¬ª).\n              1. Return ~unused~.\n            1. Let _onRejected_ be CreateBuiltinFunction(_rejectedClosure_, 1, *\"\"*, ¬´ ¬ª).\n            1. Let _linkAndEvaluateClosure_ be a new Abstract Closure with no parameters that captures _module_, _promiseCapability_, and _onRejected_ and performs the following steps when called:\n              1. Let _link_ be Completion(_module_.Link()).\n              1. If _link_ is an abrupt completion, then\n                1. Perform ! Call(_promiseCapability_.[[Reject]], *undefined*, ¬´ _link_.[[Value]] ¬ª).\n                1. Return ~unused~.\n              1. Let _evaluatePromise_ be _module_.Evaluate().\n              1. Let _fulfilledClosure_ be a new Abstract Closure with no parameters that captures _module_ and _promiseCapability_ and performs the following steps when called:\n                1. Let _namespace_ be GetModuleNamespace(_module_).\n                1. Perform ! Call(_promiseCapability_.[[Resolve]], *undefined*, ¬´ _namespace_ ¬ª).\n                1. Return ~unused~.\n              1. Let _onFulfilled_ be CreateBuiltinFunction(_fulfilledClosure_, 0, *\"\"*, ¬´ ¬ª).\n              1. Perform PerformPromiseThen(_evaluatePromise_, _onFulfilled_, _onRejected_).\n              1. Return ~unused~.\n            1. Let _linkAndEvaluate_ be CreateBuiltinFunction(_linkAndEvaluateClosure_, 0, *\"\"*, ¬´ ¬ª).\n            1. Perform PerformPromiseThen(_loadPromise_, _linkAndEvaluate_, _onRejected_).\n            1. Return ~unused~.\n          ",
  "INTRINSICS.get RegExp.prototype.source" : "\n          1. Let _R_ be the *this* value.\n          1. If _R_ is not an Object, throw a *TypeError* exception.\n          1. If _R_ does not have an [[OriginalSource]] internal slot, then\n            1. If SameValue(_R_, %RegExp.prototype%) is *true*, return *\"(?:)\"*.\n            1. Otherwise, throw a *TypeError* exception.\n          1. Assert: _R_ has an [[OriginalFlags]] internal slot.\n          1. Let _src_ be _R_.[[OriginalSource]].\n          1. Let _flags_ be _R_.[[OriginalFlags]].\n          1. Return EscapeRegExpPattern(_src_, _flags_).\n        ",
  "EqualityExpression[1,0].AssignmentTargetType" : "\n        1. Return ~invalid~.\n      ",
  "INTRINSICS.Math.atanh" : "\n          1. Let _n_ be ? ToNumber(_x_).\n          1. If _n_ is one of *NaN*, *+0*<sub>ùîΩ</sub>, or *-0*<sub>ùîΩ</sub>, return _n_.\n          1. If _n_ > *1*<sub>ùîΩ</sub> or _n_ < *-1*<sub>ùîΩ</sub>, return *NaN*.\n          1. If _n_ is *1*<sub>ùîΩ</sub>, return *+‚àû*<sub>ùîΩ</sub>.\n          1. If _n_ is *-1*<sub>ùîΩ</sub>, return *-‚àû*<sub>ùîΩ</sub>.\n          1. Return an implementation-approximated Number value representing the result of the inverse hyperbolic tangent of ‚Ñù(_n_).\n        ",
  "ForStatement[1,3].HasCallInTailPosition" : "\n        1. Return HasCallInTailPosition of |Statement| with argument _call_.\n      ",
  "ArrayBindingPattern[2,3].IteratorBindingInitialization" : "\n        1. Perform ? IteratorBindingInitialization of |BindingElementList| with arguments _iteratorRecord_ and _environment_.\n        1. If |Elision| is present, then\n          1. Perform ? IteratorDestructuringAssignmentEvaluation of |Elision| with argument _iteratorRecord_.\n        1. Return ? IteratorBindingInitialization of |BindingRestElement| with arguments _iteratorRecord_ and _environment_.\n      ",
  "PrimaryExpression[10,0].AssignmentTargetType" : "\n        1. Return ~invalid~.\n      ",
  "ForStatement[0,6].ContainsDuplicateLabels" : "\n        1. Return ContainsDuplicateLabels of |Statement| with argument _labelSet_.\n      ",
  "AsyncGeneratorUnwrapYieldResumption" : "\n          1. If _resumptionValue_ is not a return completion, return ? _resumptionValue_.\n          1. Let _awaited_ be Completion(Await(_resumptionValue_.[[Value]])).\n          1. If _awaited_ is a throw completion, return ? _awaited_.\n          1. Assert: _awaited_ is a normal completion.\n          1. Return Completion Record { [[Type]]: ~return~, [[Value]]: _awaited_.[[Value]], [[Target]]: ~empty~ }.\n        ",
  "Statement[11,0].ContainsUndefinedContinueTarget" : "\n        1. Return *false*.\n      ",
  "Statement[13,0].ContainsDuplicateLabels" : "\n        1. Return *false*.\n      ",
  "TemplateMiddleList[1,0].SubstitutionEvaluation" : "\n          1. Let _preceding_ be ? SubstitutionEvaluation of |TemplateMiddleList|.\n          1. Let _nextRef_ be ? Evaluation of |Expression|.\n          1. Let _next_ be ? GetValue(_nextRef_).\n          1. Return the list-concatenation of _preceding_ and ¬´ _next_ ¬ª.\n        ",
  "CallExpression[0,0].HasCallInTailPosition" : "\n        1. If this |CallExpression| is _call_, return *true*.\n        1. Return *false*.\n      ",
  "INTRINSICS.Object.fromEntries:clo0" : "\n          1. Perform ? RequireObjectCoercible(_iterable_).\n          1. Let _obj_ be OrdinaryObjectCreate(%Object.prototype%).\n          1. Assert: _obj_ is an extensible ordinary object with no own properties.\n          1. Let _closure_ be a new Abstract Closure with parameters (_key_, _value_) that captures _obj_ and performs the following steps when called:\n            1. Let _propertyKey_ be ? ToPropertyKey(_key_).\n            1. Perform ! CreateDataPropertyOrThrow(_obj_, _propertyKey_, _value_).\n            1. Return *undefined*.\n          1. Let _adder_ be CreateBuiltinFunction(_closure_, 2, *\"\"*, ¬´ ¬ª).\n          1. Return ? AddEntriesFromIterable(_obj_, _iterable_, _adder_).\n        ",
  "IsUnsignedElementType" : "\n          1. If _type_ is one of ~uint8~, ~uint8clamped~, ~uint16~, ~uint32~, or ~biguint64~, return *true*.\n          1. Return *false*.\n        ",
  "Record[ProxyExoticObject].SetPrototypeOf" : "\n        1. Perform ? ValidateNonRevokedProxy(_O_).\n        1. Let _target_ be _O_.[[ProxyTarget]].\n        1. Let _handler_ be _O_.[[ProxyHandler]].\n        1. Assert: _handler_ is an Object.\n        1. Let _trap_ be ? GetMethod(_handler_, *\"setPrototypeOf\"*).\n        1. If _trap_ is *undefined*, then\n          1. Return ? <emu-meta effects=\"user-code\">_target_.[[SetPrototypeOf]]</emu-meta>(_V_).\n        1. Let _booleanTrapResult_ be ToBoolean(? Call(_trap_, _handler_, ¬´ _target_, _V_ ¬ª)).\n        1. If _booleanTrapResult_ is *false*, return *false*.\n        1. Let _extensibleTarget_ be ? IsExtensible(_target_).\n        1. If _extensibleTarget_ is *true*, return *true*.\n        1. Let _targetProto_ be ? <emu-meta effects=\"user-code\">_target_.[[GetPrototypeOf]]</emu-meta>().\n        1. If SameValue(_V_, _targetProto_) is *false*, throw a *TypeError* exception.\n        1. Return *true*.\n      ",
  "INTRINSICS.RegExp" : "\n          1. Let _patternIsRegExp_ be ? IsRegExp(_pattern_).\n          1. If NewTarget is *undefined*, then\n            1. Let _newTarget_ be the active function object.\n            1. If _patternIsRegExp_ is *true* and _flags_ is *undefined*, then\n              1. Let _patternConstructor_ be ? Get(_pattern_, *\"constructor\"*).\n              1. If SameValue(_newTarget_, _patternConstructor_) is *true*, return _pattern_.\n          1. Else,\n            1. Let _newTarget_ be NewTarget.\n          1. If _pattern_ is an Object and _pattern_ has a [[RegExpMatcher]] internal slot, then\n            1. Let _P_ be _pattern_.[[OriginalSource]].\n            1. If _flags_ is *undefined*, let _F_ be _pattern_.[[OriginalFlags]].\n            1. Else, let _F_ be _flags_.\n          1. Else if _patternIsRegExp_ is *true*, then\n            1. Let _P_ be ? Get(_pattern_, *\"source\"*).\n            1. If _flags_ is *undefined*, then\n              1. Let _F_ be ? Get(_pattern_, *\"flags\"*).\n            1. Else,\n              1. Let _F_ be _flags_.\n          1. Else,\n            1. Let _P_ be _pattern_.\n            1. Let _F_ be _flags_.\n          1. Let _O_ be ? RegExpAlloc(_newTarget_).\n          1. Return ? RegExpInitialize(_O_, _P_, _F_).\n        ",
  "ArrowParameters[1,0].Contains" : "\n        1. Let _formals_ be the |ArrowFormalParameters| that is covered by |CoverParenthesizedExpressionAndArrowParameterList|.\n        1. Return _formals_ Contains _symbol_.\n      ",
  "CaseBlock[1,1].ContainsUndefinedContinueTarget" : "\n        1. If the first |CaseClauses| is present, then\n          1. If ContainsUndefinedContinueTarget of the first |CaseClauses| with arguments _iterationSet_ and ¬´ ¬ª is *true*, return *true*.\n        1. If ContainsUndefinedContinueTarget of |DefaultClause| with arguments _iterationSet_ and ¬´ ¬ª is *true*, return *true*.\n        1. If the second |CaseClauses| is not present, return *false*.\n        1. Return ContainsUndefinedContinueTarget of the second |CaseClauses| with arguments _iterationSet_ and ¬´ ¬ª.\n      ",
  "ForInOfStatement[6,0].VarScopedDeclarations" : "\n        1. Return the VarScopedDeclarations of |Statement|.\n      ",
  "AssignmentElementList[1,0].IteratorDestructuringAssignmentEvaluation" : "\n          1. Perform ? IteratorDestructuringAssignmentEvaluation of |AssignmentElementList| with argument _iteratorRecord_.\n          1. Return ? IteratorDestructuringAssignmentEvaluation of |AssignmentElisionElement| with argument _iteratorRecord_.\n        ",
  "IteratorNext" : "\n        1. If _value_ is not present, then\n          1. Let _result_ be ? Call(_iteratorRecord_.[[NextMethod]], _iteratorRecord_.[[Iterator]]).\n        1. Else,\n          1. Let _result_ be ? Call(_iteratorRecord_.[[NextMethod]], _iteratorRecord_.[[Iterator]], ¬´ _value_ ¬ª).\n        1. If _result_ is not an Object, throw a *TypeError* exception.\n        1. Return _result_.\n      ",
  "ForStatement[2,0].HasCallInTailPosition" : "\n        1. Return HasCallInTailPosition of |Statement| with argument _call_.\n      ",
  "UnicodePropertyValueExpression[0,0].CompileToCharSet" : "\n          1. Let _ps_ be the source text matched by |UnicodePropertyName|.\n          1. Let _p_ be UnicodeMatchProperty(_rer_, _ps_).\n          1. Assert: _p_ is a Unicode property name or property alias listed in the ‚ÄúProperty name and aliases‚Äù column of <emu-xref href=\"#table-nonbinary-unicode-properties\"></emu-xref>.\n          1. Let _vs_ be the source text matched by |UnicodePropertyValue|.\n          1. Let _v_ be UnicodeMatchPropertyValue(_p_, _vs_).\n          1. Let _A_ be the CharSet containing all Unicode code points whose character database definition includes the property _p_ with value _v_.\n          1. Return MaybeSimpleCaseFolding(_rer_, _A_).\n        ",
  "LiteralPropertyName[0,0].Evaluation" : "\n          1. Return StringValue of |IdentifierName|.\n        ",
  "INTRINSICS.String.prototype.localeCompare" : "\n          1. Let _O_ be ? RequireObjectCoercible(*this* value).\n          1. Let _S_ be ? ToString(_O_).\n          1. Let _thatValue_ be ? ToString(_that_).\n        ",
  "RunJobs" : "\n    1. Perform ? InitializeHostDefinedRealm().\n    1. Let _scriptEvaluationJob_ be a new Abstract Closure with no parameters that captures nothing and performs the following steps when called:\n      1. Let _sourceText_ be the source code of a script.\n      1. Let _script_ be ParseScript(_sourceText_, the current Realm Record, ~empty~).\n      1. Perform ? ScriptEvaluation(_script_).\n      1. Return *undefined*.\n    1. Perform HostEnqueuePromiseJob(_scriptEvaluationJob_, the current Realm Record).\n    1. Let _errors_ be *undefined*.\n    1. Repeat,\n      1. Suspend the running execution context and remove it from the execution context stack.\n      1. Assert: The execution context stack is empty.\n      1. Let _nextQueue_ be a non-empty Job Queue chosen in an implementation-defined manner.\n      1. If all Job Queues are empty, the result is implementation-defined.\n      1. Let _nextPending_ be the PendingJob record at the front of _nextQueue_. Remove that record from _nextQueue_.\n      1. Let _newContext_ be a new execution context.\n      1. Set _newContext_'s Function to *null*.\n      1. Set _newContext_'s Realm to _nextPending_.[[Realm]].\n      1. Set _newContext_'s ScriptOrModule to _nextPending_.[[ScriptOrModule]].\n      1. Push _newContext_ onto the execution context stack; _newContext_ is now the running execution context.\n      1. Let _job_ be _nextPending_.[[Job]].\n      1. Let _result_ be _job_().\n      1. If _result_ is an abrupt completion,\n        1. If _errors_ is *undefined*, set _errors_ to ¬´ _result_.[[Value]] ¬ª.\n        1. Otherwise, append _result_.[[Value]] to _errors_.\n  ",
  "Statement[6,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "INTRINSICS.Math.cosh" : "\n          1. Let _n_ be ? ToNumber(_x_).\n          1. If _n_ is *NaN*, return *NaN*.\n          1. If _n_ is either *+‚àû*<sub>ùîΩ</sub> or *-‚àû*<sub>ùîΩ</sub>, return *+‚àû*<sub>ùîΩ</sub>.\n          1. If _n_ is either *+0*<sub>ùîΩ</sub> or *-0*<sub>ùîΩ</sub>, return *1*<sub>ùîΩ</sub>.\n          1. Return an implementation-approximated Number value representing the result of the hyperbolic cosine of ‚Ñù(_n_).\n        ",
  "RelationalExpression[6,0].Evaluation" : "\n        1. Let _lref_ be ? Evaluation of |RelationalExpression|.\n        1. Let _lval_ be ? GetValue(_lref_).\n        1. Let _rref_ be ? Evaluation of |ShiftExpression|.\n        1. Let _rval_ be ? GetValue(_rref_).\n        1. If _rval_ is not an Object, throw a *TypeError* exception.\n        1. Return ? HasProperty(_rval_, ? ToPropertyKey(_lval_)).\n      ",
  "INTRINSICS.Date.prototype.getUTCMinutes" : "\n          1. Let _dateObject_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_dateObject_, [[DateValue]]).\n          1. Let _t_ be _dateObject_.[[DateValue]].\n          1. If _t_ is *NaN*, return *NaN*.\n          1. Return MinFromTime(_t_).\n        ",
  "ExportDeclaration[4,0].ExportedNames" : "\n          1. Return ¬´ *\"default\"* ¬ª.\n        ",
  "CharacterEscape[1,0].CharacterValue" : "\n          1. Let _ch_ be the code point matched by |AsciiLetter|.\n          1. Let _i_ be the numeric value of _ch_.\n          1. Return the remainder of dividing _i_ by 32.\n        ",
  "Record[OrdinaryObject].GetOwnProperty" : "\n        1. Return OrdinaryGetOwnProperty(_O_, _P_).\n      ",
  "CallExpression[4,0].AssignmentTargetType" : "\n        1. Return ~simple~.\n      ",
  "Record[ObjectEnvironmentRecord].CreateMutableBinding" : "\n            1. Let _bindingObject_ be _envRec_.[[BindingObject]].\n            1. Perform ? DefinePropertyOrThrow(_bindingObject_, _N_, PropertyDescriptor { [[Value]]: *undefined*, [[Writable]]: *true*, [[Enumerable]]: *true*, [[Configurable]]: _D_ }).\n            1. Return ~unused~.\n          ",
  "StatementList[1,0].TopLevelLexicallyDeclaredNames" : "\n        1. Let _names1_ be TopLevelLexicallyDeclaredNames of |StatementList|.\n        1. Let _names2_ be TopLevelLexicallyDeclaredNames of |StatementListItem|.\n        1. Return the list-concatenation of _names1_ and _names2_.\n      ",
  "INTRINSICS.Set.prototype.values" : "\n          1. Let _S_ be the *this* value.\n          1. Return ? CreateSetIterator(_S_, ~value~).\n        ",
  "ForStatement[2,2].ContainsUndefinedBreakTarget" : "\n        1. Return ContainsUndefinedBreakTarget of |Statement| with argument _labelSet_.\n      ",
  "ClassElement[4,0].PropName" : "\n        1. Return ~empty~.\n      ",
  "INTRINSICS.Array.prototype.entries" : "\n          1. Let _O_ be ? ToObject(*this* value).\n          1. Return CreateArrayIterator(_O_, ~key+value~).\n        ",
  "HostCallJobCallback" : "\n        1. Assert: IsCallable(_jobCallback_.[[Callback]]) is *true*.\n        1. Return ? Call(_jobCallback_.[[Callback]], _V_, _argumentsList_).\n      ",
  "FunctionStatementList[0,1].VarScopedDeclarations" : "\n        1. Return the TopLevelVarScopedDeclarations of |StatementList|.\n      ",
  "AssignmentExpression[2,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "WhileStatement[0,0].ContainsUndefinedBreakTarget" : "\n        1. Return ContainsUndefinedBreakTarget of |Statement| with argument _labelSet_.\n      ",
  "ClassStaticBlock[0,0].Contains" : "\n        1. Return *false*.\n      ",
  "ExportDeclaration[3,0].ExportEntries" : "\n          1. Let _entries_ be a new empty List.\n          1. Let _names_ be the BoundNames of |Declaration|.\n          1. For each element _name_ of _names_, do\n            1. Append the ExportEntry Record { [[ModuleRequest]]: *null*, [[ImportName]]: *null*, [[LocalName]]: _name_, [[ExportName]]: _name_ } to _entries_.\n          1. Return _entries_.\n        ",
  "TypedArrayElementType" : "\n          1. Return the Element Type value specified in <emu-xref href=\"#table-the-typedarray-constructors\"></emu-xref> for _O_.[[TypedArrayName]].\n        ",
  "FlattenIntoArray" : "\n            1. Assert: If _mapperFunction_ is present, then IsCallable(_mapperFunction_) is *true*, _thisArg_ is present, and _depth_ is 1.\n            1. Let _targetIndex_ be _start_.\n            1. Let _sourceIndex_ be *+0*<sub>ùîΩ</sub>.\n            1. Repeat, while ‚Ñù(_sourceIndex_) < _sourceLen_,\n              1. Let _P_ be ! ToString(_sourceIndex_).\n              1. Let _exists_ be ? HasProperty(_source_, _P_).\n              1. If _exists_ is *true*, then\n                1. Let _element_ be ? Get(_source_, _P_).\n                1. If _mapperFunction_ is present, then\n                  1. Set _element_ to ? Call(_mapperFunction_, _thisArg_, ¬´ _element_, _sourceIndex_, _source_ ¬ª).\n                1. Let _shouldFlatten_ be *false*.\n                1. If _depth_ > 0, then\n                  1. Set _shouldFlatten_ to ? IsArray(_element_).\n                1. If _shouldFlatten_ is *true*, then\n                  1. If _depth_ = +‚àû, let _newDepth_ be +‚àû.\n                  1. Else, let _newDepth_ be _depth_ - 1.\n                  1. Let _elementLen_ be ? LengthOfArrayLike(_element_).\n                  1. Set _targetIndex_ to ? FlattenIntoArray(_target_, _element_, _elementLen_, _targetIndex_, _newDepth_).\n                1. Else,\n                  1. If _targetIndex_ ‚â• 2<sup>53</sup> - 1, throw a *TypeError* exception.\n                  1. Perform ? CreateDataPropertyOrThrow(_target_, ! ToString(ùîΩ(_targetIndex_)), _element_).\n                  1. Set _targetIndex_ to _targetIndex_ + 1.\n              1. Set _sourceIndex_ to _sourceIndex_ + *1*<sub>ùîΩ</sub>.\n            1. Return _targetIndex_.\n          ",
  "ForStatement[0,1].ContainsUndefinedBreakTarget" : "\n        1. Return ContainsUndefinedBreakTarget of |Statement| with argument _labelSet_.\n      ",
  "INTRINSICS.Atomics.exchange" : "\n        1. Let _second_ be a new read-modify-write modification function with parameters (_oldBytes_, _newBytes_) that captures nothing and performs the following steps atomically when called:\n          1. Return _newBytes_.\n        1. Return ? AtomicReadModifyWrite(_typedArray_, _index_, _value_, _second_).\n      ",
  "INTRINSICS.Promise.prototype.finally:clo1:clo0" : "\n          1. Let _promise_ be the *this* value.\n          1. If _promise_ is not an Object, throw a *TypeError* exception.\n          1. Let _C_ be ? SpeciesConstructor(_promise_, %Promise%).\n          1. Assert: IsConstructor(_C_) is *true*.\n          1. If IsCallable(_onFinally_) is *false*, then\n            1. Let _thenFinally_ be _onFinally_.\n            1. Let _catchFinally_ be _onFinally_.\n          1. Else,\n            1. Let _thenFinallyClosure_ be a new Abstract Closure with parameters (_value_) that captures _onFinally_ and _C_ and performs the following steps when called:\n              1. Let _result_ be ? Call(_onFinally_, *undefined*).\n              1. Let _p_ be ? PromiseResolve(_C_, _result_).\n              1. Let _returnValue_ be a new Abstract Closure with no parameters that captures _value_ and performs the following steps when called:\n                1. Return _value_.\n              1. Let _valueThunk_ be CreateBuiltinFunction(_returnValue_, 0, *\"\"*, ¬´ ¬ª).\n              1. Return ? Invoke(_p_, *\"then\"*, ¬´ _valueThunk_ ¬ª).\n            1. Let _thenFinally_ be CreateBuiltinFunction(_thenFinallyClosure_, 1, *\"\"*, ¬´ ¬ª).\n            1. Let _catchFinallyClosure_ be a new Abstract Closure with parameters (_reason_) that captures _onFinally_ and _C_ and performs the following steps when called:\n              1. Let _result_ be ? Call(_onFinally_, *undefined*).\n              1. Let _p_ be ? PromiseResolve(_C_, _result_).\n              1. Let _throwReason_ be a new Abstract Closure with no parameters that captures _reason_ and performs the following steps when called:\n                1. Return ThrowCompletion(_reason_).\n              1. Let _thrower_ be CreateBuiltinFunction(_throwReason_, 0, *\"\"*, ¬´ ¬ª).\n              1. Return ? Invoke(_p_, *\"then\"*, ¬´ _thrower_ ¬ª).\n            1. Let _catchFinally_ be CreateBuiltinFunction(_catchFinallyClosure_, 1, *\"\"*, ¬´ ¬ª).\n          1. Return ? Invoke(_promise_, *\"then\"*, ¬´ _thenFinally_, _catchFinally_ ¬ª).\n        ",
  "ObjectBindingPattern[1,0].ContainsExpression" : "\n        1. Return *false*.\n      ",
  "Record[ModuleNamespaceExoticObject].IsExtensible" : "\n          1. Return *false*.\n        ",
  "ScriptBody[0,0].VarScopedDeclarations" : "\n        1. Return TopLevelVarScopedDeclarations of |StatementList|.\n      ",
  "StatementList[1,0].ContainsDuplicateLabels" : "\n        1. Let _hasDuplicates_ be ContainsDuplicateLabels of |StatementList| with argument _labelSet_.\n        1. If _hasDuplicates_ is *true*, return *true*.\n        1. Return ContainsDuplicateLabels of |StatementListItem| with argument _labelSet_.\n      ",
  "IdentifierReference[0,0].AssignmentTargetType" : "\n        1. If this |IdentifierReference| is contained in strict mode code and StringValue of |Identifier| is either *\"eval\"* or *\"arguments\"*, return ~invalid~.\n        1. Return ~simple~.\n      ",
  "FunctionExpression[0,1].Contains" : "\n        1. Return *false*.\n      ",
  "CoalesceExpression[0,0].IsFunctionDefinition" : "\n        1. Return *false*.\n      ",
  "Statement[13,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "ForStatement[0,2].HasCallInTailPosition" : "\n        1. Return HasCallInTailPosition of |Statement| with argument _call_.\n      ",
  "INTRINSICS.Array.prototype.push" : "\n          1. Let _O_ be ? ToObject(*this* value).\n          1. Let _len_ be ? LengthOfArrayLike(_O_).\n          1. Let _argCount_ be the number of elements in _items_.\n          1. If _len_ + _argCount_ > 2<sup>53</sup> - 1, throw a *TypeError* exception.\n          1. For each element _E_ of _items_, do\n            1. Perform ? Set(_O_, ! ToString(ùîΩ(_len_)), _E_, *true*).\n            1. Set _len_ to _len_ + 1.\n          1. Perform ? Set(_O_, *\"length\"*, ùîΩ(_len_), *true*).\n          1. Return ùîΩ(_len_).\n        ",
  "LabelledStatement[0,0].ContainsDuplicateLabels" : "\n        1. Let _label_ be the StringValue of |LabelIdentifier|.\n        1. If _labelSet_ contains _label_, return *true*.\n        1. Let _newLabelSet_ be the list-concatenation of _labelSet_ and ¬´ _label_ ¬ª.\n        1. Return ContainsDuplicateLabels of |LabelledItem| with argument _newLabelSet_.\n      ",
  "INTRINSICS.String.prototype.match" : "\n          1. Let _O_ be ? RequireObjectCoercible(*this* value).\n          1. If _regexp_ is neither *undefined* nor *null*, then\n            1. Let _matcher_ be ? GetMethod(_regexp_, @@match).\n            1. If _matcher_ is not *undefined*, then\n              1. Return ? Call(_matcher_, _regexp_, ¬´ _O_ ¬ª).\n          1. Let _S_ be ? ToString(_O_).\n          1. Let _rx_ be ? RegExpCreate(_regexp_, *undefined*).\n          1. Return ? Invoke(_rx_, @@match, ¬´ _S_ ¬ª).\n        ",
  "INTRINSICS.TypedArray.prototype.with" : "\n          1. Let _O_ be the *this* value.\n          1. Let _taRecord_ be ? ValidateTypedArray(_O_, ~seq-cst~).\n          1. Let _len_ be TypedArrayLength(_taRecord_).\n          1. Let _relativeIndex_ be ? ToIntegerOrInfinity(_index_).\n          1. If _relativeIndex_ ‚â• 0, let _actualIndex_ be _relativeIndex_.\n          1. Else, let _actualIndex_ be _len_ + _relativeIndex_.\n          1. If _O_.[[ContentType]] is ~bigint~, let _numericValue_ be ? ToBigInt(_value_).\n          1. Else, let _numericValue_ be ? ToNumber(_value_).\n          1. If IsValidIntegerIndex(_O_, ùîΩ(_actualIndex_)) is *false*, throw a *RangeError* exception.\n          1. Let _A_ be ? TypedArrayCreateSameType(_O_, ¬´ ùîΩ(_len_) ¬ª).\n          1. Let _k_ be 0.\n          1. Repeat, while _k_ < _len_,\n            1. Let _Pk_ be ! ToString(ùîΩ(_k_)).\n            1. If _k_ is _actualIndex_, let _fromValue_ be _numericValue_.\n            1. Else, let _fromValue_ be ! Get(_O_, _Pk_).\n            1. Perform ! Set(_A_, _Pk_, _fromValue_, *true*).\n            1. Set _k_ to _k_ + 1.\n          1. Return _A_.\n        ",
  "INTRINSICS.Atomics.waitAsync" : "\n        1. Return ? DoWait(~async~, _typedArray_, _index_, _value_, _timeout_).\n      ",
  "LeftHandSideExpression[1,0].IsFunctionDefinition" : "\n        1. Return *false*.\n      ",
  "Number::leftShift" : "\n            1. Let _lnum_ be ! ToInt32(_x_).\n            1. Let _rnum_ be ! ToUint32(_y_).\n            1. Let _shiftCount_ be ‚Ñù(_rnum_) modulo 32.\n            1. Return the result of left shifting _lnum_ by _shiftCount_ bits. The mathematical value of the result is exactly representable as a 32-bit two's complement bit string.\n          ",
  "CreateDynamicFunction" : "\n            1. If _newTarget_ is *undefined*, set _newTarget_ to _constructor_.\n            1. If _kind_ is ~normal~, then\n              1. Let _prefix_ be *\"function\"*.\n              1. Let _exprSym_ be the grammar symbol |FunctionExpression|.\n              1. Let _bodySym_ be the grammar symbol |FunctionBody[~Yield, ~Await]|.\n              1. Let _parameterSym_ be the grammar symbol |FormalParameters[~Yield, ~Await]|.\n              1. Let _fallbackProto_ be *\"%Function.prototype%\"*.\n            1. Else if _kind_ is ~generator~, then\n              1. Let _prefix_ be *\"function\\*\"*.\n              1. Let _exprSym_ be the grammar symbol |GeneratorExpression|.\n              1. Let _bodySym_ be the grammar symbol |GeneratorBody|.\n              1. Let _parameterSym_ be the grammar symbol |FormalParameters[+Yield, ~Await]|.\n              1. Let _fallbackProto_ be *\"%GeneratorFunction.prototype%\"*.\n            1. Else if _kind_ is ~async~, then\n              1. Let _prefix_ be *\"async function\"*.\n              1. Let _exprSym_ be the grammar symbol |AsyncFunctionExpression|.\n              1. Let _bodySym_ be the grammar symbol |AsyncFunctionBody|.\n              1. Let _parameterSym_ be the grammar symbol |FormalParameters[~Yield, +Await]|.\n              1. Let _fallbackProto_ be *\"%AsyncFunction.prototype%\"*.\n            1. Else,\n              1. Assert: _kind_ is ~async-generator~.\n              1. Let _prefix_ be *\"async function\\*\"*.\n              1. Let _exprSym_ be the grammar symbol |AsyncGeneratorExpression|.\n              1. Let _bodySym_ be the grammar symbol |AsyncGeneratorBody|.\n              1. Let _parameterSym_ be the grammar symbol |FormalParameters[+Yield, +Await]|.\n              1. Let _fallbackProto_ be *\"%AsyncGeneratorFunction.prototype%\"*.\n            1. Let _argCount_ be the number of elements in _parameterArgs_.\n            1. Let _parameterStrings_ be a new empty List.\n            1. For each element _arg_ of _parameterArgs_, do\n              1. Append ? ToString(_arg_) to _parameterStrings_.\n            1. Let _bodyString_ be ? ToString(_bodyArg_).\n            1. Let _currentRealm_ be the current Realm Record.\n            1. Perform ? HostEnsureCanCompileStrings(_currentRealm_, _parameterStrings_, _bodyString_, *false*).\n            1. Let _P_ be the empty String.\n            1. If _argCount_ > 0, then\n              1. Set _P_ to _parameterStrings_[0].\n              1. Let _k_ be 1.\n              1. Repeat, while _k_ < _argCount_,\n                1. Let _nextArgString_ be _parameterStrings_[_k_].\n                1. Set _P_ to the string-concatenation of _P_, *\",\"* (a comma), and _nextArgString_.\n                1. Set _k_ to _k_ + 1.\n            1. Let _bodyParseString_ be the string-concatenation of 0x000A (LINE FEED), _bodyString_, and 0x000A (LINE FEED).\n            1. Let _sourceString_ be the string-concatenation of _prefix_, *\" anonymous(\"*, _P_, 0x000A (LINE FEED), *\") {\"*, _bodyParseString_, and *\"}\"*.\n            1. Let _sourceText_ be StringToCodePoints(_sourceString_).\n            1. Let _parameters_ be ParseText(StringToCodePoints(_P_), _parameterSym_).\n            1. If _parameters_ is a List of errors, throw a *SyntaxError* exception.\n            1. Let _body_ be ParseText(StringToCodePoints(_bodyParseString_), _bodySym_).\n            1. If _body_ is a List of errors, throw a *SyntaxError* exception.\n            1. NOTE: The parameters and body are parsed separately to ensure that each is valid alone. For example, `new Function(\"/*\", \"*/ ) {\")` does not evaluate to a function.\n            1. NOTE: If this step is reached, _sourceText_ must have the syntax of _exprSym_ (although the reverse implication does not hold). The purpose of the next two steps is to enforce any Early Error rules which apply to _exprSym_ directly.\n            1. Let _expr_ be ParseText(_sourceText_, _exprSym_).\n            1. If _expr_ is a List of errors, throw a *SyntaxError* exception.\n            1. Let _proto_ be ? GetPrototypeFromConstructor(_newTarget_, _fallbackProto_).\n            1. Let _env_ be _currentRealm_.[[GlobalEnv]].\n            1. Let _privateEnv_ be *null*.\n            1. Let _F_ be OrdinaryFunctionCreate(_proto_, _sourceText_, _parameters_, _body_, ~non-lexical-this~, _env_, _privateEnv_).\n            1. Perform SetFunctionName(_F_, *\"anonymous\"*).\n            1. If _kind_ is ~generator~, then\n              1. Let _prototype_ be OrdinaryObjectCreate(%GeneratorFunction.prototype.prototype%).\n              1. Perform ! DefinePropertyOrThrow(_F_, *\"prototype\"*, PropertyDescriptor { [[Value]]: _prototype_, [[Writable]]: *true*, [[Enumerable]]: *false*, [[Configurable]]: *false* }).\n            1. Else if _kind_ is ~async-generator~, then\n              1. Let _prototype_ be OrdinaryObjectCreate(%AsyncGeneratorFunction.prototype.prototype%).\n              1. Perform ! DefinePropertyOrThrow(_F_, *\"prototype\"*, PropertyDescriptor { [[Value]]: _prototype_, [[Writable]]: *true*, [[Enumerable]]: *false*, [[Configurable]]: *false* }).\n            1. Else if _kind_ is ~normal~, then\n              1. Perform MakeConstructor(_F_).\n            1. NOTE: Functions whose _kind_ is ~async~ are not constructible and do not have a [[Construct]] internal method or a *\"prototype\"* property.\n            1. Return _F_.\n          ",
  "ToUint32" : "\n        1. Let _number_ be ? ToNumber(_argument_).\n        1. If _number_ is not finite or _number_ is either *+0*<sub>ùîΩ</sub> or *-0*<sub>ùîΩ</sub>, return *+0*<sub>ùîΩ</sub>.\n        1. Let _int_ be truncate(‚Ñù(_number_)).\n        1. Let _int32bit_ be _int_ modulo 2<sup>32</sup>.\n        1. [id=\"step-touint32-return\"] Return ùîΩ(_int32bit_).\n      ",
  "DefaultClause[0,1].ContainsUndefinedContinueTarget" : "\n        1. If the |StatementList| is present, return ContainsUndefinedContinueTarget of |StatementList| with arguments _iterationSet_ and ¬´ ¬ª.\n        1. Return *false*.\n      ",
  "ForInOfStatement[3,0].VarDeclaredNames" : "\n        1. Return the VarDeclaredNames of |Statement|.\n      ",
  "AssignmentExpression[4,0].AssignmentTargetType" : "\n        1. Return ~invalid~.\n      ",
  "GeneratorDeclaration[0,0].BoundNames" : "\n        1. Return the BoundNames of |BindingIdentifier|.\n      ",
  "YieldExpression[0,0].Evaluation" : "\n        1. Return ? Yield(*undefined*).\n      ",
  "PrimaryExpression[0,0].Evaluation" : "\n          1. Return ? ResolveThisBinding().\n        ",
  "PerformPromiseAny" : "\n            1. Let _errors_ be a new empty List.\n            1. Let _remainingElementsCount_ be the Record { [[Value]]: 1 }.\n            1. Let _index_ be 0.\n            1. Repeat,\n              1. Let _next_ be ? IteratorStepValue(_iteratorRecord_).\n              1. If _next_ is ~done~, then\n                1. Set _remainingElementsCount_.[[Value]] to _remainingElementsCount_.[[Value]] - 1.\n                1. If _remainingElementsCount_.[[Value]] = 0, then\n                  1. Let _error_ be a newly created *AggregateError* object.\n                  1. Perform ! DefinePropertyOrThrow(_error_, *\"errors\"*, PropertyDescriptor { [[Configurable]]: *true*, [[Enumerable]]: *false*, [[Writable]]: *true*, [[Value]]: CreateArrayFromList(_errors_) }).\n                  1. Return ThrowCompletion(_error_).\n                1. Return _resultCapability_.[[Promise]].\n              1. Append *undefined* to _errors_.\n              1. Let _nextPromise_ be ? Call(_promiseResolve_, _constructor_, ¬´ _next_ ¬ª).\n              1. Let _stepsRejected_ be the algorithm steps defined in <emu-xref href=\"#sec-promise.any-reject-element-functions\" title></emu-xref>.\n              1. Let _lengthRejected_ be the number of non-optional parameters of the function definition in <emu-xref href=\"#sec-promise.any-reject-element-functions\" title></emu-xref>.\n              1. Let _onRejected_ be CreateBuiltinFunction(_stepsRejected_, _lengthRejected_, *\"\"*, ¬´ [[AlreadyCalled]], [[Index]], [[Errors]], [[Capability]], [[RemainingElements]] ¬ª).\n              1. Set _onRejected_.[[AlreadyCalled]] to *false*.\n              1. Set _onRejected_.[[Index]] to _index_.\n              1. Set _onRejected_.[[Errors]] to _errors_.\n              1. Set _onRejected_.[[Capability]] to _resultCapability_.\n              1. Set _onRejected_.[[RemainingElements]] to _remainingElementsCount_.\n              1. Set _remainingElementsCount_.[[Value]] to _remainingElementsCount_.[[Value]] + 1.\n              1. Perform ? Invoke(_nextPromise_, *\"then\"*, ¬´ _resultCapability_.[[Resolve]], _onRejected_ ¬ª).\n              1. Set _index_ to _index_ + 1.\n          ",
  "CallExpression[7,0].Evaluation" : "\n          1. Let _baseReference_ be ? Evaluation of |CallExpression|.\n          1. Let _baseValue_ be ? GetValue(_baseReference_).\n          1. Let _fieldNameString_ be the StringValue of |PrivateIdentifier|.\n          1. Return MakePrivateReference(_baseValue_, _fieldNameString_).\n        ",
  "ModuleNamespaceCreate" : "\n          1. Assert: _module_.[[Namespace]] is ~empty~.\n          1. Let _internalSlotsList_ be the internal slots listed in <emu-xref href=\"#table-internal-slots-of-module-namespace-exotic-objects\"></emu-xref>.\n          1. Let _M_ be MakeBasicObject(_internalSlotsList_).\n          1. Set _M_'s essential internal methods to the definitions specified in <emu-xref href=\"#sec-module-namespace-exotic-objects\"></emu-xref>.\n          1. Set _M_.[[Module]] to _module_.\n          1. [declared=\"comparefn\"] Let _sortedExports_ be a List whose elements are the elements of _exports_ ordered as if an Array of the same values had been sorted using %Array.prototype.sort% using *undefined* as _comparefn_.\n          1. Set _M_.[[Exports]] to _sortedExports_.\n          1. Create own properties of _M_ corresponding to the definitions in <emu-xref href=\"#sec-module-namespace-objects\"></emu-xref>.\n          1. Set _module_.[[Namespace]] to _M_.\n          1. Return _M_.\n        ",
  "LogicalORExpression[1,0].IsFunctionDefinition" : "\n        1. Return *false*.\n      ",
  "ArgumentList[1,0].ArgumentListEvaluation" : "\n          1. Let _list_ be a new empty List.\n          1. Let _spreadRef_ be ? Evaluation of |AssignmentExpression|.\n          1. Let _spreadObj_ be ? GetValue(_spreadRef_).\n          1. Let _iteratorRecord_ be ? GetIterator(_spreadObj_, ~sync~).\n          1. Repeat,\n            1. Let _next_ be ? IteratorStepValue(_iteratorRecord_).\n            1. If _next_ is ~done~, return _list_.\n            1. Append _next_ to _list_.\n        ",
  "TryStatement[0,0].ContainsUndefinedContinueTarget" : "\n        1. Let _hasUndefinedLabels_ be ContainsUndefinedContinueTarget of |Block| with arguments _iterationSet_ and ¬´ ¬ª.\n        1. If _hasUndefinedLabels_ is *true*, return *true*.\n        1. Return ContainsUndefinedContinueTarget of |Catch| with arguments _iterationSet_ and ¬´ ¬ª.\n      ",
  "ForDeclaration[0,0].IsDestructuring" : "\n          1. Return IsDestructuring of |ForBinding|.\n        ",
  "MemberExpression[5,0].IsDestructuring" : "\n          1. Return *false*.\n        ",
  "INTRINSICS.RegExp.prototype.toString" : "\n          1. Let _R_ be the *this* value.\n          1. If _R_ is not an Object, throw a *TypeError* exception.\n          1. Let _pattern_ be ? ToString(? Get(_R_, *\"source\"*)).\n          1. Let _flags_ be ? ToString(? Get(_R_, *\"flags\"*)).\n          1. Let _result_ be the string-concatenation of *\"/\"*, _pattern_, *\"/\"*, and _flags_.\n          1. Return _result_.\n        ",
  "INTRINSICS.get ArrayBuffer.prototype.byteLength" : "\n          1. Let _O_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_O_, [[ArrayBufferData]]).\n          1. If IsSharedArrayBuffer(_O_) is *true*, throw a *TypeError* exception.\n          1. If IsDetachedBuffer(_O_) is *true*, return *+0*<sub>ùîΩ</sub>.\n          1. Let _length_ be _O_.[[ArrayBufferByteLength]].\n          1. Return ùîΩ(_length_).\n        ",
  "AssignmentExpression[5,0].AssignmentTargetType" : "\n        1. Return ~invalid~.\n      ",
  "INTRINSICS.Math.exp" : "\n          1. Let _n_ be ? ToNumber(_x_).\n          1. If _n_ is either *NaN* or *+‚àû*<sub>ùîΩ</sub>, return _n_.\n          1. If _n_ is either *+0*<sub>ùîΩ</sub> or *-0*<sub>ùîΩ</sub>, return *1*<sub>ùîΩ</sub>.\n          1. If _n_ is *-‚àû*<sub>ùîΩ</sub>, return *+0*<sub>ùîΩ</sub>.\n          1. Return an implementation-approximated Number value representing the result of the exponential function of ‚Ñù(_n_).\n        ",
  "CreateByteDataBlock" : "\n          1. If _size_ > 2<sup>53</sup> - 1, throw a *RangeError* exception.\n          1. Let _db_ be a new Data Block value consisting of _size_ bytes. If it is impossible to create such a Data Block, throw a *RangeError* exception.\n          1. Set all of the bytes of _db_ to 0.\n          1. Return _db_.\n        ",
  "ToLength" : "\n        1. Let _len_ be ? ToIntegerOrInfinity(_argument_).\n        1. If _len_ ‚â§ 0, return *+0*<sub>ùîΩ</sub>.\n        1. Return ùîΩ(min(_len_, 2<sup>53</sup> - 1)).\n      ",
  "ExportDeclaration[6,0].ExportEntries" : "\n          1. Let _entry_ be the ExportEntry Record { [[ModuleRequest]]: *null*, [[ImportName]]: *null*, [[LocalName]]: *\"\\*default\\*\"*, [[ExportName]]: *\"default\"* }.\n          1. Return ¬´ _entry_ ¬ª.\n        ",
  "RegExpBuiltinExec" : "\n          1. Let _length_ be the length of _S_.\n          1. Let _lastIndex_ be ‚Ñù(? ToLength(? Get(_R_, *\"lastIndex\"*))).\n          1. Let _flags_ be _R_.[[OriginalFlags]].\n          1. If _flags_ contains *\"g\"*, let _global_ be *true*; else let _global_ be *false*.\n          1. If _flags_ contains *\"y\"*, let _sticky_ be *true*; else let _sticky_ be *false*.\n          1. If _flags_ contains *\"d\"*, let _hasIndices_ be *true*; else let _hasIndices_ be *false*.\n          1. If _global_ is *false* and _sticky_ is *false*, set _lastIndex_ to 0.\n          1. Let _matcher_ be _R_.[[RegExpMatcher]].\n          1. If _flags_ contains *\"u\"* or _flags_ contains *\"v\"*, let _fullUnicode_ be *true*; else let _fullUnicode_ be *false*.\n          1. Let _matchSucceeded_ be *false*.\n          1. If _fullUnicode_ is *true*, let _input_ be StringToCodePoints(_S_). Otherwise, let _input_ be a List whose elements are the code units that are the elements of _S_.\n          1. NOTE: Each element of _input_ is considered to be a character.\n          1. Repeat, while _matchSucceeded_ is *false*,\n            1. If _lastIndex_ > _length_, then\n              1. If _global_ is *true* or _sticky_ is *true*, then\n                1. Perform ? Set(_R_, *\"lastIndex\"*, *+0*<sub>ùîΩ</sub>, *true*).\n              1. Return *null*.\n            1. Let _inputIndex_ be the index into _input_ of the character that was obtained from element _lastIndex_ of _S_.\n            1. Let _r_ be _matcher_(_input_, _inputIndex_).\n            1. If _r_ is ~failure~, then\n              1. If _sticky_ is *true*, then\n                1. Perform ? Set(_R_, *\"lastIndex\"*, *+0*<sub>ùîΩ</sub>, *true*).\n                1. Return *null*.\n              1. Set _lastIndex_ to AdvanceStringIndex(_S_, _lastIndex_, _fullUnicode_).\n            1. Else,\n              1. Assert: _r_ is a MatchState.\n              1. Set _matchSucceeded_ to *true*.\n          1. Let _e_ be _r_.[[EndIndex]].\n          1. If _fullUnicode_ is *true*, set _e_ to GetStringIndex(_S_, _e_).\n          1. If _global_ is *true* or _sticky_ is *true*, then\n            1. Perform ? Set(_R_, *\"lastIndex\"*, ùîΩ(_e_), *true*).\n          1. Let _n_ be the number of elements in _r_.[[Captures]].\n          1. Assert: _n_ = _R_.[[RegExpRecord]].[[CapturingGroupsCount]].\n          1. Assert: _n_ < 2<sup>32</sup> - 1.\n          1. Let _A_ be ! ArrayCreate(_n_ + 1).\n          1. Assert: The mathematical value of _A_'s *\"length\"* property is _n_ + 1.\n          1. Perform ! CreateDataPropertyOrThrow(_A_, *\"index\"*, ùîΩ(_lastIndex_)).\n          1. Perform ! CreateDataPropertyOrThrow(_A_, *\"input\"*, _S_).\n          1. Let _match_ be the Match Record { [[StartIndex]]: _lastIndex_, [[EndIndex]]: _e_ }.\n          1. Let _indices_ be a new empty List.\n          1. Let _groupNames_ be a new empty List.\n          1. Append _match_ to _indices_.\n          1. Let _matchedSubstr_ be GetMatchString(_S_, _match_).\n          1. Perform ! CreateDataPropertyOrThrow(_A_, *\"0\"*, _matchedSubstr_).\n          1. If _R_ contains any |GroupName|, then\n            1. Let _groups_ be OrdinaryObjectCreate(*null*).\n            1. Let _hasGroups_ be *true*.\n          1. Else,\n            1. Let _groups_ be *undefined*.\n            1. Let _hasGroups_ be *false*.\n          1. Perform ! CreateDataPropertyOrThrow(_A_, *\"groups\"*, _groups_).\n          1. For each integer _i_ such that 1 ‚â§ _i_ ‚â§ _n_, in ascending order, do\n            1. Let _captureI_ be _i_<sup>th</sup> element of _r_.[[Captures]].\n            1. If _captureI_ is *undefined*, then\n              1. Let _capturedValue_ be *undefined*.\n              1. Append *undefined* to _indices_.\n            1. Else,\n              1. Let _captureStart_ be _captureI_.[[StartIndex]].\n              1. Let _captureEnd_ be _captureI_.[[EndIndex]].\n              1. If _fullUnicode_ is *true*, then\n                1. Set _captureStart_ to GetStringIndex(_S_, _captureStart_).\n                1. Set _captureEnd_ to GetStringIndex(_S_, _captureEnd_).\n              1. Let _capture_ be the Match Record { [[StartIndex]]: _captureStart_, [[EndIndex]]: _captureEnd_ }.\n              1. Let _capturedValue_ be GetMatchString(_S_, _capture_).\n              1. Append _capture_ to _indices_.\n            1. Perform ! CreateDataPropertyOrThrow(_A_, ! ToString(ùîΩ(_i_)), _capturedValue_).\n            1. If the _i_<sup>th</sup> capture of _R_ was defined with a |GroupName|, then\n              1. Let _s_ be the CapturingGroupName of that |GroupName|.\n              1. Perform ! CreateDataPropertyOrThrow(_groups_, _s_, _capturedValue_).\n              1. Append _s_ to _groupNames_.\n            1. Else,\n              1. Append *undefined* to _groupNames_.\n          1. If _hasIndices_ is *true*, then\n            1. Let _indicesArray_ be MakeMatchIndicesIndexPairArray(_S_, _indices_, _groupNames_, _hasGroups_).\n            1. Perform ! CreateDataPropertyOrThrow(_A_, *\"indices\"*, _indicesArray_).\n          1. Return _A_.\n        ",
  "StatementList[1,0].ContainsUndefinedBreakTarget" : "\n        1. Let _hasUndefinedLabels_ be ContainsUndefinedBreakTarget of |StatementList| with argument _labelSet_.\n        1. If _hasUndefinedLabels_ is *true*, return *true*.\n        1. Return ContainsUndefinedBreakTarget of |StatementListItem| with argument _labelSet_.\n      ",
  "INTRINSICS.Number.isFinite" : "\n          1. If _number_ is not a Number, return *false*.\n          1. If _number_ is not finite, return *false*.\n          1. Otherwise, return *true*.\n        ",
  "PrimaryExpression[8,0].AssignmentTargetType" : "\n        1. Return ~invalid~.\n      ",
  "NumericToRawBytes" : "\n          1. If _type_ is ~float32~, then\n            1. Let _rawBytes_ be a List whose elements are the 4 bytes that are the result of converting _value_ to IEEE 754-2019 binary32 format using roundTiesToEven mode. The bytes are arranged in little endian order. If _value_ is *NaN*, _rawBytes_ may be set to any implementation chosen IEEE 754-2019 binary32 format Not-a-Number encoding. An implementation must always choose the same encoding for each implementation distinguishable *NaN* value.\n          1. Else if _type_ is ~float64~, then\n            1. Let _rawBytes_ be a List whose elements are the 8 bytes that are the IEEE 754-2019 binary64 format encoding of _value_. The bytes are arranged in little endian order. If _value_ is *NaN*, _rawBytes_ may be set to any implementation chosen IEEE 754-2019 binary64 format Not-a-Number encoding. An implementation must always choose the same encoding for each implementation distinguishable *NaN* value.\n          1. Else,\n            1. Let _n_ be the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"></emu-xref> for Element Type _type_.\n            1. Let _convOp_ be the abstract operation named in the Conversion Operation column in <emu-xref href=\"#table-the-typedarray-constructors\"></emu-xref> for Element Type _type_.\n            1. Let _intValue_ be ‚Ñù(_convOp_(_value_)).\n            1. If _intValue_ ‚â• 0, then\n              1. Let _rawBytes_ be a List whose elements are the _n_-byte binary encoding of _intValue_. The bytes are ordered in little endian order.\n            1. Else,\n              1. Let _rawBytes_ be a List whose elements are the _n_-byte binary two's complement encoding of _intValue_. The bytes are ordered in little endian order.\n          1. If _isLittleEndian_ is *false*, reverse the order of the elements of _rawBytes_.\n          1. Return _rawBytes_.\n        ",
  "OrdinarySet" : "\n          1. Let _ownDesc_ be ? <emu-meta effects=\"user-code\">_O_.[[GetOwnProperty]]</emu-meta>(_P_).\n          1. Return ? OrdinarySetWithOwnDescriptor(_O_, _P_, _V_, _Receiver_, _ownDesc_).\n        ",
  "ClassAtomNoDash[0,0].IsCharacterClass" : "\n          1. Return *false*.\n        ",
  "INTRINSICS.Math.log2" : "\n          1. Let _n_ be ? ToNumber(_x_).\n          1. If _n_ is either *NaN* or *+‚àû*<sub>ùîΩ</sub>, return _n_.\n          1. If _n_ is *1*<sub>ùîΩ</sub>, return *+0*<sub>ùîΩ</sub>.\n          1. If _n_ is either *+0*<sub>ùîΩ</sub> or *-0*<sub>ùîΩ</sub>, return *-‚àû*<sub>ùîΩ</sub>.\n          1. If _n_ < *-0*<sub>ùîΩ</sub>, return *NaN*.\n          1. Return an implementation-approximated Number value representing the result of the base 2 logarithm of ‚Ñù(_n_).\n        ",
  "LabelIdentifier[2,0].StringValue" : "\n        1. Return *\"await\"*.\n      ",
  "IdentifierReference[0,0].Evaluation" : "\n        1. Return ? ResolveBinding(StringValue of |Identifier|).\n      ",
  "ArrowParameters[1,0].BoundNames" : "\n        1. Let _formals_ be the |ArrowFormalParameters| that is covered by |CoverParenthesizedExpressionAndArrowParameterList|.\n        1. Return the BoundNames of _formals_.\n      ",
  "OptionalChain[0,0].HasCallInTailPosition" : "\n        1. If this |OptionalChain| is _call_, return *true*.\n        1. Return *false*.\n      ",
  "LogicalORExpression[1,0].AssignmentTargetType" : "\n        1. Return ~invalid~.\n      ",
  "BindingElisionElement[0,0].ContainsExpression" : "\n        1. Return ContainsExpression of |BindingElement|.\n      ",
  "INTRINSICS.get DataView.prototype.byteOffset" : "\n          1. Let _O_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_O_, [[DataView]]).\n          1. Assert: _O_ has a [[ViewedArrayBuffer]] internal slot.\n          1. Let _viewRecord_ be MakeDataViewWithBufferWitnessRecord(_O_, ~seq-cst~).\n          1. If IsViewOutOfBounds(_viewRecord_) is *true*, throw a *TypeError* exception.\n          1. Let _offset_ be _O_.[[ByteOffset]].\n          1. Return ùîΩ(_offset_).\n        ",
  "INTRINSICS.Object.keys" : "\n          1. Let _obj_ be ? ToObject(_O_).\n          1. Let _keyList_ be ? EnumerableOwnProperties(_obj_, ~key~).\n          1. Return CreateArrayFromList(_keyList_).\n        ",
  "Statement[7,0].LabelledEvaluation" : "\n        1. Return ? Evaluation of |Statement|.\n      ",
  "ForStatement[0,0].VarScopedDeclarations" : "\n        1. Return the VarScopedDeclarations of |Statement|.\n      ",
  "PrimaryExpression[2,0].AssignmentTargetType" : "\n        1. Return ~invalid~.\n      ",
  "AsyncGeneratorExpression[0,0].HasName" : "\n        1. Return *false*.\n      ",
  "ExportDeclaration[5,0].LexicallyScopedDeclarations" : "\n        1. Return a List whose sole element is |ClassDeclaration|.\n      ",
  "Statement[11,0].VarScopedDeclarations" : "\n        1. Return a new empty List.\n      ",
  "CaseClause[0,0].VarDeclaredNames" : "\n        1. If the |StatementList| is present, return the VarDeclaredNames of |StatementList|.\n        1. Return a new empty List.\n      ",
  "INTRINSICS.SharedArrayBuffer.prototype.grow" : "\n          1. Let _O_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_O_, [[ArrayBufferMaxByteLength]]).\n          1. If IsSharedArrayBuffer(_O_) is *false*, throw a *TypeError* exception.\n          1. Let _newByteLength_ be ? ToIndex(_newLength_).\n          1. Let _hostHandled_ be ? HostGrowSharedArrayBuffer(_O_, _newByteLength_).\n          1. If _hostHandled_ is ~handled~, return *undefined*.\n          1. Let _isLittleEndian_ be the value of the [[LittleEndian]] field of the surrounding agent's Agent Record.\n          1. Let _byteLengthBlock_ be _O_.[[ArrayBufferByteLengthData]].\n          1. Let _currentByteLengthRawBytes_ be GetRawBytesFromSharedBlock(_byteLengthBlock_, 0, ~biguint64~, *true*, ~seq-cst~).\n          1. Let _newByteLengthRawBytes_ be NumericToRawBytes(~biguint64~, ‚Ñ§(_newByteLength_), _isLittleEndian_).\n          1. Repeat,\n            1. NOTE: This is a compare-and-exchange loop to ensure that parallel, racing grows of the same buffer are totally ordered, are not lost, and do not silently do nothing. The loop exits if it was able to attempt to grow uncontended.\n            1. Let _currentByteLength_ be ‚Ñù(RawBytesToNumeric(~biguint64~, _currentByteLengthRawBytes_, _isLittleEndian_)).\n            1. If _newByteLength_ = _currentByteLength_, return *undefined*.\n            1. If _newByteLength_ < _currentByteLength_ or _newByteLength_ > _O_.[[ArrayBufferMaxByteLength]], throw a *RangeError* exception.\n            1. Let _byteLengthDelta_ be _newByteLength_ - _currentByteLength_.\n            1. If it is impossible to create a new Shared Data Block value consisting of _byteLengthDelta_ bytes, throw a *RangeError* exception.\n            1. NOTE: No new Shared Data Block is constructed and used here. The observable behaviour of growable SharedArrayBuffers is specified by allocating a max-sized Shared Data Block at construction time, and this step captures the requirement that implementations that run out of memory must throw a *RangeError*.\n            1. Let _readByteLengthRawBytes_ be AtomicCompareExchangeInSharedBlock(_byteLengthBlock_, 0, 8, _currentByteLengthRawBytes_, _newByteLengthRawBytes_).\n            1. If ByteListEqual(_readByteLengthRawBytes_, _currentByteLengthRawBytes_) is *true*, return *undefined*.\n            1. Set _currentByteLengthRawBytes_ to _readByteLengthRawBytes_.\n        ",
  "INTRINSICS.Object.getPrototypeOf" : "\n          1. Let _obj_ be ? ToObject(_O_).\n          1. Return ? <emu-meta effects=\"user-code\">_obj_.[[GetPrototypeOf]]()</emu-meta>.\n        ",
  "AsyncGeneratorDeclaration[1,0].InstantiateAsyncGeneratorFunctionObject" : "\n        1. Let _sourceText_ be the source text matched by |AsyncGeneratorDeclaration|.\n        1. Let _F_ be OrdinaryFunctionCreate(%AsyncGeneratorFunction.prototype%, _sourceText_, |FormalParameters|, |AsyncGeneratorBody|, ~non-lexical-this~, _env_, _privateEnv_).\n        1. Perform SetFunctionName(_F_, *\"default\"*).\n        1. Let _prototype_ be OrdinaryObjectCreate(%AsyncGeneratorFunction.prototype.prototype%).\n        1. Perform ! DefinePropertyOrThrow(_F_, *\"prototype\"*, PropertyDescriptor { [[Value]]: _prototype_, [[Writable]]: *true*, [[Enumerable]]: *false*, [[Configurable]]: *false* }).\n        1. Return _F_.\n      ",
  "MemberExpression[3,0].IsFunctionDefinition" : "\n        1. Return *false*.\n      ",
  "AsyncFunctionExpression[0,1].HasName" : "\n        1. Return *true*.\n      ",
  "OptionalChain[2,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "IsArrayBufferViewOutOfBounds" : "\n          1. If _O_ has a [[DataView]] internal slot, then\n            1. Let _viewRecord_ be MakeDataViewWithBufferWitnessRecord(_O_, ~seq-cst~).\n            1. Return IsViewOutOfBounds(_viewRecord_).\n          1. Let _taRecord_ be MakeTypedArrayWithBufferWitnessRecord(_O_, ~seq-cst~).\n          1. Return IsTypedArrayOutOfBounds(_taRecord_).\n        ",
  "CreateRealm" : "\n        1. Let _realmRec_ be a new Realm Record.\n        1. Perform CreateIntrinsics(_realmRec_).\n        1. Set _realmRec_.[[AgentSignifier]] to AgentSignifier().\n        1. Set _realmRec_.[[GlobalObject]] to *undefined*.\n        1. Set _realmRec_.[[GlobalEnv]] to *undefined*.\n        1. Set _realmRec_.[[TemplateMap]] to a new empty List.\n        1. Return _realmRec_.\n      ",
  "Construct" : "\n        1. If _newTarget_ is not present, set _newTarget_ to _F_.\n        1. If _argumentsList_ is not present, set _argumentsList_ to a new empty List.\n        1. Return ? <emu-meta effects=\"user-code\">_F_.[[Construct]]</emu-meta>(_argumentsList_, _newTarget_).\n      ",
  "TypedArraySpeciesCreate" : "\n          1. Let _defaultConstructor_ be the intrinsic object associated with the constructor name _exemplar_.[[TypedArrayName]] in <emu-xref href=\"#table-the-typedarray-constructors\"></emu-xref>.\n          1. Let _constructor_ be ? SpeciesConstructor(_exemplar_, _defaultConstructor_).\n          1. Let _result_ be ? TypedArrayCreateFromConstructor(_constructor_, _argumentList_).\n          1. Assert: _result_ has [[TypedArrayName]] and [[ContentType]] internal slots.\n          1. If _result_.[[ContentType]] is not _exemplar_.[[ContentType]], throw a *TypeError* exception.\n          1. Return _result_.\n        ",
  "CaseClause[0,1].LexicallyScopedDeclarations" : "\n        1. If the |StatementList| is present, return the LexicallyScopedDeclarations of |StatementList|.\n        1. Return a new empty List.\n      ",
  "WhileStatement[0,0].ContainsDuplicateLabels" : "\n        1. Return ContainsDuplicateLabels of |Statement| with argument _labelSet_.\n      ",
  "INTRINSICS.Array.prototype.flatMap" : "\n          1. Let _O_ be ? ToObject(*this* value).\n          1. Let _sourceLen_ be ? LengthOfArrayLike(_O_).\n          1. If IsCallable(_mapperFunction_) is *false*, throw a *TypeError* exception.\n          1. Let _A_ be ? ArraySpeciesCreate(_O_, 0).\n          1. Perform ? FlattenIntoArray(_A_, _O_, _sourceLen_, 0, 1, _mapperFunction_, _thisArg_).\n          1. Return _A_.\n        ",
  "NewDeclarativeEnvironment" : "\n          1. Let _env_ be a new Declarative Environment Record containing no bindings.\n          1. Set _env_.[[OuterEnv]] to _E_.\n          1. Return _env_.\n        ",
  "LogicalANDExpression[1,0].HasCallInTailPosition" : "\n        1. Return HasCallInTailPosition of |BitwiseORExpression| with argument _call_.\n      ",
  "ElementList[1,1].ArrayAccumulation" : "\n          1. If |Elision| is present, then\n            1. Set _nextIndex_ to ? ArrayAccumulation of |Elision| with arguments _array_ and _nextIndex_.\n          1. Return ? ArrayAccumulation of |SpreadElement| with arguments _array_ and _nextIndex_.\n        ",
  "ToPropertyKey" : "\n        1. Let _key_ be ? ToPrimitive(_argument_, ~string~).\n        1. If _key_ is a Symbol, then\n          1. Return _key_.\n        1. Return ! ToString(_key_).\n      ",
  "INTRINSICS.DataView.prototype.setUint16" : "\n          1. Let _v_ be the *this* value.\n          1. If _littleEndian_ is not present, set _littleEndian_ to *false*.\n          1. Return ? SetViewValue(_v_, _byteOffset_, _littleEndian_, ~uint16~, _value_).\n        ",
  "ReturnStatement[1,0].Evaluation" : "\n        1. Let _exprRef_ be ? Evaluation of |Expression|.\n        1. Let _exprValue_ be ? GetValue(_exprRef_).\n        1. If GetGeneratorKind() is ~async~, set _exprValue_ to ? Await(_exprValue_).\n        1. Return Completion Record { [[Type]]: ~return~, [[Value]]: _exprValue_, [[Target]]: ~empty~ }.\n      ",
  "ValidateIntegerTypedArray" : "\n          1. Let _taRecord_ be ? ValidateTypedArray(_typedArray_, ~unordered~).\n          1. NOTE: Bounds checking is not a synchronizing operation when _typedArray_'s backing buffer is a growable SharedArrayBuffer.\n          1. If _waitable_ is *true*, then\n            1. If _typedArray_.[[TypedArrayName]] is neither *\"Int32Array\"* nor *\"BigInt64Array\"*, throw a *TypeError* exception.\n          1. Else,\n            1. Let _type_ be TypedArrayElementType(_typedArray_).\n            1. If IsUnclampedIntegerElementType(_type_) is *false* and IsBigIntElementType(_type_) is *false*, throw a *TypeError* exception.\n          1. Return _taRecord_.\n        ",
  "Catch[0,0].VarDeclaredNames" : "\n        1. Return the VarDeclaredNames of |Block|.\n      ",
  "ShiftExpression[1,0].IsFunctionDefinition" : "\n        1. Return *false*.\n      ",
  "MakeArgSetter:clo0" : "\n            1. Let _setterClosure_ be a new Abstract Closure with parameters (_value_) that captures _name_ and _env_ and performs the following steps when called:\n              1. Return ! _env_.SetMutableBinding(_name_, _value_, *false*).\n            1. Let _setter_ be CreateBuiltinFunction(_setterClosure_, 1, *\"\"*, ¬´ ¬ª).\n            1. NOTE: _setter_ is never directly accessible to ECMAScript code.\n            1. Return _setter_.\n          ",
  "NestedClass[0,0].CompileToCharSet" : "\n          1. Return CompileToCharSet of |ClassContents| with argument _rer_.\n        ",
  "FunctionStatementList[0,0].VarDeclaredNames" : "\n        1. Return a new empty List.\n      ",
  "PrimaryExpression[7,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "PropertyDefinition[2,0].PropertyDefinitionEvaluation" : "\n          1. Let _propKey_ be ? Evaluation of |PropertyName|.\n          1. If this |PropertyDefinition| is contained within a |Script| that is being evaluated for JSON.parse (see step <emu-xref href=\"#step-json-parse-eval\"></emu-xref> of <emu-xref href=\"#sec-json.parse\">JSON.parse</emu-xref>), then\n            1. Let _isProtoSetter_ be *false*.\n          1. Else if _propKey_ is *\"__proto__\"* and IsComputedPropertyKey of |PropertyName| is *false*, then\n            1. Let _isProtoSetter_ be *true*.\n          1. Else,\n            1. Let _isProtoSetter_ be *false*.\n          1. If IsAnonymousFunctionDefinition(|AssignmentExpression|) is *true* and _isProtoSetter_ is *false*, then\n            1. Let _propValue_ be ? NamedEvaluation of |AssignmentExpression| with argument _propKey_.\n          1. Else,\n            1. Let _exprValueRef_ be ? Evaluation of |AssignmentExpression|.\n            1. Let _propValue_ be ? GetValue(_exprValueRef_).\n          1. If _isProtoSetter_ is *true*, then\n            1. If _propValue_ is an Object or _propValue_ is *null*, then\n              1. Perform ! <emu-meta effects=\"user-code\">_object_.[[SetPrototypeOf]]</emu-meta>(_propValue_).\n            1. Return ~unused~.\n          1. Assert: _object_ is an ordinary, extensible object with no non-configurable properties.\n          1. Perform ! CreateDataPropertyOrThrow(_object_, _propKey_, _propValue_).\n          1. Return ~unused~.\n        ",
  "GetTemplateObject" : "\n          1. Let _realm_ be the current Realm Record.\n          1. Let _templateRegistry_ be _realm_.[[TemplateMap]].\n          1. For each element _e_ of _templateRegistry_, do\n            1. If _e_.[[Site]] is the same Parse Node as _templateLiteral_, then\n              1. Return _e_.[[Array]].\n          1. Let _rawStrings_ be TemplateStrings of _templateLiteral_ with argument *true*.\n          1. Assert: _rawStrings_ is a List of Strings.\n          1. Let _cookedStrings_ be TemplateStrings of _templateLiteral_ with argument *false*.\n          1. Let _count_ be the number of elements in the List _cookedStrings_.\n          1. Assert: _count_ ‚â§ 2<sup>32</sup> - 1.\n          1. Let _template_ be ! ArrayCreate(_count_).\n          1. Let _rawObj_ be ! ArrayCreate(_count_).\n          1. Let _index_ be 0.\n          1. Repeat, while _index_ < _count_,\n            1. Let _prop_ be ! ToString(ùîΩ(_index_)).\n            1. Let _cookedValue_ be _cookedStrings_[_index_].\n            1. Perform ! DefinePropertyOrThrow(_template_, _prop_, PropertyDescriptor { [[Value]]: _cookedValue_, [[Writable]]: *false*, [[Enumerable]]: *true*, [[Configurable]]: *false* }).\n            1. Let _rawValue_ be the String value _rawStrings_[_index_].\n            1. Perform ! DefinePropertyOrThrow(_rawObj_, _prop_, PropertyDescriptor { [[Value]]: _rawValue_, [[Writable]]: *false*, [[Enumerable]]: *true*, [[Configurable]]: *false* }).\n            1. Set _index_ to _index_ + 1.\n          1. Perform ! SetIntegrityLevel(_rawObj_, ~frozen~).\n          1. Perform ! DefinePropertyOrThrow(_template_, *\"raw\"*, PropertyDescriptor { [[Value]]: _rawObj_, [[Writable]]: *false*, [[Enumerable]]: *false*, [[Configurable]]: *false* }).\n          1. Perform ! SetIntegrityLevel(_template_, ~frozen~).\n          1. Append the Record { [[Site]]: _templateLiteral_, [[Array]]: _template_ } to _realm_.[[TemplateMap]].\n          1. Return _template_.\n        ",
  "ForInOfStatement[0,0].VarScopedDeclarations" : "\n        1. Return the VarScopedDeclarations of |Statement|.\n      ",
  "WithStatement[0,0].ContainsDuplicateLabels" : "\n        1. Return ContainsDuplicateLabels of |Statement| with argument _labelSet_.\n      ",
  "LexicalDeclaration[0,0].IsConstantDeclaration" : "\n        1. Return IsConstantDeclaration of |LetOrConst|.\n      ",
  "ForStatement[0,1].VarScopedDeclarations" : "\n        1. Return the VarScopedDeclarations of |Statement|.\n      ",
  "BindingProperty[1,0].BoundNames" : "\n        1. Return the BoundNames of |BindingElement|.\n      ",
  "GeneratorExpression[0,1].HasName" : "\n        1. Return *true*.\n      ",
  "NumericLiteral[0,0].NumericValue" : "\n          1. Return RoundMVResult(MV of |DecimalLiteral|).\n        ",
  "AssignmentExpression[6,0].IsFunctionDefinition" : "\n        1. Return *false*.\n      ",
  "PrimaryExpression[7,0].AssignmentTargetType" : "\n        1. Return ~invalid~.\n      ",
  "HoistableDeclaration[0,0].Evaluation" : "\n        1. Return ? Evaluation of |FunctionDeclaration|.\n      ",
  "UpdateExpression[2,0].Evaluation" : "\n          1. Let _lhs_ be ? Evaluation of |LeftHandSideExpression|.\n          1. Let _oldValue_ be ? ToNumeric(? GetValue(_lhs_)).\n          1. If _oldValue_ is a Number, then\n            1. Let _newValue_ be Number::subtract(_oldValue_, *1*<sub>ùîΩ</sub>).\n          1. Else,\n            1. Assert: _oldValue_ is a BigInt.\n            1. Let _newValue_ be BigInt::subtract(_oldValue_, *1*<sub>‚Ñ§</sub>).\n          1. Perform ? PutValue(_lhs_, _newValue_).\n          1. Return _oldValue_.\n        ",
  "StatementListItem[0,0].TopLevelVarDeclaredNames" : "\n        1. If |Statement| is <emu-grammar>Statement : LabelledStatement</emu-grammar>, return TopLevelVarDeclaredNames of |Statement|.\n        1. Return VarDeclaredNames of |Statement|.\n      ",
  "Await:cont2" : "\n          1. Let _asyncContext_ be the running execution context.\n          1. Let _promise_ be ? PromiseResolve(%Promise%, _value_).\n          1. Let _fulfilledClosure_ be a new Abstract Closure with parameters (_v_) that captures _asyncContext_ and performs the following steps when called:\n            1. Let _prevContext_ be the running execution context.\n            1. Suspend _prevContext_.\n            1. Push _asyncContext_ onto the execution context stack; _asyncContext_ is now the running execution context.\n            1. <emu-meta effects=\"user-code\">Resume the suspended evaluation of _asyncContext_</emu-meta> using NormalCompletion(_v_) as the result of the operation that suspended it.\n            1. Assert: When we reach this step, _asyncContext_ has already been removed from the execution context stack and _prevContext_ is the currently running execution context.\n            1. Return *undefined*.\n          1. Let _onFulfilled_ be CreateBuiltinFunction(_fulfilledClosure_, 1, *\"\"*, ¬´ ¬ª).\n          1. Let _rejectedClosure_ be a new Abstract Closure with parameters (_reason_) that captures _asyncContext_ and performs the following steps when called:\n            1. Let _prevContext_ be the running execution context.\n            1. Suspend _prevContext_.\n            1. Push _asyncContext_ onto the execution context stack; _asyncContext_ is now the running execution context.\n            1. <emu-meta effects=\"user-code\">Resume the suspended evaluation of _asyncContext_</emu-meta> using ThrowCompletion(_reason_) as the result of the operation that suspended it.\n            1. Assert: When we reach this step, _asyncContext_ has already been removed from the execution context stack and _prevContext_ is the currently running execution context.\n            1. Return *undefined*.\n          1. Let _onRejected_ be CreateBuiltinFunction(_rejectedClosure_, 1, *\"\"*, ¬´ ¬ª).\n          1. Perform PerformPromiseThen(_promise_, _onFulfilled_, _onRejected_).\n          1. Remove _asyncContext_ from the execution context stack and restore the execution context that is at the top of the execution context stack as the running execution context.\n          1. Let _callerContext_ be the running execution context.\n          1. Resume _callerContext_ passing ~empty~. If _asyncContext_ is ever resumed again, let _completion_ be the Completion Record with which it is resumed.\n          1. Assert: If control reaches here, then _asyncContext_ is the running execution context again.\n          1. Return _completion_.\n        ",
  "ToDateString" : "\n            1. If _tv_ is *NaN*, return *\"Invalid Date\"*.\n            1. Let _t_ be LocalTime(_tv_).\n            1. Return the string-concatenation of DateString(_t_), the code unit 0x0020 (SPACE), TimeString(_t_), and TimeZoneString(_tv_).\n          ",
  "PropertyDefinition[4,0].PropertyDefinitionEvaluation" : "\n          1. Let _exprValue_ be ? Evaluation of |AssignmentExpression|.\n          1. Let _fromValue_ be ? GetValue(_exprValue_).\n          1. Let _excludedNames_ be a new empty List.\n          1. Perform ? CopyDataProperties(_object_, _fromValue_, _excludedNames_).\n          1. Return ~unused~.\n        ",
  "Script[0,0].VarScopedDeclarations" : "\n        1. Return a new empty List.\n      ",
  "ForStatement[1,0].ContainsUndefinedContinueTarget" : "\n        1. Return ContainsUndefinedContinueTarget of |Statement| with arguments _iterationSet_ and ¬´ ¬ª.\n      ",
  "MemberExpression[3,0].IsDestructuring" : "\n          1. Return *false*.\n        ",
  "Await:clo0" : "\n          1. Let _asyncContext_ be the running execution context.\n          1. Let _promise_ be ? PromiseResolve(%Promise%, _value_).\n          1. Let _fulfilledClosure_ be a new Abstract Closure with parameters (_v_) that captures _asyncContext_ and performs the following steps when called:\n            1. Let _prevContext_ be the running execution context.\n            1. Suspend _prevContext_.\n            1. Push _asyncContext_ onto the execution context stack; _asyncContext_ is now the running execution context.\n            1. <emu-meta effects=\"user-code\">Resume the suspended evaluation of _asyncContext_</emu-meta> using NormalCompletion(_v_) as the result of the operation that suspended it.\n            1. Assert: When we reach this step, _asyncContext_ has already been removed from the execution context stack and _prevContext_ is the currently running execution context.\n            1. Return *undefined*.\n          1. Let _onFulfilled_ be CreateBuiltinFunction(_fulfilledClosure_, 1, *\"\"*, ¬´ ¬ª).\n          1. Let _rejectedClosure_ be a new Abstract Closure with parameters (_reason_) that captures _asyncContext_ and performs the following steps when called:\n            1. Let _prevContext_ be the running execution context.\n            1. Suspend _prevContext_.\n            1. Push _asyncContext_ onto the execution context stack; _asyncContext_ is now the running execution context.\n            1. <emu-meta effects=\"user-code\">Resume the suspended evaluation of _asyncContext_</emu-meta> using ThrowCompletion(_reason_) as the result of the operation that suspended it.\n            1. Assert: When we reach this step, _asyncContext_ has already been removed from the execution context stack and _prevContext_ is the currently running execution context.\n            1. Return *undefined*.\n          1. Let _onRejected_ be CreateBuiltinFunction(_rejectedClosure_, 1, *\"\"*, ¬´ ¬ª).\n          1. Perform PerformPromiseThen(_promise_, _onFulfilled_, _onRejected_).\n          1. Remove _asyncContext_ from the execution context stack and restore the execution context that is at the top of the execution context stack as the running execution context.\n          1. Let _callerContext_ be the running execution context.\n          1. Resume _callerContext_ passing ~empty~. If _asyncContext_ is ever resumed again, let _completion_ be the Completion Record with which it is resumed.\n          1. Assert: If control reaches here, then _asyncContext_ is the running execution context again.\n          1. Return _completion_.\n        ",
  "INTRINSICS.Promise.prototype.finally" : "\n          1. Let _promise_ be the *this* value.\n          1. If _promise_ is not an Object, throw a *TypeError* exception.\n          1. Let _C_ be ? SpeciesConstructor(_promise_, %Promise%).\n          1. Assert: IsConstructor(_C_) is *true*.\n          1. If IsCallable(_onFinally_) is *false*, then\n            1. Let _thenFinally_ be _onFinally_.\n            1. Let _catchFinally_ be _onFinally_.\n          1. Else,\n            1. Let _thenFinallyClosure_ be a new Abstract Closure with parameters (_value_) that captures _onFinally_ and _C_ and performs the following steps when called:\n              1. Let _result_ be ? Call(_onFinally_, *undefined*).\n              1. Let _p_ be ? PromiseResolve(_C_, _result_).\n              1. Let _returnValue_ be a new Abstract Closure with no parameters that captures _value_ and performs the following steps when called:\n                1. Return _value_.\n              1. Let _valueThunk_ be CreateBuiltinFunction(_returnValue_, 0, *\"\"*, ¬´ ¬ª).\n              1. Return ? Invoke(_p_, *\"then\"*, ¬´ _valueThunk_ ¬ª).\n            1. Let _thenFinally_ be CreateBuiltinFunction(_thenFinallyClosure_, 1, *\"\"*, ¬´ ¬ª).\n            1. Let _catchFinallyClosure_ be a new Abstract Closure with parameters (_reason_) that captures _onFinally_ and _C_ and performs the following steps when called:\n              1. Let _result_ be ? Call(_onFinally_, *undefined*).\n              1. Let _p_ be ? PromiseResolve(_C_, _result_).\n              1. Let _throwReason_ be a new Abstract Closure with no parameters that captures _reason_ and performs the following steps when called:\n                1. Return ThrowCompletion(_reason_).\n              1. Let _thrower_ be CreateBuiltinFunction(_throwReason_, 0, *\"\"*, ¬´ ¬ª).\n              1. Return ? Invoke(_p_, *\"then\"*, ¬´ _thrower_ ¬ª).\n            1. Let _catchFinally_ be CreateBuiltinFunction(_catchFinallyClosure_, 1, *\"\"*, ¬´ ¬ª).\n          1. Return ? Invoke(_promise_, *\"then\"*, ¬´ _thenFinally_, _catchFinally_ ¬ª).\n        ",
  "ClassExpression[0,0].Evaluation" : "\n        1. Let _value_ be ? ClassDefinitionEvaluation of |ClassTail| with arguments *undefined* and *\"\"*.\n        1. Set _value_.[[SourceText]] to the source text matched by |ClassExpression|.\n        1. Return _value_.\n      ",
  "OrdinaryDefineOwnProperty" : "\n          1. Let _current_ be ? <emu-meta effects=\"user-code\">_O_.[[GetOwnProperty]]</emu-meta>(_P_).\n          1. Let _extensible_ be ? IsExtensible(_O_).\n          1. Return ValidateAndApplyPropertyDescriptor(_O_, _P_, _extensible_, _Desc_, _current_).\n        ",
  "ModuleItem[2,0].ExportedNames" : "\n          1. Return a new empty List.\n        ",
  "RelationalExpression[6,0].AssignmentTargetType" : "\n        1. Return ~invalid~.\n      ",
  "ClassElement[1,0].ClassElementEvaluation" : "\n        1. Return ? MethodDefinitionEvaluation of |MethodDefinition| with arguments _object_ and *false*.\n      ",
  "ConditionalExpression[1,0].Evaluation" : "\n        1. Let _lref_ be ? Evaluation of |ShortCircuitExpression|.\n        1. Let _lval_ be ToBoolean(? GetValue(_lref_)).\n        1. If _lval_ is *true*, then\n          1. Let _trueRef_ be ? Evaluation of the first |AssignmentExpression|.\n          1. Return ? GetValue(_trueRef_).\n        1. Else,\n          1. Let _falseRef_ be ? Evaluation of the second |AssignmentExpression|.\n          1. Return ? GetValue(_falseRef_).\n      ",
  "ExecuteAsyncModule" : "\n              1. Assert: _module_.[[Status]] is either ~evaluating~ or ~evaluating-async~.\n              1. Assert: _module_.[[HasTLA]] is *true*.\n              1. Let _capability_ be ! NewPromiseCapability(%Promise%).\n              1. Let _fulfilledClosure_ be a new Abstract Closure with no parameters that captures _module_ and performs the following steps when called:\n                1. Perform AsyncModuleExecutionFulfilled(_module_).\n                1. Return *undefined*.\n              1. Let _onFulfilled_ be CreateBuiltinFunction(_fulfilledClosure_, 0, *\"\"*, ¬´ ¬ª).\n              1. Let _rejectedClosure_ be a new Abstract Closure with parameters (_error_) that captures _module_ and performs the following steps when called:\n                1. Perform AsyncModuleExecutionRejected(_module_, _error_).\n                1. Return *undefined*.\n              1. Let _onRejected_ be CreateBuiltinFunction(_rejectedClosure_, 0, *\"\"*, ¬´ ¬ª).\n              1. Perform PerformPromiseThen(_capability_.[[Promise]], _onFulfilled_, _onRejected_).\n              1. Perform ! <emu-meta effects=\"user-code\">_module_.ExecuteModule</emu-meta>(_capability_).\n              1. Return ~unused~.\n            ",
  "AsyncFunctionStart" : "\n          1. Let _runningContext_ be the running execution context.\n          1. Let _asyncContext_ be a copy of _runningContext_.\n          1. NOTE: Copying the execution state is required for AsyncBlockStart to resume its execution. It is ill-defined to resume a currently executing context.\n          1. Perform AsyncBlockStart(_promiseCapability_, _asyncFunctionBody_, _asyncContext_).\n          1. Return ~unused~.\n        ",
  "CaseBlock[1,0].VarDeclaredNames" : "\n        1. If the first |CaseClauses| is present, let _names1_ be the VarDeclaredNames of the first |CaseClauses|.\n        1. Else, let _names1_ be a new empty List.\n        1. Let _names2_ be VarDeclaredNames of |DefaultClause|.\n        1. If the second |CaseClauses| is present, let _names3_ be the VarDeclaredNames of the second |CaseClauses|.\n        1. Else, let _names3_ be a new empty List.\n        1. Return the list-concatenation of _names1_, _names2_, and _names3_.\n      ",
  "UnaryExpression[2,0].Evaluation" : "\n          1. Let _expr_ be ? Evaluation of |UnaryExpression|.\n          1. Perform ? GetValue(_expr_).\n          1. Return *undefined*.\n        ",
  "ForInOfStatement[1,0].ForInOfLoopEvaluation" : "\n          1. Let _keyResult_ be ? ForIn/OfHeadEvaluation(¬´ ¬ª, |Expression|, ~enumerate~).\n          1. Return ? ForIn/OfBodyEvaluation(|ForBinding|, |Statement|, _keyResult_, ~enumerate~, ~var-binding~, _labelSet_).\n        ",
  "SetFunctionName" : "\n        1. Assert: _F_ is an extensible object that does not have a *\"name\"* own property.\n        1. If _name_ is a Symbol, then\n          1. Let _description_ be _name_'s [[Description]] value.\n          1. If _description_ is *undefined*, set _name_ to the empty String.\n          1. Else, set _name_ to the string-concatenation of *\"[\"*, _description_, and *\"]\"*.\n        1. Else if _name_ is a Private Name, then\n          1. Set _name_ to _name_.[[Description]].\n        1. If _F_ has an [[InitialName]] internal slot, then\n          1. Set _F_.[[InitialName]] to _name_.\n        1. If _prefix_ is present, then\n          1. Set _name_ to the string-concatenation of _prefix_, the code unit 0x0020 (SPACE), and _name_.\n          1. If _F_ has an [[InitialName]] internal slot, then\n            1. Optionally, set _F_.[[InitialName]] to _name_.\n        1. Perform ! DefinePropertyOrThrow(_F_, *\"name\"*, PropertyDescriptor { [[Value]]: _name_, [[Writable]]: *false*, [[Enumerable]]: *false*, [[Configurable]]: *true* }).\n        1. Return ~unused~.\n      ",
  "Statement[9,0].LabelledEvaluation" : "\n        1. Return ? Evaluation of |Statement|.\n      ",
  "INTRINSICS.Number.prototype.toFixed" : "\n          1. Let _x_ be ? ThisNumberValue(*this* value).\n          1. Let _f_ be ? ToIntegerOrInfinity(_fractionDigits_).\n          1. Assert: If _fractionDigits_ is *undefined*, then _f_ is 0.\n          1. If _f_ is not finite, throw a *RangeError* exception.\n          1. If _f_ < 0 or _f_ > 100, throw a *RangeError* exception.\n          1. If _x_ is not finite, return Number::toString(_x_, 10).\n          1. Set _x_ to ‚Ñù(_x_).\n          1. Let _s_ be the empty String.\n          1. If _x_ < 0, then\n            1. Set _s_ to *\"-\"*.\n            1. Set _x_ to -_x_.\n          1. If _x_ ‚â• 10<sup>21</sup>, then\n            1. Let _m_ be ! ToString(ùîΩ(_x_)).\n          1. Else,\n            1. Let _n_ be an integer for which _n_ / 10<sup>_f_</sup> - _x_ is as close to zero as possible. If there are two such _n_, pick the larger _n_.\n            1. If _n_ = 0, let _m_ be *\"0\"*. Otherwise, let _m_ be the String value consisting of the digits of the decimal representation of _n_ (in order, with no leading zeroes).\n            1. If _f_ ‚â† 0, then\n              1. Let _k_ be the length of _m_.\n              1. If _k_ ‚â§ _f_, then\n                1. Let _z_ be the String value consisting of _f_ + 1 - _k_ occurrences of the code unit 0x0030 (DIGIT ZERO).\n                1. Set _m_ to the string-concatenation of _z_ and _m_.\n                1. Set _k_ to _f_ + 1.\n              1. Let _a_ be the first _k_ - _f_ code units of _m_.\n              1. Let _b_ be the other _f_ code units of _m_.\n              1. Set _m_ to the string-concatenation of _a_, *\".\"*, and _b_.\n          1. Return the string-concatenation of _s_ and _m_.\n        ",
  "INTRINSICS.Number.isInteger" : "\n          1. Return IsIntegralNumber(_number_).\n        ",
  "INTRINSICS.BigInt" : "\n          1. If NewTarget is not *undefined*, throw a *TypeError* exception.\n          1. Let _prim_ be ? ToPrimitive(_value_, ~number~).\n          1. If _prim_ is a Number, return ? NumberToBigInt(_prim_).\n          1. Otherwise, return ? <emu-meta suppress-effects=\"user-code\">ToBigInt(_prim_)</emu-meta>.\n        ",
  "UpdateExpression[3,0].Evaluation" : "\n          1. Let _expr_ be ? Evaluation of |UnaryExpression|.\n          1. Let _oldValue_ be ? ToNumeric(? GetValue(_expr_)).\n          1. If _oldValue_ is a Number, then\n            1. Let _newValue_ be Number::add(_oldValue_, *1*<sub>ùîΩ</sub>).\n          1. Else,\n            1. Assert: _oldValue_ is a BigInt.\n            1. Let _newValue_ be BigInt::add(_oldValue_, *1*<sub>‚Ñ§</sub>).\n          1. Perform ? PutValue(_expr_, _newValue_).\n          1. Return _newValue_.\n        ",
  "OptionalExpression[2,0].Evaluation" : "\n          1. Let _baseReference_ be ? Evaluation of |OptionalExpression|.\n          1. Let _baseValue_ be ? GetValue(_baseReference_).\n          1. If _baseValue_ is either *undefined* or *null*, then\n            1. Return *undefined*.\n          1. Return ? ChainEvaluation of |OptionalChain| with arguments _baseValue_ and _baseReference_.\n        ",
  "UnaryExpression[2,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "INTRINSICS.RangeError" : null,
  "INTRINSICS.Array.prototype.toLocaleString" : "\n          1. Let _array_ be ? ToObject(*this* value).\n          1. Let _len_ be ? LengthOfArrayLike(_array_).\n          1. Let _separator_ be the implementation-defined list-separator String value appropriate for the host environment's current locale (such as *\", \"*).\n          1. Let _R_ be the empty String.\n          1. Let _k_ be 0.\n          1. Repeat, while _k_ < _len_,\n            1. If _k_ > 0, then\n              1. Set _R_ to the string-concatenation of _R_ and _separator_.\n            1. Let _nextElement_ be ? Get(_array_, ! ToString(ùîΩ(_k_))).\n            1. If _nextElement_ is neither *undefined* nor *null*, then\n              1. Let _S_ be ? ToString(? Invoke(_nextElement_, *\"toLocaleString\"*)).\n              1. Set _R_ to the string-concatenation of _R_ and _S_.\n            1. Set _k_ to _k_ + 1.\n          1. Return _R_.\n        ",
  "ClassElement[5,0].ClassElementEvaluation" : "\n        1. Return ~unused~.\n      ",
  "AsyncFunctionDeclaration[0,0].Contains" : "\n        1. Return *false*.\n      ",
  "CallExpression[7,0].AllPrivateIdentifiersValid" : "\n        1. If _names_ contains the StringValue of |PrivateIdentifier|, then\n          1. Return AllPrivateIdentifiersValid of |CallExpression| with argument _names_.\n        1. Return *false*.\n      ",
  "Statement[11,0].ContainsUndefinedBreakTarget" : "\n        1. Return *false*.\n      ",
  "StatementListItem[1,0].LexicallyScopedDeclarations" : "\n        1. Return a List whose sole element is DeclarationPart of |Declaration|.\n      ",
  "FunctionExpression[0,0].ContainsArguments" : "\n        1. Return *false*.\n      ",
  "DefaultClause[0,1].ContainsUndefinedBreakTarget" : "\n        1. If the |StatementList| is present, return ContainsUndefinedBreakTarget of |StatementList| with argument _labelSet_.\n        1. Return *false*.\n      ",
  "FieldDefinition[0,0].ClassFieldDefinitionEvaluation" : "\n        1. Let _name_ be ? Evaluation of |ClassElementName|.\n        1. If |Initializer| is present, then\n          1. Let _formalParameterList_ be an instance of the production <emu-grammar>FormalParameters : [empty]</emu-grammar>.\n          1. Let _env_ be the LexicalEnvironment of the running execution context.\n          1. Let _privateEnv_ be the running execution context's PrivateEnvironment.\n          1. Let _sourceText_ be the empty sequence of Unicode code points.\n          1. Let _initializer_ be OrdinaryFunctionCreate(%Function.prototype%, _sourceText_, _formalParameterList_, |Initializer|, ~non-lexical-this~, _env_, _privateEnv_).\n          1. Perform MakeMethod(_initializer_, _homeObject_).\n          1. Set _initializer_.[[ClassFieldInitializerName]] to _name_.\n        1. Else,\n          1. Let _initializer_ be ~empty~.\n        1. Return the ClassFieldDefinition Record { [[Name]]: _name_, [[Initializer]]: _initializer_ }.\n      ",
  "Catch[0,0].VarScopedDeclarations" : "\n        1. Return the VarScopedDeclarations of |Block|.\n      ",
  "LexicalBinding[0,1].Evaluation" : "\n          1. Let _bindingId_ be StringValue of |BindingIdentifier|.\n          1. Let _lhs_ be ! ResolveBinding(_bindingId_).\n          1. If IsAnonymousFunctionDefinition(|Initializer|) is *true*, then\n            1. Let _value_ be ? NamedEvaluation of |Initializer| with argument _bindingId_.\n          1. Else,\n            1. Let _rhs_ be ? Evaluation of |Initializer|.\n            1. Let _value_ be ? GetValue(_rhs_).\n          1. Perform ! InitializeReferencedBinding(_lhs_, _value_).\n          1. Return ~empty~.\n        ",
  "AssignmentExpression[7,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "ModuleItem[2,0].LexicallyDeclaredNames" : "\n        1. Return LexicallyDeclaredNames of |StatementListItem|.\n      ",
  "LabelledStatement[0,0].HasCallInTailPosition" : "\n        1. Return HasCallInTailPosition of |LabelledItem| with argument _call_.\n      ",
  "DefaultClause[0,0].ContainsDuplicateLabels" : "\n        1. If the |StatementList| is present, return ContainsDuplicateLabels of |StatementList| with argument _labelSet_.\n        1. Return *false*.\n      ",
  "INTRINSICS.DataView.prototype.getInt8" : "\n          1. Let _v_ be the *this* value.\n          1. Return ? GetViewValue(_v_, _byteOffset_, *true*, ~int8~).\n        ",
  "StringGetOwnProperty" : "\n          1. If _P_ is not a String, return *undefined*.\n          1. Let _index_ be CanonicalNumericIndexString(_P_).\n          1. If _index_ is *undefined*, return *undefined*.\n          1. If IsIntegralNumber(_index_) is *false*, return *undefined*.\n          1. If _index_ is *-0*<sub>ùîΩ</sub>, return *undefined*.\n          1. Let _str_ be _S_.[[StringData]].\n          1. Assert: _str_ is a String.\n          1. Let _len_ be the length of _str_.\n          1. If ‚Ñù(_index_) < 0 or _len_ ‚â§ ‚Ñù(_index_), return *undefined*.\n          1. Let _resultStr_ be the substring of _str_ from ‚Ñù(_index_) to ‚Ñù(_index_) + 1.\n          1. Return the PropertyDescriptor { [[Value]]: _resultStr_, [[Writable]]: *false*, [[Enumerable]]: *true*, [[Configurable]]: *false* }.\n        ",
  "BindingElement[1,0].HasInitializer" : "\n        1. Return *false*.\n      ",
  "ForStatement[0,3].HasCallInTailPosition" : "\n        1. Return HasCallInTailPosition of |Statement| with argument _call_.\n      ",
  "Atom[4,0].CompileAtom" : "\n          1. Let _m_ be CompileSubpattern of |Disjunction| with arguments _rer_ and _direction_.\n          1. Let _parenIndex_ be CountLeftCapturingParensBefore(|Atom|).\n          1. Return a new Matcher with parameters (_x_, _c_) that captures _direction_, _m_, and _parenIndex_ and performs the following steps when called:\n            1. Assert: _x_ is a MatchState.\n            1. Assert: _c_ is a MatcherContinuation.\n            1. Let _d_ be a new MatcherContinuation with parameters (_y_) that captures _x_, _c_, _direction_, and _parenIndex_ and performs the following steps when called:\n              1. Assert: _y_ is a MatchState.\n              1. Let _cap_ be a copy of _y_.[[Captures]].\n              1. Let _Input_ be _x_.[[Input]].\n              1. Let _xe_ be _x_.[[EndIndex]].\n              1. Let _ye_ be _y_.[[EndIndex]].\n              1. If _direction_ is ~forward~, then\n                1. Assert: _xe_ ‚â§ _ye_.\n                1. Let _r_ be the CaptureRange { [[StartIndex]]: _xe_, [[EndIndex]]: _ye_ }.\n              1. Else,\n                1. Assert: _direction_ is ~backward~.\n                1. Assert: _ye_ ‚â§ _xe_.\n                1. Let _r_ be the CaptureRange { [[StartIndex]]: _ye_, [[EndIndex]]: _xe_ }.\n              1. Set _cap_[_parenIndex_ + 1] to _r_.\n              1. Let _z_ be the MatchState { [[Input]]: _Input_, [[EndIndex]]: _ye_, [[Captures]]: _cap_ }.\n              1. Return _c_(_z_).\n            1. Return _m_(_x_, _d_).\n        ",
  "LabelledStatement[0,0].LexicallyDeclaredNames" : "\n        1. Return the LexicallyDeclaredNames of |LabelledItem|.\n      ",
  "INTRINSICS.Math.sin" : "\n          1. Let _n_ be ? ToNumber(_x_).\n          1. If _n_ is one of *NaN*, *+0*<sub>ùîΩ</sub>, or *-0*<sub>ùîΩ</sub>, return _n_.\n          1. If _n_ is either *+‚àû*<sub>ùîΩ</sub> or *-‚àû*<sub>ùîΩ</sub>, return *NaN*.\n          1. Return an implementation-approximated Number value representing the result of the sine of ‚Ñù(_n_).\n        ",
  "ModuleItemList[1,0].ModuleRequests" : "\n          1. Let _moduleNames_ be ModuleRequests of |ModuleItemList|.\n          1. Let _additionalNames_ be ModuleRequests of |ModuleItem|.\n          1. For each String _name_ of _additionalNames_, do\n            1. If _moduleNames_ does not contain _name_, then\n              1. Append _name_ to _moduleNames_.\n          1. Return _moduleNames_.\n        ",
  "FormalParameters[4,0].BoundNames" : "\n        1. Let _names1_ be BoundNames of |FormalParameterList|.\n        1. Let _names2_ be BoundNames of |FunctionRestParameter|.\n        1. Return the list-concatenation of _names1_ and _names2_.\n      ",
  "CharacterEscape[2,0].CharacterValue" : "\n          1. Return the numeric value of U+0000 (NULL).\n        ",
  "Record[GlobalEnvironmentRecord].CreateGlobalFunctionBinding" : "\n            1. Let _ObjRec_ be _envRec_.[[ObjectRecord]].\n            1. Let _globalObject_ be _ObjRec_.[[BindingObject]].\n            1. Let _existingProp_ be ? <emu-meta effects=\"user-code\">_globalObject_.[[GetOwnProperty]]</emu-meta>(_N_).\n            1. If _existingProp_ is *undefined* or _existingProp_.[[Configurable]] is *true*, then\n              1. Let _desc_ be the PropertyDescriptor { [[Value]]: _V_, [[Writable]]: *true*, [[Enumerable]]: *true*, [[Configurable]]: _D_ }.\n            1. Else,\n              1. Let _desc_ be the PropertyDescriptor { [[Value]]: _V_ }.\n            1. Perform ? DefinePropertyOrThrow(_globalObject_, _N_, _desc_).\n            1. [id=\"step-createglobalfunctionbinding-set\"] Perform ? Set(_globalObject_, _N_, _V_, *false*).\n            1. If _envRec_.[[VarNames]] does not contain _N_, then\n              1. Append _N_ to _envRec_.[[VarNames]].\n            1. Return ~unused~.\n          ",
  "DoWhileStatement[0,0].VarDeclaredNames" : "\n        1. Return the VarDeclaredNames of |Statement|.\n      ",
  "ForInOfStatement[4,0].VarDeclaredNames" : "\n        1. Let _names1_ be the BoundNames of |ForBinding|.\n        1. Let _names2_ be the VarDeclaredNames of |Statement|.\n        1. Return the list-concatenation of _names1_ and _names2_.\n      ",
  "Block[0,1].Evaluation" : "\n        1. Let _oldEnv_ be the running execution context's LexicalEnvironment.\n        1. Let _blockEnv_ be NewDeclarativeEnvironment(_oldEnv_).\n        1. Perform BlockDeclarationInstantiation(|StatementList|, _blockEnv_).\n        1. Set the running execution context's LexicalEnvironment to _blockEnv_.\n        1. Let _blockValue_ be Completion(Evaluation of |StatementList|).\n        1. Set the running execution context's LexicalEnvironment to _oldEnv_.\n        1. Return ? _blockValue_.\n      ",
  "CaseBlock[1,0].HasCallInTailPosition" : "\n        1. Let _has_ be *false*.\n        1. If the first |CaseClauses| is present, set _has_ to HasCallInTailPosition of the first |CaseClauses| with argument _call_.\n        1. If _has_ is *true*, return *true*.\n        1. Set _has_ to HasCallInTailPosition of |DefaultClause| with argument _call_.\n        1. If _has_ is *true*, return *true*.\n        1. If the second |CaseClauses| is present, set _has_ to HasCallInTailPosition of the second |CaseClauses| with argument _call_.\n        1. Return _has_.\n      ",
  "ArrayLiteral[2,0].Evaluation" : "\n          1. Let _array_ be ! ArrayCreate(0).\n          1. Let _nextIndex_ be ? ArrayAccumulation of |ElementList| with arguments _array_ and 0.\n          1. If |Elision| is present, then\n            1. Perform ? ArrayAccumulation of |Elision| with arguments _array_ and _nextIndex_.\n          1. Return _array_.\n        ",
  "CreateListIteratorRecord" : "\n        1. Let _closure_ be a new Abstract Closure with no parameters that captures _list_ and performs the following steps when called:\n          1. For each element _E_ of _list_, do\n            1. Perform ? GeneratorYield(CreateIterResultObject(_E_, *false*)).\n          1. Return NormalCompletion(*undefined*).\n        1. Let _iterator_ be CreateIteratorFromClosure(_closure_, ~empty~, %IteratorPrototype%).\n        1. Return the Iterator Record { [[Iterator]]: _iterator_, [[NextMethod]]: %GeneratorFunction.prototype.prototype.next%, [[Done]]: *false* }.\n      ",
  "ClassSubtraction[0,0].MayContainStrings" : "\n          1. Return MayContainStrings of the first |ClassSetOperand|.\n        ",
  "RejectPromise" : "\n          1. Assert: The value of _promise_.[[PromiseState]] is ~pending~.\n          1. Let _reactions_ be _promise_.[[PromiseRejectReactions]].\n          1. Set _promise_.[[PromiseResult]] to _reason_.\n          1. Set _promise_.[[PromiseFulfillReactions]] to *undefined*.\n          1. Set _promise_.[[PromiseRejectReactions]] to *undefined*.\n          1. Set _promise_.[[PromiseState]] to ~rejected~.\n          1. If _promise_.[[PromiseIsHandled]] is *false*, perform HostPromiseRejectionTracker(_promise_, *\"reject\"*).\n          1. Perform TriggerPromiseReactions(_reactions_, _reason_).\n          1. Return ~unused~.\n        ",
  "BackreferenceMatcher" : "\n            1. Assert: _n_ ‚â• 1.\n            1. Return a new Matcher with parameters (_x_, _c_) that captures _rer_, _n_, and _direction_ and performs the following steps when called:\n              1. Assert: _x_ is a MatchState.\n              1. Assert: _c_ is a MatcherContinuation.\n              1. Let _Input_ be _x_.[[Input]].\n              1. Let _cap_ be _x_.[[Captures]].\n              1. Let _r_ be _cap_[_n_].\n              1. If _r_ is *undefined*, return _c_(_x_).\n              1. Let _e_ be _x_.[[EndIndex]].\n              1. Let _rs_ be _r_.[[StartIndex]].\n              1. Let _re_ be _r_.[[EndIndex]].\n              1. Let _len_ be _re_ - _rs_.\n              1. If _direction_ is ~forward~, let _f_ be _e_ + _len_.\n              1. Else, let _f_ be _e_ - _len_.\n              1. Let _InputLength_ be the number of elements in _Input_.\n              1. If _f_ < 0 or _f_ > _InputLength_, return ~failure~.\n              1. Let _g_ be min(_e_, _f_).\n              1. If there exists an integer _i_ in the interval from 0 (inclusive) to _len_ (exclusive) such that Canonicalize(_rer_, _Input_[_rs_ + _i_]) is not Canonicalize(_rer_, _Input_[_g_ + _i_]), return ~failure~.\n              1. Let _y_ be the MatchState { [[Input]]: _Input_, [[EndIndex]]: _f_, [[Captures]]: _cap_ }.\n              1. Return _c_(_y_).\n          ",
  "INTRINSICS.String.prototype[@@iterator]" : "\n          1. Let _O_ be ? RequireObjectCoercible(*this* value).\n          1. Let _s_ be ? ToString(_O_).\n          1. Let _closure_ be a new Abstract Closure with no parameters that captures _s_ and performs the following steps when called:\n            1. Let _len_ be the length of _s_.\n            1. Let _position_ be 0.\n            1. Repeat, while _position_ < _len_,\n              1. Let _cp_ be CodePointAt(_s_, _position_).\n              1. Let _nextIndex_ be _position_ + _cp_.[[CodeUnitCount]].\n              1. Let _resultString_ be the substring of _s_ from _position_ to _nextIndex_.\n              1. Set _position_ to _nextIndex_.\n              1. Perform ? GeneratorYield(CreateIterResultObject(_resultString_, *false*)).\n            1. Return *undefined*.\n          1. Return CreateIteratorFromClosure(_closure_, *\"%StringIteratorPrototype%\"*, %StringIteratorPrototype%).\n        ",
  "ForStatement[1,0].VarDeclaredNames" : "\n        1. Let _names1_ be BoundNames of |VariableDeclarationList|.\n        1. Let _names2_ be VarDeclaredNames of |Statement|.\n        1. Return the list-concatenation of _names1_ and _names2_.\n      ",
  "CharacterClassEscape[1,0].CompileToCharSet" : "\n          1. Let _S_ be the CharSet returned by <emu-grammar>CharacterClassEscape :: `d`</emu-grammar>.\n          1. Return CharacterComplement(_rer_, _S_).\n        ",
  "IdentifierReference[1,0].AssignmentTargetType" : "\n        1. Return ~simple~.\n      ",
  "GeneratorExpression[0,0].Evaluation" : "\n        1. Return InstantiateGeneratorFunctionExpression of |GeneratorExpression|.\n      ",
  "NonemptyClassRanges[2,0].CompileToCharSet" : "\n          1. Let _A_ be CompileToCharSet of the first |ClassAtom| with argument _rer_.\n          1. Let _B_ be CompileToCharSet of the second |ClassAtom| with argument _rer_.\n          1. Let _C_ be CompileToCharSet of |ClassContents| with argument _rer_.\n          1. Let _D_ be CharacterRange(_A_, _B_).\n          1. Return the union of _D_ and _C_.\n        ",
  "Record[ObjectEnvironmentRecord].InitializeBinding" : "\n            1. Perform ? <emu-meta effects=\"user-code\">_envRec_.SetMutableBinding</emu-meta>(_N_, _V_, *false*).\n            1. Return ~unused~.\n          ",
  "ExportFromClause[2,0].ExportedNames" : "\n          1. Return the ExportedNames of |NamedExports|.\n        ",
  "CharacterClassEscape[2,0].CompileToCharSet" : "\n          1. Return the CharSet containing all characters corresponding to a code point on the right-hand side of the |WhiteSpace| or |LineTerminator| productions.\n        ",
  "RelationalExpression[7,0].IsFunctionDefinition" : "\n        1. Return *false*.\n      ",
  "IterationStatement[1,0].LoopEvaluation" : "\n          1. Return ? WhileLoopEvaluation of |WhileStatement| with argument _labelSet_.\n        ",
  "ForStatement[2,2].VarDeclaredNames" : "\n        1. Return the VarDeclaredNames of |Statement|.\n      ",
  "MonthFromTime" : "\n          1. Let _inLeapYear_ be InLeapYear(_t_).\n          1. Let _dayWithinYear_ be DayWithinYear(_t_).\n          1. If _dayWithinYear_ < *31*<sub>ùîΩ</sub>, return *+0*<sub>ùîΩ</sub>.\n          1. If _dayWithinYear_ < *59*<sub>ùîΩ</sub> + _inLeapYear_, return *1*<sub>ùîΩ</sub>.\n          1. If _dayWithinYear_ < *90*<sub>ùîΩ</sub> + _inLeapYear_, return *2*<sub>ùîΩ</sub>.\n          1. If _dayWithinYear_ < *120*<sub>ùîΩ</sub> + _inLeapYear_, return *3*<sub>ùîΩ</sub>.\n          1. If _dayWithinYear_ < *151*<sub>ùîΩ</sub> + _inLeapYear_, return *4*<sub>ùîΩ</sub>.\n          1. If _dayWithinYear_ < *181*<sub>ùîΩ</sub> + _inLeapYear_, return *5*<sub>ùîΩ</sub>.\n          1. If _dayWithinYear_ < *212*<sub>ùîΩ</sub> + _inLeapYear_, return *6*<sub>ùîΩ</sub>.\n          1. If _dayWithinYear_ < *243*<sub>ùîΩ</sub> + _inLeapYear_, return *7*<sub>ùîΩ</sub>.\n          1. If _dayWithinYear_ < *273*<sub>ùîΩ</sub> + _inLeapYear_, return *8*<sub>ùîΩ</sub>.\n          1. If _dayWithinYear_ < *304*<sub>ùîΩ</sub> + _inLeapYear_, return *9*<sub>ùîΩ</sub>.\n          1. If _dayWithinYear_ < *334*<sub>ùîΩ</sub> + _inLeapYear_, return *10*<sub>ùîΩ</sub>.\n          1. Assert: _dayWithinYear_ < *365*<sub>ùîΩ</sub> + _inLeapYear_.\n          1. Return *11*<sub>ùîΩ</sub>.\n        ",
  "Number::bitwiseXOR" : "\n            1. Return NumberBitwiseOp(`^`, _x_, _y_).\n          ",
  "INTRINSICS.DataView.prototype.setInt32" : "\n          1. Let _v_ be the *this* value.\n          1. If _littleEndian_ is not present, set _littleEndian_ to *false*.\n          1. Return ? SetViewValue(_v_, _byteOffset_, _littleEndian_, ~int32~, _value_).\n        ",
  "EvalDeclarationInstantiation" : "\n          1. Let _varNames_ be the VarDeclaredNames of _body_.\n          1. Let _varDeclarations_ be the VarScopedDeclarations of _body_.\n          1. If _strict_ is *false*, then\n            1. If _varEnv_ is a Global Environment Record, then\n              1. For each element _name_ of _varNames_, do\n                1. If _varEnv_.HasLexicalDeclaration(_name_) is *true*, throw a *SyntaxError* exception.\n                1. NOTE: `eval` will not create a global var declaration that would be shadowed by a global lexical declaration.\n            1. Let _thisEnv_ be _lexEnv_.\n            1. Assert: The following loop will terminate.\n            1. Repeat, while _thisEnv_ is not _varEnv_,\n              1. If _thisEnv_ is not an Object Environment Record, then\n                1. NOTE: The environment of with statements cannot contain any lexical declaration so it doesn't need to be checked for var/let hoisting conflicts.\n                1. For each element _name_ of _varNames_, do\n                  1. If ! _thisEnv_.HasBinding(_name_) is *true*, then\n                    1. [id=\"step-evaldeclarationinstantiation-throw-duplicate-binding\"] Throw a *SyntaxError* exception.\n                    1. NOTE: Annex <emu-xref href=\"#sec-variablestatements-in-catch-blocks\"></emu-xref> defines alternate semantics for the above step.\n                  1. NOTE: A direct eval will not hoist var declaration over a like-named lexical declaration.\n              1. Set _thisEnv_ to _thisEnv_.[[OuterEnv]].\n          1. Let _privateIdentifiers_ be a new empty List.\n          1. Let _pointer_ be _privateEnv_.\n          1. Repeat, while _pointer_ is not *null*,\n            1. For each Private Name _binding_ of _pointer_.[[Names]], do\n              1. If _privateIdentifiers_ does not contain _binding_.[[Description]], append _binding_.[[Description]] to _privateIdentifiers_.\n            1. Set _pointer_ to _pointer_.[[OuterPrivateEnvironment]].\n          1. If AllPrivateIdentifiersValid of _body_ with argument _privateIdentifiers_ is *false*, throw a *SyntaxError* exception.\n          1. Let _functionsToInitialize_ be a new empty List.\n          1. Let _declaredFunctionNames_ be a new empty List.\n          1. For each element _d_ of _varDeclarations_, in reverse List order, do\n            1. If _d_ is not either a |VariableDeclaration|, a |ForBinding|, or a |BindingIdentifier|, then\n              1. Assert: _d_ is either a |FunctionDeclaration|, a |GeneratorDeclaration|, an |AsyncFunctionDeclaration|, or an |AsyncGeneratorDeclaration|.\n              1. NOTE: If there are multiple function declarations for the same name, the last declaration is used.\n              1. Let _fn_ be the sole element of the BoundNames of _d_.\n              1. If _declaredFunctionNames_ does not contain _fn_, then\n                1. If _varEnv_ is a Global Environment Record, then\n                  1. Let _fnDefinable_ be ? _varEnv_.CanDeclareGlobalFunction(_fn_).\n                  1. If _fnDefinable_ is *false*, throw a *TypeError* exception.\n                1. Append _fn_ to _declaredFunctionNames_.\n                1. Insert _d_ as the first element of _functionsToInitialize_.\n          1. Let _declaredVarNames_ be a new empty List.\n          1. For each element _d_ of _varDeclarations_, do\n            1. If _d_ is either a |VariableDeclaration|, a |ForBinding|, or a |BindingIdentifier|, then\n              1. For each String _vn_ of the BoundNames of _d_, do\n                1. If _declaredFunctionNames_ does not contain _vn_, then\n                  1. If _varEnv_ is a Global Environment Record, then\n                    1. Let _vnDefinable_ be ? _varEnv_.CanDeclareGlobalVar(_vn_).\n                    1. If _vnDefinable_ is *false*, throw a *TypeError* exception.\n                  1. If _declaredVarNames_ does not contain _vn_, then\n                    1. Append _vn_ to _declaredVarNames_.\n          1. [id=\"step-evaldeclarationinstantiation-web-compat-insertion-point\"] NOTE: Annex <emu-xref href=\"#sec-web-compat-evaldeclarationinstantiation\"></emu-xref> adds additional steps at this point.\n          1. [id=\"step-evaldeclarationinstantiation-post-validation\"] NOTE: No abnormal terminations occur after this algorithm step unless _varEnv_ is a Global Environment Record and the global object is a Proxy exotic object.\n          1. Let _lexDeclarations_ be the LexicallyScopedDeclarations of _body_.\n          1. For each element _d_ of _lexDeclarations_, do\n            1. NOTE: Lexically declared names are only instantiated here but not initialized.\n            1. For each element _dn_ of the BoundNames of _d_, do\n              1. If IsConstantDeclaration of _d_ is *true*, then\n                1. Perform ? _lexEnv_.CreateImmutableBinding(_dn_, *true*).\n              1. Else,\n                1. Perform ? _lexEnv_.CreateMutableBinding(_dn_, *false*).\n          1. For each Parse Node _f_ of _functionsToInitialize_, do\n            1. Let _fn_ be the sole element of the BoundNames of _f_.\n            1. Let _fo_ be InstantiateFunctionObject of _f_ with arguments _lexEnv_ and _privateEnv_.\n            1. If _varEnv_ is a Global Environment Record, then\n              1. Perform ? _varEnv_.CreateGlobalFunctionBinding(_fn_, _fo_, *true*).\n            1. Else,\n              1. Let _bindingExists_ be ! _varEnv_.HasBinding(_fn_).\n              1. If _bindingExists_ is *false*, then\n                1. NOTE: The following invocation cannot return an abrupt completion because of the validation preceding step <emu-xref href=\"#step-evaldeclarationinstantiation-post-validation\"></emu-xref>.\n                1. Perform ! _varEnv_.CreateMutableBinding(_fn_, *true*).\n                1. Perform ! _varEnv_.InitializeBinding(_fn_, _fo_).\n              1. Else,\n                1. Perform ! _varEnv_.SetMutableBinding(_fn_, _fo_, *false*).\n          1. For each String _vn_ of _declaredVarNames_, do\n            1. If _varEnv_ is a Global Environment Record, then\n              1. Perform ? _varEnv_.CreateGlobalVarBinding(_vn_, *true*).\n            1. Else,\n              1. Let _bindingExists_ be ! _varEnv_.HasBinding(_vn_).\n              1. If _bindingExists_ is *false*, then\n                1. NOTE: The following invocation cannot return an abrupt completion because of the validation preceding step <emu-xref href=\"#step-evaldeclarationinstantiation-post-validation\"></emu-xref>.\n                1. Perform ! _varEnv_.CreateMutableBinding(_vn_, *true*).\n                1. Perform ! _varEnv_.InitializeBinding(_vn_, *undefined*).\n          1. Return ~unused~.\n        ",
  "PrimaryExpression[0,0].IsFunctionDefinition" : "\n        1. Return *false*.\n      ",
  "CharacterClassEscape[0,0].CompileToCharSet" : "\n          1. Return the ten-element CharSet containing the characters `0`, `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, and `9`.\n        ",
  "ArrayAssignmentPattern[2,3].DestructuringAssignmentEvaluation" : "\n          1. Let _iteratorRecord_ be ? GetIterator(_value_, ~sync~).\n          1. Let _status_ be Completion(IteratorDestructuringAssignmentEvaluation of |AssignmentElementList| with argument _iteratorRecord_).\n          1. If _status_ is an abrupt completion, then\n            1. If _iteratorRecord_.[[Done]] is *false*, return ? IteratorClose(_iteratorRecord_, _status_).\n            1. Return ? _status_.\n          1. If |Elision| is present, then\n            1. Set _status_ to Completion(IteratorDestructuringAssignmentEvaluation of |Elision| with argument _iteratorRecord_).\n            1. If _status_ is an abrupt completion, then\n              1. Assert: _iteratorRecord_.[[Done]] is *true*.\n              1. Return ? _status_.\n          1. If |AssignmentRestElement| is present, then\n            1. Set _status_ to Completion(IteratorDestructuringAssignmentEvaluation of |AssignmentRestElement| with argument _iteratorRecord_).\n          1. If _iteratorRecord_.[[Done]] is *false*, return ? IteratorClose(_iteratorRecord_, _status_).\n          1. Return ? _status_.\n        ",
  "Record[StringExoticObject].GetOwnProperty" : "\n          1. Let _desc_ be OrdinaryGetOwnProperty(_S_, _P_).\n          1. If _desc_ is not *undefined*, return _desc_.\n          1. Return StringGetOwnProperty(_S_, _P_).\n        ",
  "ClassExpression[0,0].HasName" : "\n        1. Return *false*.\n      ",
  "RelationalExpression[6,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "LabelledStatement[0,0].LabelledEvaluation" : "\n        1. Let _label_ be the StringValue of |LabelIdentifier|.\n        1. Let _newLabelSet_ be the list-concatenation of _labelSet_ and ¬´ _label_ ¬ª.\n        1. Let _stmtResult_ be Completion(LabelledEvaluation of |LabelledItem| with argument _newLabelSet_).\n        1. If _stmtResult_ is a break completion and _stmtResult_.[[Target]] is _label_, then\n          1. Set _stmtResult_ to NormalCompletion(_stmtResult_.[[Value]]).\n        1. Return ? _stmtResult_.\n      ",
  "ArrayBindingPattern[0,1].IteratorBindingInitialization" : "\n        1. If |Elision| is present, then\n          1. Perform ? IteratorDestructuringAssignmentEvaluation of |Elision| with argument _iteratorRecord_.\n        1. Return ? IteratorBindingInitialization of |BindingRestElement| with arguments _iteratorRecord_ and _environment_.\n      ",
  "ObjectAssignmentPattern[1,0].DestructuringAssignmentEvaluation" : "\n          1. Perform ? RequireObjectCoercible(_value_).\n          1. Let _excludedNames_ be a new empty List.\n          1. Return ? RestDestructuringAssignmentEvaluation of |AssignmentRestProperty| with arguments _value_ and _excludedNames_.\n        ",
  "ElementList[2,1].ArrayAccumulation" : "\n          1. Set _nextIndex_ to ? ArrayAccumulation of |ElementList| with arguments _array_ and _nextIndex_.\n          1. If |Elision| is present, then\n            1. Set _nextIndex_ to ? ArrayAccumulation of |Elision| with arguments _array_ and _nextIndex_.\n          1. Let _initResult_ be ? Evaluation of |AssignmentExpression|.\n          1. Let _initValue_ be ? GetValue(_initResult_).\n          1. Perform ! CreateDataPropertyOrThrow(_array_, ! ToString(ùîΩ(_nextIndex_)), _initValue_).\n          1. Return _nextIndex_ + 1.\n        ",
  "GeneratorExpression[0,0].HasName" : "\n        1. Return *false*.\n      ",
  "IsLabelledFunction" : "\n        1. If _stmt_ is not a |LabelledStatement|, return *false*.\n        1. Let _item_ be the |LabelledItem| of _stmt_.\n        1. If _item_ is <emu-grammar>LabelledItem : FunctionDeclaration</emu-grammar>, return *true*.\n        1. Let _subStmt_ be the |Statement| of _item_.\n        1. Return IsLabelledFunction(_subStmt_).\n      ",
  "INTRINSICS.GeneratorFunction.prototype.prototype.next" : "\n          1. Return ? GeneratorResume(*this* value, _value_, ~empty~).\n        ",
  "Record[GlobalEnvironmentRecord].HasVarDeclaration" : "\n            1. Let _varDeclaredNames_ be _envRec_.[[VarNames]].\n            1. If _varDeclaredNames_ contains _N_, return *true*.\n            1. Return *false*.\n          ",
  "Record[OrdinaryObject].SetPrototypeOf" : "\n        1. Return OrdinarySetPrototypeOf(_O_, _V_).\n      ",
  "ArrowParameters[1,0].ExpectedArgumentCount" : "\n        1. Let _formals_ be the |ArrowFormalParameters| that is covered by |CoverParenthesizedExpressionAndArrowParameterList|.\n        1. Return ExpectedArgumentCount of _formals_.\n      ",
  "INTRINSICS.get ArrayBuffer[@@species]" : "\n          1. Return the *this* value.\n        ",
  "InnerModuleEvaluation" : "\n              1. If _module_ is not a Cyclic Module Record, then\n                1. Let _promise_ be ! _module_.Evaluate().\n                1. Assert: _promise_.[[PromiseState]] is not ~pending~.\n                1. If _promise_.[[PromiseState]] is ~rejected~, then\n                  1. Return ThrowCompletion(_promise_.[[PromiseResult]]).\n                1. Return _index_.\n              1. If _module_.[[Status]] is either ~evaluating-async~ or ~evaluated~, then\n                1. If _module_.[[EvaluationError]] is ~empty~, return _index_.\n                1. Otherwise, return ? _module_.[[EvaluationError]].\n              1. If _module_.[[Status]] is ~evaluating~, return _index_.\n              1. Assert: _module_.[[Status]] is ~linked~.\n              1. Set _module_.[[Status]] to ~evaluating~.\n              1. Set _module_.[[DFSIndex]] to _index_.\n              1. Set _module_.[[DFSAncestorIndex]] to _index_.\n              1. Set _module_.[[PendingAsyncDependencies]] to 0.\n              1. Set _index_ to _index_ + 1.\n              1. Append _module_ to _stack_.\n              1. For each String _required_ of _module_.[[RequestedModules]], do\n                1. Let _requiredModule_ be GetImportedModule(_module_, _required_).\n                1. Set _index_ to ? InnerModuleEvaluation(_requiredModule_, _stack_, _index_).\n                1. If _requiredModule_ is a Cyclic Module Record, then\n                  1. Assert: _requiredModule_.[[Status]] is one of ~evaluating~, ~evaluating-async~, or ~evaluated~.\n                  1. Assert: _requiredModule_.[[Status]] is ~evaluating~ if and only if _stack_ contains _requiredModule_.\n                  1. If _requiredModule_.[[Status]] is ~evaluating~, then\n                    1. Set _module_.[[DFSAncestorIndex]] to min(_module_.[[DFSAncestorIndex]], _requiredModule_.[[DFSAncestorIndex]]).\n                  1. Else,\n                    1. Set _requiredModule_ to _requiredModule_.[[CycleRoot]].\n                    1. Assert: _requiredModule_.[[Status]] is either ~evaluating-async~ or ~evaluated~.\n                    1. If _requiredModule_.[[EvaluationError]] is not ~empty~, return ? _requiredModule_.[[EvaluationError]].\n                  1. If _requiredModule_.[[AsyncEvaluation]] is *true*, then\n                    1. Set _module_.[[PendingAsyncDependencies]] to _module_.[[PendingAsyncDependencies]] + 1.\n                    1. Append _module_ to _requiredModule_.[[AsyncParentModules]].\n              1. If _module_.[[PendingAsyncDependencies]] > 0 or _module_.[[HasTLA]] is *true*, then\n                1. Assert: _module_.[[AsyncEvaluation]] is *false* and was never previously set to *true*.\n                1. Set _module_.[[AsyncEvaluation]] to *true*.\n                1. NOTE: The order in which module records have their [[AsyncEvaluation]] fields transition to *true* is significant. (See <emu-xref href=\"#sec-async-module-execution-fulfilled\"></emu-xref>.)\n                1. If _module_.[[PendingAsyncDependencies]] = 0, perform ExecuteAsyncModule(_module_).\n              1. Else,\n                1. Perform ? <emu-meta effects=\"user-code\">_module_.ExecuteModule()</emu-meta>.\n              1. Assert: _module_ occurs exactly once in _stack_.\n              1. Assert: _module_.[[DFSAncestorIndex]] ‚â§ _module_.[[DFSIndex]].\n              1. If _module_.[[DFSAncestorIndex]] = _module_.[[DFSIndex]], then\n                1. Let _done_ be *false*.\n                1. Repeat, while _done_ is *false*,\n                  1. Let _requiredModule_ be the last element of _stack_.\n                  1. Remove the last element of _stack_.\n                  1. Assert: _requiredModule_ is a Cyclic Module Record.\n                  1. If _requiredModule_.[[AsyncEvaluation]] is *false*, set _requiredModule_.[[Status]] to ~evaluated~.\n                  1. Otherwise, set _requiredModule_.[[Status]] to ~evaluating-async~.\n                  1. If _requiredModule_ and _module_ are the same Module Record, set _done_ to *true*.\n                  1. Set _requiredModule_.[[CycleRoot]] to _module_.\n              1. Return _index_.\n            ",
  "INTRINSICS.Array.prototype.copyWithin" : "\n          1. Let _O_ be ? ToObject(*this* value).\n          1. Let _len_ be ? LengthOfArrayLike(_O_).\n          1. Let _relativeTarget_ be ? ToIntegerOrInfinity(_target_).\n          1. If _relativeTarget_ = -‚àû, let _to_ be 0.\n          1. Else if _relativeTarget_ < 0, let _to_ be max(_len_ + _relativeTarget_, 0).\n          1. Else, let _to_ be min(_relativeTarget_, _len_).\n          1. Let _relativeStart_ be ? ToIntegerOrInfinity(_start_).\n          1. If _relativeStart_ = -‚àû, let _from_ be 0.\n          1. Else if _relativeStart_ < 0, let _from_ be max(_len_ + _relativeStart_, 0).\n          1. Else, let _from_ be min(_relativeStart_, _len_).\n          1. If _end_ is *undefined*, let _relativeEnd_ be _len_; else let _relativeEnd_ be ? ToIntegerOrInfinity(_end_).\n          1. If _relativeEnd_ = -‚àû, let _final_ be 0.\n          1. Else if _relativeEnd_ < 0, let _final_ be max(_len_ + _relativeEnd_, 0).\n          1. Else, let _final_ be min(_relativeEnd_, _len_).\n          1. Let _count_ be min(_final_ - _from_, _len_ - _to_).\n          1. If _from_ < _to_ and _to_ < _from_ + _count_, then\n            1. Let _direction_ be -1.\n            1. Set _from_ to _from_ + _count_ - 1.\n            1. Set _to_ to _to_ + _count_ - 1.\n          1. Else,\n            1. Let _direction_ be 1.\n          1. Repeat, while _count_ > 0,\n            1. Let _fromKey_ be ! ToString(ùîΩ(_from_)).\n            1. Let _toKey_ be ! ToString(ùîΩ(_to_)).\n            1. Let _fromPresent_ be ? HasProperty(_O_, _fromKey_).\n            1. If _fromPresent_ is *true*, then\n              1. Let _fromVal_ be ? Get(_O_, _fromKey_).\n              1. Perform ? Set(_O_, _toKey_, _fromVal_, *true*).\n            1. Else,\n              1. Assert: _fromPresent_ is *false*.\n              1. Perform ? DeletePropertyOrThrow(_O_, _toKey_).\n            1. Set _from_ to _from_ + _direction_.\n            1. Set _to_ to _to_ + _direction_.\n            1. Set _count_ to _count_ - 1.\n          1. Return _O_.\n        ",
  "ModuleItem[0,0].LexicallyDeclaredNames" : "\n        1. Return the BoundNames of |ImportDeclaration|.\n      ",
  "CharacterClassEscape[4,0].CompileToCharSet" : "\n          1. Return MaybeSimpleCaseFolding(_rer_, WordCharacters(_rer_)).\n        ",
  "INTRINSICS.Set.prototype.has" : "\n          1. Let _S_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_S_, [[SetData]]).\n          1. For each element _e_ of _S_.[[SetData]], do\n            1. If _e_ is not ~empty~ and SameValueZero(_e_, _value_) is *true*, return *true*.\n          1. Return *false*.\n        ",
  "TimeFromYear" : "\n          1. Return msPerDay √ó DayFromYear(_y_).\n        ",
  "INTRINSICS.Object.prototype.__defineGetter__" : "\n            1. Let _O_ be ? ToObject(*this* value).\n            1. If IsCallable(_getter_) is *false*, throw a *TypeError* exception.\n            1. Let _desc_ be PropertyDescriptor { [[Get]]: _getter_, [[Enumerable]]: *true*, [[Configurable]]: *true* }.\n            1. Let _key_ be ? ToPropertyKey(_P_).\n            1. Perform ? DefinePropertyOrThrow(_O_, _key_, _desc_).\n            1. Return *undefined*.\n          ",
  "GatherAvailableAncestors" : "\n              1. For each Cyclic Module Record _m_ of _module_.[[AsyncParentModules]], do\n                1. If _execList_ does not contain _m_ and _m_.[[CycleRoot]].[[EvaluationError]] is ~empty~, then\n                  1. Assert: _m_.[[Status]] is ~evaluating-async~.\n                  1. Assert: _m_.[[EvaluationError]] is ~empty~.\n                  1. Assert: _m_.[[AsyncEvaluation]] is *true*.\n                  1. Assert: _m_.[[PendingAsyncDependencies]] > 0.\n                  1. Set _m_.[[PendingAsyncDependencies]] to _m_.[[PendingAsyncDependencies]] - 1.\n                  1. If _m_.[[PendingAsyncDependencies]] = 0, then\n                    1. Append _m_ to _execList_.\n                    1. If _m_.[[HasTLA]] is *false*, perform GatherAvailableAncestors(_m_, _execList_).\n              1. Return ~unused~.\n            ",
  "INTRINSICS.FinalizationRegistry.prototype.register" : "\n          1. Let _finalizationRegistry_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_finalizationRegistry_, [[Cells]]).\n          1. If CanBeHeldWeakly(_target_) is *false*, throw a *TypeError* exception.\n          1. If SameValue(_target_, _heldValue_) is *true*, throw a *TypeError* exception.\n          1. If CanBeHeldWeakly(_unregisterToken_) is *false*, then\n            1. If _unregisterToken_ is not *undefined*, throw a *TypeError* exception.\n            1. Set _unregisterToken_ to ~empty~.\n          1. Let _cell_ be the Record { [[WeakRefTarget]]: _target_, [[HeldValue]]: _heldValue_, [[UnregisterToken]]: _unregisterToken_ }.\n          1. Append _cell_ to _finalizationRegistry_.[[Cells]].\n          1. Return *undefined*.\n        ",
  "INTRINSICS.TypedArray.prototype.findLastIndex" : "\n          1. Let _O_ be the *this* value.\n          1. Let _taRecord_ be ? ValidateTypedArray(_O_, ~seq-cst~).\n          1. Let _len_ be TypedArrayLength(_taRecord_).\n          1. Let _findRec_ be ? FindViaPredicate(_O_, _len_, ~descending~, _predicate_, _thisArg_).\n          1. Return _findRec_.[[Index]].\n        ",
  "IsTypedArrayOutOfBounds" : "\n          1. Let _O_ be _taRecord_.[[Object]].\n          1. Let _bufferByteLength_ be _taRecord_.[[CachedBufferByteLength]].\n          1. Assert: IsDetachedBuffer(_O_.[[ViewedArrayBuffer]]) is *true* if and only if _bufferByteLength_ is ~detached~.\n          1. If _bufferByteLength_ is ~detached~, return *true*.\n          1. Let _byteOffsetStart_ be _O_.[[ByteOffset]].\n          1. If _O_.[[ArrayLength]] is ~auto~, then\n            1. Let _byteOffsetEnd_ be _bufferByteLength_.\n          1. Else,\n            1. Let _elementSize_ be TypedArrayElementSize(_O_).\n            1. Let _byteOffsetEnd_ be _byteOffsetStart_ + _O_.[[ArrayLength]] √ó _elementSize_.\n          1. If _byteOffsetStart_ > _bufferByteLength_ or _byteOffsetEnd_ > _bufferByteLength_, return *true*.\n          1. NOTE: 0-length TypedArrays are not considered out-of-bounds.\n          1. Return *false*.\n        ",
  "INTRINSICS.RegExp.prototype[@@replace]" : "\n          1. Let _rx_ be the *this* value.\n          1. If _rx_ is not an Object, throw a *TypeError* exception.\n          1. Let _S_ be ? ToString(_string_).\n          1. Let _lengthS_ be the length of _S_.\n          1. Let _functionalReplace_ be IsCallable(_replaceValue_).\n          1. If _functionalReplace_ is *false*, then\n            1. Set _replaceValue_ to ? ToString(_replaceValue_).\n          1. Let _flags_ be ? ToString(? Get(_rx_, *\"flags\"*)).\n          1. If _flags_ contains *\"g\"*, let _global_ be *true*. Otherwise, let _global_ be *false*.\n          1. If _global_ is *true*, then\n            1. Perform ? Set(_rx_, *\"lastIndex\"*, *+0*<sub>ùîΩ</sub>, *true*).\n          1. Let _results_ be a new empty List.\n          1. Let _done_ be *false*.\n          1. Repeat, while _done_ is *false*,\n            1. Let _result_ be ? RegExpExec(_rx_, _S_).\n            1. If _result_ is *null*, then\n              1. Set _done_ to *true*.\n            1. Else,\n              1. Append _result_ to _results_.\n              1. If _global_ is *false*, then\n                1. Set _done_ to *true*.\n              1. Else,\n                1. Let _matchStr_ be ? ToString(? Get(_result_, *\"0\"*)).\n                1. If _matchStr_ is the empty String, then\n                  1. Let _thisIndex_ be ‚Ñù(? ToLength(? Get(_rx_, *\"lastIndex\"*))).\n                  1. If _flags_ contains *\"u\"* or _flags_ contains *\"v\"*, let _fullUnicode_ be *true*. Otherwise, let _fullUnicode_ be *false*.\n                  1. Let _nextIndex_ be AdvanceStringIndex(_S_, _thisIndex_, _fullUnicode_).\n                  1. Perform ? Set(_rx_, *\"lastIndex\"*, ùîΩ(_nextIndex_), *true*).\n          1. Let _accumulatedResult_ be the empty String.\n          1. Let _nextSourcePosition_ be 0.\n          1. For each element _result_ of _results_, do\n            1. Let _resultLength_ be ? LengthOfArrayLike(_result_).\n            1. Let _nCaptures_ be max(_resultLength_ - 1, 0).\n            1. Let _matched_ be ? ToString(? Get(_result_, *\"0\"*)).\n            1. Let _matchLength_ be the length of _matched_.\n            1. Let _position_ be ? ToIntegerOrInfinity(? Get(_result_, *\"index\"*)).\n            1. Set _position_ to the result of clamping _position_ between 0 and _lengthS_.\n            1. Let _captures_ be a new empty List.\n            1. Let _n_ be 1.\n            1. Repeat, while _n_ ‚â§ _nCaptures_,\n              1. Let _capN_ be ? Get(_result_, ! ToString(ùîΩ(_n_))).\n              1. If _capN_ is not *undefined*, then\n                1. Set _capN_ to ? ToString(_capN_).\n              1. Append _capN_ to _captures_.\n              1. NOTE: When _n_ = 1, the preceding step puts the first element into _captures_ (at index 0). More generally, the _n_<sup>th</sup> capture (the characters captured by the _n_<sup>th</sup> set of capturing parentheses) is at _captures_[_n_ - 1].\n              1. Set _n_ to _n_ + 1.\n            1. Let _namedCaptures_ be ? Get(_result_, *\"groups\"*).\n            1. If _functionalReplace_ is *true*, then\n              1. Let _replacerArgs_ be the list-concatenation of ¬´ _matched_ ¬ª, _captures_, and ¬´ ùîΩ(_position_), _S_ ¬ª.\n              1. If _namedCaptures_ is not *undefined*, then\n                1. Append _namedCaptures_ to _replacerArgs_.\n              1. Let _replValue_ be ? Call(_replaceValue_, *undefined*, _replacerArgs_).\n              1. Let _replacement_ be ? ToString(_replValue_).\n            1. Else,\n              1. If _namedCaptures_ is not *undefined*, then\n                1. Set _namedCaptures_ to ? ToObject(_namedCaptures_).\n              1. Let _replacement_ be ? GetSubstitution(_matched_, _S_, _position_, _captures_, _namedCaptures_, _replaceValue_).\n            1. If _position_ ‚â• _nextSourcePosition_, then\n              1. NOTE: _position_ should not normally move backwards. If it does, it is an indication of an ill-behaving RegExp subclass or use of an access triggered side-effect to change the global flag or other characteristics of _rx_. In such cases, the corresponding substitution is ignored.\n              1. Set _accumulatedResult_ to the string-concatenation of _accumulatedResult_, the substring of _S_ from _nextSourcePosition_ to _position_, and _replacement_.\n              1. Set _nextSourcePosition_ to _position_ + _matchLength_.\n          1. If _nextSourcePosition_ ‚â• _lengthS_, return _accumulatedResult_.\n          1. Return the string-concatenation of _accumulatedResult_ and the substring of _S_ from _nextSourcePosition_.\n        ",
  "ArrowParameters[0,0].IteratorBindingInitialization" : "\n        1. Let _v_ be *undefined*.\n        1. Assert: _iteratorRecord_.[[Done]] is *false*.\n        1. Let _next_ be ? IteratorStepValue(_iteratorRecord_).\n        1. If _next_ is not ~done~, then\n          1. Set _v_ to _next_.\n        1. Return ? BindingInitialization of |BindingIdentifier| with arguments _v_ and _environment_.\n      ",
  "Record[ImmutablePrototypeExoticObject].SetPrototypeOf" : "\n          1. Return ? SetImmutablePrototype(_O_, _V_).\n        ",
  "FunctionExpression[0,0].Evaluation" : "\n        1. Return InstantiateOrdinaryFunctionExpression of |FunctionExpression|.\n      ",
  "IsCallable" : "\n        1. If _argument_ is not an Object, return *false*.\n        1. If _argument_ has a [[Call]] internal method, return *true*.\n        1. Return *false*.\n      ",
  "INTRINSICS.RegExp.prototype.exec" : "\n          1. Let _R_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_R_, [[RegExpMatcher]]).\n          1. Let _S_ be ? ToString(_string_).\n          1. Return ? RegExpBuiltinExec(_R_, _S_).\n        ",
  "AllCharacters" : "\n            1. If _rer_.[[UnicodeSets]] is *true* and _rer_.[[IgnoreCase]] is *true*, then\n              1. [declared=\"c\"] Return the CharSet containing all Unicode code points _c_ that do not have a <a href=\"https://www.unicode.org/reports/tr44/#Simple_Case_Folding\">Simple Case Folding</a> mapping (that is, scf(_c_)=_c_).\n            1. Else if HasEitherUnicodeFlag(_rer_) is *true*, then\n              1. Return the CharSet containing all code point values.\n            1. Else,\n              1. Return the CharSet containing all code unit values.\n          ",
  "BreakStatement[1,0].ContainsUndefinedBreakTarget" : "\n        1. If _labelSet_ does not contain the StringValue of |LabelIdentifier|, return *true*.\n        1. Return *false*.\n      ",
  "TemplateSpans[1,0].TemplateStrings" : "\n          1. Let _middle_ be TemplateStrings of |TemplateMiddleList| with argument _raw_.\n          1. Let _tail_ be ¬´ TemplateString(|TemplateTail|, _raw_) ¬ª.\n          1. Return the list-concatenation of _middle_ and _tail_.\n        ",
  "PropertyDefinition[3,0].PropertyDefinitionEvaluation" : "\n          1. Perform ? MethodDefinitionEvaluation of |MethodDefinition| with arguments _object_ and *true*.\n          1. Return ~unused~.\n        ",
  "TryStatement[0,0].HasCallInTailPosition" : "\n        1. Return HasCallInTailPosition of |Catch| with argument _call_.\n      ",
  "Statement[3,0].VarDeclaredNames" : "\n        1. Return a new empty List.\n      ",
  "EqualityExpression[3,0].AssignmentTargetType" : "\n        1. Return ~invalid~.\n      ",
  "FunctionBody[0,0].EvaluateBody" : "\n          1. Return ? EvaluateFunctionBody of |FunctionBody| with arguments _functionObject_ and _argumentsList_.\n        ",
  "ForDeclaration[0,0].ForDeclarationBindingInitialization" : "\n          1. Return ? BindingInitialization of |ForBinding| with arguments _value_ and _environment_.\n        ",
  "SingleNameBinding[0,0].IteratorBindingInitialization" : "\n        1. Let _bindingId_ be StringValue of |BindingIdentifier|.\n        1. Let _lhs_ be ? ResolveBinding(_bindingId_, _environment_).\n        1. Let _v_ be *undefined*.\n        1. If _iteratorRecord_.[[Done]] is *false*, then\n          1. Let _next_ be ? IteratorStepValue(_iteratorRecord_).\n          1. If _next_ is not ~done~, then\n            1. Set _v_ to _next_.\n        1. If |Initializer| is present and _v_ is *undefined*, then\n          1. If IsAnonymousFunctionDefinition(|Initializer|) is *true*, then\n            1. Set _v_ to ? NamedEvaluation of |Initializer| with argument _bindingId_.\n          1. Else,\n            1. Let _defaultValue_ be ? Evaluation of |Initializer|.\n            1. Set _v_ to ? GetValue(_defaultValue_).\n        1. If _environment_ is *undefined*, return ? PutValue(_lhs_, _v_).\n        1. Return ? InitializeReferencedBinding(_lhs_, _v_).\n      ",
  "AssignmentProperty[1,0].PropertyDestructuringAssignmentEvaluation" : "\n          1. Let _name_ be ? Evaluation of |PropertyName|.\n          1. Perform ? KeyedDestructuringAssignmentEvaluation of |AssignmentElement| with arguments _value_ and _name_.\n          1. Return ¬´ _name_ ¬ª.\n        ",
  "FieldDefinition[0,1].ComputedPropertyContains" : "\n        1. Return the result of ComputedPropertyContains of |ClassElementName| with argument _symbol_.\n      ",
  "INTRINSICS.get TypedArray.prototype.buffer" : "\n          1. Let _O_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_O_, [[TypedArrayName]]).\n          1. Assert: _O_ has a [[ViewedArrayBuffer]] internal slot.\n          1. Let _buffer_ be _O_.[[ViewedArrayBuffer]].\n          1. Return _buffer_.\n        ",
  "Catch[0,0].ContainsDuplicateLabels" : "\n        1. Return ContainsDuplicateLabels of |Block| with argument _labelSet_.\n      ",
  "EnqueueResolveInAgentJob" : "\n          1. Let _resolveJob_ be a new Job Abstract Closure with no parameters that captures _agentSignifier_, _promiseCapability_, and _resolution_ and performs the following steps when called:\n            1. Assert: AgentSignifier() is _agentSignifier_.\n            1. Perform ! Call(_promiseCapability_.[[Resolve]], *undefined*, ¬´ _resolution_ ¬ª).\n            1. Return ~unused~.\n          1. Let _realmInTargetAgent_ be ! GetFunctionRealm(_promiseCapability_.[[Resolve]]).\n          1. Assert: _agentSignifier_ is _realmInTargetAgent_.[[AgentSignifier]].\n          1. Perform HostEnqueueGenericJob(_resolveJob_, _realmInTargetAgent_).\n          1. Return ~unused~.\n        ",
  "INTRINSICS.yet:PromiseRejectFunction" : "\n            1. Let _F_ be the active function object.\n            1. Assert: _F_ has a [[Promise]] internal slot whose value is an Object.\n            1. Let _promise_ be _F_.[[Promise]].\n            1. Let _alreadyResolved_ be _F_.[[AlreadyResolved]].\n            1. If _alreadyResolved_.[[Value]] is *true*, return *undefined*.\n            1. Set _alreadyResolved_.[[Value]] to *true*.\n            1. Perform RejectPromise(_promise_, _reason_).\n            1. Return *undefined*.\n          ",
  "INTRINSICS.Object.isExtensible" : "\n          1. If _O_ is not an Object, return *false*.\n          1. Return ? IsExtensible(_O_).\n        ",
  "SubstitutionTemplate[0,0].ArgumentListEvaluation" : "\n          1. Let _firstSubRef_ be ? Evaluation of |Expression|.\n          1. Let _firstSub_ be ? GetValue(_firstSubRef_).\n          1. Let _restSub_ be ? SubstitutionEvaluation of |TemplateSpans|.\n          1. Assert: _restSub_ is a possibly empty List.\n          1. Return the list-concatenation of ¬´ _firstSub_ ¬ª and _restSub_.\n        ",
  "ForDeclaration[0,0].ForDeclarationBindingInstantiation" : "\n          1. For each element _name_ of the BoundNames of |ForBinding|, do\n            1. If IsConstantDeclaration of |LetOrConst| is *true*, then\n              1. Perform ! _environment_.CreateImmutableBinding(_name_, *true*).\n            1. Else,\n              1. Perform ! _environment_.CreateMutableBinding(_name_, *false*).\n          1. Return ~unused~.\n        ",
  "RegExpUnicodeEscapeSequence[5,0].CharacterValue" : "\n          1. Return the MV of |CodePoint|.\n        ",
  "DecimalEscape[0,0].CapturingGroupNumber" : "\n          1. Return the MV of |NonZeroDigit|.\n        ",
  "Assertion[3,0].CompileAssertion" : "\n          1. Return a new Matcher with parameters (_x_, _c_) that captures _rer_ and performs the following steps when called:\n            1. Assert: _x_ is a MatchState.\n            1. Assert: _c_ is a MatcherContinuation.\n            1. Let _Input_ be _x_.[[Input]].\n            1. Let _e_ be _x_.[[EndIndex]].\n            1. Let _a_ be IsWordChar(_rer_, _Input_, _e_ - 1).\n            1. Let _b_ be IsWordChar(_rer_, _Input_, _e_).\n            1. If _a_ is *true* and _b_ is *true*, or if _a_ is *false* and _b_ is *false*, return _c_(_x_).\n            1. Return ~failure~.\n        ",
  "IfStatement[1,0].Evaluation" : "\n        1. Let _exprRef_ be ? Evaluation of |Expression|.\n        1. Let _exprValue_ be ToBoolean(? GetValue(_exprRef_)).\n        1. If _exprValue_ is *false*, then\n          1. Return *undefined*.\n        1. Else,\n          1. Let _stmtCompletion_ be Completion(Evaluation of |Statement|).\n          1. Return ? UpdateEmpty(_stmtCompletion_, *undefined*).\n      ",
  "Record[GlobalEnvironmentRecord].DeleteBinding" : "\n            1. Let _DclRec_ be _envRec_.[[DeclarativeRecord]].\n            1. If ! _DclRec_.HasBinding(_N_) is *true*, then\n              1. Return ! _DclRec_.DeleteBinding(_N_).\n            1. Let _ObjRec_ be _envRec_.[[ObjectRecord]].\n            1. Let _globalObject_ be _ObjRec_.[[BindingObject]].\n            1. Let _existingProp_ be ? HasOwnProperty(_globalObject_, _N_).\n            1. If _existingProp_ is *true*, then\n              1. Let _status_ be ? <emu-meta effects=\"user-code\">_ObjRec_.DeleteBinding</emu-meta>(_N_).\n              1. If _status_ is *true* and _envRec_.[[VarNames]] contains _N_, then\n                1. Remove _N_ from _envRec_.[[VarNames]].\n              1. Return _status_.\n            1. Return *true*.\n          ",
  "Record[ProxyExoticObject].DefineOwnProperty" : "\n        1. Perform ? ValidateNonRevokedProxy(_O_).\n        1. Let _target_ be _O_.[[ProxyTarget]].\n        1. Let _handler_ be _O_.[[ProxyHandler]].\n        1. Assert: _handler_ is an Object.\n        1. Let _trap_ be ? GetMethod(_handler_, *\"defineProperty\"*).\n        1. If _trap_ is *undefined*, then\n          1. Return ? <emu-meta effects=\"user-code\">_target_.[[DefineOwnProperty]]</emu-meta>(_P_, _Desc_).\n        1. Let _descObj_ be FromPropertyDescriptor(_Desc_).\n        1. Let _booleanTrapResult_ be ToBoolean(? Call(_trap_, _handler_, ¬´ _target_, _P_, _descObj_ ¬ª)).\n        1. If _booleanTrapResult_ is *false*, return *false*.\n        1. Let _targetDesc_ be ? <emu-meta effects=\"user-code\">_target_.[[GetOwnProperty]]</emu-meta>(_P_).\n        1. Let _extensibleTarget_ be ? IsExtensible(_target_).\n        1. If _Desc_ has a [[Configurable]] field and _Desc_.[[Configurable]] is *false*, then\n          1. Let _settingConfigFalse_ be *true*.\n        1. Else,\n          1. Let _settingConfigFalse_ be *false*.\n        1. If _targetDesc_ is *undefined*, then\n          1. If _extensibleTarget_ is *false*, throw a *TypeError* exception.\n          1. If _settingConfigFalse_ is *true*, throw a *TypeError* exception.\n        1. Else,\n          1. If IsCompatiblePropertyDescriptor(_extensibleTarget_, _Desc_, _targetDesc_) is *false*, throw a *TypeError* exception.\n          1. If _settingConfigFalse_ is *true* and _targetDesc_.[[Configurable]] is *true*, throw a *TypeError* exception.\n          1. If IsDataDescriptor(_targetDesc_) is *true*, _targetDesc_.[[Configurable]] is *false*, and _targetDesc_.[[Writable]] is *true*, then\n            1. If _Desc_ has a [[Writable]] field and _Desc_.[[Writable]] is *false*, throw a *TypeError* exception.\n        1. Return *true*.\n      ",
  "INTRINSICS.Date.prototype.getUTCFullYear" : "\n          1. Let _dateObject_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_dateObject_, [[DateValue]]).\n          1. Let _t_ be _dateObject_.[[DateValue]].\n          1. If _t_ is *NaN*, return *NaN*.\n          1. Return YearFromTime(_t_).\n        ",
  "INTRINSICS.Array.prototype.findIndex" : "\n          1. Let _O_ be ? ToObject(*this* value).\n          1. Let _len_ be ? LengthOfArrayLike(_O_).\n          1. Let _findRec_ be ? FindViaPredicate(_O_, _len_, ~ascending~, _predicate_, _thisArg_).\n          1. Return _findRec_.[[Index]].\n        ",
  "ExportDeclaration[3,0].LexicallyScopedDeclarations" : "\n        1. Return a List whose sole element is DeclarationPart of |Declaration|.\n      ",
  "SecFromTime" : "\n          1. Return ùîΩ(floor(‚Ñù(_t_ / msPerSecond)) modulo SecondsPerMinute).\n        ",
  "AsyncFunctionExpression[0,0].NamedEvaluation" : "\n        1. Return InstantiateAsyncFunctionExpression of |AsyncFunctionExpression| with argument _name_.\n      ",
  "HourFromTime" : "\n          1. Return ùîΩ(floor(‚Ñù(_t_ / msPerHour)) modulo HoursPerDay).\n        ",
  "ArgumentList[0,0].ArgumentListEvaluation" : "\n          1. Let _ref_ be ? Evaluation of |AssignmentExpression|.\n          1. Let _arg_ be ? GetValue(_ref_).\n          1. Return ¬´ _arg_ ¬ª.\n        ",
  "ForStatement[0,0].HasCallInTailPosition" : "\n        1. Return HasCallInTailPosition of |Statement| with argument _call_.\n      ",
  "WhileStatement[0,0].VarScopedDeclarations" : "\n        1. Return the VarScopedDeclarations of |Statement|.\n      ",
  "Record[ObjectEnvironmentRecord].HasThisBinding" : "\n            1. Return *false*.\n          ",
  "INTRINSICS.Math.log" : "\n          1. Let _n_ be ? ToNumber(_x_).\n          1. If _n_ is either *NaN* or *+‚àû*<sub>ùîΩ</sub>, return _n_.\n          1. If _n_ is *1*<sub>ùîΩ</sub>, return *+0*<sub>ùîΩ</sub>.\n          1. If _n_ is either *+0*<sub>ùîΩ</sub> or *-0*<sub>ùîΩ</sub>, return *-‚àû*<sub>ùîΩ</sub>.\n          1. If _n_ < *-0*<sub>ùîΩ</sub>, return *NaN*.\n          1. Return an implementation-approximated Number value representing the result of the natural logarithm of ‚Ñù(_n_).\n        ",
  "INTRINSICS.String.prototype.lastIndexOf" : "\n          1. Let _O_ be ? RequireObjectCoercible(*this* value).\n          1. Let _S_ be ? ToString(_O_).\n          1. Let _searchStr_ be ? ToString(_searchString_).\n          1. Let _numPos_ be ? ToNumber(_position_).\n          1. Assert: If _position_ is *undefined*, then _numPos_ is *NaN*.\n          1. If _numPos_ is *NaN*, let _pos_ be +‚àû; otherwise, let _pos_ be ! ToIntegerOrInfinity(_numPos_).\n          1. Let _len_ be the length of _S_.\n          1. Let _searchLen_ be the length of _searchStr_.\n          1. Let _start_ be the result of clamping _pos_ between 0 and _len_ - _searchLen_.\n          1. If _searchStr_ is the empty String, return ùîΩ(_start_).\n          1. For each integer _i_ such that 0 ‚â§ _i_ ‚â§ _start_, in descending order, do\n            1. Let _candidate_ be the substring of _S_ from _i_ to _i_ + _searchLen_.\n            1. If _candidate_ is _searchStr_, return ùîΩ(_i_).\n          1. Return *-1*<sub>ùîΩ</sub>.\n        ",
  "ForInOfStatement[0,0].HasCallInTailPosition" : "\n        1. Return HasCallInTailPosition of |Statement| with argument _call_.\n      ",
  "INTRINSICS.String.prototype[@@iterator]:clo0" : "\n          1. Let _O_ be ? RequireObjectCoercible(*this* value).\n          1. Let _s_ be ? ToString(_O_).\n          1. Let _closure_ be a new Abstract Closure with no parameters that captures _s_ and performs the following steps when called:\n            1. Let _len_ be the length of _s_.\n            1. Let _position_ be 0.\n            1. Repeat, while _position_ < _len_,\n              1. Let _cp_ be CodePointAt(_s_, _position_).\n              1. Let _nextIndex_ be _position_ + _cp_.[[CodeUnitCount]].\n              1. Let _resultString_ be the substring of _s_ from _position_ to _nextIndex_.\n              1. Set _position_ to _nextIndex_.\n              1. Perform ? GeneratorYield(CreateIterResultObject(_resultString_, *false*)).\n            1. Return *undefined*.\n          1. Return CreateIteratorFromClosure(_closure_, *\"%StringIteratorPrototype%\"*, %StringIteratorPrototype%).\n        ",
  "IterationStatement[0,0].LoopEvaluation" : "\n          1. Return ? DoWhileLoopEvaluation of |DoWhileStatement| with argument _labelSet_.\n        ",
  "SingleNameBinding[0,0].ContainsExpression" : "\n        1. Return *false*.\n      ",
  "INTRINSICS.DataView.prototype.setUint8" : "\n          1. Let _v_ be the *this* value.\n          1. Return ? SetViewValue(_v_, _byteOffset_, *true*, ~uint8~, _value_).\n        ",
  "ConciseBody[0,0].EvaluateBody" : "\n          1. Return ? EvaluateConciseBody of |ConciseBody| with arguments _functionObject_ and _argumentsList_.\n        ",
  "BitwiseXORExpression[1,0].IsFunctionDefinition" : "\n        1. Return *false*.\n      ",
  "BindingElementList[1,0].ContainsExpression" : "\n        1. Let _has_ be ContainsExpression of |BindingElementList|.\n        1. If _has_ is *true*, return *true*.\n        1. Return ContainsExpression of |BindingElisionElement|.\n      ",
  "TryStatement[0,0].ContainsUndefinedBreakTarget" : "\n        1. Let _hasUndefinedLabels_ be ContainsUndefinedBreakTarget of |Block| with argument _labelSet_.\n        1. If _hasUndefinedLabels_ is *true*, return *true*.\n        1. Return ContainsUndefinedBreakTarget of |Catch| with argument _labelSet_.\n      ",
  "Assertion[0,0].CompileAssertion" : "\n          1. Return a new Matcher with parameters (_x_, _c_) that captures _rer_ and performs the following steps when called:\n            1. Assert: _x_ is a MatchState.\n            1. Assert: _c_ is a MatcherContinuation.\n            1. Let _Input_ be _x_.[[Input]].\n            1. Let _e_ be _x_.[[EndIndex]].\n            1. If _e_ = 0, or if _rer_.[[Multiline]] is *true* and the character _Input_[_e_ - 1] is matched by |LineTerminator|, then\n              1. Return _c_(_x_).\n            1. Return ~failure~.\n        ",
  "INTRINSICS.GeneratorFunction.prototype.prototype.throw" : "\n          1. Let _g_ be the *this* value.\n          1. Let _C_ be ThrowCompletion(_exception_).\n          1. Return ? GeneratorResumeAbrupt(_g_, _C_, ~empty~).\n        ",
  "MaybeSimpleCaseFolding" : "\n            1. If _rer_.[[UnicodeSets]] is *false* or _rer_.[[IgnoreCase]] is *false*, return _A_.\n            1. Let _B_ be a new empty CharSet.\n            1. For each CharSetElement _s_ of _A_, do\n              1. Let _t_ be an empty sequence of characters.\n              1. For each single code point _cp_ in _s_, do\n                1. Append scf(_cp_) to _t_.\n              1. Add _t_ to _B_.\n            1. Return _B_.\n          ",
  "Record[ProxyExoticObject].HasProperty" : "\n        1. Perform ? ValidateNonRevokedProxy(_O_).\n        1. Let _target_ be _O_.[[ProxyTarget]].\n        1. Let _handler_ be _O_.[[ProxyHandler]].\n        1. Assert: _handler_ is an Object.\n        1. Let _trap_ be ? GetMethod(_handler_, *\"has\"*).\n        1. If _trap_ is *undefined*, then\n          1. Return ? <emu-meta effects=\"user-code\">_target_.[[HasProperty]]</emu-meta>(_P_).\n        1. Let _booleanTrapResult_ be ToBoolean(? Call(_trap_, _handler_, ¬´ _target_, _P_ ¬ª)).\n        1. If _booleanTrapResult_ is *false*, then\n          1. Let _targetDesc_ be ? <emu-meta effects=\"user-code\">_target_.[[GetOwnProperty]]</emu-meta>(_P_).\n          1. If _targetDesc_ is not *undefined*, then\n            1. If _targetDesc_.[[Configurable]] is *false*, throw a *TypeError* exception.\n            1. Let _extensibleTarget_ be ? IsExtensible(_target_).\n            1. If _extensibleTarget_ is *false*, throw a *TypeError* exception.\n        1. Return _booleanTrapResult_.\n      ",
  "ClassStaticBlockStatementList[0,0].ContainsUndefinedBreakTarget" : "\n        1. Return *false*.\n      ",
  "PropertyDefinitionList[1,0].PropertyNameList" : "\n          1. Let _list_ be PropertyNameList of |PropertyDefinitionList|.\n          1. Let _propName_ be PropName of |PropertyDefinition|.\n          1. If _propName_ is ~empty~, return _list_.\n          1. Return the list-concatenation of _list_ and ¬´ _propName_ ¬ª.\n        ",
  "INTRINSICS.RegExp.prototype[@@search]" : "\n          1. Let _rx_ be the *this* value.\n          1. If _rx_ is not an Object, throw a *TypeError* exception.\n          1. Let _S_ be ? ToString(_string_).\n          1. Let _previousLastIndex_ be ? Get(_rx_, *\"lastIndex\"*).\n          1. If SameValue(_previousLastIndex_, *+0*<sub>ùîΩ</sub>) is *false*, then\n            1. Perform ? Set(_rx_, *\"lastIndex\"*, *+0*<sub>ùîΩ</sub>, *true*).\n          1. Let _result_ be ? RegExpExec(_rx_, _S_).\n          1. Let _currentLastIndex_ be ? Get(_rx_, *\"lastIndex\"*).\n          1. If SameValue(_currentLastIndex_, _previousLastIndex_) is *false*, then\n            1. Perform ? Set(_rx_, *\"lastIndex\"*, _previousLastIndex_, *true*).\n          1. If _result_ is *null*, return *-1*<sub>ùîΩ</sub>.\n          1. Return ? Get(_result_, *\"index\"*).\n        ",
  "CoverCallExpressionAndAsyncArrowHead[0,0].IsSimpleParameterList" : "\n        1. Let _head_ be the |AsyncArrowHead| that is covered by |CoverCallExpressionAndAsyncArrowHead|.\n        1. Return IsSimpleParameterList of _head_.\n      ",
  "INTRINSICS.get SharedArrayBuffer.prototype.growable" : "\n          1. Let _O_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_O_, [[ArrayBufferData]]).\n          1. If IsSharedArrayBuffer(_O_) is *false*, throw a *TypeError* exception.\n          1. If IsFixedLengthArrayBuffer(_O_) is *false*, return *true*; otherwise return *false*.\n        ",
  "ImportDeclaration[0,0].ImportEntries" : "\n          1. Let _module_ be the sole element of ModuleRequests of |FromClause|.\n          1. Return ImportEntriesForModule of |ImportClause| with argument _module_.\n        ",
  "MakeTime" : "\n          1. If _hour_ is not finite, _min_ is not finite, _sec_ is not finite, or _ms_ is not finite, return *NaN*.\n          1. Let _h_ be ùîΩ(! ToIntegerOrInfinity(_hour_)).\n          1. Let _m_ be ùîΩ(! ToIntegerOrInfinity(_min_)).\n          1. Let _s_ be ùîΩ(! ToIntegerOrInfinity(_sec_)).\n          1. Let _milli_ be ùîΩ(! ToIntegerOrInfinity(_ms_)).\n          1. Return ((_h_ √ó msPerHour + _m_ √ó msPerMinute) + _s_ √ó msPerSecond) + _milli_.\n        ",
  "Record[TypedArray].DefineOwnProperty" : "\n          1. If _P_ is a String, then\n            1. Let _numericIndex_ be CanonicalNumericIndexString(_P_).\n            1. If _numericIndex_ is not *undefined*, then\n              1. If IsValidIntegerIndex(_O_, _numericIndex_) is *false*, return *false*.\n              1. If _Desc_ has a [[Configurable]] field and _Desc_.[[Configurable]] is *false*, return *false*.\n              1. If _Desc_ has an [[Enumerable]] field and _Desc_.[[Enumerable]] is *false*, return *false*.\n              1. If IsAccessorDescriptor(_Desc_) is *true*, return *false*.\n              1. If _Desc_ has a [[Writable]] field and _Desc_.[[Writable]] is *false*, return *false*.\n              1. If _Desc_ has a [[Value]] field, perform ? TypedArraySetElement(_O_, _numericIndex_, _Desc_.[[Value]]).\n              1. Return *true*.\n          1. Return ! OrdinaryDefineOwnProperty(_O_, _P_, _Desc_).\n        ",
  "UpdateExpression[2,0].AssignmentTargetType" : "\n        1. Return ~invalid~.\n      ",
  "ForStatement[0,7].VarDeclaredNames" : "\n        1. Return the VarDeclaredNames of |Statement|.\n      ",
  "DefinePropertyOrThrow" : "\n        1. Let _success_ be ? <emu-meta effects=\"user-code\">_O_.[[DefineOwnProperty]]</emu-meta>(_P_, _desc_).\n        1. If _success_ is *false*, throw a *TypeError* exception.\n        1. Return ~unused~.\n      ",
  "INTRINSICS.BigInt.asIntN" : "\n          1. Set _bits_ to ? ToIndex(_bits_).\n          1. Set _bigint_ to ? ToBigInt(_bigint_).\n          1. Let _mod_ be ‚Ñù(_bigint_) modulo 2<sup>_bits_</sup>.\n          1. If _mod_ ‚â• 2<sup>_bits_ - 1</sup>, return ‚Ñ§(_mod_ - 2<sup>_bits_</sup>); otherwise, return ‚Ñ§(_mod_).\n        ",
  "INTRINSICS.Set" : "\n          1. If NewTarget is *undefined*, throw a *TypeError* exception.\n          1. Let _set_ be ? OrdinaryCreateFromConstructor(NewTarget, *\"%Set.prototype%\"*, ¬´ [[SetData]] ¬ª).\n          1. Set _set_.[[SetData]] to a new empty List.\n          1. If _iterable_ is either *undefined* or *null*, return _set_.\n          1. Let _adder_ be ? Get(_set_, *\"add\"*).\n          1. If IsCallable(_adder_) is *false*, throw a *TypeError* exception.\n          1. Let _iteratorRecord_ be ? GetIterator(_iterable_, ~sync~).\n          1. Repeat,\n            1. Let _next_ be ? IteratorStepValue(_iteratorRecord_).\n            1. If _next_ is ~done~, return _set_.\n            1. Let _status_ be Completion(Call(_adder_, _set_, ¬´ _next_ ¬ª)).\n            1. IfAbruptCloseIterator(_status_, _iteratorRecord_).\n        ",
  "Record[DeclarativeEnvironmentRecord].HasThisBinding" : "\n            1. Return *false*.\n          ",
  "INTRINSICS.yet:`Promise.allSettled`RejectElementFunction" : "\n            1. Let _F_ be the active function object.\n            1. Let _alreadyCalled_ be _F_.[[AlreadyCalled]].\n            1. If _alreadyCalled_.[[Value]] is *true*, return *undefined*.\n            1. Set _alreadyCalled_.[[Value]] to *true*.\n            1. Let _index_ be _F_.[[Index]].\n            1. Let _values_ be _F_.[[Values]].\n            1. Let _promiseCapability_ be _F_.[[Capability]].\n            1. Let _remainingElementsCount_ be _F_.[[RemainingElements]].\n            1. Let _obj_ be OrdinaryObjectCreate(%Object.prototype%).\n            1. Perform ! CreateDataPropertyOrThrow(_obj_, *\"status\"*, *\"rejected\"*).\n            1. Perform ! CreateDataPropertyOrThrow(_obj_, *\"reason\"*, _x_).\n            1. Set _values_[_index_] to _obj_.\n            1. Set _remainingElementsCount_.[[Value]] to _remainingElementsCount_.[[Value]] - 1.\n            1. If _remainingElementsCount_.[[Value]] = 0, then\n              1. Let _valuesArray_ be CreateArrayFromList(_values_).\n              1. Return ? Call(_promiseCapability_.[[Resolve]], *undefined*, ¬´ _valuesArray_ ¬ª).\n            1. Return *undefined*.\n          ",
  "GetModuleNamespace" : "\n          1. Assert: If _module_ is a Cyclic Module Record, then _module_.[[Status]] is not ~new~ or ~unlinked~.\n          1. Let _namespace_ be _module_.[[Namespace]].\n          1. If _namespace_ is ~empty~, then\n            1. Let _exportedNames_ be _module_.GetExportedNames().\n            1. Let _unambiguousNames_ be a new empty List.\n            1. For each element _name_ of _exportedNames_, do\n              1. Let _resolution_ be _module_.ResolveExport(_name_).\n              1. If _resolution_ is a ResolvedBinding Record, append _name_ to _unambiguousNames_.\n            1. Set _namespace_ to ModuleNamespaceCreate(_module_, _unambiguousNames_).\n          1. Return _namespace_.\n        ",
  "UpdateExpression[1,0].Evaluation" : "\n          1. Let _lhs_ be ? Evaluation of |LeftHandSideExpression|.\n          1. Let _oldValue_ be ? ToNumeric(? GetValue(_lhs_)).\n          1. If _oldValue_ is a Number, then\n            1. Let _newValue_ be Number::add(_oldValue_, *1*<sub>ùîΩ</sub>).\n          1. Else,\n            1. Assert: _oldValue_ is a BigInt.\n            1. Let _newValue_ be BigInt::add(_oldValue_, *1*<sub>‚Ñ§</sub>).\n          1. Perform ? PutValue(_lhs_, _newValue_).\n          1. Return _oldValue_.\n        ",
  "ArrayBindingPattern[0,2].IteratorBindingInitialization" : "\n        1. Return ? IteratorDestructuringAssignmentEvaluation of |Elision| with argument _iteratorRecord_.\n      ",
  "ForStatement[0,6].ForLoopEvaluation" : "\n          1. If the first |Expression| is present, then\n            1. Let _exprRef_ be ? Evaluation of the first |Expression|.\n            1. Perform ? GetValue(_exprRef_).\n          1. If the second |Expression| is present, let _test_ be the second |Expression|; otherwise, let _test_ be ~empty~.\n          1. If the third |Expression| is present, let _increment_ be the third |Expression|; otherwise, let _increment_ be ~empty~.\n          1. Return ? ForBodyEvaluation(_test_, _increment_, |Statement|, ¬´ ¬ª, _labelSet_).\n        ",
  "CoalesceExpression[0,0].Evaluation" : "\n        1. Let _lref_ be ? Evaluation of |CoalesceExpressionHead|.\n        1. Let _lval_ be ? GetValue(_lref_).\n        1. If _lval_ is either *undefined* or *null*, then\n          1. Let _rref_ be ? Evaluation of |BitwiseORExpression|.\n          1. Return ? GetValue(_rref_).\n        1. Else,\n          1. Return _lval_.\n      ",
  "ClassStaticBlockStatementList[0,1].VarScopedDeclarations" : "\n        1. Return the TopLevelVarScopedDeclarations of |StatementList|.\n      ",
  "NamedExports[0,0].ExportedNames" : "\n          1. Return a new empty List.\n        ",
  "MakeDataViewWithBufferWitnessRecord" : "\n          1. Let _buffer_ be _obj_.[[ViewedArrayBuffer]].\n          1. If IsDetachedBuffer(_buffer_) is *true*, then\n            1. Let _byteLength_ be ~detached~.\n          1. Else,\n            1. Let _byteLength_ be ArrayBufferByteLength(_buffer_, _order_).\n          1. Return the DataView With Buffer Witness Record { [[Object]]: _obj_, [[CachedBufferByteLength]]: _byteLength_ }.\n        ",
  "IsBigIntElementType" : "\n          1. If _type_ is either ~biguint64~ or ~bigint64~, return *true*.\n          1. Return *false*.\n        ",
  "Record[SourceTextModuleRecord].ExecuteModule" : "\n            1. Let _moduleContext_ be a new ECMAScript code execution context.\n            1. Set the Function of _moduleContext_ to *null*.\n            1. Set the Realm of _moduleContext_ to _module_.[[Realm]].\n            1. Set the ScriptOrModule of _moduleContext_ to _module_.\n            1. Assert: _module_ has been linked and declarations in its module environment have been instantiated.\n            1. Set the VariableEnvironment of _moduleContext_ to _module_.[[Environment]].\n            1. Set the LexicalEnvironment of _moduleContext_ to _module_.[[Environment]].\n            1. Suspend the running execution context.\n            1. If _module_.[[HasTLA]] is *false*, then\n              1. Assert: _capability_ is not present.\n              1. Push _moduleContext_ onto the execution context stack; _moduleContext_ is now the running execution context.\n              1. Let _result_ be Completion(Evaluation of _module_.[[ECMAScriptCode]]).\n              1. Suspend _moduleContext_ and remove it from the execution context stack.\n              1. Resume the context that is now on the top of the execution context stack as the running execution context.\n              1. If _result_ is an abrupt completion, then\n                1. Return ? _result_.\n            1. Else,\n              1. Assert: _capability_ is a PromiseCapability Record.\n              1. Perform AsyncBlockStart(_capability_, _module_.[[ECMAScriptCode]], _moduleContext_).\n            1. Return ~unused~.\n          ",
  "RelationalExpression[5,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "SingleNameBinding[0,1].IsSimpleParameterList" : "\n        1. Return *false*.\n      ",
  "ExportDeclaration[1,0].Evaluation" : "\n          1. Return ~empty~.\n        ",
  "ClassAtom[0,0].CompileToCharSet" : "\n          1. Return the CharSet containing the single character `-` U+002D (HYPHEN-MINUS).\n        ",
  "GeneratorDeclaration[1,0].ContainsArguments" : "\n        1. Return *false*.\n      ",
  "msFromTime" : "\n          1. Return ùîΩ(‚Ñù(_t_) modulo ‚Ñù(msPerSecond)).\n        ",
  "Day" : "\n          1. Return ùîΩ(floor(‚Ñù(_t_ / msPerDay))).\n        ",
  "FunctionDeclaration[0,0].ContainsArguments" : "\n        1. Return *false*.\n      ",
  "FormalParameters[0,0].ExpectedArgumentCount" : "\n        1. Return 0.\n      ",
  "AddEntriesFromIterable" : "\n          1. Let _iteratorRecord_ be ? GetIterator(_iterable_, ~sync~).\n          1. Repeat,\n            1. Let _next_ be ? IteratorStepValue(_iteratorRecord_).\n            1. If _next_ is ~done~, return _target_.\n            1. If _next_ is not an Object, then\n              1. Let _error_ be ThrowCompletion(a newly created *TypeError* object).\n              1. Return ? IteratorClose(_iteratorRecord_, _error_).\n            1. Let _k_ be Completion(Get(_next_, *\"0\"*)).\n            1. IfAbruptCloseIterator(_k_, _iteratorRecord_).\n            1. Let _v_ be Completion(Get(_next_, *\"1\"*)).\n            1. IfAbruptCloseIterator(_v_, _iteratorRecord_).\n            1. Let _status_ be Completion(Call(_adder_, _target_, ¬´ _k_, _v_ ¬ª)).\n            1. IfAbruptCloseIterator(_status_, _iteratorRecord_).\n        ",
  "AsyncFunctionDeclaration[1,0].InstantiateAsyncFunctionObject" : "\n        1. Let _sourceText_ be the source text matched by |AsyncFunctionDeclaration|.\n        1. Let _F_ be OrdinaryFunctionCreate(%AsyncFunction.prototype%, _sourceText_, |FormalParameters|, |AsyncFunctionBody|, ~non-lexical-this~, _env_, _privateEnv_).\n        1. Perform SetFunctionName(_F_, *\"default\"*).\n        1. Return _F_.\n      ",
  "Block[0,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "INTRINSICS.Math.asinh" : "\n          1. Let _n_ be ? ToNumber(_x_).\n          1. If _n_ is not finite or _n_ is either *+0*<sub>ùîΩ</sub> or *-0*<sub>ùîΩ</sub>, return _n_.\n          1. Return an implementation-approximated Number value representing the result of the inverse hyperbolic sine of ‚Ñù(_n_).\n        ",
  "Alternative[1,0].CompileSubpattern" : "\n          1. Let _m1_ be CompileSubpattern of |Alternative| with arguments _rer_ and _direction_.\n          1. Let _m2_ be CompileSubpattern of |Term| with arguments _rer_ and _direction_.\n          1. Return MatchSequence(_m1_, _m2_, _direction_).\n        ",
  "BindingIdentifier[1,0].Evaluation" : "\n          1. Let _bindingId_ be StringValue of |BindingIdentifier|.\n          1. Return ? ResolveBinding(_bindingId_).\n        ",
  "StatementListItem[1,0].VarScopedDeclarations" : "\n        1. Return a new empty List.\n      ",
  "AtomEscape[3,0].CompileAtom" : "\n          1. Let _matchingGroupSpecifiers_ be GroupSpecifiersThatMatch(|GroupName|).\n          1. Assert: _matchingGroupSpecifiers_ contains a single |GroupSpecifier|.\n          1. Let _groupSpecifier_ be the sole element of _matchingGroupSpecifiers_.\n          1. Let _parenIndex_ be CountLeftCapturingParensBefore(_groupSpecifier_).\n          1. Return BackreferenceMatcher(_rer_, _parenIndex_, _direction_).\n        ",
  "INTRINSICS.Date.prototype.getUTCMonth" : "\n          1. Let _dateObject_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_dateObject_, [[DateValue]]).\n          1. Let _t_ be _dateObject_.[[DateValue]].\n          1. If _t_ is *NaN*, return *NaN*.\n          1. Return MonthFromTime(_t_).\n        ",
  "UpdateExpression[1,0].IsFunctionDefinition" : "\n        1. Return *false*.\n      ",
  "GetNamedTimeZoneEpochNanoseconds" : "\n          1. Assert: _timeZoneIdentifier_ is *\"UTC\"*.\n          1. Let _epochNanoseconds_ be GetUTCEpochNanoseconds(_year_, _month_, _day_, _hour_, _minute_, _second_, _millisecond_, _microsecond_, _nanosecond_).\n          1. Return ¬´ _epochNanoseconds_ ¬ª.\n        ",
  "NewTarget[0,0].AssignmentTargetType" : "\n        1. Return ~invalid~.\n      ",
  "BindingElement[1,0].IteratorBindingInitialization" : "\n        1. Let _v_ be *undefined*.\n        1. If _iteratorRecord_.[[Done]] is *false*, then\n          1. Let _next_ be ? IteratorStepValue(_iteratorRecord_).\n          1. If _next_ is not ~done~, then\n            1. Set _v_ to _next_.\n        1. If |Initializer| is present and _v_ is *undefined*, then\n          1. Let _defaultValue_ be ? Evaluation of |Initializer|.\n          1. Set _v_ to ? GetValue(_defaultValue_).\n        1. Return ? BindingInitialization of |BindingPattern| with arguments _v_ and _environment_.\n      ",
  "ForStatement[1,3].ForLoopEvaluation" : "\n          1. Perform ? Evaluation of |VariableDeclarationList|.\n          1. If the first |Expression| is present, let _test_ be the first |Expression|; otherwise, let _test_ be ~empty~.\n          1. If the second |Expression| is present, let _increment_ be the second |Expression|; otherwise, let _increment_ be ~empty~.\n          1. Return ? ForBodyEvaluation(_test_, _increment_, |Statement|, ¬´ ¬ª, _labelSet_).\n        ",
  "INTRINSICS.URIError" : null,
  "INTRINSICS.TypedArray.prototype.reverse" : "\n          1. Let _O_ be the *this* value.\n          1. Let _taRecord_ be ? ValidateTypedArray(_O_, ~seq-cst~).\n          1. Let _len_ be TypedArrayLength(_taRecord_).\n          1. Let _middle_ be floor(_len_ / 2).\n          1. Let _lower_ be 0.\n          1. Repeat, while _lower_ ‚â† _middle_,\n            1. Let _upper_ be _len_ - _lower_ - 1.\n            1. Let _upperP_ be ! ToString(ùîΩ(_upper_)).\n            1. Let _lowerP_ be ! ToString(ùîΩ(_lower_)).\n            1. Let _lowerValue_ be ! Get(_O_, _lowerP_).\n            1. Let _upperValue_ be ! Get(_O_, _upperP_).\n            1. Perform ! Set(_O_, _lowerP_, _upperValue_, *true*).\n            1. Perform ! Set(_O_, _upperP_, _lowerValue_, *true*).\n            1. Set _lower_ to _lower_ + 1.\n          1. Return _O_.\n        ",
  "INTRINSICS.Object.defineProperty" : "\n          1. If _O_ is not an Object, throw a *TypeError* exception.\n          1. Let _key_ be ? ToPropertyKey(_P_).\n          1. Let _desc_ be ? ToPropertyDescriptor(_Attributes_).\n          1. Perform ? DefinePropertyOrThrow(_O_, _key_, _desc_).\n          1. Return _O_.\n        ",
  "CaseBlock[1,3].LexicallyScopedDeclarations" : "\n        1. If the first |CaseClauses| is present, let _declarations1_ be the LexicallyScopedDeclarations of the first |CaseClauses|.\n        1. Else, let _declarations1_ be a new empty List.\n        1. Let _declarations2_ be LexicallyScopedDeclarations of |DefaultClause|.\n        1. If the second |CaseClauses| is present, let _declarations3_ be the LexicallyScopedDeclarations of the second |CaseClauses|.\n        1. Else, let _declarations3_ be a new empty List.\n        1. Return the list-concatenation of _declarations1_, _declarations2_, and _declarations3_.\n      ",
  "INTRINSICS.Date.prototype.setMilliseconds" : "\n          1. Let _dateObject_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_dateObject_, [[DateValue]]).\n          1. Let _t_ be _dateObject_.[[DateValue]].\n          1. Set _ms_ to ? ToNumber(_ms_).\n          1. If _t_ is *NaN*, return *NaN*.\n          1. Set _t_ to LocalTime(_t_).\n          1. Let _time_ be MakeTime(HourFromTime(_t_), MinFromTime(_t_), SecFromTime(_t_), _ms_).\n          1. Let _u_ be TimeClip(UTC(MakeDate(Day(_t_), _time_))).\n          1. Set _dateObject_.[[DateValue]] to _u_.\n          1. Return _u_.\n        ",
  "INTRINSICS.Date.prototype.toString" : "\n          1. Let _dateObject_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_dateObject_, [[DateValue]]).\n          1. Let _tv_ be _dateObject_.[[DateValue]].\n          1. Return ToDateString(_tv_).\n        ",
  "INTRINSICS.SyntaxError" : null,
  "MemberExpression[4,0].IsDestructuring" : "\n          1. Return *false*.\n        ",
  "QuoteJSONString" : "\n          1. Let _product_ be the String value consisting solely of the code unit 0x0022 (QUOTATION MARK).\n          1. For each code point _C_ of StringToCodePoints(_value_), do\n            1. If _C_ is listed in the ‚ÄúCode Point‚Äù column of <emu-xref href=\"#table-json-single-character-escapes\"></emu-xref>, then\n              1. Set _product_ to the string-concatenation of _product_ and the escape sequence for _C_ as specified in the ‚ÄúEscape Sequence‚Äù column of the corresponding row.\n            1. Else if _C_ has a numeric value less than 0x0020 (SPACE) or _C_ has the same numeric value as a leading surrogate or trailing surrogate, then\n              1. Let _unit_ be the code unit whose numeric value is the numeric value of _C_.\n              1. Set _product_ to the string-concatenation of _product_ and UnicodeEscape(_unit_).\n            1. Else,\n              1. Set _product_ to the string-concatenation of _product_ and UTF16EncodeCodePoint(_C_).\n          1. Set _product_ to the string-concatenation of _product_ and the code unit 0x0022 (QUOTATION MARK).\n          1. Return _product_.\n        ",
  "ObjectBindingPattern[3,1].BoundNames" : "\n        1. Let _names1_ be BoundNames of |BindingPropertyList|.\n        1. Let _names2_ be BoundNames of |BindingRestProperty|.\n        1. Return the list-concatenation of _names1_ and _names2_.\n      ",
  "Term[1,0].CompileSubpattern" : "\n          1. Return CompileAtom of |Atom| with arguments _rer_ and _direction_.\n        ",
  "INTRINSICS.Date.prototype.getUTCMilliseconds" : "\n          1. Let _dateObject_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_dateObject_, [[DateValue]]).\n          1. Let _t_ be _dateObject_.[[DateValue]].\n          1. If _t_ is *NaN*, return *NaN*.\n          1. Return msFromTime(_t_).\n        ",
  "CaseClause[0,1].ContainsUndefinedContinueTarget" : "\n        1. If the |StatementList| is present, return ContainsUndefinedContinueTarget of |StatementList| with arguments _iterationSet_ and ¬´ ¬ª.\n        1. Return *false*.\n      ",
  "ForStatement[1,2].ContainsDuplicateLabels" : "\n        1. Return ContainsDuplicateLabels of |Statement| with argument _labelSet_.\n      ",
  "StrUnsignedDecimalLiteral[3,1].StringNumericValue" : "\n            1. Let _a_ be MV of |DecimalDigits|.\n            1. If |ExponentPart| is present, let _e_ be MV of |ExponentPart|. Otherwise, let _e_ be 0.\n            1. Return RoundMVResult(_a_ √ó 10<sup>_e_</sup>).\n          ",
  "INTRINSICS.DataView.prototype.getBigUint64" : "\n          1. Let _v_ be the *this* value.\n          1. Return ? GetViewValue(_v_, _byteOffset_, _littleEndian_, ~biguint64~).\n        ",
  "INTRINSICS.Array.prototype.find" : "\n          1. Let _O_ be ? ToObject(*this* value).\n          1. Let _len_ be ? LengthOfArrayLike(_O_).\n          1. Let _findRec_ be ? FindViaPredicate(_O_, _len_, ~ascending~, _predicate_, _thisArg_).\n          1. Return _findRec_.[[Value]].\n        ",
  "HasEitherUnicodeFlag" : "\n            1. If _rer_.[[Unicode]] is *true* or _rer_.[[UnicodeSets]] is *true*, then\n              1. Return *true*.\n            1. Return *false*.\n          ",
  "AsyncGeneratorExpression[0,1].HasName" : "\n        1. Return *true*.\n      ",
  "ToBigUint64" : "\n        1. Let _n_ be ? ToBigInt(_argument_).\n        1. Let _int64bit_ be ‚Ñù(_n_) modulo 2<sup>64</sup>.\n        1. Return ‚Ñ§(_int64bit_).\n      ",
  "ExportDeclaration[2,0].Evaluation" : "\n          1. Return ? Evaluation of |VariableStatement|.\n        ",
  "BindingIdentifier[2,0].BoundNames" : "\n        1. Return ¬´ *\"await\"* ¬ª.\n      ",
  "RelationalExpression[7,0].Evaluation" : "\n        1. Let _privateIdentifier_ be the StringValue of |PrivateIdentifier|.\n        1. Let _rref_ be ? Evaluation of |ShiftExpression|.\n        1. Let _rval_ be ? GetValue(_rref_).\n        1. If _rval_ is not an Object, throw a *TypeError* exception.\n        1. Let _privateEnv_ be the running execution context's PrivateEnvironment.\n        1. Let _privateName_ be ResolvePrivateIdentifier(_privateEnv_, _privateIdentifier_).\n        1. If PrivateElementFind(_rval_, _privateName_) is not ~empty~, return *true*.\n        1. Return *false*.\n      ",
  "EnumerableOwnProperties" : "\n        1. Let _ownKeys_ be ? <emu-meta effects=\"user-code\">_O_.[[OwnPropertyKeys]]</emu-meta>().\n        1. Let _results_ be a new empty List.\n        1. For each element _key_ of _ownKeys_, do\n          1. If _key_ is a String, then\n            1. Let _desc_ be ? <emu-meta effects=\"user-code\">_O_.[[GetOwnProperty]]</emu-meta>(_key_).\n            1. If _desc_ is not *undefined* and _desc_.[[Enumerable]] is *true*, then\n              1. If _kind_ is ~key~, then\n                1. Append _key_ to _results_.\n              1. Else,\n                1. Let _value_ be ? Get(_O_, _key_).\n                1. If _kind_ is ~value~, then\n                  1. Append _value_ to _results_.\n                1. Else,\n                  1. Assert: _kind_ is ~key+value~.\n                  1. Let _entry_ be CreateArrayFromList(¬´ _key_, _value_ ¬ª).\n                  1. Append _entry_ to _results_.\n        1. Return _results_.\n      ",
  "FunctionBody[0,0].EvaluateFunctionBody" : "\n        1. Perform ? FunctionDeclarationInstantiation(_functionObject_, _argumentsList_).\n        1. Return ? Evaluation of |FunctionStatementList|.\n      ",
  "ExportDeclaration[5,0].BoundNames" : "\n        1. Let _declarationNames_ be the BoundNames of |ClassDeclaration|.\n        1. If _declarationNames_ does not include the element *\"\\*default\\*\"*, append *\"\\*default\\*\"* to _declarationNames_.\n        1. Return _declarationNames_.\n      ",
  "IfStatement[1,0].ContainsUndefinedContinueTarget" : "\n        1. Return ContainsUndefinedContinueTarget of |Statement| with arguments _iterationSet_ and ¬´ ¬ª.\n      ",
  "ExportDeclaration[5,0].ExportedBindings" : "\n          1. Return the BoundNames of this |ExportDeclaration|.\n        ",
  "AsyncGeneratorExpression[0,0].NamedEvaluation" : "\n        1. Return InstantiateAsyncGeneratorFunctionExpression of |AsyncGeneratorExpression| with argument _name_.\n      ",
  "INTRINSICS.Object.prototype.__lookupGetter__" : "\n            1. Let _O_ be ? ToObject(*this* value).\n            1. Let _key_ be ? ToPropertyKey(_P_).\n            1. Repeat,\n              1. Let _desc_ be ? <emu-meta effects=\"user-code\">_O_.[[GetOwnProperty]]</emu-meta>(_key_).\n              1. If _desc_ is not *undefined*, then\n                1. If IsAccessorDescriptor(_desc_) is *true*, return _desc_.[[Get]].\n                1. Return *undefined*.\n              1. Set _O_ to ? <emu-meta effects=\"user-code\">_O_.[[GetPrototypeOf]]()</emu-meta>.\n              1. If _O_ is *null*, return *undefined*.\n          ",
  "INTRINSICS.String.prototype.charAt" : "\n          1. Let _O_ be ? RequireObjectCoercible(*this* value).\n          1. Let _S_ be ? ToString(_O_).\n          1. Let _position_ be ? ToIntegerOrInfinity(_pos_).\n          1. Let _size_ be the length of _S_.\n          1. If _position_ < 0 or _position_ ‚â• _size_, return the empty String.\n          1. Return the substring of _S_ from _position_ to _position_ + 1.\n        ",
  "INTRINSICS.isFinite" : "\n        1. Let _num_ be ? ToNumber(_number_).\n        1. If _num_ is not finite, return *false*.\n        1. Otherwise, return *true*.\n      ",
  "ForInOfStatement[4,0].ContainsUndefinedContinueTarget" : "\n        1. Return ContainsUndefinedContinueTarget of |Statement| with arguments _iterationSet_ and ¬´ ¬ª.\n      ",
  "ForInOfStatement[4,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "AsyncFunctionExpression[0,1].Evaluation" : "\n        1. Return InstantiateAsyncFunctionExpression of |AsyncFunctionExpression|.\n      ",
  "UnaryExpression[6,0].Evaluation" : "\n          1. Let _expr_ be ? Evaluation of |UnaryExpression|.\n          1. Let _oldValue_ be ? ToNumeric(? GetValue(_expr_)).\n          1. If _oldValue_ is a Number, then\n            1. Return Number::bitwiseNOT(_oldValue_).\n          1. Else,\n            1. Assert: _oldValue_ is a BigInt.\n            1. Return BigInt::bitwiseNOT(_oldValue_).\n        ",
  "LexicalDeclaration[0,0].BoundNames" : "\n        1. Return the BoundNames of |BindingList|.\n      ",
  "CanBeHeldWeakly" : "\n      1. If _v_ is an Object, return *true*.\n      1. If _v_ is a Symbol and KeyForSymbol(_v_) is *undefined*, return *true*.\n      1. Return *false*.\n    ",
  "DoWhileStatement[0,0].DoWhileLoopEvaluation" : "\n          1. Let _V_ be *undefined*.\n          1. Repeat,\n            1. Let _stmtResult_ be Completion(Evaluation of |Statement|).\n            1. If LoopContinues(_stmtResult_, _labelSet_) is *false*, return ? UpdateEmpty(_stmtResult_, _V_).\n            1. If _stmtResult_.[[Value]] is not ~empty~, set _V_ to _stmtResult_.[[Value]].\n            1. Let _exprRef_ be ? Evaluation of |Expression|.\n            1. Let _exprValue_ be ? GetValue(_exprRef_).\n            1. If ToBoolean(_exprValue_) is *false*, return _V_.\n        ",
  "ForStatement[0,3].ContainsDuplicateLabels" : "\n        1. Return ContainsDuplicateLabels of |Statement| with argument _labelSet_.\n      ",
  "StatementList[1,0].HasCallInTailPosition" : "\n        1. Let _has_ be HasCallInTailPosition of |StatementList| with argument _call_.\n        1. If _has_ is *true*, return *true*.\n        1. Return HasCallInTailPosition of |StatementListItem| with argument _call_.\n      ",
  "PropertyName[0,0].IsComputedPropertyKey" : "\n          1. Return *false*.\n        ",
  "MakeTypedArrayWithBufferWitnessRecord" : "\n          1. Let _buffer_ be _obj_.[[ViewedArrayBuffer]].\n          1. If IsDetachedBuffer(_buffer_) is *true*, then\n            1. Let _byteLength_ be ~detached~.\n          1. Else,\n            1. Let _byteLength_ be ArrayBufferByteLength(_buffer_, _order_).\n          1. Return the TypedArray With Buffer Witness Record { [[Object]]: _obj_, [[CachedBufferByteLength]]: _byteLength_ }.\n        ",
  "Record[SourceTextModuleRecord].GetExportedNames" : "\n            1. Assert: _module_.[[Status]] is not ~new~.\n            1. If _exportStarSet_ is not present, set _exportStarSet_ to a new empty List.\n            1. If _exportStarSet_ contains _module_, then\n              1. Assert: We've reached the starting point of an `export *` circularity.\n              1. Return a new empty List.\n            1. Append _module_ to _exportStarSet_.\n            1. Let _exportedNames_ be a new empty List.\n            1. For each ExportEntry Record _e_ of _module_.[[LocalExportEntries]], do\n              1. Assert: _module_ provides the direct binding for this export.\n              1. Assert: _e_.[[ExportName]] is not *null*.\n              1. Append _e_.[[ExportName]] to _exportedNames_.\n            1. For each ExportEntry Record _e_ of _module_.[[IndirectExportEntries]], do\n              1. Assert: _module_ imports a specific binding for this export.\n              1. Assert: _e_.[[ExportName]] is not *null*.\n              1. Append _e_.[[ExportName]] to _exportedNames_.\n            1. For each ExportEntry Record _e_ of _module_.[[StarExportEntries]], do\n              1. Assert: _e_.[[ModuleRequest]] is not *null*.\n              1. Let _requestedModule_ be GetImportedModule(_module_, _e_.[[ModuleRequest]]).\n              1. Let _starNames_ be _requestedModule_.GetExportedNames(_exportStarSet_).\n              1. For each element _n_ of _starNames_, do\n                1. If SameValue(_n_, *\"default\"*) is *false*, then\n                  1. If _exportedNames_ does not contain _n_, then\n                    1. Append _n_ to _exportedNames_.\n            1. Return _exportedNames_.\n          ",
  "AdditiveExpression[2,0].AssignmentTargetType" : "\n        1. Return ~invalid~.\n      ",
  "Record[ProxyExoticObject].Get" : "\n        1. Perform ? ValidateNonRevokedProxy(_O_).\n        1. Let _target_ be _O_.[[ProxyTarget]].\n        1. Let _handler_ be _O_.[[ProxyHandler]].\n        1. Assert: _handler_ is an Object.\n        1. Let _trap_ be ? GetMethod(_handler_, *\"get\"*).\n        1. If _trap_ is *undefined*, then\n          1. Return ? <emu-meta effects=\"user-code\">_target_.[[Get]]</emu-meta>(_P_, _Receiver_).\n        1. Let _trapResult_ be ? Call(_trap_, _handler_, ¬´ _target_, _P_, _Receiver_ ¬ª).\n        1. Let _targetDesc_ be ? <emu-meta effects=\"user-code\">_target_.[[GetOwnProperty]]</emu-meta>(_P_).\n        1. If _targetDesc_ is not *undefined* and _targetDesc_.[[Configurable]] is *false*, then\n          1. If IsDataDescriptor(_targetDesc_) is *true* and _targetDesc_.[[Writable]] is *false*, then\n            1. If SameValue(_trapResult_, _targetDesc_.[[Value]]) is *false*, throw a *TypeError* exception.\n          1. If IsAccessorDescriptor(_targetDesc_) is *true* and _targetDesc_.[[Get]] is *undefined*, then\n            1. If _trapResult_ is not *undefined*, throw a *TypeError* exception.\n        1. Return _trapResult_.\n      ",
  "ToIndex" : "\n        1. Let _integer_ be ? ToIntegerOrInfinity(_value_).\n        1. If _integer_ is not in the inclusive interval from 0 to 2<sup>53</sup> - 1, throw a *RangeError* exception.\n        1. Return _integer_.\n      ",
  "TemplateMiddleList[0,0].TemplateStrings" : "\n          1. Return ¬´ TemplateString(|TemplateMiddle|, _raw_) ¬ª.\n        ",
  "ForInOfStatement[7,0].ForInOfLoopEvaluation" : "\n          1. Let _keyResult_ be ? ForIn/OfHeadEvaluation(¬´ ¬ª, |AssignmentExpression|, ~async-iterate~).\n          1. Return ? ForIn/OfBodyEvaluation(|ForBinding|, |Statement|, _keyResult_, ~iterate~, ~var-binding~, _labelSet_, ~async~).\n        ",
  "TemplateMiddleList[0,0].Evaluation" : "\n          1. Let _head_ be the TV of |TemplateMiddle| as defined in <emu-xref href=\"#sec-template-literal-lexical-components\"></emu-xref>.\n          1. Let _subRef_ be ? Evaluation of |Expression|.\n          1. Let _sub_ be ? GetValue(_subRef_).\n          1. Let _middle_ be ? ToString(_sub_).\n          1. Return the string-concatenation of _head_ and _middle_.\n        ",
  "AsyncGeneratorDrainQueue" : "\n          1. Assert: _generator_.[[AsyncGeneratorState]] is ~completed~.\n          1. Let _queue_ be _generator_.[[AsyncGeneratorQueue]].\n          1. If _queue_ is empty, return ~unused~.\n          1. Let _done_ be *false*.\n          1. Repeat, while _done_ is *false*,\n            1. Let _next_ be the first element of _queue_.\n            1. Let _completion_ be Completion(_next_.[[Completion]]).\n            1. If _completion_ is a return completion, then\n              1. Set _generator_.[[AsyncGeneratorState]] to ~awaiting-return~.\n              1. Perform ! AsyncGeneratorAwaitReturn(_generator_).\n              1. Set _done_ to *true*.\n            1. Else,\n              1. If _completion_ is a normal completion, then\n                1. Set _completion_ to NormalCompletion(*undefined*).\n              1. Perform AsyncGeneratorCompleteStep(_generator_, _completion_, *true*).\n              1. If _queue_ is empty, set _done_ to *true*.\n          1. Return ~unused~.\n        ",
  "ClassEscape[2,0].IsCharacterClass" : "\n          1. Return *true*.\n        ",
  "SymbolDescriptiveString" : "\n            1. Let _desc_ be _sym_'s [[Description]] value.\n            1. If _desc_ is *undefined*, set _desc_ to the empty String.\n            1. Assert: _desc_ is a String.\n            1. Return the string-concatenation of *\"Symbol(\"*, _desc_, and *\")\"*.\n          ",
  "ModuleSpecifier[0,0].ModuleRequests" : "\n          1. Return a List whose sole element is the SV of |StringLiteral|.\n        ",
  "EqualityExpression[4,0].AssignmentTargetType" : "\n        1. Return ~invalid~.\n      ",
  "ClassString[0,0].CompileClassSetString" : "\n          1. Return an empty sequence of characters.\n        ",
  "AsyncFromSyncIteratorContinuation" : "\n          1. NOTE: Because _promiseCapability_ is derived from the intrinsic %Promise%, the calls to _promiseCapability_.[[Reject]] entailed by the use IfAbruptRejectPromise below are guaranteed not to throw.\n          1. Let _done_ be Completion(IteratorComplete(_result_)).\n          1. IfAbruptRejectPromise(_done_, _promiseCapability_).\n          1. Let _value_ be Completion(IteratorValue(_result_)).\n          1. IfAbruptRejectPromise(_value_, _promiseCapability_).\n          1. Let _valueWrapper_ be Completion(PromiseResolve(%Promise%, _value_)).\n          1. IfAbruptRejectPromise(_valueWrapper_, _promiseCapability_).\n          1. Let _unwrap_ be a new Abstract Closure with parameters (_v_) that captures _done_ and performs the following steps when called:\n            1. Return CreateIterResultObject(_v_, _done_).\n          1. Let _onFulfilled_ be CreateBuiltinFunction(_unwrap_, 1, *\"\"*, ¬´ ¬ª).\n          1. NOTE: _onFulfilled_ is used when processing the *\"value\"* property of an IteratorResult object in order to wait for its value if it is a promise and re-package the result in a new \"unwrapped\" IteratorResult object.\n          1. Perform PerformPromiseThen(_valueWrapper_, _onFulfilled_, *undefined*, _promiseCapability_).\n          1. Return _promiseCapability_.[[Promise]].\n        ",
  "AsyncFunctionDeclaration[1,0].Contains" : "\n        1. Return *false*.\n      ",
  "INTRINSICS.WeakSet.prototype.has" : "\n          1. Let _S_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_S_, [[WeakSetData]]).\n          1. If CanBeHeldWeakly(_value_) is *false*, return *false*.\n          1. For each element _e_ of _S_.[[WeakSetData]], do\n            1. If _e_ is not ~empty~ and SameValue(_e_, _value_) is *true*, return *true*.\n          1. Return *false*.\n        ",
  "BigInt::bitwiseXOR" : "\n            1. Return BigIntBitwiseOp(`^`, _x_, _y_).\n          ",
  "Elision[1,0].IteratorDestructuringAssignmentEvaluation" : "\n          1. Perform ? IteratorDestructuringAssignmentEvaluation of |Elision| with argument _iteratorRecord_.\n          1. If _iteratorRecord_.[[Done]] is *false*, then\n            1. Let _next_ be Completion(IteratorStep(_iteratorRecord_)).\n            1. If _next_ is an abrupt completion, set _iteratorRecord_.[[Done]] to *true*.\n            1. ReturnIfAbrupt(_next_).\n            1. If _next_ is *false*, set _iteratorRecord_.[[Done]] to *true*.\n          1. Return ~unused~.\n        ",
  "TypedArrayLength" : "\n          1. Assert: IsTypedArrayOutOfBounds(_taRecord_) is *false*.\n          1. Let _O_ be _taRecord_.[[Object]].\n          1. If _O_.[[ArrayLength]] is not ~auto~, return _O_.[[ArrayLength]].\n          1. Assert: IsFixedLengthArrayBuffer(_O_.[[ViewedArrayBuffer]]) is *false*.\n          1. Let _byteOffset_ be _O_.[[ByteOffset]].\n          1. Let _elementSize_ be TypedArrayElementSize(_O_).\n          1. Let _byteLength_ be _taRecord_.[[CachedBufferByteLength]].\n          1. Assert: _byteLength_ is not ~detached~.\n          1. Return floor((_byteLength_ - _byteOffset_) / _elementSize_).\n        ",
  "Statement[2,0].VarDeclaredNames" : "\n        1. Return a new empty List.\n      ",
  "INTRINSICS.Date.prototype.getMinutes" : "\n          1. Let _dateObject_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_dateObject_, [[DateValue]]).\n          1. Let _t_ be _dateObject_.[[DateValue]].\n          1. If _t_ is *NaN*, return *NaN*.\n          1. Return MinFromTime(LocalTime(_t_)).\n        ",
  "CharacterEscape[0,0].CharacterValue" : "\n          1. Return the numeric value according to <emu-xref href=\"#table-controlescape-code-point-values\"></emu-xref>.\n        ",
  "INTRINSICS.String.prototype.padStart" : "\n          1. Let _O_ be ? RequireObjectCoercible(*this* value).\n          1. Return ? StringPaddingBuiltinsImpl(_O_, _maxLength_, _fillString_, ~start~).\n        ",
  "AsyncGeneratorMethod[0,0].MethodDefinitionEvaluation" : "\n        1. Let _propKey_ be ? Evaluation of |ClassElementName|.\n        1. Let _env_ be the running execution context's LexicalEnvironment.\n        1. Let _privateEnv_ be the running execution context's PrivateEnvironment.\n        1. Let _sourceText_ be the source text matched by |AsyncGeneratorMethod|.\n        1. Let _closure_ be OrdinaryFunctionCreate(%AsyncGeneratorFunction.prototype%, _sourceText_, |UniqueFormalParameters|, |AsyncGeneratorBody|, ~non-lexical-this~, _env_, _privateEnv_).\n        1. Perform MakeMethod(_closure_, _object_).\n        1. Perform SetFunctionName(_closure_, _propKey_).\n        1. Let _prototype_ be OrdinaryObjectCreate(%AsyncGeneratorFunction.prototype.prototype%).\n        1. Perform ! DefinePropertyOrThrow(_closure_, *\"prototype\"*, PropertyDescriptor { [[Value]]: _prototype_, [[Writable]]: *true*, [[Enumerable]]: *false*, [[Configurable]]: *false* }).\n        1. Return ? DefineMethodProperty(_object_, _propKey_, _closure_, _enumerable_).\n      ",
  "ForStatement[1,2].VarScopedDeclarations" : "\n        1. Let _declarations1_ be VarScopedDeclarations of |VariableDeclarationList|.\n        1. Let _declarations2_ be VarScopedDeclarations of |Statement|.\n        1. Return the list-concatenation of _declarations1_ and _declarations2_.\n      ",
  "StrDecimalLiteral[2,0].StringNumericValue" : "\n            1. Let _a_ be StringNumericValue of |StrUnsignedDecimalLiteral|.\n            1. If _a_ is *+0*<sub>ùîΩ</sub>, return *-0*<sub>ùîΩ</sub>.\n            1. Return -_a_.\n          ",
  "RelationalExpression[1,0].IsFunctionDefinition" : "\n        1. Return *false*.\n      ",
  "INTRINSICS.String.prototype.replace" : "\n          1. Let _O_ be ? RequireObjectCoercible(*this* value).\n          1. If _searchValue_ is neither *undefined* nor *null*, then\n            1. Let _replacer_ be ? GetMethod(_searchValue_, @@replace).\n            1. If _replacer_ is not *undefined*, then\n              1. Return ? Call(_replacer_, _searchValue_, ¬´ _O_, _replaceValue_ ¬ª).\n          1. Let _string_ be ? ToString(_O_).\n          1. Let _searchString_ be ? ToString(_searchValue_).\n          1. Let _functionalReplace_ be IsCallable(_replaceValue_).\n          1. If _functionalReplace_ is *false*, then\n            1. Set _replaceValue_ to ? ToString(_replaceValue_).\n          1. Let _searchLength_ be the length of _searchString_.\n          1. Let _position_ be StringIndexOf(_string_, _searchString_, 0).\n          1. If _position_ = -1, return _string_.\n          1. Let _preceding_ be the substring of _string_ from 0 to _position_.\n          1. Let _following_ be the substring of _string_ from _position_ + _searchLength_.\n          1. If _functionalReplace_ is *true*, then\n            1. Let _replacement_ be ? ToString(? Call(_replaceValue_, *undefined*, ¬´ _searchString_, ùîΩ(_position_), _string_ ¬ª)).\n          1. Else,\n            1. Assert: _replaceValue_ is a String.\n            1. Let _captures_ be a new empty List.\n            1. Let _replacement_ be ! GetSubstitution(_searchString_, _string_, _position_, _captures_, *undefined*, _replaceValue_).\n          1. Return the string-concatenation of _preceding_, _replacement_, and _following_.\n        ",
  "ParseScript" : "\n        1. Let _script_ be ParseText(_sourceText_, |Script|).\n        1. If _script_ is a List of errors, return _script_.\n        1. Return Script Record { [[Realm]]: _realm_, [[ECMAScriptCode]]: _script_, [[LoadedModules]]: ¬´ ¬ª, [[HostDefined]]: _hostDefined_ }.\n      ",
  "GeneratorDeclaration[1,0].InstantiateFunctionObject" : "\n        1. Return InstantiateGeneratorFunctionObject of |GeneratorDeclaration| with arguments _env_ and _privateEnv_.\n      ",
  "InternalizeJSONProperty" : "\n          1. Let _val_ be ? Get(_holder_, _name_).\n          1. If _val_ is an Object, then\n            1. Let _isArray_ be ? IsArray(_val_).\n            1. If _isArray_ is *true*, then\n              1. Let _len_ be ? LengthOfArrayLike(_val_).\n              1. Let _I_ be 0.\n              1. Repeat, while _I_ < _len_,\n                1. Let _prop_ be ! ToString(ùîΩ(_I_)).\n                1. Let _newElement_ be ? InternalizeJSONProperty(_val_, _prop_, _reviver_).\n                1. If _newElement_ is *undefined*, then\n                  1. Perform ? <emu-meta effects=\"user-code\">_val_.[[Delete]]</emu-meta>(_prop_).\n                1. Else,\n                  1. Perform ? CreateDataProperty(_val_, _prop_, _newElement_).\n                1. Set _I_ to _I_ + 1.\n            1. Else,\n              1. Let _keys_ be ? EnumerableOwnProperties(_val_, ~key~).\n              1. For each String _P_ of _keys_, do\n                1. Let _newElement_ be ? InternalizeJSONProperty(_val_, _P_, _reviver_).\n                1. If _newElement_ is *undefined*, then\n                  1. Perform ? <emu-meta effects=\"user-code\">_val_.[[Delete]]</emu-meta>(_P_).\n                1. Else,\n                  1. Perform ? CreateDataProperty(_val_, _P_, _newElement_).\n          1. Return ? Call(_reviver_, _holder_, ¬´ _name_, _val_ ¬ª).\n        ",
  "BindingIdentifier[2,0].StringValue" : "\n        1. Return *\"await\"*.\n      ",
  "CaseBlock[1,0].VarScopedDeclarations" : "\n        1. If the first |CaseClauses| is present, let _declarations1_ be the VarScopedDeclarations of the first |CaseClauses|.\n        1. Else, let _declarations1_ be a new empty List.\n        1. Let _declarations2_ be VarScopedDeclarations of |DefaultClause|.\n        1. If the second |CaseClauses| is present, let _declarations3_ be the VarScopedDeclarations of the second |CaseClauses|.\n        1. Else, let _declarations3_ be a new empty List.\n        1. Return the list-concatenation of _declarations1_, _declarations2_, and _declarations3_.\n      ",
  "CallExpression[7,0].AssignmentTargetType" : "\n        1. Return ~simple~.\n      ",
  "TemplateSpans[0,0].Evaluation" : "\n          1. Return the TV of |TemplateTail| as defined in <emu-xref href=\"#sec-template-literal-lexical-components\"></emu-xref>.\n        ",
  "Assertion[5,0].CompileAssertion" : "\n          1. Let _m_ be CompileSubpattern of |Disjunction| with arguments _rer_ and ~forward~.\n          1. Return a new Matcher with parameters (_x_, _c_) that captures _m_ and performs the following steps when called:\n            1. Assert: _x_ is a MatchState.\n            1. Assert: _c_ is a MatcherContinuation.\n            1. Let _d_ be a new MatcherContinuation with parameters (_y_) that captures nothing and performs the following steps when called:\n              1. Assert: _y_ is a MatchState.\n              1. Return _y_.\n            1. Let _r_ be _m_(_x_, _d_).\n            1. If _r_ is not ~failure~, return ~failure~.\n            1. Return _c_(_x_).\n        ",
  "InnerModuleLoading" : "\n              1. Assert: _state_.[[IsLoading]] is *true*.\n              1. If _module_ is a Cyclic Module Record, _module_.[[Status]] is ~new~, and _state_.[[Visited]] does not contain _module_, then\n                1. Append _module_ to _state_.[[Visited]].\n                1. Let _requestedModulesCount_ be the number of elements in _module_.[[RequestedModules]].\n                1. Set _state_.[[PendingModulesCount]] to _state_.[[PendingModulesCount]] + _requestedModulesCount_.\n                1. For each String _required_ of _module_.[[RequestedModules]], do\n                  1. If _module_.[[LoadedModules]] contains a Record whose [[Specifier]] is _required_, then\n                    1. Let _record_ be that Record.\n                    1. Perform InnerModuleLoading(_state_, _record_.[[Module]]).\n                  1. Else,\n                    1. Perform HostLoadImportedModule(_module_, _required_, _state_.[[HostDefined]], _state_).\n                    1. NOTE: HostLoadImportedModule will call FinishLoadingImportedModule, which re-enters the graph loading process through ContinueModuleLoading.\n                  1. If _state_.[[IsLoading]] is *false*, return ~unused~.\n              1. Assert: _state_.[[PendingModulesCount]] ‚â• 1.\n              1. Set _state_.[[PendingModulesCount]] to _state_.[[PendingModulesCount]] - 1.\n              1. If _state_.[[PendingModulesCount]] = 0, then\n                1. Set _state_.[[IsLoading]] to *false*.\n                1. For each Cyclic Module Record _loaded_ of _state_.[[Visited]], do\n                  1. If _loaded_.[[Status]] is ~new~, set _loaded_.[[Status]] to ~unlinked~.\n                1. Perform ! Call(_state_.[[PromiseCapability]].[[Resolve]], *undefined*, ¬´ *undefined* ¬ª).\n              1. Return ~unused~.\n            ",
  "GeneratorExpression[0,1].Evaluation" : "\n        1. Return InstantiateGeneratorFunctionExpression of |GeneratorExpression|.\n      ",
  "Record[SourceTextModuleRecord].InitializeEnvironment" : "\n            1. For each ExportEntry Record _e_ of _module_.[[IndirectExportEntries]], do\n              1. Assert: _e_.[[ExportName]] is not *null*.\n              1. Let _resolution_ be _module_.ResolveExport(_e_.[[ExportName]]).\n              1. If _resolution_ is either *null* or ~ambiguous~, throw a *SyntaxError* exception.\n              1. Assert: _resolution_ is a ResolvedBinding Record.\n            1. Assert: All named exports from _module_ are resolvable.\n            1. Let _realm_ be _module_.[[Realm]].\n            1. Assert: _realm_ is not *undefined*.\n            1. Let _env_ be NewModuleEnvironment(_realm_.[[GlobalEnv]]).\n            1. Set _module_.[[Environment]] to _env_.\n            1. For each ImportEntry Record _in_ of _module_.[[ImportEntries]], do\n              1. Let _importedModule_ be GetImportedModule(_module_, _in_.[[ModuleRequest]]).\n              1. If _in_.[[ImportName]] is ~namespace-object~, then\n                1. Let _namespace_ be GetModuleNamespace(_importedModule_).\n                1. Perform ! _env_.CreateImmutableBinding(_in_.[[LocalName]], *true*).\n                1. Perform ! _env_.InitializeBinding(_in_.[[LocalName]], _namespace_).\n              1. Else,\n                1. Let _resolution_ be _importedModule_.ResolveExport(_in_.[[ImportName]]).\n                1. If _resolution_ is either *null* or ~ambiguous~, throw a *SyntaxError* exception.\n                1. If _resolution_.[[BindingName]] is ~namespace~, then\n                  1. Let _namespace_ be GetModuleNamespace(_resolution_.[[Module]]).\n                  1. Perform ! _env_.CreateImmutableBinding(_in_.[[LocalName]], *true*).\n                  1. Perform ! _env_.InitializeBinding(_in_.[[LocalName]], _namespace_).\n                1. Else,\n                  1. Perform _env_.CreateImportBinding(_in_.[[LocalName]], _resolution_.[[Module]], _resolution_.[[BindingName]]).\n            1. Let _moduleContext_ be a new ECMAScript code execution context.\n            1. Set the Function of _moduleContext_ to *null*.\n            1. Assert: _module_.[[Realm]] is not *undefined*.\n            1. Set the Realm of _moduleContext_ to _module_.[[Realm]].\n            1. Set the ScriptOrModule of _moduleContext_ to _module_.\n            1. Set the VariableEnvironment of _moduleContext_ to _module_.[[Environment]].\n            1. Set the LexicalEnvironment of _moduleContext_ to _module_.[[Environment]].\n            1. Set the PrivateEnvironment of _moduleContext_ to *null*.\n            1. Set _module_.[[Context]] to _moduleContext_.\n            1. Push _moduleContext_ onto the execution context stack; _moduleContext_ is now the running execution context.\n            1. Let _code_ be _module_.[[ECMAScriptCode]].\n            1. Let _varDeclarations_ be the VarScopedDeclarations of _code_.\n            1. Let _declaredVarNames_ be a new empty List.\n            1. For each element _d_ of _varDeclarations_, do\n              1. For each element _dn_ of the BoundNames of _d_, do\n                1. If _declaredVarNames_ does not contain _dn_, then\n                  1. Perform ! _env_.CreateMutableBinding(_dn_, *false*).\n                  1. Perform ! _env_.InitializeBinding(_dn_, *undefined*).\n                  1. Append _dn_ to _declaredVarNames_.\n            1. Let _lexDeclarations_ be the LexicallyScopedDeclarations of _code_.\n            1. Let _privateEnv_ be *null*.\n            1. For each element _d_ of _lexDeclarations_, do\n              1. For each element _dn_ of the BoundNames of _d_, do\n                1. If IsConstantDeclaration of _d_ is *true*, then\n                  1. Perform ! _env_.CreateImmutableBinding(_dn_, *true*).\n                1. Else,\n                  1. Perform ! _env_.CreateMutableBinding(_dn_, *false*).\n                1. If _d_ is either a |FunctionDeclaration|, a |GeneratorDeclaration|, an |AsyncFunctionDeclaration|, or an |AsyncGeneratorDeclaration|, then\n                  1. Let _fo_ be InstantiateFunctionObject of _d_ with arguments _env_ and _privateEnv_.\n                  1. Perform ! _env_.InitializeBinding(_dn_, _fo_).\n            1. Remove _moduleContext_ from the execution context stack.\n            1. Return ~unused~.\n          ",
  "CreateSharedByteDataBlock" : "\n          1. Let _db_ be a new Shared Data Block value consisting of _size_ bytes. If it is impossible to create such a Shared Data Block, throw a *RangeError* exception.\n          1. Let _execution_ be the [[CandidateExecution]] field of the surrounding agent's Agent Record.\n          1. Let _eventsRecord_ be the Agent Events Record of _execution_.[[EventsRecords]] whose [[AgentSignifier]] is AgentSignifier().\n          1. Let _zero_ be ¬´ 0 ¬ª.\n          1. For each index _i_ of _db_, do\n            1. Append WriteSharedMemory { [[Order]]: ~init~, [[NoTear]]: *true*, [[Block]]: _db_, [[ByteIndex]]: _i_, [[ElementSize]]: 1, [[Payload]]: _zero_ } to _eventsRecord_.[[EventList]].\n          1. Return _db_.\n        ",
  "CoalesceExpression[0,0].HasCallInTailPosition" : "\n        1. Return HasCallInTailPosition of |BitwiseORExpression| with argument _call_.\n      ",
  "ModuleItem[1,0].ContainsDuplicateLabels" : "\n        1. Return *false*.\n      ",
  "BitwiseANDExpression[1,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "ExportsList[1,0].ReferencedBindings" : "\n          1. Let _names1_ be the ReferencedBindings of |ExportsList|.\n          1. Let _names2_ be the ReferencedBindings of |ExportSpecifier|.\n          1. Return the list-concatenation of _names1_ and _names2_.\n        ",
  "RelationalExpression[7,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "HostPromiseRejectionTracker" : null,
  "INTRINSICS.Date.prototype.setUTCMilliseconds" : "\n          1. Let _dateObject_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_dateObject_, [[DateValue]]).\n          1. Let _t_ be _dateObject_.[[DateValue]].\n          1. Set _ms_ to ? ToNumber(_ms_).\n          1. If _t_ is *NaN*, return *NaN*.\n          1. Let _time_ be MakeTime(HourFromTime(_t_), MinFromTime(_t_), SecFromTime(_t_), _ms_).\n          1. Let _v_ be TimeClip(MakeDate(Day(_t_), _time_)).\n          1. Set _dateObject_.[[DateValue]] to _v_.\n          1. Return _v_.\n        ",
  "OptionalChain[4,0].AllPrivateIdentifiersValid" : "\n        1. If _names_ contains the StringValue of |PrivateIdentifier|, return *true*.\n        1. Return *false*.\n      ",
  "INTRINSICS.Array.prototype.every" : "\n          1. Let _O_ be ? ToObject(*this* value).\n          1. Let _len_ be ? LengthOfArrayLike(_O_).\n          1. If IsCallable(_callbackfn_) is *false*, throw a *TypeError* exception.\n          1. Let _k_ be 0.\n          1. Repeat, while _k_ < _len_,\n            1. Let _Pk_ be ! ToString(ùîΩ(_k_)).\n            1. Let _kPresent_ be ? HasProperty(_O_, _Pk_).\n            1. If _kPresent_ is *true*, then\n              1. Let _kValue_ be ? Get(_O_, _Pk_).\n              1. Let _testResult_ be ToBoolean(? Call(_callbackfn_, _thisArg_, ¬´ _kValue_, ùîΩ(_k_), _O_ ¬ª)).\n              1. If _testResult_ is *false*, return *false*.\n            1. Set _k_ to _k_ + 1.\n          1. Return *true*.\n        ",
  "__GET_ITEMS__" : null,
  "RelationalExpression[4,0].AssignmentTargetType" : "\n        1. Return ~invalid~.\n      ",
  "EnterCriticalSection" : "\n          1. Assert: The surrounding agent is not in the critical section for any WaiterList Record.\n          1. Wait until no agent is in the critical section for _WL_, then enter the critical section for _WL_ (without allowing any other agent to enter).\n          1. If _WL_.[[MostRecentLeaveEvent]] is not ~empty~, then\n            1. NOTE: A _WL_ whose critical section has been entered at least once has a Synchronize event set by LeaveCriticalSection.\n            1. Let _execution_ be the [[CandidateExecution]] field of the surrounding agent's Agent Record.\n            1. Let _eventsRecord_ be the Agent Events Record of _execution_.[[EventsRecords]] whose [[AgentSignifier]] is AgentSignifier().\n            1. Let _enterEvent_ be a new Synchronize event.\n            1. Append _enterEvent_ to _eventsRecord_.[[EventList]].\n            1. Append (_WL_.[[MostRecentLeaveEvent]], _enterEvent_) to _eventsRecord_.[[AgentSynchronizesWith]].\n          1. Return ~unused~.\n        ",
  "Statement[7,0].VarDeclaredNames" : "\n        1. Return a new empty List.\n      ",
  "ArrayBufferByteLength" : "\n          1. If IsSharedArrayBuffer(_arrayBuffer_) is *true* and _arrayBuffer_ has an [[ArrayBufferByteLengthData]] internal slot, then\n            1. Let _bufferByteLengthBlock_ be _arrayBuffer_.[[ArrayBufferByteLengthData]].\n            1. Let _rawLength_ be GetRawBytesFromSharedBlock(_bufferByteLengthBlock_, 0, ~biguint64~, *true*, _order_).\n            1. Let _isLittleEndian_ be the value of the [[LittleEndian]] field of the surrounding agent's Agent Record.\n            1. Return ‚Ñù(RawBytesToNumeric(~biguint64~, _rawLength_, _isLittleEndian_)).\n          1. Assert: IsDetachedBuffer(_arrayBuffer_) is *false*.\n          1. Return _arrayBuffer_.[[ArrayBufferByteLength]].\n        ",
  "EqualityExpression[3,0].Evaluation" : "\n        1. Let _lref_ be ? Evaluation of |EqualityExpression|.\n        1. Let _lval_ be ? GetValue(_lref_).\n        1. Let _rref_ be ? Evaluation of |RelationalExpression|.\n        1. Let _rval_ be ? GetValue(_rref_).\n        1. Return IsStrictlyEqual(_rval_, _lval_).\n      ",
  "ConditionalExpression[1,0].AssignmentTargetType" : "\n        1. Return ~invalid~.\n      ",
  "AsyncGeneratorMethod[0,0].PropName" : "\n        1. Return PropName of |ClassElementName|.\n      ",
  "SwitchStatement[0,0].HasCallInTailPosition" : "\n        1. Return HasCallInTailPosition of |CaseBlock| with argument _call_.\n      ",
  "SameValueZero" : "\n        1. If Type(_x_) is not Type(_y_), return *false*.\n        1. If _x_ is a Number, then\n          1. Return Number::sameValueZero(_x_, _y_).\n        1. Return SameValueNonNumber(_x_, _y_).\n      ",
  "CaseBlock[1,1].ContainsDuplicateLabels" : "\n        1. If the first |CaseClauses| is present, then\n          1. If ContainsDuplicateLabels of the first |CaseClauses| with argument _labelSet_ is *true*, return *true*.\n        1. If ContainsDuplicateLabels of |DefaultClause| with argument _labelSet_ is *true*, return *true*.\n        1. If the second |CaseClauses| is not present, return *false*.\n        1. Return ContainsDuplicateLabels of the second |CaseClauses| with argument _labelSet_.\n      ",
  "Atom[5,0].CompileAtom" : "\n          1. Return CompileSubpattern of |Disjunction| with arguments _rer_ and _direction_.\n        ",
  "OptionalExpression[0,0].Evaluation" : "\n          1. Let _baseReference_ be ? Evaluation of |MemberExpression|.\n          1. Let _baseValue_ be ? GetValue(_baseReference_).\n          1. If _baseValue_ is either *undefined* or *null*, then\n            1. Return *undefined*.\n          1. Return ? ChainEvaluation of |OptionalChain| with arguments _baseValue_ and _baseReference_.\n        ",
  "Statement[6,0].ContainsDuplicateLabels" : "\n        1. Return *false*.\n      ",
  "INTRINSICS.ArrayIteratorPrototype.next" : "\n            1. Return ? GeneratorResume(*this* value, ~empty~, *\"%ArrayIteratorPrototype%\"*).\n          ",
  "GetArrayBufferMaxByteLengthOption" : "\n          1. If _options_ is not an Object, return ~empty~.\n          1. Let _maxByteLength_ be ? Get(_options_, *\"maxByteLength\"*).\n          1. If _maxByteLength_ is *undefined*, return ~empty~.\n          1. Return ? ToIndex(_maxByteLength_).\n        ",
  "ClassTail[0,3].ClassDefinitionEvaluation:clo0" : "\n        1. Let _env_ be the LexicalEnvironment of the running execution context.\n        1. Let _classEnv_ be NewDeclarativeEnvironment(_env_).\n        1. If _classBinding_ is not *undefined*, then\n          1. Perform ! _classEnv_.CreateImmutableBinding(_classBinding_, *true*).\n        1. Let _outerPrivateEnvironment_ be the running execution context's PrivateEnvironment.\n        1. Let _classPrivateEnvironment_ be NewPrivateEnvironment(_outerPrivateEnvironment_).\n        1. If |ClassBody| is present, then\n          1. For each String _dn_ of the PrivateBoundIdentifiers of |ClassBody|, do\n            1. If _classPrivateEnvironment_.[[Names]] contains a Private Name _pn_ such that _pn_.[[Description]] is _dn_, then\n              1. Assert: This is only possible for getter/setter pairs.\n            1. Else,\n              1. Let _name_ be a new Private Name whose [[Description]] is _dn_.\n              1. Append _name_ to _classPrivateEnvironment_.[[Names]].\n        1. If |ClassHeritage| is not present, then\n          1. Let _protoParent_ be %Object.prototype%.\n          1. Let _constructorParent_ be %Function.prototype%.\n        1. Else,\n          1. Set the running execution context's LexicalEnvironment to _classEnv_.\n          1. NOTE: The running execution context's PrivateEnvironment is _outerPrivateEnvironment_ when evaluating |ClassHeritage|.\n          1. Let _superclassRef_ be Completion(Evaluation of |ClassHeritage|).\n          1. Set the running execution context's LexicalEnvironment to _env_.\n          1. Let _superclass_ be ? GetValue(? _superclassRef_).\n          1. If _superclass_ is *null*, then\n            1. Let _protoParent_ be *null*.\n            1. Let _constructorParent_ be %Function.prototype%.\n          1. Else if IsConstructor(_superclass_) is *false*, then\n            1. Throw a *TypeError* exception.\n          1. Else,\n            1. Let _protoParent_ be ? Get(_superclass_, *\"prototype\"*).\n            1. If _protoParent_ is not an Object and _protoParent_ is not *null*, throw a *TypeError* exception.\n            1. Let _constructorParent_ be _superclass_.\n        1. Let _proto_ be OrdinaryObjectCreate(_protoParent_).\n        1. If |ClassBody| is not present, let _constructor_ be ~empty~.\n        1. Else, let _constructor_ be ConstructorMethod of |ClassBody|.\n        1. Set the running execution context's LexicalEnvironment to _classEnv_.\n        1. Set the running execution context's PrivateEnvironment to _classPrivateEnvironment_.\n        1. If _constructor_ is ~empty~, then\n          1. Let _defaultConstructor_ be a new Abstract Closure with no parameters that captures nothing and performs the following steps when called:\n            1. Let _args_ be the List of arguments that was passed to this function by [[Call]] or [[Construct]].\n            1. If NewTarget is *undefined*, throw a *TypeError* exception.\n            1. Let _F_ be the active function object.\n            1. If _F_.[[ConstructorKind]] is ~derived~, then\n              1. NOTE: This branch behaves similarly to `constructor(...args) { super(...args); }`. The most notable distinction is that while the aforementioned ECMAScript source text observably calls the @@iterator method on `%Array.prototype%`, this function does not.\n              1. Let _func_ be ! _F_.[[GetPrototypeOf]]().\n              1. If IsConstructor(_func_) is *false*, throw a *TypeError* exception.\n              1. Let _result_ be ? Construct(_func_, _args_, NewTarget).\n            1. Else,\n              1. NOTE: This branch behaves similarly to `constructor() {}`.\n              1. Let _result_ be ? OrdinaryCreateFromConstructor(NewTarget, *\"%Object.prototype%\"*).\n            1. Perform ? InitializeInstanceElements(_result_, _F_).\n            1. Return _result_.\n          1. Let _F_ be CreateBuiltinFunction(_defaultConstructor_, 0, _className_, ¬´ [[ConstructorKind]], [[SourceText]] ¬ª, the current Realm Record, _constructorParent_).\n        1. Else,\n          1. Let _constructorInfo_ be ! DefineMethod of _constructor_ with arguments _proto_ and _constructorParent_.\n          1. Let _F_ be _constructorInfo_.[[Closure]].\n          1. Perform MakeClassConstructor(_F_).\n          1. Perform SetFunctionName(_F_, _className_).\n        1. Perform MakeConstructor(_F_, *false*, _proto_).\n        1. If |ClassHeritage| is present, set _F_.[[ConstructorKind]] to ~derived~.\n        1. Perform ! DefineMethodProperty(_proto_, *\"constructor\"*, _F_, *false*).\n        1. If |ClassBody| is not present, let _elements_ be a new empty List.\n        1. Else, let _elements_ be NonConstructorElements of |ClassBody|.\n        1. Let _instancePrivateMethods_ be a new empty List.\n        1. Let _staticPrivateMethods_ be a new empty List.\n        1. Let _instanceFields_ be a new empty List.\n        1. Let _staticElements_ be a new empty List.\n        1. For each |ClassElement| _e_ of _elements_, do\n          1. If IsStatic of _e_ is *false*, then\n            1. Let _element_ be Completion(ClassElementEvaluation of _e_ with argument _proto_).\n          1. Else,\n            1. Let _element_ be Completion(ClassElementEvaluation of _e_ with argument _F_).\n          1. If _element_ is an abrupt completion, then\n            1. Set the running execution context's LexicalEnvironment to _env_.\n            1. Set the running execution context's PrivateEnvironment to _outerPrivateEnvironment_.\n            1. Return ? _element_.\n          1. Set _element_ to ! _element_.\n          1. If _element_ is a PrivateElement, then\n            1. Assert: _element_.[[Kind]] is either ~method~ or ~accessor~.\n            1. If IsStatic of _e_ is *false*, let _container_ be _instancePrivateMethods_.\n            1. Else, let _container_ be _staticPrivateMethods_.\n            1. If _container_ contains a PrivateElement _pe_ such that _pe_.[[Key]] is _element_.[[Key]], then\n              1. Assert: _element_.[[Kind]] and _pe_.[[Kind]] are both ~accessor~.\n              1. If _element_.[[Get]] is *undefined*, then\n                1. Let _combined_ be PrivateElement { [[Key]]: _element_.[[Key]], [[Kind]]: ~accessor~, [[Get]]: _pe_.[[Get]], [[Set]]: _element_.[[Set]] }.\n              1. Else,\n                1. Let _combined_ be PrivateElement { [[Key]]: _element_.[[Key]], [[Kind]]: ~accessor~, [[Get]]: _element_.[[Get]], [[Set]]: _pe_.[[Set]] }.\n              1. Replace _pe_ in _container_ with _combined_.\n            1. Else,\n              1. Append _element_ to _container_.\n          1. Else if _element_ is a ClassFieldDefinition Record, then\n            1. If IsStatic of _e_ is *false*, append _element_ to _instanceFields_.\n            1. Else, append _element_ to _staticElements_.\n          1. Else if _element_ is a ClassStaticBlockDefinition Record, then\n            1. Append _element_ to _staticElements_.\n        1. Set the running execution context's LexicalEnvironment to _env_.\n        1. If _classBinding_ is not *undefined*, then\n          1. Perform ! _classEnv_.InitializeBinding(_classBinding_, _F_).\n        1. Set _F_.[[PrivateMethods]] to _instancePrivateMethods_.\n        1. Set _F_.[[Fields]] to _instanceFields_.\n        1. For each PrivateElement _method_ of _staticPrivateMethods_, do\n          1. Perform ! PrivateMethodOrAccessorAdd(_F_, _method_).\n        1. For each element _elementRecord_ of _staticElements_, do\n          1. If _elementRecord_ is a ClassFieldDefinition Record, then\n            1. Let _result_ be Completion(DefineField(_F_, _elementRecord_)).\n          1. Else,\n            1. Assert: _elementRecord_ is a ClassStaticBlockDefinition Record.\n            1. Let _result_ be Completion(Call(_elementRecord_.[[BodyFunction]], _F_)).\n          1. If _result_ is an abrupt completion, then\n            1. Set the running execution context's PrivateEnvironment to _outerPrivateEnvironment_.\n            1. Return ? _result_.\n        1. Set the running execution context's PrivateEnvironment to _outerPrivateEnvironment_.\n        1. Return _F_.\n      ",
  "Record[DeclarativeEnvironmentRecord].CreateImmutableBinding" : "\n            1. Assert: _envRec_ does not already have a binding for _N_.\n            1. Create an immutable binding in _envRec_ for _N_ and record that it is uninitialized. If _S_ is *true*, record that the newly created binding is a strict binding.\n            1. Return ~unused~.\n          ",
  "GetGeneratorKind" : "\n          1. Let _genContext_ be the running execution context.\n          1. If _genContext_ does not have a Generator component, return ~non-generator~.\n          1. Let _generator_ be the Generator component of _genContext_.\n          1. If _generator_ has an [[AsyncGeneratorState]] internal slot, return ~async~.\n          1. Else, return ~sync~.\n        ",
  "CaseBlock[1,3].VarScopedDeclarations" : "\n        1. If the first |CaseClauses| is present, let _declarations1_ be the VarScopedDeclarations of the first |CaseClauses|.\n        1. Else, let _declarations1_ be a new empty List.\n        1. Let _declarations2_ be VarScopedDeclarations of |DefaultClause|.\n        1. If the second |CaseClauses| is present, let _declarations3_ be the VarScopedDeclarations of the second |CaseClauses|.\n        1. Else, let _declarations3_ be a new empty List.\n        1. Return the list-concatenation of _declarations1_, _declarations2_, and _declarations3_.\n      ",
  "TryStatement[0,0].ContainsDuplicateLabels" : "\n        1. Let _hasDuplicates_ be ContainsDuplicateLabels of |Block| with argument _labelSet_.\n        1. If _hasDuplicates_ is *true*, return *true*.\n        1. Return ContainsDuplicateLabels of |Catch| with argument _labelSet_.\n      ",
  "INTRINSICS.WeakRef.prototype.deref" : "\n          1. Let _weakRef_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_weakRef_, [[WeakRefTarget]]).\n          1. Return WeakRefDeref(_weakRef_).\n        ",
  "INTRINSICS.TypedArray.prototype.includes" : "\n          1. Let _O_ be the *this* value.\n          1. Let _taRecord_ be ? ValidateTypedArray(_O_, ~seq-cst~).\n          1. Let _len_ be TypedArrayLength(_taRecord_).\n          1. If _len_ = 0, return *false*.\n          1. Let _n_ be ? ToIntegerOrInfinity(_fromIndex_).\n          1. Assert: If _fromIndex_ is *undefined*, then _n_ is 0.\n          1. If _n_ = +‚àû, return *false*.\n          1. Else if _n_ = -‚àû, set _n_ to 0.\n          1. If _n_ ‚â• 0, then\n            1. Let _k_ be _n_.\n          1. Else,\n            1. Let _k_ be _len_ + _n_.\n            1. If _k_ < 0, set _k_ to 0.\n          1. Repeat, while _k_ < _len_,\n            1. Let _elementK_ be ! Get(_O_, ! ToString(ùîΩ(_k_))).\n            1. If SameValueZero(_searchElement_, _elementK_) is *true*, return *true*.\n            1. Set _k_ to _k_ + 1.\n          1. Return *false*.\n        ",
  "MultiplicativeExpression[1,0].AssignmentTargetType" : "\n        1. Return ~invalid~.\n      ",
  "ClassExpression[0,1].HasName" : "\n        1. Return *true*.\n      ",
  "DateString" : "\n            1. Let _weekday_ be the Name of the entry in <emu-xref href=\"#sec-todatestring-day-names\"></emu-xref> with the Number WeekDay(_tv_).\n            1. Let _month_ be the Name of the entry in <emu-xref href=\"#sec-todatestring-month-names\"></emu-xref> with the Number MonthFromTime(_tv_).\n            1. Let _day_ be ToZeroPaddedDecimalString(‚Ñù(DateFromTime(_tv_)), 2).\n            1. Let _yv_ be YearFromTime(_tv_).\n            1. If _yv_ is *+0*<sub>ùîΩ</sub> or _yv_ > *+0*<sub>ùîΩ</sub>, let _yearSign_ be the empty String; otherwise, let _yearSign_ be *\"-\"*.\n            1. Let _paddedYear_ be ToZeroPaddedDecimalString(abs(‚Ñù(_yv_)), 4).\n            1. Return the string-concatenation of _weekday_, the code unit 0x0020 (SPACE), _month_, the code unit 0x0020 (SPACE), _day_, the code unit 0x0020 (SPACE), _yearSign_, and _paddedYear_.\n          ",
  "INTRINSICS.Date.prototype.getFullYear" : "\n          1. Let _dateObject_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_dateObject_, [[DateValue]]).\n          1. Let _t_ be _dateObject_.[[DateValue]].\n          1. If _t_ is *NaN*, return *NaN*.\n          1. Return YearFromTime(LocalTime(_t_)).\n        ",
  "BitwiseANDExpression[1,0].Evaluation" : "\n        1. Return ? EvaluateStringOrNumericBinaryExpression(|BitwiseANDExpression|, `&`, |EqualityExpression|).\n      ",
  "ClassStringDisjunctionContents[1,0].CompileToCharSet" : "\n          1. Let _s_ be CompileClassSetString of |ClassString| with argument _rer_.\n          1. Let _A_ be the CharSet containing the one string _s_.\n          1. Let _B_ be CompileToCharSet of |ClassStringDisjunctionContents| with argument _rer_.\n          1. Return the union of CharSets _A_ and _B_.\n        ",
  "INTRINSICS.Date" : "\n          1. If NewTarget is *undefined*, then\n            1. Let _now_ be the time value (UTC) identifying the current time.\n            1. Return ToDateString(_now_).\n          1. Let _numberOfArgs_ be the number of elements in _values_.\n          1. If _numberOfArgs_ = 0, then\n            1. Let _dv_ be the time value (UTC) identifying the current time.\n          1. Else if _numberOfArgs_ = 1, then\n            1. Let _value_ be _values_[0].\n            1. If _value_ is an Object and _value_ has a [[DateValue]] internal slot, then\n              1. Let _tv_ be _value_.[[DateValue]].\n            1. Else,\n              1. Let _v_ be ? ToPrimitive(_value_).\n              1. If _v_ is a String, then\n                1. Assert: The next step never returns an abrupt completion because _v_ is a String.\n                1. Let _tv_ be the result of parsing _v_ as a date, in exactly the same manner as for the `parse` method (<emu-xref href=\"#sec-date.parse\"></emu-xref>).\n              1. Else,\n                1. Let _tv_ be ? ToNumber(_v_).\n            1. Let _dv_ be TimeClip(_tv_).\n          1. Else,\n            1. Assert: _numberOfArgs_ ‚â• 2.\n            1. Let _y_ be ? ToNumber(_values_[0]).\n            1. Let _m_ be ? ToNumber(_values_[1]).\n            1. If _numberOfArgs_ > 2, let _dt_ be ? ToNumber(_values_[2]); else let _dt_ be *1*<sub>ùîΩ</sub>.\n            1. If _numberOfArgs_ > 3, let _h_ be ? ToNumber(_values_[3]); else let _h_ be *+0*<sub>ùîΩ</sub>.\n            1. If _numberOfArgs_ > 4, let _min_ be ? ToNumber(_values_[4]); else let _min_ be *+0*<sub>ùîΩ</sub>.\n            1. If _numberOfArgs_ > 5, let _s_ be ? ToNumber(_values_[5]); else let _s_ be *+0*<sub>ùîΩ</sub>.\n            1. If _numberOfArgs_ > 6, let _milli_ be ? ToNumber(_values_[6]); else let _milli_ be *+0*<sub>ùîΩ</sub>.\n            1. Let _yr_ be MakeFullYear(_y_).\n            1. Let _finalDate_ be MakeDate(MakeDay(_yr_, _m_, _dt_), MakeTime(_h_, _min_, _s_, _milli_)).\n            1. Let _dv_ be TimeClip(UTC(_finalDate_)).\n          1. Let _O_ be ? OrdinaryCreateFromConstructor(NewTarget, *\"%Date.prototype%\"*, ¬´ [[DateValue]] ¬ª).\n          1. Set _O_.[[DateValue]] to _dv_.\n          1. Return _O_.\n        ",
  "ForInOfStatement[6,0].ContainsDuplicateLabels" : "\n        1. Return ContainsDuplicateLabels of |Statement| with argument _labelSet_.\n      ",
  "IteratorToList" : "\n        1. Let _values_ be a new empty List.\n        1. Repeat,\n          1. Let _next_ be ? IteratorStepValue(_iteratorRecord_).\n          1. If _next_ is ~done~, then\n            1. Return _values_.\n          1. Append _next_ to _values_.\n      ",
  "MemberExpression[7,0].Evaluation" : "\n          1. Let _baseReference_ be ? Evaluation of |MemberExpression|.\n          1. Let _baseValue_ be ? GetValue(_baseReference_).\n          1. Let _fieldNameString_ be the StringValue of |PrivateIdentifier|.\n          1. Return MakePrivateReference(_baseValue_, _fieldNameString_).\n        ",
  "ForStatement[2,3].ForLoopEvaluation" : "\n          1. Let _oldEnv_ be the running execution context's LexicalEnvironment.\n          1. Let _loopEnv_ be NewDeclarativeEnvironment(_oldEnv_).\n          1. Let _isConst_ be IsConstantDeclaration of |LexicalDeclaration|.\n          1. Let _boundNames_ be the BoundNames of |LexicalDeclaration|.\n          1. For each element _dn_ of _boundNames_, do\n            1. If _isConst_ is *true*, then\n              1. Perform ! _loopEnv_.CreateImmutableBinding(_dn_, *true*).\n            1. Else,\n              1. Perform ! _loopEnv_.CreateMutableBinding(_dn_, *false*).\n          1. Set the running execution context's LexicalEnvironment to _loopEnv_.\n          1. Let _forDcl_ be Completion(Evaluation of |LexicalDeclaration|).\n          1. If _forDcl_ is an abrupt completion, then\n            1. Set the running execution context's LexicalEnvironment to _oldEnv_.\n            1. Return ? _forDcl_.\n          1. If _isConst_ is *false*, let _perIterationLets_ be _boundNames_; otherwise let _perIterationLets_ be a new empty List.\n          1. If the first |Expression| is present, let _test_ be the first |Expression|; otherwise, let _test_ be ~empty~.\n          1. If the second |Expression| is present, let _increment_ be the second |Expression|; otherwise, let _increment_ be ~empty~.\n          1. Let _bodyResult_ be Completion(ForBodyEvaluation(_test_, _increment_, |Statement|, _perIterationLets_, _labelSet_)).\n          1. Set the running execution context's LexicalEnvironment to _oldEnv_.\n          1. Return ? _bodyResult_.\n        ",
  "ForBodyEvaluation" : "\n          1. Let _V_ be *undefined*.\n          1. Perform ? CreatePerIterationEnvironment(_perIterationBindings_).\n          1. Repeat,\n            1. If _test_ is not ~empty~, then\n              1. Let _testRef_ be ? Evaluation of _test_.\n              1. Let _testValue_ be ? GetValue(_testRef_).\n              1. If ToBoolean(_testValue_) is *false*, return _V_.\n            1. Let _result_ be Completion(Evaluation of _stmt_).\n            1. If LoopContinues(_result_, _labelSet_) is *false*, return ? UpdateEmpty(_result_, _V_).\n            1. If _result_.[[Value]] is not ~empty~, set _V_ to _result_.[[Value]].\n            1. Perform ? CreatePerIterationEnvironment(_perIterationBindings_).\n            1. If _increment_ is not ~empty~, then\n              1. Let _incRef_ be ? Evaluation of _increment_.\n              1. Perform ? GetValue(_incRef_).\n        ",
  "GroupName[0,0].CapturingGroupName" : "\n          1. Let _idTextUnescaped_ be RegExpIdentifierCodePoints of |RegExpIdentifierName|.\n          1. Return CodePointsToString(_idTextUnescaped_).\n        ",
  "RegularExpressionLiteral[0,0].BodyText" : "\n          1. Return the source text that was recognized as |RegularExpressionBody|.\n        ",
  "Alternative[0,0].CompileSubpattern" : "\n          1. Return EmptyMatcher().\n        ",
  "INTRINSICS.Array.prototype.indexOf" : "\n          1. Let _O_ be ? ToObject(*this* value).\n          1. Let _len_ be ? LengthOfArrayLike(_O_).\n          1. If _len_ = 0, return *-1*<sub>ùîΩ</sub>.\n          1. Let _n_ be ? ToIntegerOrInfinity(_fromIndex_).\n          1. Assert: If _fromIndex_ is *undefined*, then _n_ is 0.\n          1. If _n_ = +‚àû, return *-1*<sub>ùîΩ</sub>.\n          1. Else if _n_ = -‚àû, set _n_ to 0.\n          1. If _n_ ‚â• 0, then\n            1. Let _k_ be _n_.\n          1. Else,\n            1. Let _k_ be _len_ + _n_.\n            1. If _k_ < 0, set _k_ to 0.\n          1. Repeat, while _k_ < _len_,\n            1. Let _kPresent_ be ? HasProperty(_O_, ! ToString(ùîΩ(_k_))).\n            1. If _kPresent_ is *true*, then\n              1. Let _elementK_ be ? Get(_O_, ! ToString(ùîΩ(_k_))).\n              1. If IsStrictlyEqual(_searchElement_, _elementK_) is *true*, return ùîΩ(_k_).\n            1. Set _k_ to _k_ + 1.\n          1. Return *-1*<sub>ùîΩ</sub>.\n        ",
  "AsyncGeneratorExpression[0,0].ContainsArguments" : "\n        1. Return *false*.\n      ",
  "Record[ModuleNamespaceExoticObject].Set" : "\n          1. Return *false*.\n        ",
  "Assertion[2,0].CompileAssertion" : "\n          1. Return a new Matcher with parameters (_x_, _c_) that captures _rer_ and performs the following steps when called:\n            1. Assert: _x_ is a MatchState.\n            1. Assert: _c_ is a MatcherContinuation.\n            1. Let _Input_ be _x_.[[Input]].\n            1. Let _e_ be _x_.[[EndIndex]].\n            1. Let _a_ be IsWordChar(_rer_, _Input_, _e_ - 1).\n            1. Let _b_ be IsWordChar(_rer_, _Input_, _e_).\n            1. If _a_ is *true* and _b_ is *false*, or if _a_ is *false* and _b_ is *true*, return _c_(_x_).\n            1. Return ~failure~.\n        ",
  "Statement[11,0].ContainsDuplicateLabels" : "\n        1. Return *false*.\n      ",
  "ToNumeric" : "\n        1. Let _primValue_ be ? ToPrimitive(_value_, ~number~).\n        1. If _primValue_ is a BigInt, return _primValue_.\n        1. Return ? <emu-meta suppress-effects=\"user-code\">ToNumber(_primValue_)</emu-meta>.\n      ",
  "SpeciesConstructor" : "\n        1. Let _C_ be ? Get(_O_, *\"constructor\"*).\n        1. If _C_ is *undefined*, return _defaultConstructor_.\n        1. If _C_ is not an Object, throw a *TypeError* exception.\n        1. Let _S_ be ? Get(_C_, @@species).\n        1. If _S_ is either *undefined* or *null*, return _defaultConstructor_.\n        1. If IsConstructor(_S_) is *true*, return _S_.\n        1. Throw a *TypeError* exception.\n      ",
  "INTRINSICS.String.prototype.repeat" : "\n          1. Let _O_ be ? RequireObjectCoercible(*this* value).\n          1. Let _S_ be ? ToString(_O_).\n          1. Let _n_ be ? ToIntegerOrInfinity(_count_).\n          1. If _n_ < 0 or _n_ = +‚àû, throw a *RangeError* exception.\n          1. If _n_ = 0, return the empty String.\n          1. Return the String value that is made from _n_ copies of _S_ appended together.\n        ",
  "InitializeTypedArrayFromList" : "\n            1. Let _len_ be the number of elements in _values_.\n            1. Perform ? AllocateTypedArrayBuffer(_O_, _len_).\n            1. Let _k_ be 0.\n            1. Repeat, while _k_ < _len_,\n              1. Let _Pk_ be ! ToString(ùîΩ(_k_)).\n              1. Let _kValue_ be the first element of _values_.\n              1. Remove the first element from _values_.\n              1. Perform ? Set(_O_, _Pk_, _kValue_, *true*).\n              1. Set _k_ to _k_ + 1.\n            1. Assert: _values_ is now an empty List.\n            1. Return ~unused~.\n          ",
  "AsyncArrowFunction[1,0].HasName" : "\n        1. Return *false*.\n      ",
  "CharacterClass[0,0].CompileCharacterClass" : "\n          1. Let _A_ be CompileToCharSet of |ClassContents| with argument _rer_.\n          1. Return the Record { [[CharSet]]: _A_, [[Invert]]: *false* }.\n        ",
  "Record[ModuleNamespaceExoticObject].Delete" : "\n          1. If _P_ is a Symbol, then\n            1. Return ! OrdinaryDelete(_O_, _P_).\n          1. Let _exports_ be _O_.[[Exports]].\n          1. If _exports_ contains _P_, return *false*.\n          1. Return *true*.\n        ",
  "Record[ObjectEnvironmentRecord].HasBinding" : "\n            1. Let _bindingObject_ be _envRec_.[[BindingObject]].\n            1. Let _foundBinding_ be ? HasProperty(_bindingObject_, _N_).\n            1. If _foundBinding_ is *false*, return *false*.\n            1. If _envRec_.[[IsWithEnvironment]] is *false*, return *true*.\n            1. Let _unscopables_ be ? Get(_bindingObject_, @@unscopables).\n            1. If _unscopables_ is an Object, then\n              1. Let _blocked_ be ToBoolean(? Get(_unscopables_, _N_)).\n              1. If _blocked_ is *true*, return *false*.\n            1. Return *true*.\n          ",
  "Module[0,0].LexicallyScopedDeclarations" : "\n        1. Return a new empty List.\n      ",
  "INTRINSICS.Math.clz32" : "\n          1. Let _n_ be ? ToUint32(_x_).\n          1. Let _p_ be the number of leading zero bits in the unsigned 32-bit binary representation of _n_.\n          1. Return ùîΩ(_p_).\n        ",
  "ForInOfStatement[1,0].VarScopedDeclarations" : "\n        1. Let _declarations1_ be ¬´ |ForBinding| ¬ª.\n        1. Let _declarations2_ be VarScopedDeclarations of |Statement|.\n        1. Return the list-concatenation of _declarations1_ and _declarations2_.\n      ",
  "INTRINSICS.Function.prototype[@@hasInstance]" : "\n          1. Let _F_ be the *this* value.\n          1. Return ? OrdinaryHasInstance(_F_, _V_).\n        ",
  "Arguments[0,0].ArgumentListEvaluation" : "\n          1. Return a new empty List.\n        ",
  "INTRINSICS.Promise.race" : "\n          1. Let _C_ be the *this* value.\n          1. Let _promiseCapability_ be ? NewPromiseCapability(_C_).\n          1. Let _promiseResolve_ be Completion(GetPromiseResolve(_C_)).\n          1. IfAbruptRejectPromise(_promiseResolve_, _promiseCapability_).\n          1. Let _iteratorRecord_ be Completion(GetIterator(_iterable_, ~sync~)).\n          1. IfAbruptRejectPromise(_iteratorRecord_, _promiseCapability_).\n          1. Let _result_ be Completion(PerformPromiseRace(_iteratorRecord_, _C_, _promiseCapability_, _promiseResolve_)).\n          1. If _result_ is an abrupt completion, then\n            1. If _iteratorRecord_.[[Done]] is *false*, set _result_ to Completion(IteratorClose(_iteratorRecord_, _result_)).\n            1. IfAbruptRejectPromise(_result_, _promiseCapability_).\n          1. Return ? _result_.\n        ",
  "CallExpression[2,0].AssignmentTargetType" : "\n        1. Return ~invalid~.\n      ",
  "Statement[3,0].ContainsUndefinedBreakTarget" : "\n        1. Return *false*.\n      ",
  "ForStatement[2,1].HasCallInTailPosition" : "\n        1. Return HasCallInTailPosition of |Statement| with argument _call_.\n      ",
  "INTRINSICS.Atomics.or" : "\n        1. Let _or_ be a new read-modify-write modification function with parameters (_xBytes_, _yBytes_) that captures nothing and performs the following steps atomically when called:\n          1. Return ByteListBitwiseOp(`|`, _xBytes_, _yBytes_).\n        1. Return ? AtomicReadModifyWrite(_typedArray_, _index_, _value_, _or_).\n      ",
  "AssignmentElement[0,1].KeyedDestructuringAssignmentEvaluation" : "\n          1. If |DestructuringAssignmentTarget| is neither an |ObjectLiteral| nor an |ArrayLiteral|, then\n            1. Let _lref_ be ? Evaluation of |DestructuringAssignmentTarget|.\n          1. Let _v_ be ? GetV(_value_, _propertyName_).\n          1. If |Initializer| is present and _v_ is *undefined*, then\n            1. If IsAnonymousFunctionDefinition(|Initializer|) and IsIdentifierRef of |DestructuringAssignmentTarget| are both *true*, then\n              1. Let _rhsValue_ be ? NamedEvaluation of |Initializer| with argument _lref_.[[ReferencedName]].\n            1. Else,\n              1. Let _defaultValue_ be ? Evaluation of |Initializer|.\n              1. Let _rhsValue_ be ? GetValue(_defaultValue_).\n          1. Else,\n            1. Let _rhsValue_ be _v_.\n          1. If |DestructuringAssignmentTarget| is either an |ObjectLiteral| or an |ArrayLiteral|, then\n            1. Let _assignmentPattern_ be the |AssignmentPattern| that is covered by |DestructuringAssignmentTarget|.\n            1. Return ? DestructuringAssignmentEvaluation of _assignmentPattern_ with argument _rhsValue_.\n          1. Return ? PutValue(_lref_, _rhsValue_).\n        ",
  "ClassStaticBlockBody[0,0].EvaluateClassStaticBlockBody" : "\n        1. Assert: _functionObject_ is a synthetic function created by ClassStaticBlockDefinitionEvaluation step <emu-xref href=\"#step-synthetic-class-static-block-fn\"></emu-xref>.\n        1. Perform ! FunctionDeclarationInstantiation(_functionObject_, ¬´ ¬ª).\n        1. Return ? Evaluation of |ClassStaticBlockStatementList|.\n      ",
  "ForInOfStatement[7,0].VarDeclaredNames" : "\n        1. Let _names1_ be the BoundNames of |ForBinding|.\n        1. Let _names2_ be the VarDeclaredNames of |Statement|.\n        1. Return the list-concatenation of _names1_ and _names2_.\n      ",
  "IsConstructor" : "\n        1. If _argument_ is not an Object, return *false*.\n        1. If _argument_ has a [[Construct]] internal method, return *true*.\n        1. Return *false*.\n      ",
  "ImportMeta[0,0].Evaluation" : "\n          1. Let _module_ be GetActiveScriptOrModule().\n          1. Assert: _module_ is a Source Text Module Record.\n          1. Let _importMeta_ be _module_.[[ImportMeta]].\n          1. If _importMeta_ is ~empty~, then\n            1. Set _importMeta_ to OrdinaryObjectCreate(*null*).\n            1. Let _importMetaValues_ be HostGetImportMetaProperties(_module_).\n            1. For each Record { [[Key]], [[Value]] } _p_ of _importMetaValues_, do\n              1. Perform ! CreateDataPropertyOrThrow(_importMeta_, _p_.[[Key]], _p_.[[Value]]).\n            1. Perform HostFinalizeImportMeta(_importMeta_, _module_).\n            1. Set _module_.[[ImportMeta]] to _importMeta_.\n            1. Return _importMeta_.\n          1. Else,\n            1. Assert: _importMeta_ is an Object.\n            1. Return _importMeta_.\n        ",
  "ForStatement[1,1].ForLoopEvaluation" : "\n          1. Perform ? Evaluation of |VariableDeclarationList|.\n          1. If the first |Expression| is present, let _test_ be the first |Expression|; otherwise, let _test_ be ~empty~.\n          1. If the second |Expression| is present, let _increment_ be the second |Expression|; otherwise, let _increment_ be ~empty~.\n          1. Return ? ForBodyEvaluation(_test_, _increment_, |Statement|, ¬´ ¬ª, _labelSet_).\n        ",
  "ModuleItemList[1,0].ContainsUndefinedBreakTarget" : "\n        1. Let _hasUndefinedLabels_ be ContainsUndefinedBreakTarget of |ModuleItemList| with argument _labelSet_.\n        1. If _hasUndefinedLabels_ is *true*, return *true*.\n        1. Return ContainsUndefinedBreakTarget of |ModuleItem| with argument _labelSet_.\n      ",
  "IdentifierPart[0,0].IdentifierCodePoint" : "\n          1. Return the code point matched by |IdentifierPartChar|.\n        ",
  "INTRINSICS.Function.prototype.toString" : "\n          1. Let _func_ be the *this* value.\n          1. If _func_ is an Object, _func_ has a [[SourceText]] internal slot, _func_.[[SourceText]] is a sequence of Unicode code points, and HostHasSourceTextAvailable(_func_) is *true*, then\n            1. Return CodePointsToString(_func_.[[SourceText]]).\n          1. If _func_ is a <emu-xref href=\"#sec-built-in-function-objects\">built-in function object</emu-xref>, return an implementation-defined String source code representation of _func_. The representation must have the syntax of a |NativeFunction|. Additionally, if _func_ has an [[InitialName]] internal slot and _func_.[[InitialName]] is a String, the portion of the returned String that would be matched by |NativeFunctionAccessor?| |PropertyName| must be the value of _func_.[[InitialName]].\n          1. If _func_ is an Object and IsCallable(_func_) is *true*, return an implementation-defined String source code representation of _func_. The representation must have the syntax of a |NativeFunction|.\n          1. Throw a *TypeError* exception.\n        ",
  "TryStatement[1,0].VarDeclaredNames" : "\n        1. Let _names1_ be VarDeclaredNames of |Block|.\n        1. Let _names2_ be VarDeclaredNames of |Finally|.\n        1. Return the list-concatenation of _names1_ and _names2_.\n      ",
  "TryStatement[1,0].HasCallInTailPosition" : "\n        1. Return HasCallInTailPosition of |Finally| with argument _call_.\n      ",
  "CreateForInIterator" : "\n            1. Let _iterator_ be OrdinaryObjectCreate(%ForInIteratorPrototype%, ¬´ [[Object]], [[ObjectWasVisited]], [[VisitedKeys]], [[RemainingKeys]] ¬ª).\n            1. Set _iterator_.[[Object]] to _object_.\n            1. Set _iterator_.[[ObjectWasVisited]] to *false*.\n            1. Set _iterator_.[[VisitedKeys]] to a new empty List.\n            1. Set _iterator_.[[RemainingKeys]] to a new empty List.\n            1. Return _iterator_.\n          ",
  "StringToBigInt" : "\n        1. Let _text_ be StringToCodePoints(_str_).\n        1. Let _literal_ be ParseText(_text_, |StringIntegerLiteral|).\n        1. If _literal_ is a List of errors, return *undefined*.\n        1. Let _mv_ be the MV of _literal_.\n        1. Assert: _mv_ is an integer.\n        1. Return ‚Ñ§(_mv_).\n      ",
  "ForStatement[2,1].ContainsDuplicateLabels" : "\n        1. Return ContainsDuplicateLabels of |Statement| with argument _labelSet_.\n      ",
  "ClassTail[0,1].ClassDefinitionEvaluation:clo0" : "\n        1. Let _env_ be the LexicalEnvironment of the running execution context.\n        1. Let _classEnv_ be NewDeclarativeEnvironment(_env_).\n        1. If _classBinding_ is not *undefined*, then\n          1. Perform ! _classEnv_.CreateImmutableBinding(_classBinding_, *true*).\n        1. Let _outerPrivateEnvironment_ be the running execution context's PrivateEnvironment.\n        1. Let _classPrivateEnvironment_ be NewPrivateEnvironment(_outerPrivateEnvironment_).\n        1. If |ClassBody| is present, then\n          1. For each String _dn_ of the PrivateBoundIdentifiers of |ClassBody|, do\n            1. If _classPrivateEnvironment_.[[Names]] contains a Private Name _pn_ such that _pn_.[[Description]] is _dn_, then\n              1. Assert: This is only possible for getter/setter pairs.\n            1. Else,\n              1. Let _name_ be a new Private Name whose [[Description]] is _dn_.\n              1. Append _name_ to _classPrivateEnvironment_.[[Names]].\n        1. If |ClassHeritage| is not present, then\n          1. Let _protoParent_ be %Object.prototype%.\n          1. Let _constructorParent_ be %Function.prototype%.\n        1. Else,\n          1. Set the running execution context's LexicalEnvironment to _classEnv_.\n          1. NOTE: The running execution context's PrivateEnvironment is _outerPrivateEnvironment_ when evaluating |ClassHeritage|.\n          1. Let _superclassRef_ be Completion(Evaluation of |ClassHeritage|).\n          1. Set the running execution context's LexicalEnvironment to _env_.\n          1. Let _superclass_ be ? GetValue(? _superclassRef_).\n          1. If _superclass_ is *null*, then\n            1. Let _protoParent_ be *null*.\n            1. Let _constructorParent_ be %Function.prototype%.\n          1. Else if IsConstructor(_superclass_) is *false*, then\n            1. Throw a *TypeError* exception.\n          1. Else,\n            1. Let _protoParent_ be ? Get(_superclass_, *\"prototype\"*).\n            1. If _protoParent_ is not an Object and _protoParent_ is not *null*, throw a *TypeError* exception.\n            1. Let _constructorParent_ be _superclass_.\n        1. Let _proto_ be OrdinaryObjectCreate(_protoParent_).\n        1. If |ClassBody| is not present, let _constructor_ be ~empty~.\n        1. Else, let _constructor_ be ConstructorMethod of |ClassBody|.\n        1. Set the running execution context's LexicalEnvironment to _classEnv_.\n        1. Set the running execution context's PrivateEnvironment to _classPrivateEnvironment_.\n        1. If _constructor_ is ~empty~, then\n          1. Let _defaultConstructor_ be a new Abstract Closure with no parameters that captures nothing and performs the following steps when called:\n            1. Let _args_ be the List of arguments that was passed to this function by [[Call]] or [[Construct]].\n            1. If NewTarget is *undefined*, throw a *TypeError* exception.\n            1. Let _F_ be the active function object.\n            1. If _F_.[[ConstructorKind]] is ~derived~, then\n              1. NOTE: This branch behaves similarly to `constructor(...args) { super(...args); }`. The most notable distinction is that while the aforementioned ECMAScript source text observably calls the @@iterator method on `%Array.prototype%`, this function does not.\n              1. Let _func_ be ! _F_.[[GetPrototypeOf]]().\n              1. If IsConstructor(_func_) is *false*, throw a *TypeError* exception.\n              1. Let _result_ be ? Construct(_func_, _args_, NewTarget).\n            1. Else,\n              1. NOTE: This branch behaves similarly to `constructor() {}`.\n              1. Let _result_ be ? OrdinaryCreateFromConstructor(NewTarget, *\"%Object.prototype%\"*).\n            1. Perform ? InitializeInstanceElements(_result_, _F_).\n            1. Return _result_.\n          1. Let _F_ be CreateBuiltinFunction(_defaultConstructor_, 0, _className_, ¬´ [[ConstructorKind]], [[SourceText]] ¬ª, the current Realm Record, _constructorParent_).\n        1. Else,\n          1. Let _constructorInfo_ be ! DefineMethod of _constructor_ with arguments _proto_ and _constructorParent_.\n          1. Let _F_ be _constructorInfo_.[[Closure]].\n          1. Perform MakeClassConstructor(_F_).\n          1. Perform SetFunctionName(_F_, _className_).\n        1. Perform MakeConstructor(_F_, *false*, _proto_).\n        1. If |ClassHeritage| is present, set _F_.[[ConstructorKind]] to ~derived~.\n        1. Perform ! DefineMethodProperty(_proto_, *\"constructor\"*, _F_, *false*).\n        1. If |ClassBody| is not present, let _elements_ be a new empty List.\n        1. Else, let _elements_ be NonConstructorElements of |ClassBody|.\n        1. Let _instancePrivateMethods_ be a new empty List.\n        1. Let _staticPrivateMethods_ be a new empty List.\n        1. Let _instanceFields_ be a new empty List.\n        1. Let _staticElements_ be a new empty List.\n        1. For each |ClassElement| _e_ of _elements_, do\n          1. If IsStatic of _e_ is *false*, then\n            1. Let _element_ be Completion(ClassElementEvaluation of _e_ with argument _proto_).\n          1. Else,\n            1. Let _element_ be Completion(ClassElementEvaluation of _e_ with argument _F_).\n          1. If _element_ is an abrupt completion, then\n            1. Set the running execution context's LexicalEnvironment to _env_.\n            1. Set the running execution context's PrivateEnvironment to _outerPrivateEnvironment_.\n            1. Return ? _element_.\n          1. Set _element_ to ! _element_.\n          1. If _element_ is a PrivateElement, then\n            1. Assert: _element_.[[Kind]] is either ~method~ or ~accessor~.\n            1. If IsStatic of _e_ is *false*, let _container_ be _instancePrivateMethods_.\n            1. Else, let _container_ be _staticPrivateMethods_.\n            1. If _container_ contains a PrivateElement _pe_ such that _pe_.[[Key]] is _element_.[[Key]], then\n              1. Assert: _element_.[[Kind]] and _pe_.[[Kind]] are both ~accessor~.\n              1. If _element_.[[Get]] is *undefined*, then\n                1. Let _combined_ be PrivateElement { [[Key]]: _element_.[[Key]], [[Kind]]: ~accessor~, [[Get]]: _pe_.[[Get]], [[Set]]: _element_.[[Set]] }.\n              1. Else,\n                1. Let _combined_ be PrivateElement { [[Key]]: _element_.[[Key]], [[Kind]]: ~accessor~, [[Get]]: _element_.[[Get]], [[Set]]: _pe_.[[Set]] }.\n              1. Replace _pe_ in _container_ with _combined_.\n            1. Else,\n              1. Append _element_ to _container_.\n          1. Else if _element_ is a ClassFieldDefinition Record, then\n            1. If IsStatic of _e_ is *false*, append _element_ to _instanceFields_.\n            1. Else, append _element_ to _staticElements_.\n          1. Else if _element_ is a ClassStaticBlockDefinition Record, then\n            1. Append _element_ to _staticElements_.\n        1. Set the running execution context's LexicalEnvironment to _env_.\n        1. If _classBinding_ is not *undefined*, then\n          1. Perform ! _classEnv_.InitializeBinding(_classBinding_, _F_).\n        1. Set _F_.[[PrivateMethods]] to _instancePrivateMethods_.\n        1. Set _F_.[[Fields]] to _instanceFields_.\n        1. For each PrivateElement _method_ of _staticPrivateMethods_, do\n          1. Perform ! PrivateMethodOrAccessorAdd(_F_, _method_).\n        1. For each element _elementRecord_ of _staticElements_, do\n          1. If _elementRecord_ is a ClassFieldDefinition Record, then\n            1. Let _result_ be Completion(DefineField(_F_, _elementRecord_)).\n          1. Else,\n            1. Assert: _elementRecord_ is a ClassStaticBlockDefinition Record.\n            1. Let _result_ be Completion(Call(_elementRecord_.[[BodyFunction]], _F_)).\n          1. If _result_ is an abrupt completion, then\n            1. Set the running execution context's PrivateEnvironment to _outerPrivateEnvironment_.\n            1. Return ? _result_.\n        1. Set the running execution context's PrivateEnvironment to _outerPrivateEnvironment_.\n        1. Return _F_.\n      ",
  "BlockDeclarationInstantiation" : "\n        1. Let _declarations_ be the LexicallyScopedDeclarations of _code_.\n        1. Let _privateEnv_ be the running execution context's PrivateEnvironment.\n        1. For each element _d_ of _declarations_, do\n          1. For each element _dn_ of the BoundNames of _d_, do\n            1. If IsConstantDeclaration of _d_ is *true*, then\n              1. Perform ! _env_.CreateImmutableBinding(_dn_, *true*).\n            1. Else,\n              1. [id=\"step-blockdeclarationinstantiation-createmutablebinding\"] Perform ! _env_.CreateMutableBinding(_dn_, *false*). NOTE: This step is replaced in section <emu-xref href=\"#sec-web-compat-blockdeclarationinstantiation\"></emu-xref>.\n          1. If _d_ is either a |FunctionDeclaration|, a |GeneratorDeclaration|, an |AsyncFunctionDeclaration|, or an |AsyncGeneratorDeclaration|, then\n            1. Let _fn_ be the sole element of the BoundNames of _d_.\n            1. Let _fo_ be InstantiateFunctionObject of _d_ with arguments _env_ and _privateEnv_.\n            1. [id=\"step-blockdeclarationinstantiation-initializebinding\"] Perform ! _env_.InitializeBinding(_fn_, _fo_). NOTE: This step is replaced in section <emu-xref href=\"#sec-web-compat-blockdeclarationinstantiation\"></emu-xref>.\n        1. Return ~unused~.\n      ",
  "StringNumericLiteral[1,0].StringNumericValue" : "\n            1. Return StringNumericValue of |StrNumericLiteral|.\n          ",
  "INTRINSICS.String.fromCharCode" : "\n          1. Let _result_ be the empty String.\n          1. For each element _next_ of _codeUnits_, do\n            1. Let _nextCU_ be the code unit whose numeric value is ‚Ñù(? ToUint16(_next_)).\n            1. Set _result_ to the string-concatenation of _result_ and _nextCU_.\n          1. Return _result_.\n        ",
  "DefaultClause[0,0].VarScopedDeclarations" : "\n        1. If the |StatementList| is present, return the VarScopedDeclarations of |StatementList|.\n        1. Return a new empty List.\n      ",
  "INTRINSICS.get DataView.prototype.byteLength" : "\n          1. Let _O_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_O_, [[DataView]]).\n          1. Assert: _O_ has a [[ViewedArrayBuffer]] internal slot.\n          1. Let _viewRecord_ be MakeDataViewWithBufferWitnessRecord(_O_, ~seq-cst~).\n          1. If IsViewOutOfBounds(_viewRecord_) is *true*, throw a *TypeError* exception.\n          1. Let _size_ be GetViewByteLength(_viewRecord_).\n          1. Return ùîΩ(_size_).\n        ",
  "VariableStatement[0,0].VarDeclaredNames" : "\n        1. Return BoundNames of |VariableDeclarationList|.\n      ",
  "ModuleItem[0,0].ContainsUndefinedContinueTarget" : "\n        1. Return *false*.\n      ",
  "UpdateExpression[2,0].IsFunctionDefinition" : "\n        1. Return *false*.\n      ",
  "IsIntegralNumber" : "\n        1. If _argument_ is not a Number, return *false*.\n        1. If _argument_ is not finite, return *false*.\n        1. If truncate(‚Ñù(_argument_)) ‚â† ‚Ñù(_argument_), return *false*.\n        1. Return *true*.\n      ",
  "FunctionExpression[0,0].NamedEvaluation" : "\n        1. Return InstantiateOrdinaryFunctionExpression of |FunctionExpression| with argument _name_.\n      ",
  "CaseClauses[1,0].ContainsUndefinedContinueTarget" : "\n        1. Let _hasUndefinedLabels_ be ContainsUndefinedContinueTarget of |CaseClauses| with arguments _iterationSet_ and ¬´ ¬ª.\n        1. If _hasUndefinedLabels_ is *true*, return *true*.\n        1. Return ContainsUndefinedContinueTarget of |CaseClause| with arguments _iterationSet_ and ¬´ ¬ª.\n      ",
  "HostEventSet" : "\n        1. Let _events_ be an empty Set.\n        1. For each event _E_ of EventSet(_execution_), do\n          1. If _E_ is not in SharedDataBlockEventSet(_execution_), add _E_ to _events_.\n        1. Return _events_.\n      ",
  "BindingIdentifier[1,0].BoundNames" : "\n        1. Return ¬´ *\"yield\"* ¬ª.\n      ",
  "INTRINSICS.Function.prototype.apply" : "\n          1. Let _func_ be the *this* value.\n          1. If IsCallable(_func_) is *false*, throw a *TypeError* exception.\n          1. If _argArray_ is either *undefined* or *null*, then\n            1. Perform PrepareForTailCall().\n            1. Return ? Call(_func_, _thisArg_).\n          1. Let _argList_ be ? CreateListFromArrayLike(_argArray_).\n          1. Perform PrepareForTailCall().\n          1. [id=\"step-function-proto-apply-call\"] Return ? Call(_func_, _thisArg_, _argList_).\n        ",
  "BindingElement[1,0].KeyedBindingInitialization" : "\n          1. Let _v_ be ? GetV(_value_, _propertyName_).\n          1. If |Initializer| is present and _v_ is *undefined*, then\n            1. Let _defaultValue_ be ? Evaluation of |Initializer|.\n            1. Set _v_ to ? GetValue(_defaultValue_).\n          1. Return ? BindingInitialization of |BindingPattern| with arguments _v_ and _environment_.\n        ",
  "Record[DeclarativeEnvironmentRecord].HasSuperBinding" : "\n            1. Return *false*.\n          ",
  "DoWait" : "\n          1. Let _taRecord_ be ? ValidateIntegerTypedArray(_typedArray_, *true*).\n          1. Let _buffer_ be _taRecord_.[[Object]].[[ViewedArrayBuffer]].\n          1. If IsSharedArrayBuffer(_buffer_) is *false*, throw a *TypeError* exception.\n          1. Let _i_ be ? ValidateAtomicAccess(_taRecord_, _index_).\n          1. Let _arrayTypeName_ be _typedArray_.[[TypedArrayName]].\n          1. If _arrayTypeName_ is *\"BigInt64Array\"*, let _v_ be ? ToBigInt64(_value_).\n          1. Else, let _v_ be ? ToInt32(_value_).\n          1. Let _q_ be ? ToNumber(_timeout_).\n          1. If _q_ is either *NaN* or *+‚àû*<sub>ùîΩ</sub>, let _t_ be +‚àû; else if _q_ is *-‚àû*<sub>ùîΩ</sub>, let _t_ be 0; else let _t_ be max(‚Ñù(_q_), 0).\n          1. If _mode_ is ~sync~ and AgentCanSuspend() is *false*, throw a *TypeError* exception.\n          1. Let _block_ be _buffer_.[[ArrayBufferData]].\n          1. Let _offset_ be _typedArray_.[[ByteOffset]].\n          1. Let _byteIndexInBuffer_ be (_i_ √ó 4) + _offset_.\n          1. Let _WL_ be GetWaiterList(_block_, _byteIndexInBuffer_).\n          1. If _mode_ is ~sync~, then\n            1. Let _promiseCapability_ be ~blocking~.\n            1. Let _resultObject_ be *undefined*.\n          1. Else,\n            1. Let _promiseCapability_ be ! NewPromiseCapability(%Promise%).\n            1. Let _resultObject_ be OrdinaryObjectCreate(%Object.prototype%).\n          1. Perform EnterCriticalSection(_WL_).\n          1. Let _elementType_ be TypedArrayElementType(_typedArray_).\n          1. Let _w_ be GetValueFromBuffer(_buffer_, _byteIndexInBuffer_, _elementType_, *true*, ~seq-cst~).\n          1. If _v_ ‚â† _w_, then\n            1. Perform LeaveCriticalSection(_WL_).\n            1. If _mode_ is ~sync~, return *\"not-equal\"*.\n            1. Perform ! CreateDataPropertyOrThrow(_resultObject_, *\"async\"*, *false*).\n            1. Perform ! CreateDataPropertyOrThrow(_resultObject_, *\"value\"*, *\"not-equal\"*).\n            1. Return _resultObject_.\n          1. If _t_ is 0 and _mode_ is ~async~, then\n            1. NOTE: There is no special handling of synchronous immediate timeouts. Asynchronous immediate timeouts have special handling in order to fail fast and avoid unnecessary Promise jobs.\n            1. Perform LeaveCriticalSection(_WL_).\n            1. Perform ! CreateDataPropertyOrThrow(_resultObject_, *\"async\"*, *false*).\n            1. Perform ! CreateDataPropertyOrThrow(_resultObject_, *\"value\"*, *\"timed-out\"*).\n            1. Return _resultObject_.\n          1. Let _thisAgent_ be AgentSignifier().\n          1. Let _now_ be the time value (UTC) identifying the current time.\n          1. Let _additionalTimeout_ be an implementation-defined non-negative mathematical value.\n          1. Let _timeoutTime_ be ‚Ñù(_now_) + _t_ + _additionalTimeout_.\n          1. NOTE: When _t_ is +‚àû, _timeoutTime_ is also +‚àû.\n          1. Let _waiterRecord_ be a new Waiter Record { [[AgentSignifier]]: _thisAgent_, [[PromiseCapability]]: _promiseCapability_, [[TimeoutTime]]: _timeoutTime_, [[Result]]: *\"ok\"* }.\n          1. Perform AddWaiter(_WL_, _waiterRecord_).\n          1. If _mode_ is ~sync~, then\n            1. Perform SuspendThisAgent(_WL_, _waiterRecord_).\n          1. Else if _timeoutTime_ is finite, then\n            1. Perform EnqueueAtomicsWaitAsyncTimeoutJob(_WL_, _waiterRecord_).\n          1. Perform LeaveCriticalSection(_WL_).\n          1. If _mode_ is ~sync~, return _waiterRecord_.[[Result]].\n          1. Perform ! CreateDataPropertyOrThrow(_resultObject_, *\"async\"*, *true*).\n          1. Perform ! CreateDataPropertyOrThrow(_resultObject_, *\"value\"*, _promiseCapability_.[[Promise]]).\n          1. Return _resultObject_.\n        ",
  "INTRINSICS.DataView.prototype.getFloat64" : "\n          1. Let _v_ be the *this* value.\n          1. If _littleEndian_ is not present, set _littleEndian_ to *false*.\n          1. Return ? GetViewValue(_v_, _byteOffset_, _littleEndian_, ~float64~).\n        ",
  "MethodDefinition[5,0].HasDirectSuper" : "\n        1. If |PropertySetParameterList| Contains |SuperCall| is *true*, return *true*.\n        1. Return |FunctionBody| Contains |SuperCall|.\n      ",
  "INTRINSICS.Math.sign" : "\n          1. Let _n_ be ? ToNumber(_x_).\n          1. If _n_ is one of *NaN*, *+0*<sub>ùîΩ</sub>, or *-0*<sub>ùîΩ</sub>, return _n_.\n          1. If _n_ < *-0*<sub>ùîΩ</sub>, return *-1*<sub>ùîΩ</sub>.\n          1. Return *1*<sub>ùîΩ</sub>.\n        ",
  "FieldDefinition[0,0].PropName" : "\n        1. Return PropName of |ClassElementName|.\n      ",
  "ForInOfStatement[5,0].ContainsDuplicateLabels" : "\n        1. Return ContainsDuplicateLabels of |Statement| with argument _labelSet_.\n      ",
  "OptionalChain[9,0].AllPrivateIdentifiersValid" : "\n        1. If _names_ contains the StringValue of |PrivateIdentifier|, then\n          1. Return AllPrivateIdentifiersValid of |OptionalChain| with argument _names_.\n        1. Return *false*.\n      ",
  "CharacterEscape[3,0].CharacterValue" : "\n          1. Return the MV of |HexEscapeSequence|.\n        ",
  "ShiftExpression[2,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "CodePointsToString" : "\n        1. Let _result_ be the empty String.\n        1. For each code point _cp_ of _text_, do\n          1. Set _result_ to the string-concatenation of _result_ and UTF16EncodeCodePoint(_cp_).\n        1. Return _result_.\n      ",
  "ForInOfStatement[7,0].VarScopedDeclarations" : "\n        1. Let _declarations1_ be ¬´ |ForBinding| ¬ª.\n        1. Let _declarations2_ be VarScopedDeclarations of |Statement|.\n        1. Return the list-concatenation of _declarations1_ and _declarations2_.\n      ",
  "AsyncFunctionDeclaration[0,0].IsConstantDeclaration" : "\n        1. Return *false*.\n      ",
  "ExportDeclaration[6,0].IsConstantDeclaration" : "\n        1. Return *false*.\n      ",
  "SingleNameBinding[0,1].IteratorBindingInitialization" : "\n        1. Let _bindingId_ be StringValue of |BindingIdentifier|.\n        1. Let _lhs_ be ? ResolveBinding(_bindingId_, _environment_).\n        1. Let _v_ be *undefined*.\n        1. If _iteratorRecord_.[[Done]] is *false*, then\n          1. Let _next_ be ? IteratorStepValue(_iteratorRecord_).\n          1. If _next_ is not ~done~, then\n            1. Set _v_ to _next_.\n        1. If |Initializer| is present and _v_ is *undefined*, then\n          1. If IsAnonymousFunctionDefinition(|Initializer|) is *true*, then\n            1. Set _v_ to ? NamedEvaluation of |Initializer| with argument _bindingId_.\n          1. Else,\n            1. Let _defaultValue_ be ? Evaluation of |Initializer|.\n            1. Set _v_ to ? GetValue(_defaultValue_).\n        1. If _environment_ is *undefined*, return ? PutValue(_lhs_, _v_).\n        1. Return ? InitializeReferencedBinding(_lhs_, _v_).\n      ",
  "INTRINSICS.Date.prototype.getMilliseconds" : "\n          1. Let _dateObject_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_dateObject_, [[DateValue]]).\n          1. Let _t_ be _dateObject_.[[DateValue]].\n          1. If _t_ is *NaN*, return *NaN*.\n          1. Return msFromTime(LocalTime(_t_)).\n        ",
  "ScriptBody[0,0].VarDeclaredNames" : "\n        1. Return TopLevelVarDeclaredNames of |StatementList|.\n      ",
  "INTRINSICS.Map.prototype.get" : "\n          1. Let _M_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_M_, [[MapData]]).\n          1. For each Record { [[Key]], [[Value]] } _p_ of _M_.[[MapData]], do\n            1. If _p_.[[Key]] is not ~empty~ and SameValueZero(_p_.[[Key]], _key_) is *true*, return _p_.[[Value]].\n          1. Return *undefined*.\n        ",
  "FunctionDeclaration[1,0].InstantiateOrdinaryFunctionObject" : "\n        1. Let _sourceText_ be the source text matched by |FunctionDeclaration|.\n        1. Let _F_ be OrdinaryFunctionCreate(%Function.prototype%, _sourceText_, |FormalParameters|, |FunctionBody|, ~non-lexical-this~, _env_, _privateEnv_).\n        1. Perform SetFunctionName(_F_, *\"default\"*).\n        1. Perform MakeConstructor(_F_).\n        1. Return _F_.\n      ",
  "HexNonSurrogate[0,0].CharacterValue" : "\n          1. Return the MV of |Hex4Digits|.\n        ",
  "Record[ArgumentsExoticObject].Set" : "\n          1. If SameValue(_args_, _Receiver_) is *false*, then\n            1. Let _isMapped_ be *false*.\n          1. Else,\n            1. Let _map_ be _args_.[[ParameterMap]].\n            1. Let _isMapped_ be ! HasOwnProperty(_map_, _P_).\n          1. If _isMapped_ is *true*, then\n            1. Assert: The following Set will succeed, since formal parameters mapped by arguments objects are always writable.\n            1. Perform ! Set(_map_, _P_, _V_, *false*).\n          1. Return ? OrdinarySet(_args_, _P_, _V_, _Receiver_).\n        ",
  "ArrayBindingPattern[0,3].ContainsExpression" : "\n        1. Return ContainsExpression of |BindingRestElement|.\n      ",
  "ExportDeclaration[6,0].LexicallyScopedDeclarations" : "\n        1. Return a List whose sole element is this |ExportDeclaration|.\n      ",
  "INTRINSICS.TypedArray.prototype.at" : "\n          1. Let _O_ be the *this* value.\n          1. Let _taRecord_ be ? ValidateTypedArray(_O_, ~seq-cst~).\n          1. Let _len_ be TypedArrayLength(_taRecord_).\n          1. Let _relativeIndex_ be ? ToIntegerOrInfinity(_index_).\n          1. If _relativeIndex_ ‚â• 0, then\n            1. Let _k_ be _relativeIndex_.\n          1. Else,\n            1. Let _k_ be _len_ + _relativeIndex_.\n          1. If _k_ < 0 or _k_ ‚â• _len_, return *undefined*.\n          1. Return ! Get(_O_, ! ToString(ùîΩ(_k_))).\n        ",
  "YieldExpression[1,0].Evaluation" : "\n        1. Let _exprRef_ be ? Evaluation of |AssignmentExpression|.\n        1. Let _value_ be ? GetValue(_exprRef_).\n        1. Return ? Yield(_value_).\n      ",
  "INTRINSICS.Map" : "\n          1. If NewTarget is *undefined*, throw a *TypeError* exception.\n          1. Let _map_ be ? OrdinaryCreateFromConstructor(NewTarget, *\"%Map.prototype%\"*, ¬´ [[MapData]] ¬ª).\n          1. Set _map_.[[MapData]] to a new empty List.\n          1. If _iterable_ is either *undefined* or *null*, return _map_.\n          1. Let _adder_ be ? Get(_map_, *\"set\"*).\n          1. If IsCallable(_adder_) is *false*, throw a *TypeError* exception.\n          1. Return ? AddEntriesFromIterable(_map_, _iterable_, _adder_).\n        ",
  "FunctionStatementList[0,0].ContainsDuplicateLabels" : "\n        1. Return *false*.\n      ",
  "ForStatement[1,2].ContainsUndefinedContinueTarget" : "\n        1. Return ContainsUndefinedContinueTarget of |Statement| with arguments _iterationSet_ and ¬´ ¬ª.\n      ",
  "ClassSetOperand[1,0].CompileToCharSet" : "\n          1. Let _A_ be CompileToCharSet of |ClassStringDisjunction| with argument _rer_.\n          1. Return MaybeSimpleCaseFolding(_rer_, _A_).\n        ",
  "INTRINSICS.Array.prototype.includes" : "\n          1. Let _O_ be ? ToObject(*this* value).\n          1. Let _len_ be ? LengthOfArrayLike(_O_).\n          1. If _len_ = 0, return *false*.\n          1. Let _n_ be ? ToIntegerOrInfinity(_fromIndex_).\n          1. Assert: If _fromIndex_ is *undefined*, then _n_ is 0.\n          1. If _n_ = +‚àû, return *false*.\n          1. Else if _n_ = -‚àû, set _n_ to 0.\n          1. If _n_ ‚â• 0, then\n            1. Let _k_ be _n_.\n          1. Else,\n            1. Let _k_ be _len_ + _n_.\n            1. If _k_ < 0, set _k_ to 0.\n          1. Repeat, while _k_ < _len_,\n            1. Let _elementK_ be ? Get(_O_, ! ToString(ùîΩ(_k_))).\n            1. If SameValueZero(_searchElement_, _elementK_) is *true*, return *true*.\n            1. Set _k_ to _k_ + 1.\n          1. Return *false*.\n        ",
  "BindingElement[1,0].IsSimpleParameterList" : "\n        1. Return *false*.\n      ",
  "RelationalExpression[3,0].Evaluation" : "\n        1. Let _lref_ be ? Evaluation of |RelationalExpression|.\n        1. Let _lval_ be ? GetValue(_lref_).\n        1. Let _rref_ be ? Evaluation of |ShiftExpression|.\n        1. Let _rval_ be ? GetValue(_rref_).\n        1. Let _r_ be ? IsLessThan(_rval_, _lval_, *false*).\n        1. If _r_ is either *true* or *undefined*, return *false*. Otherwise, return *true*.\n      ",
  "GeneratorMethod[0,0].PrivateBoundIdentifiers" : "\n        1. Return PrivateBoundIdentifiers of |ClassElementName|.\n      ",
  "RelationalExpression[5,0].AssignmentTargetType" : "\n        1. Return ~invalid~.\n      ",
  "INTRINSICS.TypedArray.prototype.sort" : "\n          1. If _comparefn_ is not *undefined* and IsCallable(_comparefn_) is *false*, throw a *TypeError* exception.\n          1. Let _obj_ be the *this* value.\n          1. Let _taRecord_ be ? ValidateTypedArray(_obj_, ~seq-cst~).\n          1. Let _len_ be TypedArrayLength(_taRecord_).\n          1. NOTE: The following closure performs a numeric comparison rather than the string comparison used in <emu-xref href=\"#sec-array.prototype.sort\"></emu-xref>.\n          1. Let _SortCompare_ be a new Abstract Closure with parameters (_x_, _y_) that captures _comparefn_ and performs the following steps when called:\n            1. Return ? CompareTypedArrayElements(_x_, _y_, _comparefn_).\n          1. Let _sortedList_ be ? SortIndexedProperties(_obj_, _len_, _SortCompare_, ~read-through-holes~).\n          1. Let _j_ be 0.\n          1. Repeat, while _j_ < _len_,\n            1. Perform ! Set(_obj_, ! ToString(ùîΩ(_j_)), _sortedList_[_j_], *true*).\n            1. Set _j_ to _j_ + 1.\n          1. Return _obj_.\n        ",
  "ForInOfStatement[2,0].ForInOfLoopEvaluation" : "\n          1. Let _keyResult_ be ? ForIn/OfHeadEvaluation(BoundNames of |ForDeclaration|, |Expression|, ~enumerate~).\n          1. Return ? ForIn/OfBodyEvaluation(|ForDeclaration|, |Statement|, _keyResult_, ~enumerate~, ~lexical-binding~, _labelSet_).\n        ",
  "INTRINSICS.Math.max" : "\n          1. Let _coerced_ be a new empty List.\n          1. For each element _arg_ of _args_, do\n            1. Let _n_ be ? ToNumber(_arg_).\n            1. Append _n_ to _coerced_.\n          1. Let _highest_ be *-‚àû*<sub>ùîΩ</sub>.\n          1. For each element _number_ of _coerced_, do\n            1. If _number_ is *NaN*, return *NaN*.\n            1. If _number_ is *+0*<sub>ùîΩ</sub> and _highest_ is *-0*<sub>ùîΩ</sub>, set _highest_ to *+0*<sub>ùîΩ</sub>.\n            1. If _number_ > _highest_, set _highest_ to _number_.\n          1. Return _highest_.\n        ",
  "CallExpression[1,0].AssignmentTargetType" : "\n        1. Return ~invalid~.\n      ",
  "AtomEscape[1,0].CompileAtom" : "\n          1. Let _cs_ be CompileToCharSet of |CharacterClassEscape| with argument _rer_.\n          1. If _rer_.[[UnicodeSets]] is *false*, or if every CharSetElement of _cs_ consists of a single character (including if _cs_ is empty), return CharacterSetMatcher(_rer_, _cs_, *false*, _direction_).\n          1. Let _lm_ be an empty List of Matchers.\n          1. For each CharSetElement _s_ in _cs_ containing more than 1 character, iterating in descending order of length, do\n            1. Let _cs2_ be a one-element CharSet containing the last code point of _s_.\n            1. Let _m2_ be CharacterSetMatcher(_rer_, _cs2_, *false*, _direction_).\n            1. For each code point _c1_ in _s_, iterating backwards from its second-to-last code point, do\n              1. Let _cs1_ be a one-element CharSet containing _c1_.\n              1. Let _m1_ be CharacterSetMatcher(_rer_, _cs1_, *false*, _direction_).\n              1. Set _m2_ to MatchSequence(_m1_, _m2_, _direction_).\n            1. Append _m2_ to _lm_.\n          1. Let _singles_ be the CharSet containing every CharSetElement of _cs_ that consists of a single character.\n          1. Append CharacterSetMatcher(_rer_, _singles_, *false*, _direction_) to _lm_.\n          1. If _cs_ contains the empty sequence of characters, append EmptyMatcher() to _lm_.\n          1. Let _m2_ be the last Matcher in _lm_.\n          1. For each Matcher _m1_ of _lm_, iterating backwards from its second-to-last element, do\n            1. Set _m2_ to MatchTwoAlternatives(_m1_, _m2_).\n          1. Return _m2_.\n        ",
  "MakeFullYear" : "\n          1. If _year_ is *NaN*, return *NaN*.\n          1. Let _truncated_ be ! ToIntegerOrInfinity(_year_).\n          1. If _truncated_ is in the inclusive interval from 0 to 99, return *1900*<sub>ùîΩ</sub> + ùîΩ(_truncated_).\n          1. Return ùîΩ(_truncated_).\n        ",
  "ArrowFunction[0,0].HasName" : "\n        1. Return *false*.\n      ",
  "TemplateMiddleList[1,0].TemplateStrings" : "\n          1. Let _front_ be TemplateStrings of |TemplateMiddleList| with argument _raw_.\n          1. Let _last_ be ¬´ TemplateString(|TemplateMiddle|, _raw_) ¬ª.\n          1. Return the list-concatenation of _front_ and _last_.\n        ",
  "IsPropertyReference" : "\n          1. If _V_.[[Base]] is ~unresolvable~, return *false*.\n          1. If _V_.[[Base]] is an Environment Record, return *false*; otherwise return *true*.\n        ",
  "RegExpIdentifierPart[2,0].RegExpIdentifierCodePoint" : "\n          1. Let _lead_ be the code unit whose numeric value is the numeric value of the code point matched by |UnicodeLeadSurrogate|.\n          1. Let _trail_ be the code unit whose numeric value is the numeric value of the code point matched by |UnicodeTrailSurrogate|.\n          1. Return UTF16SurrogatePairToCodePoint(_lead_, _trail_).\n        ",
  "Record[GlobalEnvironmentRecord].HasLexicalDeclaration" : "\n            1. Let _DclRec_ be _envRec_.[[DeclarativeRecord]].\n            1. Return ! _DclRec_.HasBinding(_N_).\n          ",
  "ArraySpeciesCreate" : "\n          1. Let _isArray_ be ? IsArray(_originalArray_).\n          1. If _isArray_ is *false*, return ? ArrayCreate(_length_).\n          1. Let _C_ be ? Get(_originalArray_, *\"constructor\"*).\n          1. If IsConstructor(_C_) is *true*, then\n            1. Let _thisRealm_ be the current Realm Record.\n            1. Let _realmC_ be ? GetFunctionRealm(_C_).\n            1. If _thisRealm_ and _realmC_ are not the same Realm Record, then\n              1. If SameValue(_C_, _realmC_.[[Intrinsics]].[[%Array%]]) is *true*, set _C_ to *undefined*.\n          1. If _C_ is an Object, then\n            1. Set _C_ to ? Get(_C_, @@species).\n            1. If _C_ is *null*, set _C_ to *undefined*.\n          1. If _C_ is *undefined*, return ? ArrayCreate(_length_).\n          1. If IsConstructor(_C_) is *false*, throw a *TypeError* exception.\n          1. Return ? Construct(_C_, ¬´ ùîΩ(_length_) ¬ª).\n        ",
  "IterationStatement[3,0].LoopEvaluation" : "\n          1. Return ? ForInOfLoopEvaluation of |ForInOfStatement| with argument _labelSet_.\n        ",
  "ExportDeclaration[5,0].Evaluation" : "\n          1. Let _value_ be ? BindingClassDeclarationEvaluation of |ClassDeclaration|.\n          1. Let _className_ be the sole element of BoundNames of |ClassDeclaration|.\n          1. If _className_ is *\"\\*default\\*\"*, then\n            1. Let _env_ be the running execution context's LexicalEnvironment.\n            1. Perform ? InitializeBoundName(*\"\\*default\\*\"*, _value_, _env_).\n          1. Return ~empty~.\n        ",
  "AsyncFunctionExpression[0,0].Contains" : "\n        1. Return *false*.\n      ",
  "GeneratorExpression[0,0].Contains" : "\n        1. Return *false*.\n      ",
  "MemberExpression[2,0].AssignmentTargetType" : "\n        1. Return ~simple~.\n      ",
  "SingleNameBinding[0,0].BoundNames" : "\n        1. Return the BoundNames of |BindingIdentifier|.\n      ",
  "ForStatement[0,0].VarDeclaredNames" : "\n        1. Return the VarDeclaredNames of |Statement|.\n      ",
  "IsUnclampedIntegerElementType" : "\n          1. If _type_ is one of ~int8~, ~uint8~, ~int16~, ~uint16~, ~int32~, or ~uint32~, return *true*.\n          1. Return *false*.\n        ",
  "CaseBlock[0,0].VarDeclaredNames" : "\n        1. Return a new empty List.\n      ",
  "CaseBlock[1,0].LexicallyDeclaredNames" : "\n        1. If the first |CaseClauses| is present, let _names1_ be the LexicallyDeclaredNames of the first |CaseClauses|.\n        1. Else, let _names1_ be a new empty List.\n        1. Let _names2_ be LexicallyDeclaredNames of |DefaultClause|.\n        1. If the second |CaseClauses| is present, let _names3_ be the LexicallyDeclaredNames of the second |CaseClauses|.\n        1. Else, let _names3_ be a new empty List.\n        1. Return the list-concatenation of _names1_, _names2_, and _names3_.\n      ",
  "ObjectBindingPattern[0,0].BoundNames" : "\n        1. Return a new empty List.\n      ",
  "Statement[13,0].VarDeclaredNames" : "\n        1. Return a new empty List.\n      ",
  "INTRINSICS.get TypedArray.prototype[@@toStringTag]" : "\n          1. Let _O_ be the *this* value.\n          1. If _O_ is not an Object, return *undefined*.\n          1. If _O_ does not have a [[TypedArrayName]] internal slot, return *undefined*.\n          1. Let _name_ be _O_.[[TypedArrayName]].\n          1. Assert: _name_ is a String.\n          1. Return _name_.\n        ",
  "INTRINSICS.Date.prototype.setMinutes" : "\n          1. Let _dateObject_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_dateObject_, [[DateValue]]).\n          1. Let _t_ be _dateObject_.[[DateValue]].\n          1. Let _m_ be ? ToNumber(_min_).\n          1. If _sec_ is present, let _s_ be ? ToNumber(_sec_).\n          1. If _ms_ is present, let _milli_ be ? ToNumber(_ms_).\n          1. If _t_ is *NaN*, return *NaN*.\n          1. Set _t_ to LocalTime(_t_).\n          1. If _sec_ is not present, let _s_ be SecFromTime(_t_).\n          1. If _ms_ is not present, let _milli_ be msFromTime(_t_).\n          1. Let _date_ be MakeDate(Day(_t_), MakeTime(HourFromTime(_t_), _m_, _s_, _milli_)).\n          1. Let _u_ be TimeClip(UTC(_date_)).\n          1. Set _dateObject_.[[DateValue]] to _u_.\n          1. Return _u_.\n        ",
  "ThrowStatement[0,0].Evaluation" : "\n        1. Let _exprRef_ be ? Evaluation of |Expression|.\n        1. Let _exprValue_ be ? GetValue(_exprRef_).\n        1. Return ThrowCompletion(_exprValue_).\n      ",
  "ThisStringValue" : "\n            1. If _value_ is a String, return _value_.\n            1. If _value_ is an Object and _value_ has a [[StringData]] internal slot, then\n              1. Let _s_ be _value_.[[StringData]].\n              1. Assert: _s_ is a String.\n              1. Return _s_.\n            1. Throw a *TypeError* exception.\n          ",
  "MethodDefinition[5,0].SpecialMethod" : "\n        1. Return *true*.\n      ",
  "UnaryExpression[4,0].IsFunctionDefinition" : "\n        1. Return *false*.\n      ",
  "AwaitExpression[0,0].Evaluation" : "\n        1. Let _exprRef_ be ? Evaluation of |UnaryExpression|.\n        1. Let _value_ be ? GetValue(_exprRef_).\n        1. Return ? Await(_value_).\n      ",
  "StatementListItem[1,0].LexicallyDeclaredNames" : "\n        1. Return the BoundNames of |Declaration|.\n      ",
  "OptionalChain[2,0].Contains" : "\n        1. Return *false*.\n      ",
  "NameSpaceImport[0,0].ImportEntriesForModule" : "\n          1. Let _localName_ be the StringValue of |ImportedBinding|.\n          1. Let _entry_ be the ImportEntry Record { [[ModuleRequest]]: _module_, [[ImportName]]: ~namespace-object~, [[LocalName]]: _localName_ }.\n          1. Return ¬´ _entry_ ¬ª.\n        ",
  "INTRINSICS.Array.prototype.map" : "\n          1. Let _O_ be ? ToObject(*this* value).\n          1. Let _len_ be ? LengthOfArrayLike(_O_).\n          1. If IsCallable(_callbackfn_) is *false*, throw a *TypeError* exception.\n          1. Let _A_ be ? ArraySpeciesCreate(_O_, _len_).\n          1. Let _k_ be 0.\n          1. Repeat, while _k_ < _len_,\n            1. Let _Pk_ be ! ToString(ùîΩ(_k_)).\n            1. Let _kPresent_ be ? HasProperty(_O_, _Pk_).\n            1. If _kPresent_ is *true*, then\n              1. Let _kValue_ be ? Get(_O_, _Pk_).\n              1. Let _mappedValue_ be ? Call(_callbackfn_, _thisArg_, ¬´ _kValue_, ùîΩ(_k_), _O_ ¬ª).\n              1. Perform ? CreateDataPropertyOrThrow(_A_, _Pk_, _mappedValue_).\n            1. Set _k_ to _k_ + 1.\n          1. Return _A_.\n        ",
  "Record[GlobalEnvironmentRecord].GetBindingValue" : "\n            1. Let _DclRec_ be _envRec_.[[DeclarativeRecord]].\n            1. If ! _DclRec_.HasBinding(_N_) is *true*, then\n              1. Return ? _DclRec_.GetBindingValue(_N_, _S_).\n            1. Let _ObjRec_ be _envRec_.[[ObjectRecord]].\n            1. Return ? <emu-meta effects=\"user-code\">_ObjRec_.GetBindingValue</emu-meta>(_N_, _S_).\n          ",
  "SetValueInBuffer" : "\n          1. Assert: IsDetachedBuffer(_arrayBuffer_) is *false*.\n          1. Assert: There are sufficient bytes in _arrayBuffer_ starting at _byteIndex_ to represent a value of _type_.\n          1. Assert: _value_ is a BigInt if IsBigIntElementType(_type_) is *true*; otherwise, _value_ is a Number.\n          1. Let _block_ be _arrayBuffer_.[[ArrayBufferData]].\n          1. Let _elementSize_ be the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"></emu-xref> for Element Type _type_.\n          1. If _isLittleEndian_ is not present, set _isLittleEndian_ to the value of the [[LittleEndian]] field of the surrounding agent's Agent Record.\n          1. Let _rawBytes_ be NumericToRawBytes(_type_, _value_, _isLittleEndian_).\n          1. If IsSharedArrayBuffer(_arrayBuffer_) is *true*, then\n            1. Let _execution_ be the [[CandidateExecution]] field of the surrounding agent's Agent Record.\n            1. Let _eventsRecord_ be the Agent Events Record of _execution_.[[EventsRecords]] whose [[AgentSignifier]] is AgentSignifier().\n            1. If _isTypedArray_ is *true* and IsNoTearConfiguration(_type_, _order_) is *true*, let _noTear_ be *true*; otherwise let _noTear_ be *false*.\n            1. Append WriteSharedMemory { [[Order]]: _order_, [[NoTear]]: _noTear_, [[Block]]: _block_, [[ByteIndex]]: _byteIndex_, [[ElementSize]]: _elementSize_, [[Payload]]: _rawBytes_ } to _eventsRecord_.[[EventList]].\n          1. Else,\n            1. Store the individual bytes of _rawBytes_ into _block_, starting at _block_[_byteIndex_].\n          1. Return ~unused~.\n        ",
  "INTRINSICS.RegExpStringIteratorPrototype.next" : "\n            1. Return ? GeneratorResume(*this* value, ~empty~, *\"%RegExpStringIteratorPrototype%\"*).\n          ",
  "ForStatement[0,7].VarScopedDeclarations" : "\n        1. Return the VarScopedDeclarations of |Statement|.\n      ",
  "UnaryExpression[2,0].AssignmentTargetType" : "\n        1. Return ~invalid~.\n      ",
  "GetV" : "\n        1. Let _O_ be ? ToObject(_V_).\n        1. Return ? <emu-meta effects=\"user-code\">_O_.[[Get]]</emu-meta>(_P_, _V_).\n      ",
  "INTRINSICS.WeakSet.prototype.delete" : "\n          1. Let _S_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_S_, [[WeakSetData]]).\n          1. If CanBeHeldWeakly(_value_) is *false*, return *false*.\n          1. For each element _e_ of _S_.[[WeakSetData]], do\n            1. If _e_ is not ~empty~ and SameValue(_e_, _value_) is *true*, then\n              1. Replace the element of _S_.[[WeakSetData]] whose value is _e_ with an element whose value is ~empty~.\n              1. Return *true*.\n          1. Return *false*.\n        ",
  "RunJobs:clo0" : "\n    1. Perform ? InitializeHostDefinedRealm().\n    1. Let _scriptEvaluationJob_ be a new Abstract Closure with no parameters that captures nothing and performs the following steps when called:\n      1. Let _sourceText_ be the source code of a script.\n      1. Let _script_ be ParseScript(_sourceText_, the current Realm Record, ~empty~).\n      1. Perform ? ScriptEvaluation(_script_).\n      1. Return *undefined*.\n    1. Perform HostEnqueuePromiseJob(_scriptEvaluationJob_, the current Realm Record).\n    1. Let _errors_ be *undefined*.\n    1. Repeat,\n      1. Suspend the running execution context and remove it from the execution context stack.\n      1. Assert: The execution context stack is empty.\n      1. Let _nextQueue_ be a non-empty Job Queue chosen in an implementation-defined manner.\n      1. If all Job Queues are empty, the result is implementation-defined.\n      1. Let _nextPending_ be the PendingJob record at the front of _nextQueue_. Remove that record from _nextQueue_.\n      1. Let _newContext_ be a new execution context.\n      1. Set _newContext_'s Function to *null*.\n      1. Set _newContext_'s Realm to _nextPending_.[[Realm]].\n      1. Set _newContext_'s ScriptOrModule to _nextPending_.[[ScriptOrModule]].\n      1. Push _newContext_ onto the execution context stack; _newContext_ is now the running execution context.\n      1. Let _job_ be _nextPending_.[[Job]].\n      1. Let _result_ be _job_().\n      1. If _result_ is an abrupt completion,\n        1. If _errors_ is *undefined*, set _errors_ to ¬´ _result_.[[Value]] ¬ª.\n        1. Otherwise, append _result_.[[Value]] to _errors_.\n  ",
  "ClassElement[5,0].ClassElementKind" : "\n        1. Return ~empty~.\n      ",
  "StatementListItem[1,0].TopLevelVarScopedDeclarations" : "\n        1. If |Declaration| is <emu-grammar>Declaration : HoistableDeclaration</emu-grammar>, then\n          1. Let _declaration_ be DeclarationPart of |HoistableDeclaration|.\n          1. Return ¬´ _declaration_ ¬ª.\n        1. Return a new empty List.\n      ",
  "ForInOfStatement[0,0].ContainsUndefinedBreakTarget" : "\n        1. Return ContainsUndefinedBreakTarget of |Statement| with argument _labelSet_.\n      ",
  "IsValidIntegerIndex" : "\n          1. If IsDetachedBuffer(_O_.[[ViewedArrayBuffer]]) is *true*, return *false*.\n          1. If IsIntegralNumber(_index_) is *false*, return *false*.\n          1. If _index_ is *-0*<sub>ùîΩ</sub>, return *false*.\n          1. Let _taRecord_ be MakeTypedArrayWithBufferWitnessRecord(_O_, ~unordered~).\n          1. NOTE: Bounds checking is not a synchronizing operation when _O_'s backing buffer is a growable SharedArrayBuffer.\n          1. If IsTypedArrayOutOfBounds(_taRecord_) is *true*, return *false*.\n          1. Let _length_ be TypedArrayLength(_taRecord_).\n          1. If ‚Ñù(_index_) < 0 or ‚Ñù(_index_) ‚â• _length_, return *false*.\n          1. Return *true*.\n        ",
  "ClassTail[0,2].ClassDefinitionEvaluation:clo0" : "\n        1. Let _env_ be the LexicalEnvironment of the running execution context.\n        1. Let _classEnv_ be NewDeclarativeEnvironment(_env_).\n        1. If _classBinding_ is not *undefined*, then\n          1. Perform ! _classEnv_.CreateImmutableBinding(_classBinding_, *true*).\n        1. Let _outerPrivateEnvironment_ be the running execution context's PrivateEnvironment.\n        1. Let _classPrivateEnvironment_ be NewPrivateEnvironment(_outerPrivateEnvironment_).\n        1. If |ClassBody| is present, then\n          1. For each String _dn_ of the PrivateBoundIdentifiers of |ClassBody|, do\n            1. If _classPrivateEnvironment_.[[Names]] contains a Private Name _pn_ such that _pn_.[[Description]] is _dn_, then\n              1. Assert: This is only possible for getter/setter pairs.\n            1. Else,\n              1. Let _name_ be a new Private Name whose [[Description]] is _dn_.\n              1. Append _name_ to _classPrivateEnvironment_.[[Names]].\n        1. If |ClassHeritage| is not present, then\n          1. Let _protoParent_ be %Object.prototype%.\n          1. Let _constructorParent_ be %Function.prototype%.\n        1. Else,\n          1. Set the running execution context's LexicalEnvironment to _classEnv_.\n          1. NOTE: The running execution context's PrivateEnvironment is _outerPrivateEnvironment_ when evaluating |ClassHeritage|.\n          1. Let _superclassRef_ be Completion(Evaluation of |ClassHeritage|).\n          1. Set the running execution context's LexicalEnvironment to _env_.\n          1. Let _superclass_ be ? GetValue(? _superclassRef_).\n          1. If _superclass_ is *null*, then\n            1. Let _protoParent_ be *null*.\n            1. Let _constructorParent_ be %Function.prototype%.\n          1. Else if IsConstructor(_superclass_) is *false*, then\n            1. Throw a *TypeError* exception.\n          1. Else,\n            1. Let _protoParent_ be ? Get(_superclass_, *\"prototype\"*).\n            1. If _protoParent_ is not an Object and _protoParent_ is not *null*, throw a *TypeError* exception.\n            1. Let _constructorParent_ be _superclass_.\n        1. Let _proto_ be OrdinaryObjectCreate(_protoParent_).\n        1. If |ClassBody| is not present, let _constructor_ be ~empty~.\n        1. Else, let _constructor_ be ConstructorMethod of |ClassBody|.\n        1. Set the running execution context's LexicalEnvironment to _classEnv_.\n        1. Set the running execution context's PrivateEnvironment to _classPrivateEnvironment_.\n        1. If _constructor_ is ~empty~, then\n          1. Let _defaultConstructor_ be a new Abstract Closure with no parameters that captures nothing and performs the following steps when called:\n            1. Let _args_ be the List of arguments that was passed to this function by [[Call]] or [[Construct]].\n            1. If NewTarget is *undefined*, throw a *TypeError* exception.\n            1. Let _F_ be the active function object.\n            1. If _F_.[[ConstructorKind]] is ~derived~, then\n              1. NOTE: This branch behaves similarly to `constructor(...args) { super(...args); }`. The most notable distinction is that while the aforementioned ECMAScript source text observably calls the @@iterator method on `%Array.prototype%`, this function does not.\n              1. Let _func_ be ! _F_.[[GetPrototypeOf]]().\n              1. If IsConstructor(_func_) is *false*, throw a *TypeError* exception.\n              1. Let _result_ be ? Construct(_func_, _args_, NewTarget).\n            1. Else,\n              1. NOTE: This branch behaves similarly to `constructor() {}`.\n              1. Let _result_ be ? OrdinaryCreateFromConstructor(NewTarget, *\"%Object.prototype%\"*).\n            1. Perform ? InitializeInstanceElements(_result_, _F_).\n            1. Return _result_.\n          1. Let _F_ be CreateBuiltinFunction(_defaultConstructor_, 0, _className_, ¬´ [[ConstructorKind]], [[SourceText]] ¬ª, the current Realm Record, _constructorParent_).\n        1. Else,\n          1. Let _constructorInfo_ be ! DefineMethod of _constructor_ with arguments _proto_ and _constructorParent_.\n          1. Let _F_ be _constructorInfo_.[[Closure]].\n          1. Perform MakeClassConstructor(_F_).\n          1. Perform SetFunctionName(_F_, _className_).\n        1. Perform MakeConstructor(_F_, *false*, _proto_).\n        1. If |ClassHeritage| is present, set _F_.[[ConstructorKind]] to ~derived~.\n        1. Perform ! DefineMethodProperty(_proto_, *\"constructor\"*, _F_, *false*).\n        1. If |ClassBody| is not present, let _elements_ be a new empty List.\n        1. Else, let _elements_ be NonConstructorElements of |ClassBody|.\n        1. Let _instancePrivateMethods_ be a new empty List.\n        1. Let _staticPrivateMethods_ be a new empty List.\n        1. Let _instanceFields_ be a new empty List.\n        1. Let _staticElements_ be a new empty List.\n        1. For each |ClassElement| _e_ of _elements_, do\n          1. If IsStatic of _e_ is *false*, then\n            1. Let _element_ be Completion(ClassElementEvaluation of _e_ with argument _proto_).\n          1. Else,\n            1. Let _element_ be Completion(ClassElementEvaluation of _e_ with argument _F_).\n          1. If _element_ is an abrupt completion, then\n            1. Set the running execution context's LexicalEnvironment to _env_.\n            1. Set the running execution context's PrivateEnvironment to _outerPrivateEnvironment_.\n            1. Return ? _element_.\n          1. Set _element_ to ! _element_.\n          1. If _element_ is a PrivateElement, then\n            1. Assert: _element_.[[Kind]] is either ~method~ or ~accessor~.\n            1. If IsStatic of _e_ is *false*, let _container_ be _instancePrivateMethods_.\n            1. Else, let _container_ be _staticPrivateMethods_.\n            1. If _container_ contains a PrivateElement _pe_ such that _pe_.[[Key]] is _element_.[[Key]], then\n              1. Assert: _element_.[[Kind]] and _pe_.[[Kind]] are both ~accessor~.\n              1. If _element_.[[Get]] is *undefined*, then\n                1. Let _combined_ be PrivateElement { [[Key]]: _element_.[[Key]], [[Kind]]: ~accessor~, [[Get]]: _pe_.[[Get]], [[Set]]: _element_.[[Set]] }.\n              1. Else,\n                1. Let _combined_ be PrivateElement { [[Key]]: _element_.[[Key]], [[Kind]]: ~accessor~, [[Get]]: _element_.[[Get]], [[Set]]: _pe_.[[Set]] }.\n              1. Replace _pe_ in _container_ with _combined_.\n            1. Else,\n              1. Append _element_ to _container_.\n          1. Else if _element_ is a ClassFieldDefinition Record, then\n            1. If IsStatic of _e_ is *false*, append _element_ to _instanceFields_.\n            1. Else, append _element_ to _staticElements_.\n          1. Else if _element_ is a ClassStaticBlockDefinition Record, then\n            1. Append _element_ to _staticElements_.\n        1. Set the running execution context's LexicalEnvironment to _env_.\n        1. If _classBinding_ is not *undefined*, then\n          1. Perform ! _classEnv_.InitializeBinding(_classBinding_, _F_).\n        1. Set _F_.[[PrivateMethods]] to _instancePrivateMethods_.\n        1. Set _F_.[[Fields]] to _instanceFields_.\n        1. For each PrivateElement _method_ of _staticPrivateMethods_, do\n          1. Perform ! PrivateMethodOrAccessorAdd(_F_, _method_).\n        1. For each element _elementRecord_ of _staticElements_, do\n          1. If _elementRecord_ is a ClassFieldDefinition Record, then\n            1. Let _result_ be Completion(DefineField(_F_, _elementRecord_)).\n          1. Else,\n            1. Assert: _elementRecord_ is a ClassStaticBlockDefinition Record.\n            1. Let _result_ be Completion(Call(_elementRecord_.[[BodyFunction]], _F_)).\n          1. If _result_ is an abrupt completion, then\n            1. Set the running execution context's PrivateEnvironment to _outerPrivateEnvironment_.\n            1. Return ? _result_.\n        1. Set the running execution context's PrivateEnvironment to _outerPrivateEnvironment_.\n        1. Return _F_.\n      ",
  "ClassIntersection[1,0].MayContainStrings" : "\n          1. If MayContainStrings of the |ClassIntersection| is *false*, return *false*.\n          1. If MayContainStrings of the |ClassSetOperand| is *false*, return *false*.\n          1. Return *true*.\n        ",
  "HoistableDeclaration[2,0].DeclarationPart" : "\n        1. Return |AsyncFunctionDeclaration|.\n      ",
  "PrimaryExpression[0,0].AssignmentTargetType" : "\n        1. Return ~invalid~.\n      ",
  "ObjectBindingPattern[3,1].BindingInitialization" : "\n        1. Let _excludedNames_ be ? PropertyBindingInitialization of |BindingPropertyList| with arguments _value_ and _environment_.\n        1. Return ? RestBindingInitialization of |BindingRestProperty| with arguments _value_, _environment_, and _excludedNames_.\n      ",
  "ClassElement[4,0].ClassElementKind" : "\n        1. Return ~non-constructor-method~.\n      ",
  "GetIdentifierReference" : "\n          1. If _env_ is *null*, then\n            1. Return the Reference Record { [[Base]]: ~unresolvable~, [[ReferencedName]]: _name_, [[Strict]]: _strict_, [[ThisValue]]: ~empty~ }.\n          1. Let _exists_ be ? <emu-meta effects=\"user-code\">_env_.HasBinding</emu-meta>(_name_).\n          1. If _exists_ is *true*, then\n            1. Return the Reference Record { [[Base]]: _env_, [[ReferencedName]]: _name_, [[Strict]]: _strict_, [[ThisValue]]: ~empty~ }.\n          1. Else,\n            1. Let _outer_ be _env_.[[OuterEnv]].\n            1. Return ? GetIdentifierReference(_outer_, _name_, _strict_).\n        ",
  "Completion" : "\n          1. Assert: _completionRecord_ is a Completion Record.\n          1. Return _completionRecord_.\n        ",
  "CharacterEscape[5,0].CharacterValue" : "\n          1. Let _ch_ be the code point matched by |IdentityEscape|.\n          1. Return the numeric value of _ch_.\n        ",
  "CaseClause[0,0].ContainsDuplicateLabels" : "\n        1. If the |StatementList| is present, return ContainsDuplicateLabels of |StatementList| with argument _labelSet_.\n        1. Return *false*.\n      ",
  "INTRINSICS.TypedArray.prototype.filter" : "\n          1. Let _O_ be the *this* value.\n          1. Let _taRecord_ be ? ValidateTypedArray(_O_, ~seq-cst~).\n          1. Let _len_ be TypedArrayLength(_taRecord_).\n          1. If IsCallable(_callbackfn_) is *false*, throw a *TypeError* exception.\n          1. Let _kept_ be a new empty List.\n          1. Let _captured_ be 0.\n          1. Let _k_ be 0.\n          1. Repeat, while _k_ < _len_,\n            1. Let _Pk_ be ! ToString(ùîΩ(_k_)).\n            1. Let _kValue_ be ! Get(_O_, _Pk_).\n            1. Let _selected_ be ToBoolean(? Call(_callbackfn_, _thisArg_, ¬´ _kValue_, ùîΩ(_k_), _O_ ¬ª)).\n            1. If _selected_ is *true*, then\n              1. Append _kValue_ to _kept_.\n              1. Set _captured_ to _captured_ + 1.\n            1. Set _k_ to _k_ + 1.\n          1. Let _A_ be ? TypedArraySpeciesCreate(_O_, ¬´ ùîΩ(_captured_) ¬ª).\n          1. Let _n_ be 0.\n          1. For each element _e_ of _kept_, do\n            1. Perform ! Set(_A_, ! ToString(ùîΩ(_n_)), _e_, *true*).\n            1. Set _n_ to _n_ + 1.\n          1. Return _A_.\n        ",
  "INTRINSICS.Boolean.prototype.toString" : "\n          1. Let _b_ be ? ThisBooleanValue(*this* value).\n          1. If _b_ is *true*, return *\"true\"*; else return *\"false\"*.\n        ",
  "ForInOfStatement[0,0].ContainsUndefinedContinueTarget" : "\n        1. Return ContainsUndefinedContinueTarget of |Statement| with arguments _iterationSet_ and ¬´ ¬ª.\n      ",
  "INTRINSICS.Promise.prototype.finally:clo0" : "\n          1. Let _promise_ be the *this* value.\n          1. If _promise_ is not an Object, throw a *TypeError* exception.\n          1. Let _C_ be ? SpeciesConstructor(_promise_, %Promise%).\n          1. Assert: IsConstructor(_C_) is *true*.\n          1. If IsCallable(_onFinally_) is *false*, then\n            1. Let _thenFinally_ be _onFinally_.\n            1. Let _catchFinally_ be _onFinally_.\n          1. Else,\n            1. Let _thenFinallyClosure_ be a new Abstract Closure with parameters (_value_) that captures _onFinally_ and _C_ and performs the following steps when called:\n              1. Let _result_ be ? Call(_onFinally_, *undefined*).\n              1. Let _p_ be ? PromiseResolve(_C_, _result_).\n              1. Let _returnValue_ be a new Abstract Closure with no parameters that captures _value_ and performs the following steps when called:\n                1. Return _value_.\n              1. Let _valueThunk_ be CreateBuiltinFunction(_returnValue_, 0, *\"\"*, ¬´ ¬ª).\n              1. Return ? Invoke(_p_, *\"then\"*, ¬´ _valueThunk_ ¬ª).\n            1. Let _thenFinally_ be CreateBuiltinFunction(_thenFinallyClosure_, 1, *\"\"*, ¬´ ¬ª).\n            1. Let _catchFinallyClosure_ be a new Abstract Closure with parameters (_reason_) that captures _onFinally_ and _C_ and performs the following steps when called:\n              1. Let _result_ be ? Call(_onFinally_, *undefined*).\n              1. Let _p_ be ? PromiseResolve(_C_, _result_).\n              1. Let _throwReason_ be a new Abstract Closure with no parameters that captures _reason_ and performs the following steps when called:\n                1. Return ThrowCompletion(_reason_).\n              1. Let _thrower_ be CreateBuiltinFunction(_throwReason_, 0, *\"\"*, ¬´ ¬ª).\n              1. Return ? Invoke(_p_, *\"then\"*, ¬´ _thrower_ ¬ª).\n            1. Let _catchFinally_ be CreateBuiltinFunction(_catchFinallyClosure_, 1, *\"\"*, ¬´ ¬ª).\n          1. Return ? Invoke(_promise_, *\"then\"*, ¬´ _thenFinally_, _catchFinally_ ¬ª).\n        ",
  "INTRINSICS.DataView" : "\n          1. If NewTarget is *undefined*, throw a *TypeError* exception.\n          1. Perform ? RequireInternalSlot(_buffer_, [[ArrayBufferData]]).\n          1. Let _offset_ be ? ToIndex(_byteOffset_).\n          1. If IsDetachedBuffer(_buffer_) is *true*, throw a *TypeError* exception.\n          1. Let _bufferByteLength_ be ArrayBufferByteLength(_buffer_, ~seq-cst~).\n          1. If _offset_ > _bufferByteLength_, throw a *RangeError* exception.\n          1. Let _bufferIsFixedLength_ be IsFixedLengthArrayBuffer(_buffer_).\n          1. If _byteLength_ is *undefined*, then\n            1. If _bufferIsFixedLength_ is *true*, then\n              1. Let _viewByteLength_ be _bufferByteLength_ - _offset_.\n            1. Else,\n              1. Let _viewByteLength_ be ~auto~.\n          1. Else,\n            1. Let _viewByteLength_ be ? ToIndex(_byteLength_).\n            1. If _offset_ + _viewByteLength_ > _bufferByteLength_, throw a *RangeError* exception.\n          1. Let _O_ be ? OrdinaryCreateFromConstructor(NewTarget, *\"%DataView.prototype%\"*, ¬´ [[DataView]], [[ViewedArrayBuffer]], [[ByteLength]], [[ByteOffset]] ¬ª).\n          1. If IsDetachedBuffer(_buffer_) is *true*, throw a *TypeError* exception.\n          1. Set _bufferByteLength_ to ArrayBufferByteLength(_buffer_, ~seq-cst~).\n          1. If _offset_ > _bufferByteLength_, throw a *RangeError* exception.\n          1. If _byteLength_ is not *undefined*, then\n            1. If _offset_ + _viewByteLength_ > _bufferByteLength_, throw a *RangeError* exception.\n          1. Set _O_.[[ViewedArrayBuffer]] to _buffer_.\n          1. Set _O_.[[ByteLength]] to _viewByteLength_.\n          1. Set _O_.[[ByteOffset]] to _offset_.\n          1. Return _O_.\n        ",
  "TryStatement[2,0].VarDeclaredNames" : "\n        1. Let _names1_ be VarDeclaredNames of |Block|.\n        1. Let _names2_ be VarDeclaredNames of |Catch|.\n        1. Let _names3_ be VarDeclaredNames of |Finally|.\n        1. Return the list-concatenation of _names1_, _names2_, and _names3_.\n      ",
  "CharacterClassEscape[2,0].MayContainStrings" : "\n          1. Return *false*.\n        ",
  "ForInOfStatement[4,0].ForInOfLoopEvaluation" : "\n          1. Let _keyResult_ be ? ForIn/OfHeadEvaluation(¬´ ¬ª, |AssignmentExpression|, ~iterate~).\n          1. Return ? ForIn/OfBodyEvaluation(|ForBinding|, |Statement|, _keyResult_, ~iterate~, ~var-binding~, _labelSet_).\n        ",
  "LeftHandSideExpression[1,0].IsIdentifierRef" : "\n        1. Return *false*.\n      ",
  "ClassExpression[0,1].Evaluation" : "\n        1. Let _className_ be StringValue of |BindingIdentifier|.\n        1. Let _value_ be ? ClassDefinitionEvaluation of |ClassTail| with arguments _className_ and _className_.\n        1. Set _value_.[[SourceText]] to the source text matched by |ClassExpression|.\n        1. Return _value_.\n      ",
  "BigInt::subtract" : "\n            1. Return _x_ - _y_.\n          ",
  "BitwiseANDExpression[1,0].IsFunctionDefinition" : "\n        1. Return *false*.\n      ",
  "INTRINSICS.encodeURIComponent" : "\n          1. Let _componentString_ be ? ToString(_uriComponent_).\n          1. Let _extraUnescaped_ be the empty String.\n          1. Return ? Encode(_componentString_, _extraUnescaped_).\n        ",
  "ExportDeclaration[3,0].ExportedBindings" : "\n          1. Return the BoundNames of |Declaration|.\n        ",
  "CallExpression[0,0].AssignmentTargetType" : "\n        1. Return ~invalid~.\n      ",
  "BigInt::divide" : "\n            1. If _y_ is *0*<sub>‚Ñ§</sub>, throw a *RangeError* exception.\n            1. Let _quotient_ be ‚Ñù(_x_) / ‚Ñù(_y_).\n            1. Return ‚Ñ§(truncate(_quotient_)).\n          ",
  "CaseBlock[1,3].VarDeclaredNames" : "\n        1. If the first |CaseClauses| is present, let _names1_ be the VarDeclaredNames of the first |CaseClauses|.\n        1. Else, let _names1_ be a new empty List.\n        1. Let _names2_ be VarDeclaredNames of |DefaultClause|.\n        1. If the second |CaseClauses| is present, let _names3_ be the VarDeclaredNames of the second |CaseClauses|.\n        1. Else, let _names3_ be a new empty List.\n        1. Return the list-concatenation of _names1_, _names2_, and _names3_.\n      ",
  "INTRINSICS.Date.prototype.setUTCMonth" : "\n          1. Let _dateObject_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_dateObject_, [[DateValue]]).\n          1. Let _t_ be _dateObject_.[[DateValue]].\n          1. Let _m_ be ? ToNumber(_month_).\n          1. If _date_ is present, let _dt_ be ? ToNumber(_date_).\n          1. If _t_ is *NaN*, return *NaN*.\n          1. If _date_ is not present, let _dt_ be DateFromTime(_t_).\n          1. Let _newDate_ be MakeDate(MakeDay(YearFromTime(_t_), _m_, _dt_), TimeWithinDay(_t_)).\n          1. Let _v_ be TimeClip(_newDate_).\n          1. Set _dateObject_.[[DateValue]] to _v_.\n          1. Return _v_.\n        ",
  "INTRINSICS.Date.prototype.getUTCDay" : "\n          1. Let _dateObject_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_dateObject_, [[DateValue]]).\n          1. Let _t_ be _dateObject_.[[DateValue]].\n          1. If _t_ is *NaN*, return *NaN*.\n          1. Return WeekDay(_t_).\n        ",
  "EqualityExpression[2,0].AssignmentTargetType" : "\n        1. Return ~invalid~.\n      ",
  "AsyncArrowFunction[0,0].Evaluation" : "\n        1. Return InstantiateAsyncArrowFunctionExpression of |AsyncArrowFunction|.\n      ",
  "ObjectBindingPattern[2,0].BindingInitialization" : "\n        1. Perform ? PropertyBindingInitialization of |BindingPropertyList| with arguments _value_ and _environment_.\n        1. Return ~unused~.\n      ",
  "UpdateExpression[4,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "LetOrConst[0,0].IsConstantDeclaration" : "\n        1. Return *false*.\n      ",
  "AsyncGeneratorBody[0,0].EvaluateBody" : "\n          1. Return ? EvaluateAsyncGeneratorBody of |AsyncGeneratorBody| with arguments _functionObject_ and _argumentsList_.\n        ",
  "INTRINSICS.AsyncFromSyncIteratorPrototype.throw" : "\n            1. Let _O_ be the *this* value.\n            1. Assert: _O_ is an Object that has a [[SyncIteratorRecord]] internal slot.\n            1. Let _promiseCapability_ be ! NewPromiseCapability(%Promise%).\n            1. Let _syncIterator_ be _O_.[[SyncIteratorRecord]].[[Iterator]].\n            1. Let _throw_ be Completion(GetMethod(_syncIterator_, *\"throw\"*)).\n            1. IfAbruptRejectPromise(_throw_, _promiseCapability_).\n            1. If _throw_ is *undefined*, then\n              1. Perform ! Call(_promiseCapability_.[[Reject]], *undefined*, ¬´ _value_ ¬ª).\n              1. Return _promiseCapability_.[[Promise]].\n            1. If _value_ is present, then\n              1. Let _result_ be Completion(Call(_throw_, _syncIterator_, ¬´ _value_ ¬ª)).\n            1. Else,\n              1. Let _result_ be Completion(Call(_throw_, _syncIterator_)).\n            1. IfAbruptRejectPromise(_result_, _promiseCapability_).\n            1. If _result_ is not an Object, then\n              1. Perform ! Call(_promiseCapability_.[[Reject]], *undefined*, ¬´ a newly created *TypeError* object ¬ª).\n              1. Return _promiseCapability_.[[Promise]].\n            1. Return AsyncFromSyncIteratorContinuation(_result_, _promiseCapability_).\n          ",
  "INTRINSICS.Map.prototype.delete" : "\n          1. Let _M_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_M_, [[MapData]]).\n          1. For each Record { [[Key]], [[Value]] } _p_ of _M_.[[MapData]], do\n            1. If _p_.[[Key]] is not ~empty~ and SameValueZero(_p_.[[Key]], _key_) is *true*, then\n              1. Set _p_.[[Key]] to ~empty~.\n              1. Set _p_.[[Value]] to ~empty~.\n              1. Return *true*.\n          1. Return *false*.\n        ",
  "LabelledItem[1,0].LabelledEvaluation" : "\n        1. Return ? Evaluation of |FunctionDeclaration|.\n      ",
  "BigInt::exponentiate" : "\n            1. If _exponent_ < *0*<sub>‚Ñ§</sub>, throw a *RangeError* exception.\n            1. If _base_ is *0*<sub>‚Ñ§</sub> and _exponent_ is *0*<sub>‚Ñ§</sub>, return *1*<sub>‚Ñ§</sub>.\n            1. Return _base_ raised to the power _exponent_.\n          ",
  "Record[ObjectEnvironmentRecord].GetBindingValue" : "\n            1. Let _bindingObject_ be _envRec_.[[BindingObject]].\n            1. Let _value_ be ? HasProperty(_bindingObject_, _N_).\n            1. If _value_ is *false*, then\n              1. If _S_ is *false*, return *undefined*; otherwise throw a *ReferenceError* exception.\n            1. Return ? Get(_bindingObject_, _N_).\n          ",
  "HoistableDeclaration[2,0].Evaluation" : "\n        1. Return ~empty~.\n      ",
  "INTRINSICS.Object.create" : "\n          1. If _O_ is not an Object and _O_ is not *null*, throw a *TypeError* exception.\n          1. Let _obj_ be OrdinaryObjectCreate(_O_).\n          1. If _Properties_ is not *undefined*, then\n            1. Return ? ObjectDefineProperties(_obj_, _Properties_).\n          1. Return _obj_.\n        ",
  "CodePointAt" : "\n        1. Let _size_ be the length of _string_.\n        1. Assert: _position_ ‚â• 0 and _position_ < _size_.\n        1. Let _first_ be the code unit at index _position_ within _string_.\n        1. Let _cp_ be the code point whose numeric value is the numeric value of _first_.\n        1. If _first_ is neither a leading surrogate nor a trailing surrogate, then\n          1. Return the Record { [[CodePoint]]: _cp_, [[CodeUnitCount]]: 1, [[IsUnpairedSurrogate]]: *false* }.\n        1. If _first_ is a trailing surrogate or _position_ + 1 = _size_, then\n          1. Return the Record { [[CodePoint]]: _cp_, [[CodeUnitCount]]: 1, [[IsUnpairedSurrogate]]: *true* }.\n        1. Let _second_ be the code unit at index _position_ + 1 within _string_.\n        1. If _second_ is not a trailing surrogate, then\n          1. Return the Record { [[CodePoint]]: _cp_, [[CodeUnitCount]]: 1, [[IsUnpairedSurrogate]]: *true* }.\n        1. Set _cp_ to UTF16SurrogatePairToCodePoint(_first_, _second_).\n        1. Return the Record { [[CodePoint]]: _cp_, [[CodeUnitCount]]: 2, [[IsUnpairedSurrogate]]: *false* }.\n      ",
  "IfStatement[1,0].VarDeclaredNames" : "\n        1. Return the VarDeclaredNames of |Statement|.\n      ",
  "EvaluateStringOrNumericBinaryExpression" : "\n        1. Let _lref_ be ? Evaluation of _leftOperand_.\n        1. Let _lval_ be ? GetValue(_lref_).\n        1. Let _rref_ be ? Evaluation of _rightOperand_.\n        1. Let _rval_ be ? GetValue(_rref_).\n        1. Return ? ApplyStringOrNumericBinaryOperator(_lval_, _opText_, _rval_).\n      ",
  "TemplateLiteral[1,0].ArgumentListEvaluation" : "\n          1. Let _templateLiteral_ be this |TemplateLiteral|.\n          1. Let _siteObj_ be GetTemplateObject(_templateLiteral_).\n          1. Let _remaining_ be ? ArgumentListEvaluation of |SubstitutionTemplate|.\n          1. Return the list-concatenation of ¬´ _siteObj_ ¬ª and _remaining_.\n        ",
  "INTRINSICS.get RegExp.prototype.unicodeSets" : "\n          1. Let _R_ be the *this* value.\n          1. Let _cu_ be the code unit 0x0076 (LATIN SMALL LETTER V).\n          1. Return ? RegExpHasFlag(_R_, _cu_).\n        ",
  "HoistableDeclaration[3,0].DeclarationPart" : "\n        1. Return |AsyncGeneratorDeclaration|.\n      ",
  "ClassElement[3,0].ClassElementKind" : "\n        1. Return ~non-constructor-method~.\n      ",
  "MethodDefinition[0,0].ComputedPropertyContains" : "\n        1. Return the result of ComputedPropertyContains of |ClassElementName| with argument _symbol_.\n      ",
  "ClassEscape[0,0].CharacterValue" : "\n          1. Return the numeric value of U+0008 (BACKSPACE).\n        ",
  "ArrowParameters[1,0].IsSimpleParameterList" : "\n        1. Let _formals_ be the |ArrowFormalParameters| that is covered by |CoverParenthesizedExpressionAndArrowParameterList|.\n        1. Return IsSimpleParameterList of _formals_.\n      ",
  "INTRINSICS.TypedArray.prototype.subarray" : "\n          1. Let _O_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_O_, [[TypedArrayName]]).\n          1. Assert: _O_ has a [[ViewedArrayBuffer]] internal slot.\n          1. Let _buffer_ be _O_.[[ViewedArrayBuffer]].\n          1. Let _srcRecord_ be MakeTypedArrayWithBufferWitnessRecord(_O_, ~seq-cst~).\n          1. If IsTypedArrayOutOfBounds(_srcRecord_) is *true*, then\n            1. Let _srcLength_ be 0.\n          1. Else,\n            1. Let _srcLength_ be TypedArrayLength(_srcRecord_).\n          1. Let _relativeStart_ be ? ToIntegerOrInfinity(_start_).\n          1. If _relativeStart_ = -‚àû, let _startIndex_ be 0.\n          1. Else if _relativeStart_ < 0, let _startIndex_ be max(_srcLength_ + _relativeStart_, 0).\n          1. Else, let _startIndex_ be min(_relativeStart_, _srcLength_).\n          1. Let _elementSize_ be TypedArrayElementSize(_O_).\n          1. Let _srcByteOffset_ be _O_.[[ByteOffset]].\n          1. Let _beginByteOffset_ be _srcByteOffset_ + (_startIndex_ √ó _elementSize_).\n          1. If _O_.[[ArrayLength]] is ~auto~ and _end_ is *undefined*, then\n            1. Let _argumentsList_ be ¬´ _buffer_, ùîΩ(_beginByteOffset_) ¬ª.\n          1. Else,\n            1. If _end_ is *undefined*, let _relativeEnd_ be _srcLength_; else let _relativeEnd_ be ? ToIntegerOrInfinity(_end_).\n            1. If _relativeEnd_ = -‚àû, let _endIndex_ be 0.\n            1. Else if _relativeEnd_ < 0, let _endIndex_ be max(_srcLength_ + _relativeEnd_, 0).\n            1. Else, let _endIndex_ be min(_relativeEnd_, _srcLength_).\n            1. Let _newLength_ be max(_endIndex_ - _startIndex_, 0).\n            1. Let _argumentsList_ be ¬´ _buffer_, ùîΩ(_beginByteOffset_), ùîΩ(_newLength_) ¬ª.\n          1. Return ? TypedArraySpeciesCreate(_O_, _argumentsList_).\n        ",
  "IdentifierReference[2,0].StringValue" : "\n        1. Return *\"await\"*.\n      ",
  "FunctionStatementList[0,0].ContainsUndefinedContinueTarget" : "\n        1. Return *false*.\n      ",
  "IsPromise" : "\n          1. If _x_ is not an Object, return *false*.\n          1. If _x_ does not have a [[PromiseState]] internal slot, return *false*.\n          1. Return *true*.\n        ",
  "ShiftExpression[1,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "INTRINSICS.ArrayBuffer.isView" : "\n          1. If _arg_ is not an Object, return *false*.\n          1. If _arg_ has a [[ViewedArrayBuffer]] internal slot, return *true*.\n          1. Return *false*.\n        ",
  "INTRINSICS.Date.prototype.toISOString" : "\n          1. Let _dateObject_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_dateObject_, [[DateValue]]).\n          1. Let _tv_ be _dateObject_.[[DateValue]].\n          1. If _tv_ is not finite, throw a *RangeError* exception.\n          1. If _tv_ corresponds with a year that cannot be represented in the <emu-xref href=\"#sec-date-time-string-format\">Date Time String Format</emu-xref>, throw a *RangeError* exception.\n          1. Return a String representation of _tv_ in the <emu-xref href=\"#sec-date-time-string-format\">Date Time String Format</emu-xref> on the UTC time scale, including all format elements and the UTC offset representation *\"Z\"*.\n        ",
  "INTRINSICS.Math.min" : "\n          1. Let _coerced_ be a new empty List.\n          1. For each element _arg_ of _args_, do\n            1. Let _n_ be ? ToNumber(_arg_).\n            1. Append _n_ to _coerced_.\n          1. Let _lowest_ be *+‚àû*<sub>ùîΩ</sub>.\n          1. For each element _number_ of _coerced_, do\n            1. If _number_ is *NaN*, return *NaN*.\n            1. If _number_ is *-0*<sub>ùîΩ</sub> and _lowest_ is *+0*<sub>ùîΩ</sub>, set _lowest_ to *-0*<sub>ùîΩ</sub>.\n            1. If _number_ < _lowest_, set _lowest_ to _number_.\n          1. Return _lowest_.\n        ",
  "FunctionStatementList[0,1].LexicallyScopedDeclarations" : "\n        1. Return the TopLevelLexicallyScopedDeclarations of |StatementList|.\n      ",
  "GeneratorDeclaration[1,0].BoundNames" : "\n        1. Return ¬´ *\"\\*default\\*\"* ¬ª.\n      ",
  "ForStatement[0,4].ContainsUndefinedContinueTarget" : "\n        1. Return ContainsUndefinedContinueTarget of |Statement| with arguments _iterationSet_ and ¬´ ¬ª.\n      ",
  "Expression[1,0].Evaluation" : "\n        1. Let _lref_ be ? Evaluation of |Expression|.\n        1. Perform ? GetValue(_lref_).\n        1. Let _rref_ be ? Evaluation of |AssignmentExpression|.\n        1. Return ? GetValue(_rref_).\n      ",
  "PropertySetParameterList[0,0].ExpectedArgumentCount" : "\n        1. If HasInitializer of |FormalParameter| is *true*, return 0.\n        1. Return 1.\n      ",
  "VariableDeclarationList[0,0].VarScopedDeclarations" : "\n        1. Return ¬´ |VariableDeclaration| ¬ª.\n      ",
  "Catch[0,0].ContainsUndefinedBreakTarget" : "\n        1. Return ContainsUndefinedBreakTarget of |Block| with argument _labelSet_.\n      ",
  "EvaluateCall" : "\n          1. If _ref_ is a Reference Record, then\n            1. If IsPropertyReference(_ref_) is *true*, then\n              1. Let _thisValue_ be GetThisValue(_ref_).\n            1. Else,\n              1. Let _refEnv_ be _ref_.[[Base]].\n              1. Assert: _refEnv_ is an Environment Record.\n              1. Let _thisValue_ be _refEnv_.WithBaseObject().\n          1. Else,\n            1. Let _thisValue_ be *undefined*.\n          1. Let _argList_ be ? ArgumentListEvaluation of _arguments_.\n          1. If _func_ is not an Object, throw a *TypeError* exception.\n          1. If IsCallable(_func_) is *false*, throw a *TypeError* exception.\n          1. If _tailPosition_ is *true*, perform PrepareForTailCall().\n          1. Return ? Call(_func_, _thisValue_, _argList_).\n        ",
  "WithStatement[0,0].ContainsUndefinedContinueTarget" : "\n        1. Return ContainsUndefinedContinueTarget of |Statement| with arguments _iterationSet_ and ¬´ ¬ª.\n      ",
  "Record[FunctionEnvironmentRecord].GetSuperBase" : "\n            1. Let _home_ be _envRec_.[[FunctionObject]].[[HomeObject]].\n            1. If _home_ is *undefined*, return *undefined*.\n            1. Assert: _home_ is an Object.\n            1. Return ? <emu-meta effects=\"user-code\">_home_.[[GetPrototypeOf]]</emu-meta>().\n          ",
  "EnqueueResolveInAgentJob:clo0" : "\n          1. Let _resolveJob_ be a new Job Abstract Closure with no parameters that captures _agentSignifier_, _promiseCapability_, and _resolution_ and performs the following steps when called:\n            1. Assert: AgentSignifier() is _agentSignifier_.\n            1. Perform ! Call(_promiseCapability_.[[Resolve]], *undefined*, ¬´ _resolution_ ¬ª).\n            1. Return ~unused~.\n          1. Let _realmInTargetAgent_ be ! GetFunctionRealm(_promiseCapability_.[[Resolve]]).\n          1. Assert: _agentSignifier_ is _realmInTargetAgent_.[[AgentSignifier]].\n          1. Perform HostEnqueueGenericJob(_resolveJob_, _realmInTargetAgent_).\n          1. Return ~unused~.\n        ",
  "AddWaiter" : "\n          1. Assert: The surrounding agent is in the critical section for _WL_.\n          1. Assert: There is no Waiter Record in _WL_.[[Waiters]] whose [[PromiseCapability]] field is _waiterRecord_.[[PromiseCapability]] and whose [[AgentSignifier]] field is _waiterRecord_.[[AgentSignifier]].\n          1. Append _waiterRecord_ to _WL_.[[Waiters]].\n          1. Return ~unused~.\n        ",
  "ForInOfStatement[3,0].ContainsDuplicateLabels" : "\n        1. Return ContainsDuplicateLabels of |Statement| with argument _labelSet_.\n      ",
  "AsyncGeneratorDeclaration[0,0].IsConstantDeclaration" : "\n        1. Return *false*.\n      ",
  "CallExpression[2,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "ClassString[1,0].MayContainStrings" : "\n          1. Return MayContainStrings of the |NonEmptyClassString|.\n        ",
  "MethodDefinition[5,0].PropName" : "\n        1. Return PropName of |ClassElementName|.\n      ",
  "INTRINSICS.ArrayBuffer.prototype.slice" : "\n          1. Let _O_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_O_, [[ArrayBufferData]]).\n          1. If IsSharedArrayBuffer(_O_) is *true*, throw a *TypeError* exception.\n          1. If IsDetachedBuffer(_O_) is *true*, throw a *TypeError* exception.\n          1. Let _len_ be _O_.[[ArrayBufferByteLength]].\n          1. Let _relativeStart_ be ? ToIntegerOrInfinity(_start_).\n          1. If _relativeStart_ = -‚àû, let _first_ be 0.\n          1. Else if _relativeStart_ < 0, let _first_ be max(_len_ + _relativeStart_, 0).\n          1. Else, let _first_ be min(_relativeStart_, _len_).\n          1. If _end_ is *undefined*, let _relativeEnd_ be _len_; else let _relativeEnd_ be ? ToIntegerOrInfinity(_end_).\n          1. If _relativeEnd_ = -‚àû, let _final_ be 0.\n          1. Else if _relativeEnd_ < 0, let _final_ be max(_len_ + _relativeEnd_, 0).\n          1. Else, let _final_ be min(_relativeEnd_, _len_).\n          1. Let _newLen_ be max(_final_ - _first_, 0).\n          1. Let _ctor_ be ? SpeciesConstructor(_O_, %ArrayBuffer%).\n          1. Let _new_ be ? Construct(_ctor_, ¬´ ùîΩ(_newLen_) ¬ª).\n          1. Perform ? RequireInternalSlot(_new_, [[ArrayBufferData]]).\n          1. If IsSharedArrayBuffer(_new_) is *true*, throw a *TypeError* exception.\n          1. If IsDetachedBuffer(_new_) is *true*, throw a *TypeError* exception.\n          1. If SameValue(_new_, _O_) is *true*, throw a *TypeError* exception.\n          1. If _new_.[[ArrayBufferByteLength]] < _newLen_, throw a *TypeError* exception.\n          1. NOTE: Side-effects of the above steps may have detached or resized _O_.\n          1. If IsDetachedBuffer(_O_) is *true*, throw a *TypeError* exception.\n          1. Let _fromBuf_ be _O_.[[ArrayBufferData]].\n          1. Let _toBuf_ be _new_.[[ArrayBufferData]].\n          1. Let _currentLen_ be _O_.[[ArrayBufferByteLength]].\n          1. If _first_ < _currentLen_, then\n            1. Let _count_ be min(_newLen_, _currentLen_ - _first_).\n            1. Perform CopyDataBlockBytes(_toBuf_, 0, _fromBuf_, _first_, _count_).\n          1. Return _new_.\n        ",
  "Statement[8,0].ContainsDuplicateLabels" : "\n        1. Return *false*.\n      ",
  "LabelledItem[1,0].TopLevelVarScopedDeclarations" : "\n        1. Return ¬´ |FunctionDeclaration| ¬ª.\n      ",
  "UpdateExpression[4,0].AssignmentTargetType" : "\n        1. Return ~invalid~.\n      ",
  "BinaryXor" : "\n            1. If _x_ = 1 and _y_ = 0, return 1.\n            1. Else if _x_ = 0 and _y_ = 1, return 1.\n            1. Else, return 0.\n          ",
  "FormalParameters[0,0].IsSimpleParameterList" : "\n        1. Return *true*.\n      ",
  "BindingPropertyList[1,0].PropertyBindingInitialization" : "\n          1. Let _boundNames_ be ? PropertyBindingInitialization of |BindingPropertyList| with arguments _value_ and _environment_.\n          1. Let _nextNames_ be ? PropertyBindingInitialization of |BindingProperty| with arguments _value_ and _environment_.\n          1. Return the list-concatenation of _boundNames_ and _nextNames_.\n        ",
  "ElementList[0,1].ArrayAccumulation" : "\n          1. If |Elision| is present, then\n            1. Set _nextIndex_ to ? ArrayAccumulation of |Elision| with arguments _array_ and _nextIndex_.\n          1. Let _initResult_ be ? Evaluation of |AssignmentExpression|.\n          1. Let _initValue_ be ? GetValue(_initResult_).\n          1. Perform ! CreateDataPropertyOrThrow(_array_, ! ToString(ùîΩ(_nextIndex_)), _initValue_).\n          1. Return _nextIndex_ + 1.\n        ",
  "AsyncConciseBody[0,0].LexicallyDeclaredNames" : "\n        1. Return a new empty List.\n      ",
  "CallExpression[5,0].Evaluation" : "\n          1. Let _baseReference_ be ? Evaluation of |CallExpression|.\n          1. Let _baseValue_ be ? GetValue(_baseReference_).\n          1. If the source text matched by this |CallExpression| is strict mode code, let _strict_ be *true*; else let _strict_ be *false*.\n          1. Return EvaluatePropertyAccessWithIdentifierKey(_baseValue_, |IdentifierName|, _strict_).\n        ",
  "Record[CyclicModuleRecord].Link" : "\n            1. Assert: _module_.[[Status]] is one of ~unlinked~, ~linked~, ~evaluating-async~, or ~evaluated~.\n            1. Let _stack_ be a new empty List.\n            1. Let _result_ be Completion(InnerModuleLinking(_module_, _stack_, 0)).\n            1. If _result_ is an abrupt completion, then\n              1. For each Cyclic Module Record _m_ of _stack_, do\n                1. Assert: _m_.[[Status]] is ~linking~.\n                1. Set _m_.[[Status]] to ~unlinked~.\n              1. Assert: _module_.[[Status]] is ~unlinked~.\n              1. Return ? _result_.\n            1. Assert: _module_.[[Status]] is one of ~linked~, ~evaluating-async~, or ~evaluated~.\n            1. Assert: _stack_ is empty.\n            1. Return ~unused~.\n          ",
  "ForInOfStatement[3,0].ContainsUndefinedBreakTarget" : "\n        1. Return ContainsUndefinedBreakTarget of |Statement| with argument _labelSet_.\n      ",
  "GeneratorResume" : "\n          1. Let _state_ be ? GeneratorValidate(_generator_, _generatorBrand_).\n          1. If _state_ is ~completed~, return CreateIterResultObject(*undefined*, *true*).\n          1. Assert: _state_ is either ~suspended-start~ or ~suspended-yield~.\n          1. Let _genContext_ be _generator_.[[GeneratorContext]].\n          1. Let _methodContext_ be the running execution context.\n          1. Suspend _methodContext_.\n          1. Set _generator_.[[GeneratorState]] to ~executing~.\n          1. Push _genContext_ onto the execution context stack; _genContext_ is now the running execution context.\n          1. <emu-meta effects=\"user-code\">Resume the suspended evaluation of _genContext_</emu-meta> using NormalCompletion(_value_) as the result of the operation that suspended it. Let _result_ be the value returned by the resumed computation.\n          1. Assert: When we return here, _genContext_ has already been removed from the execution context stack and _methodContext_ is the currently running execution context.\n          1. Return ? _result_.\n        ",
  "Encode" : "\n          1. Let _len_ be the length of _string_.\n          1. Let _R_ be the empty String.\n          1. Let _alwaysUnescaped_ be the string-concatenation of the ASCII word characters and *\"-.!~\\*'()\"*.\n          1. Let _unescapedSet_ be the string-concatenation of _alwaysUnescaped_ and _extraUnescaped_.\n          1. Let _k_ be 0.\n          1. Repeat, while _k_ < _len_,\n            1. Let _C_ be the code unit at index _k_ within _string_.\n            1. If _unescapedSet_ contains _C_, then\n              1. Set _k_ to _k_ + 1.\n              1. Set _R_ to the string-concatenation of _R_ and _C_.\n            1. Else,\n              1. Let _cp_ be CodePointAt(_string_, _k_).\n              1. If _cp_.[[IsUnpairedSurrogate]] is *true*, throw a *URIError* exception.\n              1. Set _k_ to _k_ + _cp_.[[CodeUnitCount]].\n              1. Let _Octets_ be the List of octets resulting by applying the UTF-8 transformation to _cp_.[[CodePoint]].\n              1. For each element _octet_ of _Octets_, do\n                1. Let _hex_ be the String representation of _octet_, formatted as an uppercase hexadecimal number.\n                1. Set _R_ to the string-concatenation of _R_, *\"%\"*, and StringPad(_hex_, 2, *\"0\"*, ~start~).\n          1. Return _R_.\n        ",
  "TemplateLiteral[0,0].Evaluation" : "\n          1. Return the TV of |NoSubstitutionTemplate| as defined in <emu-xref href=\"#sec-template-literal-lexical-components\"></emu-xref>.\n        ",
  "INTRINSICS.Math.tanh" : "\n          1. Let _n_ be ? ToNumber(_x_).\n          1. If _n_ is one of *NaN*, *+0*<sub>ùîΩ</sub>, or *-0*<sub>ùîΩ</sub>, return _n_.\n          1. If _n_ is *+‚àû*<sub>ùîΩ</sub>, return *1*<sub>ùîΩ</sub>.\n          1. If _n_ is *-‚àû*<sub>ùîΩ</sub>, return *-1*<sub>ùîΩ</sub>.\n          1. Return an implementation-approximated Number value representing the result of the hyperbolic tangent of ‚Ñù(_n_).\n        ",
  "INTRINSICS.Array.prototype.filter" : "\n          1. Let _O_ be ? ToObject(*this* value).\n          1. Let _len_ be ? LengthOfArrayLike(_O_).\n          1. If IsCallable(_callbackfn_) is *false*, throw a *TypeError* exception.\n          1. Let _A_ be ? ArraySpeciesCreate(_O_, 0).\n          1. Let _k_ be 0.\n          1. Let _to_ be 0.\n          1. Repeat, while _k_ < _len_,\n            1. Let _Pk_ be ! ToString(ùîΩ(_k_)).\n            1. Let _kPresent_ be ? HasProperty(_O_, _Pk_).\n            1. If _kPresent_ is *true*, then\n              1. Let _kValue_ be ? Get(_O_, _Pk_).\n              1. Let _selected_ be ToBoolean(? Call(_callbackfn_, _thisArg_, ¬´ _kValue_, ùîΩ(_k_), _O_ ¬ª)).\n              1. If _selected_ is *true*, then\n                1. Perform ? CreateDataPropertyOrThrow(_A_, ! ToString(ùîΩ(_to_)), _kValue_).\n                1. Set _to_ to _to_ + 1.\n            1. Set _k_ to _k_ + 1.\n          1. Return _A_.\n        ",
  "<DEFAULT>.Contains" : "\n        1. For each child node _child_ of this Parse Node, do\n          1. If _child_ is an instance of _symbol_, return *true*.\n          1. If _child_ is an instance of a nonterminal, then\n            1. Let _contained_ be the result of _child_ Contains _symbol_.\n            1. If _contained_ is *true*, return *true*.\n        1. Return *false*.\n      ",
  "ExportsList[1,0].ExportedBindings" : "\n          1. Let _names1_ be the ExportedBindings of |ExportsList|.\n          1. Let _names2_ be the ExportedBindings of |ExportSpecifier|.\n          1. Return the list-concatenation of _names1_ and _names2_.\n        ",
  "ArrayAssignmentPattern[1,0].DestructuringAssignmentEvaluation" : "\n          1. Let _iteratorRecord_ be ? GetIterator(_value_, ~sync~).\n          1. Let _result_ be Completion(IteratorDestructuringAssignmentEvaluation of |AssignmentElementList| with argument _iteratorRecord_).\n          1. If _iteratorRecord_.[[Done]] is *false*, return ? IteratorClose(_iteratorRecord_, _result_).\n          1. Return _result_.\n        ",
  "NewExpression[1,0].IsDestructuring" : "\n          1. Return *false*.\n        ",
  "ForStatement[0,0].ContainsUndefinedContinueTarget" : "\n        1. Return ContainsUndefinedContinueTarget of |Statement| with arguments _iterationSet_ and ¬´ ¬ª.\n      ",
  "ImportedLocalNames" : "\n          1. Let _localNames_ be a new empty List.\n          1. For each ImportEntry Record _i_ of _importEntries_, do\n            1. Append _i_.[[LocalName]] to _localNames_.\n          1. Return _localNames_.\n        ",
  "IterationStatement[2,0].LoopEvaluation" : "\n          1. Return ? ForLoopEvaluation of |ForStatement| with argument _labelSet_.\n        ",
  "AssignmentElement[0,0].KeyedDestructuringAssignmentEvaluation" : "\n          1. If |DestructuringAssignmentTarget| is neither an |ObjectLiteral| nor an |ArrayLiteral|, then\n            1. Let _lref_ be ? Evaluation of |DestructuringAssignmentTarget|.\n          1. Let _v_ be ? GetV(_value_, _propertyName_).\n          1. If |Initializer| is present and _v_ is *undefined*, then\n            1. If IsAnonymousFunctionDefinition(|Initializer|) and IsIdentifierRef of |DestructuringAssignmentTarget| are both *true*, then\n              1. Let _rhsValue_ be ? NamedEvaluation of |Initializer| with argument _lref_.[[ReferencedName]].\n            1. Else,\n              1. Let _defaultValue_ be ? Evaluation of |Initializer|.\n              1. Let _rhsValue_ be ? GetValue(_defaultValue_).\n          1. Else,\n            1. Let _rhsValue_ be _v_.\n          1. If |DestructuringAssignmentTarget| is either an |ObjectLiteral| or an |ArrayLiteral|, then\n            1. Let _assignmentPattern_ be the |AssignmentPattern| that is covered by |DestructuringAssignmentTarget|.\n            1. Return ? DestructuringAssignmentEvaluation of _assignmentPattern_ with argument _rhsValue_.\n          1. Return ? PutValue(_lref_, _rhsValue_).\n        ",
  "INTRINSICS.get TypedArray.prototype.byteLength" : "\n          1. Let _O_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_O_, [[TypedArrayName]]).\n          1. Assert: _O_ has a [[ViewedArrayBuffer]] internal slot.\n          1. Let _taRecord_ be MakeTypedArrayWithBufferWitnessRecord(_O_, ~seq-cst~).\n          1. Let _size_ be TypedArrayByteLength(_taRecord_).\n          1. Return ùîΩ(_size_).\n        ",
  "ForInOfStatement[0,0].VarDeclaredNames" : "\n        1. Return the VarDeclaredNames of |Statement|.\n      ",
  "CaseClause[0,1].Evaluation" : "\n        1. Return ? Evaluation of |StatementList|.\n      ",
  "ForStatement[0,5].ForLoopEvaluation" : "\n          1. If the first |Expression| is present, then\n            1. Let _exprRef_ be ? Evaluation of the first |Expression|.\n            1. Perform ? GetValue(_exprRef_).\n          1. If the second |Expression| is present, let _test_ be the second |Expression|; otherwise, let _test_ be ~empty~.\n          1. If the third |Expression| is present, let _increment_ be the third |Expression|; otherwise, let _increment_ be ~empty~.\n          1. Return ? ForBodyEvaluation(_test_, _increment_, |Statement|, ¬´ ¬ª, _labelSet_).\n        ",
  "CaseBlock[1,2].ContainsDuplicateLabels" : "\n        1. If the first |CaseClauses| is present, then\n          1. If ContainsDuplicateLabels of the first |CaseClauses| with argument _labelSet_ is *true*, return *true*.\n        1. If ContainsDuplicateLabels of |DefaultClause| with argument _labelSet_ is *true*, return *true*.\n        1. If the second |CaseClauses| is not present, return *false*.\n        1. Return ContainsDuplicateLabels of the second |CaseClauses| with argument _labelSet_.\n      ",
  "BindingPattern[1,0].BindingInitialization" : "\n        1. Let _iteratorRecord_ be ? GetIterator(_value_, ~sync~).\n        1. Let _result_ be Completion(IteratorBindingInitialization of |ArrayBindingPattern| with arguments _iteratorRecord_ and _environment_).\n        1. If _iteratorRecord_.[[Done]] is *false*, return ? IteratorClose(_iteratorRecord_, _result_).\n        1. Return ? _result_.\n      ",
  "INTRINSICS.TypedArray.prototype.findIndex" : "\n          1. Let _O_ be the *this* value.\n          1. Let _taRecord_ be ? ValidateTypedArray(_O_, ~seq-cst~).\n          1. Let _len_ be TypedArrayLength(_taRecord_).\n          1. Let _findRec_ be ? FindViaPredicate(_O_, _len_, ~ascending~, _predicate_, _thisArg_).\n          1. Return _findRec_.[[Index]].\n        ",
  "INTRINSICS.Object.freeze" : "\n          1. If _O_ is not an Object, return _O_.\n          1. Let _status_ be ? SetIntegrityLevel(_O_, ~frozen~).\n          1. If _status_ is *false*, throw a *TypeError* exception.\n          1. Return _O_.\n        ",
  "INTRINSICS.Function.prototype.bind" : "\n          1. Let _Target_ be the *this* value.\n          1. If IsCallable(_Target_) is *false*, throw a *TypeError* exception.\n          1. Let _F_ be ? BoundFunctionCreate(_Target_, _thisArg_, _args_).\n          1. Let _L_ be 0.\n          1. Let _targetHasLength_ be ? HasOwnProperty(_Target_, *\"length\"*).\n          1. If _targetHasLength_ is *true*, then\n            1. Let _targetLen_ be ? Get(_Target_, *\"length\"*).\n            1. If _targetLen_ is a Number, then\n              1. If _targetLen_ is *+‚àû*<sub>ùîΩ</sub>, then\n                1. Set _L_ to +‚àû.\n              1. Else if _targetLen_ is *-‚àû*<sub>ùîΩ</sub>, then\n                1. Set _L_ to 0.\n              1. Else,\n                1. Let _targetLenAsInt_ be ! ToIntegerOrInfinity(_targetLen_).\n                1. Assert: _targetLenAsInt_ is finite.\n                1. Let _argCount_ be the number of elements in _args_.\n                1. Set _L_ to max(_targetLenAsInt_ - _argCount_, 0).\n          1. Perform SetFunctionLength(_F_, _L_).\n          1. Let _targetName_ be ? Get(_Target_, *\"name\"*).\n          1. If _targetName_ is not a String, set _targetName_ to the empty String.\n          1. Perform SetFunctionName(_F_, _targetName_, *\"bound\"*).\n          1. Return _F_.\n        ",
  "INTRINSICS.ThrowTypeError" : "\n          1. Throw a *TypeError* exception.\n        ",
  "ForStatement[0,1].VarDeclaredNames" : "\n        1. Return the VarDeclaredNames of |Statement|.\n      ",
  "INTRINSICS.Reflect.getOwnPropertyDescriptor" : "\n        1. If _target_ is not an Object, throw a *TypeError* exception.\n        1. Let _key_ be ? ToPropertyKey(_propertyKey_).\n        1. Let _desc_ be ? <emu-meta effects=\"user-code\">_target_.[[GetOwnProperty]]</emu-meta>(_key_).\n        1. Return FromPropertyDescriptor(_desc_).\n      ",
  "LabelledItem[0,0].TopLevelVarDeclaredNames" : "\n        1. If |Statement| is <emu-grammar>Statement : LabelledStatement</emu-grammar>, return TopLevelVarDeclaredNames of |Statement|.\n        1. Return VarDeclaredNames of |Statement|.\n      ",
  "LabelledItem[1,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "ConciseBody[0,0].ConciseBodyContainsUseStrict" : "\n        1. Return *false*.\n      ",
  "Statement[7,0].ContainsDuplicateLabels" : "\n        1. Return *false*.\n      ",
  "IteratorComplete" : "\n        1. Return ToBoolean(? Get(_iterResult_, *\"done\"*)).\n      ",
  "CaseClause[0,0].ContainsUndefinedContinueTarget" : "\n        1. If the |StatementList| is present, return ContainsUndefinedContinueTarget of |StatementList| with arguments _iterationSet_ and ¬´ ¬ª.\n        1. Return *false*.\n      ",
  "ToUint8" : "\n        1. Let _number_ be ? ToNumber(_argument_).\n        1. If _number_ is not finite or _number_ is either *+0*<sub>ùîΩ</sub> or *-0*<sub>ùîΩ</sub>, return *+0*<sub>ùîΩ</sub>.\n        1. Let _int_ be truncate(‚Ñù(_number_)).\n        1. Let _int8bit_ be _int_ modulo 2<sup>8</sup>.\n        1. Return ùîΩ(_int8bit_).\n      ",
  "ForStatement[1,3].VarDeclaredNames" : "\n        1. Let _names1_ be BoundNames of |VariableDeclarationList|.\n        1. Let _names2_ be VarDeclaredNames of |Statement|.\n        1. Return the list-concatenation of _names1_ and _names2_.\n      ",
  "StatementListItem[1,0].ContainsUndefinedBreakTarget" : "\n        1. Return *false*.\n      ",
  "LiteralPropertyName[1,0].PropName" : "\n        1. Return the SV of |StringLiteral|.\n      ",
  "ForStatement[0,2].ContainsUndefinedBreakTarget" : "\n        1. Return ContainsUndefinedBreakTarget of |Statement| with argument _labelSet_.\n      ",
  "CallExpression[3,0].HasCallInTailPosition" : "\n        1. If this |CallExpression| is _call_, return *true*.\n        1. Return *false*.\n      ",
  "IsFixedLengthArrayBuffer" : "\n          1. If _arrayBuffer_ has an [[ArrayBufferMaxByteLength]] internal slot, return *false*.\n          1. Return *true*.\n        ",
  "AsyncModuleExecutionRejected" : "\n              1. If _module_.[[Status]] is ~evaluated~, then\n                1. Assert: _module_.[[EvaluationError]] is not ~empty~.\n                1. Return ~unused~.\n              1. Assert: _module_.[[Status]] is ~evaluating-async~.\n              1. Assert: _module_.[[AsyncEvaluation]] is *true*.\n              1. Assert: _module_.[[EvaluationError]] is ~empty~.\n              1. Set _module_.[[EvaluationError]] to ThrowCompletion(_error_).\n              1. Set _module_.[[Status]] to ~evaluated~.\n              1. For each Cyclic Module Record _m_ of _module_.[[AsyncParentModules]], do\n                1. Perform AsyncModuleExecutionRejected(_m_, _error_).\n              1. If _module_.[[TopLevelCapability]] is not ~empty~, then\n                1. Assert: _module_.[[CycleRoot]] is _module_.\n                1. Perform ! Call(_module_.[[TopLevelCapability]].[[Reject]], *undefined*, ¬´ _error_ ¬ª).\n              1. Return ~unused~.\n            ",
  "INTRINSICS.String" : "\n          1. If _value_ is not present, then\n            1. Let _s_ be the empty String.\n          1. Else,\n            1. If NewTarget is *undefined* and _value_ is a Symbol, return SymbolDescriptiveString(_value_).\n            1. Let _s_ be ? ToString(_value_).\n          1. If NewTarget is *undefined*, return _s_.\n          1. Return StringCreate(_s_, ? GetPrototypeFromConstructor(NewTarget, *\"%String.prototype%\"*)).\n        ",
  "Statement[6,0].ContainsUndefinedBreakTarget" : "\n        1. Return *false*.\n      ",
  "ForInOfStatement[5,0].ContainsUndefinedBreakTarget" : "\n        1. Return ContainsUndefinedBreakTarget of |Statement| with argument _labelSet_.\n      ",
  "MemberExpression[3,0].AssignmentTargetType" : "\n        1. Return ~invalid~.\n      ",
  "LabelledItem[1,0].ContainsDuplicateLabels" : "\n        1. Return *false*.\n      ",
  "Record[OrdinaryObject].Delete" : "\n        1. Return ? OrdinaryDelete(_O_, _P_).\n      ",
  "ForStatement[0,6].HasCallInTailPosition" : "\n        1. Return HasCallInTailPosition of |Statement| with argument _call_.\n      ",
  "INTRINSICS.Promise.resolve" : "\n          1. Let _C_ be the *this* value.\n          1. If _C_ is not an Object, throw a *TypeError* exception.\n          1. Return ? PromiseResolve(_C_, _x_).\n        ",
  "ClassElement[5,0].IsStatic" : "\n        1. Return *false*.\n      ",
  "LeftHandSideExpression[2,0].IsFunctionDefinition" : "\n        1. Return *false*.\n      ",
  "GetActiveScriptOrModule" : "\n        1. If the execution context stack is empty, return *null*.\n        1. Let _ec_ be the topmost execution context on the execution context stack whose ScriptOrModule component is not *null*.\n        1. If no such execution context exists, return *null*. Otherwise, return _ec_'s ScriptOrModule.\n      ",
  "OrdinaryFunctionCreate" : "\n        1. Let _internalSlotsList_ be the internal slots listed in <emu-xref href=\"#table-internal-slots-of-ecmascript-function-objects\"></emu-xref>.\n        1. Let _F_ be OrdinaryObjectCreate(_functionPrototype_, _internalSlotsList_).\n        1. Set _F_.[[Call]] to the definition specified in <emu-xref href=\"#sec-ecmascript-function-objects-call-thisargument-argumentslist\"></emu-xref>.\n        1. Set _F_.[[SourceText]] to _sourceText_.\n        1. Set _F_.[[FormalParameters]] to _ParameterList_.\n        1. Set _F_.[[ECMAScriptCode]] to _Body_.\n        1. If the source text matched by _Body_ is strict mode code, let _Strict_ be *true*; else let _Strict_ be *false*.\n        1. Set _F_.[[Strict]] to _Strict_.\n        1. If _thisMode_ is ~lexical-this~, set _F_.[[ThisMode]] to ~lexical~.\n        1. Else if _Strict_ is *true*, set _F_.[[ThisMode]] to ~strict~.\n        1. Else, set _F_.[[ThisMode]] to ~global~.\n        1. Set _F_.[[IsClassConstructor]] to *false*.\n        1. Set _F_.[[Environment]] to _env_.\n        1. Set _F_.[[PrivateEnvironment]] to _privateEnv_.\n        1. Set _F_.[[ScriptOrModule]] to GetActiveScriptOrModule().\n        1. Set _F_.[[Realm]] to the current Realm Record.\n        1. Set _F_.[[HomeObject]] to *undefined*.\n        1. Set _F_.[[Fields]] to a new empty List.\n        1. Set _F_.[[PrivateMethods]] to a new empty List.\n        1. Set _F_.[[ClassFieldInitializerName]] to ~empty~.\n        1. Let _len_ be the ExpectedArgumentCount of _ParameterList_.\n        1. Perform SetFunctionLength(_F_, _len_).\n        1. Return _F_.\n      ",
  "ClassStaticBlockStatementList[0,0].LexicallyDeclaredNames" : "\n        1. Return a new empty List.\n      ",
  "ForStatement[0,7].ContainsUndefinedBreakTarget" : "\n        1. Return ContainsUndefinedBreakTarget of |Statement| with argument _labelSet_.\n      ",
  "DayWithinYear" : "\n          1. Return Day(_t_) - DayFromYear(YearFromTime(_t_)).\n        ",
  "INTRINSICS.WeakMap.prototype.has" : "\n          1. Let _M_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_M_, [[WeakMapData]]).\n          1. If CanBeHeldWeakly(_key_) is *false*, return *false*.\n          1. For each Record { [[Key]], [[Value]] } _p_ of _M_.[[WeakMapData]], do\n            1. If _p_.[[Key]] is not ~empty~ and SameValue(_p_.[[Key]], _key_) is *true*, return *true*.\n          1. Return *false*.\n        ",
  "BindingRestElement[1,0].ContainsExpression" : "\n        1. Return ContainsExpression of |BindingPattern|.\n      ",
  "RevalidateAtomicAccess" : "\n          1. Let _taRecord_ be MakeTypedArrayWithBufferWitnessRecord(_typedArray_, ~unordered~).\n          1. NOTE: Bounds checking is not a synchronizing operation when _typedArray_'s backing buffer is a growable SharedArrayBuffer.\n          1. If IsTypedArrayOutOfBounds(_taRecord_) is *true*, throw a *TypeError* exception.\n          1. Assert: _byteIndexInBuffer_ ‚â• _typedArray_.[[ByteOffset]].\n          1. If _byteIndexInBuffer_ ‚â• _taRecord_.[[CachedBufferByteLength]], throw a *RangeError* exception.\n          1. Return ~unused~.\n        ",
  "INTRINSICS.Object.hasOwn" : "\n          1. Let _obj_ be ? ToObject(_O_).\n          1. Let _key_ be ? ToPropertyKey(_P_).\n          1. Return ? HasOwnProperty(_obj_, _key_).\n        ",
  "MakeMethod" : "\n        1. Set _F_.[[HomeObject]] to _homeObject_.\n        1. Return ~unused~.\n      ",
  "ModuleItem[1,0].ContainsUndefinedContinueTarget" : "\n        1. Return *false*.\n      ",
  "BindingElement[1,1].KeyedBindingInitialization" : "\n          1. Let _v_ be ? GetV(_value_, _propertyName_).\n          1. If |Initializer| is present and _v_ is *undefined*, then\n            1. Let _defaultValue_ be ? Evaluation of |Initializer|.\n            1. Set _v_ to ? GetValue(_defaultValue_).\n          1. Return ? BindingInitialization of |BindingPattern| with arguments _v_ and _environment_.\n        ",
  "Expression[1,0].IsFunctionDefinition" : "\n        1. Return *false*.\n      ",
  "MethodDefinition[1,0].SpecialMethod" : "\n        1. Return *true*.\n      ",
  "ToUint16" : "\n        1. Let _number_ be ? ToNumber(_argument_).\n        1. If _number_ is not finite or _number_ is either *+0*<sub>ùîΩ</sub> or *-0*<sub>ùîΩ</sub>, return *+0*<sub>ùîΩ</sub>.\n        1. Let _int_ be truncate(‚Ñù(_number_)).\n        1. [id=\"step-touint16-mod\"] Let _int16bit_ be _int_ modulo 2<sup>16</sup>.\n        1. Return ùîΩ(_int16bit_).\n      ",
  "LabelledStatement[0,0].VarScopedDeclarations" : "\n        1. Return the VarScopedDeclarations of |LabelledItem|.\n      ",
  "CreateBuiltinFunction" : "\n        1. If _realm_ is not present, set _realm_ to the current Realm Record.\n        1. If _prototype_ is not present, set _prototype_ to _realm_.[[Intrinsics]].[[%Function.prototype%]].\n        1. Let _internalSlotsList_ be a List containing the names of all the internal slots that <emu-xref href=\"#sec-built-in-function-objects\"></emu-xref> requires for the built-in function object that is about to be created.\n        1. Append to _internalSlotsList_ the elements of _additionalInternalSlotsList_.\n        1. Let _func_ be a new built-in function object that, when called, performs the action described by _behaviour_ using the provided arguments as the values of the corresponding parameters specified by _behaviour_. The new function object has internal slots whose names are the elements of _internalSlotsList_, and an [[InitialName]] internal slot.\n        1. Set _func_.[[Prototype]] to _prototype_.\n        1. Set _func_.[[Extensible]] to *true*.\n        1. Set _func_.[[Realm]] to _realm_.\n        1. Set _func_.[[InitialName]] to *null*.\n        1. Perform SetFunctionLength(_func_, _length_).\n        1. If _prefix_ is not present, then\n          1. Perform SetFunctionName(_func_, _name_).\n        1. Else,\n          1. Perform SetFunctionName(_func_, _name_, _prefix_).\n        1. Return _func_.\n      ",
  "ClassTail[0,3].ClassDefinitionEvaluation" : "\n        1. Let _env_ be the LexicalEnvironment of the running execution context.\n        1. Let _classEnv_ be NewDeclarativeEnvironment(_env_).\n        1. If _classBinding_ is not *undefined*, then\n          1. Perform ! _classEnv_.CreateImmutableBinding(_classBinding_, *true*).\n        1. Let _outerPrivateEnvironment_ be the running execution context's PrivateEnvironment.\n        1. Let _classPrivateEnvironment_ be NewPrivateEnvironment(_outerPrivateEnvironment_).\n        1. If |ClassBody| is present, then\n          1. For each String _dn_ of the PrivateBoundIdentifiers of |ClassBody|, do\n            1. If _classPrivateEnvironment_.[[Names]] contains a Private Name _pn_ such that _pn_.[[Description]] is _dn_, then\n              1. Assert: This is only possible for getter/setter pairs.\n            1. Else,\n              1. Let _name_ be a new Private Name whose [[Description]] is _dn_.\n              1. Append _name_ to _classPrivateEnvironment_.[[Names]].\n        1. If |ClassHeritage| is not present, then\n          1. Let _protoParent_ be %Object.prototype%.\n          1. Let _constructorParent_ be %Function.prototype%.\n        1. Else,\n          1. Set the running execution context's LexicalEnvironment to _classEnv_.\n          1. NOTE: The running execution context's PrivateEnvironment is _outerPrivateEnvironment_ when evaluating |ClassHeritage|.\n          1. Let _superclassRef_ be Completion(Evaluation of |ClassHeritage|).\n          1. Set the running execution context's LexicalEnvironment to _env_.\n          1. Let _superclass_ be ? GetValue(? _superclassRef_).\n          1. If _superclass_ is *null*, then\n            1. Let _protoParent_ be *null*.\n            1. Let _constructorParent_ be %Function.prototype%.\n          1. Else if IsConstructor(_superclass_) is *false*, then\n            1. Throw a *TypeError* exception.\n          1. Else,\n            1. Let _protoParent_ be ? Get(_superclass_, *\"prototype\"*).\n            1. If _protoParent_ is not an Object and _protoParent_ is not *null*, throw a *TypeError* exception.\n            1. Let _constructorParent_ be _superclass_.\n        1. Let _proto_ be OrdinaryObjectCreate(_protoParent_).\n        1. If |ClassBody| is not present, let _constructor_ be ~empty~.\n        1. Else, let _constructor_ be ConstructorMethod of |ClassBody|.\n        1. Set the running execution context's LexicalEnvironment to _classEnv_.\n        1. Set the running execution context's PrivateEnvironment to _classPrivateEnvironment_.\n        1. If _constructor_ is ~empty~, then\n          1. Let _defaultConstructor_ be a new Abstract Closure with no parameters that captures nothing and performs the following steps when called:\n            1. Let _args_ be the List of arguments that was passed to this function by [[Call]] or [[Construct]].\n            1. If NewTarget is *undefined*, throw a *TypeError* exception.\n            1. Let _F_ be the active function object.\n            1. If _F_.[[ConstructorKind]] is ~derived~, then\n              1. NOTE: This branch behaves similarly to `constructor(...args) { super(...args); }`. The most notable distinction is that while the aforementioned ECMAScript source text observably calls the @@iterator method on `%Array.prototype%`, this function does not.\n              1. Let _func_ be ! _F_.[[GetPrototypeOf]]().\n              1. If IsConstructor(_func_) is *false*, throw a *TypeError* exception.\n              1. Let _result_ be ? Construct(_func_, _args_, NewTarget).\n            1. Else,\n              1. NOTE: This branch behaves similarly to `constructor() {}`.\n              1. Let _result_ be ? OrdinaryCreateFromConstructor(NewTarget, *\"%Object.prototype%\"*).\n            1. Perform ? InitializeInstanceElements(_result_, _F_).\n            1. Return _result_.\n          1. Let _F_ be CreateBuiltinFunction(_defaultConstructor_, 0, _className_, ¬´ [[ConstructorKind]], [[SourceText]] ¬ª, the current Realm Record, _constructorParent_).\n        1. Else,\n          1. Let _constructorInfo_ be ! DefineMethod of _constructor_ with arguments _proto_ and _constructorParent_.\n          1. Let _F_ be _constructorInfo_.[[Closure]].\n          1. Perform MakeClassConstructor(_F_).\n          1. Perform SetFunctionName(_F_, _className_).\n        1. Perform MakeConstructor(_F_, *false*, _proto_).\n        1. If |ClassHeritage| is present, set _F_.[[ConstructorKind]] to ~derived~.\n        1. Perform ! DefineMethodProperty(_proto_, *\"constructor\"*, _F_, *false*).\n        1. If |ClassBody| is not present, let _elements_ be a new empty List.\n        1. Else, let _elements_ be NonConstructorElements of |ClassBody|.\n        1. Let _instancePrivateMethods_ be a new empty List.\n        1. Let _staticPrivateMethods_ be a new empty List.\n        1. Let _instanceFields_ be a new empty List.\n        1. Let _staticElements_ be a new empty List.\n        1. For each |ClassElement| _e_ of _elements_, do\n          1. If IsStatic of _e_ is *false*, then\n            1. Let _element_ be Completion(ClassElementEvaluation of _e_ with argument _proto_).\n          1. Else,\n            1. Let _element_ be Completion(ClassElementEvaluation of _e_ with argument _F_).\n          1. If _element_ is an abrupt completion, then\n            1. Set the running execution context's LexicalEnvironment to _env_.\n            1. Set the running execution context's PrivateEnvironment to _outerPrivateEnvironment_.\n            1. Return ? _element_.\n          1. Set _element_ to ! _element_.\n          1. If _element_ is a PrivateElement, then\n            1. Assert: _element_.[[Kind]] is either ~method~ or ~accessor~.\n            1. If IsStatic of _e_ is *false*, let _container_ be _instancePrivateMethods_.\n            1. Else, let _container_ be _staticPrivateMethods_.\n            1. If _container_ contains a PrivateElement _pe_ such that _pe_.[[Key]] is _element_.[[Key]], then\n              1. Assert: _element_.[[Kind]] and _pe_.[[Kind]] are both ~accessor~.\n              1. If _element_.[[Get]] is *undefined*, then\n                1. Let _combined_ be PrivateElement { [[Key]]: _element_.[[Key]], [[Kind]]: ~accessor~, [[Get]]: _pe_.[[Get]], [[Set]]: _element_.[[Set]] }.\n              1. Else,\n                1. Let _combined_ be PrivateElement { [[Key]]: _element_.[[Key]], [[Kind]]: ~accessor~, [[Get]]: _element_.[[Get]], [[Set]]: _pe_.[[Set]] }.\n              1. Replace _pe_ in _container_ with _combined_.\n            1. Else,\n              1. Append _element_ to _container_.\n          1. Else if _element_ is a ClassFieldDefinition Record, then\n            1. If IsStatic of _e_ is *false*, append _element_ to _instanceFields_.\n            1. Else, append _element_ to _staticElements_.\n          1. Else if _element_ is a ClassStaticBlockDefinition Record, then\n            1. Append _element_ to _staticElements_.\n        1. Set the running execution context's LexicalEnvironment to _env_.\n        1. If _classBinding_ is not *undefined*, then\n          1. Perform ! _classEnv_.InitializeBinding(_classBinding_, _F_).\n        1. Set _F_.[[PrivateMethods]] to _instancePrivateMethods_.\n        1. Set _F_.[[Fields]] to _instanceFields_.\n        1. For each PrivateElement _method_ of _staticPrivateMethods_, do\n          1. Perform ! PrivateMethodOrAccessorAdd(_F_, _method_).\n        1. For each element _elementRecord_ of _staticElements_, do\n          1. If _elementRecord_ is a ClassFieldDefinition Record, then\n            1. Let _result_ be Completion(DefineField(_F_, _elementRecord_)).\n          1. Else,\n            1. Assert: _elementRecord_ is a ClassStaticBlockDefinition Record.\n            1. Let _result_ be Completion(Call(_elementRecord_.[[BodyFunction]], _F_)).\n          1. If _result_ is an abrupt completion, then\n            1. Set the running execution context's PrivateEnvironment to _outerPrivateEnvironment_.\n            1. Return ? _result_.\n        1. Set the running execution context's PrivateEnvironment to _outerPrivateEnvironment_.\n        1. Return _F_.\n      ",
  "BreakStatement[1,0].Evaluation" : "\n        1. Let _label_ be the StringValue of |LabelIdentifier|.\n        1. Return Completion Record { [[Type]]: ~break~, [[Value]]: ~empty~, [[Target]]: _label_ }.\n      ",
  "NewPromiseCapability:clo0" : "\n          1. If IsConstructor(_C_) is *false*, throw a *TypeError* exception.\n          1. NOTE: _C_ is assumed to be a constructor function that supports the parameter conventions of the Promise constructor (see <emu-xref href=\"#sec-promise-executor\"></emu-xref>).\n          1. Let _resolvingFunctions_ be the Record { [[Resolve]]: *undefined*, [[Reject]]: *undefined* }.\n          1. Let _executorClosure_ be a new Abstract Closure with parameters (_resolve_, _reject_) that captures _resolvingFunctions_ and performs the following steps when called:\n            1. If _resolvingFunctions_.[[Resolve]] is not *undefined*, throw a *TypeError* exception.\n            1. If _resolvingFunctions_.[[Reject]] is not *undefined*, throw a *TypeError* exception.\n            1. Set _resolvingFunctions_.[[Resolve]] to _resolve_.\n            1. Set _resolvingFunctions_.[[Reject]] to _reject_.\n            1. Return *undefined*.\n          1. Let _executor_ be CreateBuiltinFunction(_executorClosure_, 2, *\"\"*, ¬´ ¬ª).\n          1. Let _promise_ be ? Construct(_C_, ¬´ _executor_ ¬ª).\n          1. If IsCallable(_resolvingFunctions_.[[Resolve]]) is *false*, throw a *TypeError* exception.\n          1. If IsCallable(_resolvingFunctions_.[[Reject]]) is *false*, throw a *TypeError* exception.\n          1. Return the PromiseCapability Record { [[Promise]]: _promise_, [[Resolve]]: _resolvingFunctions_.[[Resolve]], [[Reject]]: _resolvingFunctions_.[[Reject]] }.\n        ",
  "INTRINSICS.Object.getOwnPropertyDescriptor" : "\n          1. Let _obj_ be ? ToObject(_O_).\n          1. Let _key_ be ? ToPropertyKey(_P_).\n          1. Let _desc_ be ? <emu-meta effects=\"user-code\">_obj_.[[GetOwnProperty]]</emu-meta>(_key_).\n          1. Return FromPropertyDescriptor(_desc_).\n        ",
  "INTRINSICS.Math.asin" : "\n          1. Let _n_ be ? ToNumber(_x_).\n          1. If _n_ is one of *NaN*, *+0*<sub>ùîΩ</sub>, or *-0*<sub>ùîΩ</sub>, return _n_.\n          1. If _n_ > *1*<sub>ùîΩ</sub> or _n_ < *-1*<sub>ùîΩ</sub>, return *NaN*.\n          1. Return an implementation-approximated Number value representing the result of the inverse sine of ‚Ñù(_n_).\n        ",
  "INTRINSICS.Number.isNaN" : "\n          1. If _number_ is not a Number, return *false*.\n          1. If _number_ is *NaN*, return *true*.\n          1. Otherwise, return *false*.\n        ",
  "Record[TypedArray].Get" : "\n          1. If _P_ is a String, then\n            1. Let _numericIndex_ be CanonicalNumericIndexString(_P_).\n            1. If _numericIndex_ is not *undefined*, then\n              1. Return TypedArrayGetElement(_O_, _numericIndex_).\n          1. Return ? OrdinaryGet(_O_, _P_, _Receiver_).\n        ",
  "MemberExpression[7,0].IsIdentifierRef" : "\n        1. Return *false*.\n      ",
  "Record[OrdinaryObject].Get" : "\n        1. Return ? OrdinaryGet(_O_, _P_, _Receiver_).\n      ",
  "ModuleItem[1,0].LexicallyDeclaredNames" : "\n        1. If |ExportDeclaration| is `export` |VariableStatement|, return a new empty List.\n        1. Return the BoundNames of |ExportDeclaration|.\n      ",
  "ExportDeclaration[6,0].ModuleRequests" : "\n          1. Return a new empty List.\n        ",
  "INTRINSICS.Math.imul" : "\n          1. Let _a_ be ‚Ñù(? ToUint32(_x_)).\n          1. Let _b_ be ‚Ñù(? ToUint32(_y_)).\n          1. Let _product_ be (_a_ √ó _b_) modulo 2<sup>32</sup>.\n          1. If _product_ ‚â• 2<sup>31</sup>, return ùîΩ(_product_ - 2<sup>32</sup>); otherwise return ùîΩ(_product_).\n        ",
  "ImportedDefaultBinding[0,0].ImportEntriesForModule" : "\n          1. Let _localName_ be the sole element of BoundNames of |ImportedBinding|.\n          1. Let _defaultEntry_ be the ImportEntry Record { [[ModuleRequest]]: _module_, [[ImportName]]: *\"default\"*, [[LocalName]]: _localName_ }.\n          1. Return ¬´ _defaultEntry_ ¬ª.\n        ",
  "ForStatement[0,6].ContainsUndefinedContinueTarget" : "\n        1. Return ContainsUndefinedContinueTarget of |Statement| with arguments _iterationSet_ and ¬´ ¬ª.\n      ",
  "ClassElement[3,0].IsStatic" : "\n        1. Return *true*.\n      ",
  "RelationalExpression[2,0].Evaluation" : "\n        1. Let _lref_ be ? Evaluation of |RelationalExpression|.\n        1. Let _lval_ be ? GetValue(_lref_).\n        1. Let _rref_ be ? Evaluation of |ShiftExpression|.\n        1. Let _rval_ be ? GetValue(_rref_).\n        1. Let _r_ be ? IsLessThan(_rval_, _lval_, *false*).\n        1. If _r_ is *undefined*, return *false*. Otherwise, return _r_.\n      ",
  "MakeDate" : "\n          1. If _day_ is not finite or _time_ is not finite, return *NaN*.\n          1. Let _tv_ be _day_ √ó msPerDay + _time_.\n          1. If _tv_ is not finite, return *NaN*.\n          1. Return _tv_.\n        ",
  "INTRINSICS.get RegExp.prototype.ignoreCase" : "\n          1. Let _R_ be the *this* value.\n          1. Let _cu_ be the code unit 0x0069 (LATIN SMALL LETTER I).\n          1. Return ? RegExpHasFlag(_R_, _cu_).\n        ",
  "BindingIdentifier[0,0].BoundNames" : "\n        1. Return a List whose sole element is the StringValue of |Identifier|.\n      ",
  "StatementListItem[0,0].TopLevelLexicallyDeclaredNames" : "\n        1. Return a new empty List.\n      ",
  "ForInOfStatement[3,0].ForInOfLoopEvaluation" : "\n          1. Let _keyResult_ be ? ForIn/OfHeadEvaluation(¬´ ¬ª, |AssignmentExpression|, ~iterate~).\n          1. Return ? ForIn/OfBodyEvaluation(|LeftHandSideExpression|, |Statement|, _keyResult_, ~iterate~, ~assignment~, _labelSet_).\n        ",
  "RelationalExpression[2,0].IsFunctionDefinition" : "\n        1. Return *false*.\n      ",
  "INTRINSICS.ArrayBuffer.prototype.resize" : "\n          1. Let _O_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_O_, [[ArrayBufferMaxByteLength]]).\n          1. If IsSharedArrayBuffer(_O_) is *true*, throw a *TypeError* exception.\n          1. Let _newByteLength_ be ? ToIndex(_newLength_).\n          1. If IsDetachedBuffer(_O_) is *true*, throw a *TypeError* exception.\n          1. If _newByteLength_ > _O_.[[ArrayBufferMaxByteLength]], throw a *RangeError* exception.\n          1. Let _hostHandled_ be ? HostResizeArrayBuffer(_O_, _newByteLength_).\n          1. If _hostHandled_ is ~handled~, return *undefined*.\n          1. Let _oldBlock_ be _O_.[[ArrayBufferData]].\n          1. Let _newBlock_ be ? CreateByteDataBlock(_newByteLength_).\n          1. Let _copyLength_ be min(_newByteLength_, _O_.[[ArrayBufferByteLength]]).\n          1. Perform CopyDataBlockBytes(_newBlock_, 0, _oldBlock_, 0, _copyLength_).\n          1. NOTE: Neither creation of the new Data Block nor copying from the old Data Block are observable. Implementations may implement this method as in-place growth or shrinkage.\n          1. Set _O_.[[ArrayBufferData]] to _newBlock_.\n          1. Set _O_.[[ArrayBufferByteLength]] to _newByteLength_.\n          1. Return *undefined*.\n        ",
  "ExportDeclaration[0,0].BoundNames" : "\n        1. Return a new empty List.\n      ",
  "ArrayBindingPattern[2,3].ContainsExpression" : "\n        1. Let _has_ be ContainsExpression of |BindingElementList|.\n        1. If _has_ is *true*, return *true*.\n        1. Return ContainsExpression of |BindingRestElement|.\n      ",
  "INTRINSICS.Atomics.compareExchange" : "\n        1. Let _byteIndexInBuffer_ be ? ValidateAtomicAccessOnIntegerTypedArray(_typedArray_, _index_).\n        1. Let _buffer_ be _typedArray_.[[ViewedArrayBuffer]].\n        1. Let _block_ be _buffer_.[[ArrayBufferData]].\n        1. If _typedArray_.[[ContentType]] is ~bigint~, then\n          1. Let _expected_ be ? ToBigInt(_expectedValue_).\n          1. Let _replacement_ be ? ToBigInt(_replacementValue_).\n        1. Else,\n          1. Let _expected_ be ùîΩ(? ToIntegerOrInfinity(_expectedValue_)).\n          1. Let _replacement_ be ùîΩ(? ToIntegerOrInfinity(_replacementValue_)).\n        1. Perform ? RevalidateAtomicAccess(_typedArray_, _byteIndexInBuffer_).\n        1. Let _elementType_ be TypedArrayElementType(_typedArray_).\n        1. Let _elementSize_ be TypedArrayElementSize(_typedArray_).\n        1. Let _isLittleEndian_ be the value of the [[LittleEndian]] field of the surrounding agent's Agent Record.\n        1. Let _expectedBytes_ be NumericToRawBytes(_elementType_, _expected_, _isLittleEndian_).\n        1. Let _replacementBytes_ be NumericToRawBytes(_elementType_, _replacement_, _isLittleEndian_).\n        1. If IsSharedArrayBuffer(_buffer_) is *true*, then\n          1. Let _rawBytesRead_ be AtomicCompareExchangeInSharedBlock(_block_, _byteIndexInBuffer_, _elementSize_, _expectedBytes_, _replacementBytes_).\n        1. Else,\n          1. Let _rawBytesRead_ be a List of length _elementSize_ whose elements are the sequence of _elementSize_ bytes starting with _block_[_byteIndexInBuffer_].\n          1. If ByteListEqual(_rawBytesRead_, _expectedBytes_) is *true*, then\n            1. Store the individual bytes of _replacementBytes_ into _block_, starting at _block_[_byteIndexInBuffer_].\n        1. Return RawBytesToNumeric(_elementType_, _rawBytesRead_, _isLittleEndian_).\n      ",
  "MemberExpression[5,0].IsFunctionDefinition" : "\n        1. Return *false*.\n      ",
  "OptionalChain[7,0].ChainEvaluation" : "\n          1. Let _optionalChain_ be |OptionalChain|.\n          1. Let _newReference_ be ? ChainEvaluation of _optionalChain_ with arguments _baseValue_ and _baseReference_.\n          1. Let _newValue_ be ? GetValue(_newReference_).\n          1. If the source text matched by this |OptionalChain| is strict mode code, let _strict_ be *true*; else let _strict_ be *false*.\n          1. Return EvaluatePropertyAccessWithIdentifierKey(_newValue_, |IdentifierName|, _strict_).\n        ",
  "INTRINSICS.Date.prototype.toDateString" : "\n          1. Let _dateObject_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_dateObject_, [[DateValue]]).\n          1. Let _tv_ be _dateObject_.[[DateValue]].\n          1. If _tv_ is *NaN*, return *\"Invalid Date\"*.\n          1. Let _t_ be LocalTime(_tv_).\n          1. Return DateString(_t_).\n        ",
  "DecimalEscape[0,1].CapturingGroupNumber" : "\n          1. Let _n_ be the number of code points in |DecimalDigits|.\n          1. Return (the MV of |NonZeroDigit| √ó 10<sup>_n_</sup> plus the MV of |DecimalDigits|).\n        ",
  "UnaryExpression[1,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "ClassUnion[0,1].MayContainStrings" : "\n          1. If the |ClassUnion| is present, return MayContainStrings of the |ClassUnion|.\n          1. Return *false*.\n        ",
  "INTRINSICS.TypedArray.prototype.toReversed" : "\n          1. Let _O_ be the *this* value.\n          1. Let _taRecord_ be ? ValidateTypedArray(_O_, ~seq-cst~).\n          1. Let _length_ be TypedArrayLength(_taRecord_).\n          1. Let _A_ be ? TypedArrayCreateSameType(_O_, ¬´ ùîΩ(_length_) ¬ª).\n          1. Let _k_ be 0.\n          1. Repeat, while _k_ < _length_,\n            1. Let _from_ be ! ToString(ùîΩ(_length_ - _k_ - 1)).\n            1. Let _Pk_ be ! ToString(ùîΩ(_k_)).\n            1. Let _fromValue_ be ! Get(_O_, _from_).\n            1. Perform ! Set(_A_, _Pk_, _fromValue_, *true*).\n            1. Set _k_ to _k_ + 1.\n          1. Return _A_.\n        ",
  "HostEnqueueFinalizationRegistryCleanupJob" : "\n          1. Let _cleanupResult_ be Completion(CleanupFinalizationRegistry(_finalizationRegistry_)).\n          1. If _cleanupResult_ is an abrupt completion, perform any host-defined steps for reporting the error.\n          1. Return ~unused~.\n        ",
  "Record[GlobalEnvironmentRecord].HasSuperBinding" : "\n            1. Return *false*.\n          ",
  "Statement[3,0].ContainsDuplicateLabels" : "\n        1. Return *false*.\n      ",
  "ParseModule" : "\n            1. Let _body_ be ParseText(_sourceText_, |Module|).\n            1. If _body_ is a List of errors, return _body_.\n            1. Let _requestedModules_ be the ModuleRequests of _body_.\n            1. Let _importEntries_ be ImportEntries of _body_.\n            1. Let _importedBoundNames_ be ImportedLocalNames(_importEntries_).\n            1. Let _indirectExportEntries_ be a new empty List.\n            1. Let _localExportEntries_ be a new empty List.\n            1. Let _starExportEntries_ be a new empty List.\n            1. Let _exportEntries_ be ExportEntries of _body_.\n            1. For each ExportEntry Record _ee_ of _exportEntries_, do\n              1. If _ee_.[[ModuleRequest]] is *null*, then\n                1. If _importedBoundNames_ does not contain _ee_.[[LocalName]], then\n                  1. Append _ee_ to _localExportEntries_.\n                1. Else,\n                  1. Let _ie_ be the element of _importEntries_ whose [[LocalName]] is _ee_.[[LocalName]].\n                  1. If _ie_.[[ImportName]] is ~namespace-object~, then\n                    1. NOTE: This is a re-export of an imported module namespace object.\n                    1. Append _ee_ to _localExportEntries_.\n                  1. Else,\n                    1. NOTE: This is a re-export of a single name.\n                    1. Append the ExportEntry Record { [[ModuleRequest]]: _ie_.[[ModuleRequest]], [[ImportName]]: _ie_.[[ImportName]], [[LocalName]]: *null*, [[ExportName]]: _ee_.[[ExportName]] } to _indirectExportEntries_.\n              1. Else if _ee_.[[ImportName]] is ~all-but-default~, then\n                1. Assert: _ee_.[[ExportName]] is *null*.\n                1. Append _ee_ to _starExportEntries_.\n              1. Else,\n                1. Append _ee_ to _indirectExportEntries_.\n            1. Let _async_ be _body_ Contains `await`.\n            1. Return Source Text Module Record { [[Realm]]: _realm_, [[Environment]]: ~empty~, [[Namespace]]: ~empty~, [[CycleRoot]]: ~empty~, [[HasTLA]]: _async_, [[AsyncEvaluation]]: *false*, [[TopLevelCapability]]: ~empty~, [[AsyncParentModules]]: ¬´ ¬ª, [[PendingAsyncDependencies]]: ~empty~, [[Status]]: ~new~, [[EvaluationError]]: ~empty~, [[HostDefined]]: _hostDefined_, [[ECMAScriptCode]]: _body_, [[Context]]: ~empty~, [[ImportMeta]]: ~empty~, [[RequestedModules]]: _requestedModules_, [[LoadedModules]]: ¬´ ¬ª, [[ImportEntries]]: _importEntries_, [[LocalExportEntries]]: _localExportEntries_, [[IndirectExportEntries]]: _indirectExportEntries_, [[StarExportEntries]]: _starExportEntries_, [[DFSIndex]]: ~empty~, [[DFSAncestorIndex]]: ~empty~ }.\n          ",
  "BitwiseANDExpression[1,0].AssignmentTargetType" : "\n        1. Return ~invalid~.\n      ",
  "INTRINSICS.Math.sinh" : "\n          1. Let _n_ be ? ToNumber(_x_).\n          1. If _n_ is not finite or _n_ is either *+0*<sub>ùîΩ</sub> or *-0*<sub>ùîΩ</sub>, return _n_.\n          1. Return an implementation-approximated Number value representing the result of the hyperbolic sine of ‚Ñù(_n_).\n        ",
  "IfStatement[1,0].ContainsUndefinedBreakTarget" : "\n        1. Return ContainsUndefinedBreakTarget of |Statement| with argument _labelSet_.\n      ",
  "TimeClip" : "\n          1. If _time_ is not finite, return *NaN*.\n          1. If abs(‚Ñù(_time_)) > 8.64 √ó 10<sup>15</sup>, return *NaN*.\n          1. Return ùîΩ(! ToIntegerOrInfinity(_time_)).\n        ",
  "ThisSymbolValue" : "\n            1. If _value_ is a Symbol, return _value_.\n            1. If _value_ is an Object and _value_ has a [[SymbolData]] internal slot, then\n              1. Let _s_ be _value_.[[SymbolData]].\n              1. Assert: _s_ is a Symbol.\n              1. Return _s_.\n            1. Throw a *TypeError* exception.\n          ",
  "CreateIteratorFromClosure" : "\n          1. NOTE: _closure_ can contain uses of the Yield operation to yield an IteratorResult object.\n          1. Let _internalSlotsList_ be ¬´ [[GeneratorState]], [[GeneratorContext]], [[GeneratorBrand]] ¬ª.\n          1. Let _generator_ be OrdinaryObjectCreate(_generatorPrototype_, _internalSlotsList_).\n          1. Set _generator_.[[GeneratorBrand]] to _generatorBrand_.\n          1. Set _generator_.[[GeneratorState]] to *undefined*.\n          1. Let _callerContext_ be the running execution context.\n          1. Let _calleeContext_ be a new execution context.\n          1. Set the Function of _calleeContext_ to *null*.\n          1. Set the Realm of _calleeContext_ to the current Realm Record.\n          1. Set the ScriptOrModule of _calleeContext_ to _callerContext_'s ScriptOrModule.\n          1. If _callerContext_ is not already suspended, suspend _callerContext_.\n          1. Push _calleeContext_ onto the execution context stack; _calleeContext_ is now the running execution context.\n          1. Perform GeneratorStart(_generator_, _closure_).\n          1. Remove _calleeContext_ from the execution context stack and restore _callerContext_ as the running execution context.\n          1. Return _generator_.\n        ",
  "TryStatement[2,0].ContainsDuplicateLabels" : "\n        1. If ContainsDuplicateLabels of |Block| with argument _labelSet_ is *true*, return *true*.\n        1. If ContainsDuplicateLabels of |Catch| with argument _labelSet_ is *true*, return *true*.\n        1. Return ContainsDuplicateLabels of |Finally| with argument _labelSet_.\n      ",
  "WhileStatement[0,0].VarDeclaredNames" : "\n        1. Return the VarDeclaredNames of |Statement|.\n      ",
  "PrimaryExpression[10,0].Evaluation" : "\n          1. Let _pattern_ be CodePointsToString(BodyText of |RegularExpressionLiteral|).\n          1. Let _flags_ be CodePointsToString(FlagText of |RegularExpressionLiteral|).\n          1. Return ! RegExpCreate(_pattern_, _flags_).\n        ",
  "ClassElement[2,0].IsStatic" : "\n        1. Return *false*.\n      ",
  "AsyncConciseBody[0,0].EvaluateBody" : "\n          1. Return ? EvaluateAsyncConciseBody of |AsyncConciseBody| with arguments _functionObject_ and _argumentsList_.\n        ",
  "TryStatement[2,0].ContainsUndefinedBreakTarget" : "\n        1. If ContainsUndefinedBreakTarget of |Block| with argument _labelSet_ is *true*, return *true*.\n        1. If ContainsUndefinedBreakTarget of |Catch| with argument _labelSet_ is *true*, return *true*.\n        1. Return ContainsUndefinedBreakTarget of |Finally| with argument _labelSet_.\n      ",
  "INTRINSICS.TypedArray.of" : "\n          1. Let _len_ be the number of elements in _items_.\n          1. Let _C_ be the *this* value.\n          1. If IsConstructor(_C_) is *false*, throw a *TypeError* exception.\n          1. Let _newObj_ be ? TypedArrayCreateFromConstructor(_C_, ¬´ ùîΩ(_len_) ¬ª).\n          1. Let _k_ be 0.\n          1. Repeat, while _k_ < _len_,\n            1. Let _kValue_ be _items_[_k_].\n            1. Let _Pk_ be ! ToString(ùîΩ(_k_)).\n            1. Perform ? Set(_newObj_, _Pk_, _kValue_, *true*).\n            1. Set _k_ to _k_ + 1.\n          1. Return _newObj_.\n        ",
  "RelationalExpression[4,0].Evaluation" : "\n        1. Let _lref_ be ? Evaluation of |RelationalExpression|.\n        1. Let _lval_ be ? GetValue(_lref_).\n        1. Let _rref_ be ? Evaluation of |ShiftExpression|.\n        1. Let _rval_ be ? GetValue(_rref_).\n        1. Let _r_ be ? IsLessThan(_lval_, _rval_, *true*).\n        1. If _r_ is either *true* or *undefined*, return *false*. Otherwise, return *true*.\n      ",
  "ArrayCreate" : "\n          1. If _length_ > 2<sup>32</sup> - 1, throw a *RangeError* exception.\n          1. If _proto_ is not present, set _proto_ to %Array.prototype%.\n          1. Let _A_ be MakeBasicObject(¬´ [[Prototype]], [[Extensible]] ¬ª).\n          1. Set _A_.[[Prototype]] to _proto_.\n          1. Set _A_.[[DefineOwnProperty]] as specified in <emu-xref href=\"#sec-array-exotic-objects-defineownproperty-p-desc\"></emu-xref>.\n          1. Perform ! OrdinaryDefineOwnProperty(_A_, *\"length\"*, PropertyDescriptor { [[Value]]: ùîΩ(_length_), [[Writable]]: *true*, [[Enumerable]]: *false*, [[Configurable]]: *false* }).\n          1. Return _A_.\n        ",
  "TryStatement[2,0].VarScopedDeclarations" : "\n        1. Let _declarations1_ be VarScopedDeclarations of |Block|.\n        1. Let _declarations2_ be VarScopedDeclarations of |Catch|.\n        1. Let _declarations3_ be VarScopedDeclarations of |Finally|.\n        1. Return the list-concatenation of _declarations1_, _declarations2_, and _declarations3_.\n      ",
  "TryStatement[1,0].Evaluation" : "\n        1. Let _B_ be Completion(Evaluation of |Block|).\n        1. Let _F_ be Completion(Evaluation of |Finally|).\n        1. If _F_ is a normal completion, set _F_ to _B_.\n        1. Return ? UpdateEmpty(_F_, *undefined*).\n      ",
  "LabelIdentifier[1,0].StringValue" : "\n        1. Return *\"yield\"*.\n      ",
  "Record[TypedArray].OwnPropertyKeys" : "\n          1. Let _taRecord_ be MakeTypedArrayWithBufferWitnessRecord(_O_, ~seq-cst~).\n          1. Let _keys_ be a new empty List.\n          1. If IsTypedArrayOutOfBounds(_taRecord_) is *false*, then\n            1. Let _length_ be TypedArrayLength(_taRecord_).\n            1. For each integer _i_ such that 0 ‚â§ _i_ < _length_, in ascending order, do\n              1. Append ! ToString(ùîΩ(_i_)) to _keys_.\n          1. For each own property key _P_ of _O_ such that _P_ is a String and _P_ is not an integer index, in ascending chronological order of property creation, do\n            1. Append _P_ to _keys_.\n          1. For each own property key _P_ of _O_ such that _P_ is a Symbol, in ascending chronological order of property creation, do\n            1. Append _P_ to _keys_.\n          1. Return _keys_.\n        ",
  "IsStringWellFormedUnicode" : "\n        1. Let _len_ be the length of _string_.\n        1. Let _k_ be 0.\n        1. Repeat, while _k_ < _len_,\n          1. Let _cp_ be CodePointAt(_string_, _k_).\n          1. If _cp_.[[IsUnpairedSurrogate]] is *true*, return *false*.\n          1. Set _k_ to _k_ + _cp_.[[CodeUnitCount]].\n        1. Return *true*.\n      ",
  "ForStatement[1,3].ContainsUndefinedBreakTarget" : "\n        1. Return ContainsUndefinedBreakTarget of |Statement| with argument _labelSet_.\n      ",
  "WhileStatement[0,0].ContainsUndefinedContinueTarget" : "\n        1. Return ContainsUndefinedContinueTarget of |Statement| with arguments _iterationSet_ and ¬´ ¬ª.\n      ",
  "ArrayBindingPattern[2,2].BoundNames" : "\n        1. Return the BoundNames of |BindingElementList|.\n      ",
  "PrimaryExpression[10,0].IsIdentifierRef" : "\n        1. Return *false*.\n      ",
  "FormalParameters[0,0].BoundNames" : "\n        1. Return a new empty List.\n      ",
  "AssignmentExpression[1,0].AssignmentTargetType" : "\n        1. Return ~invalid~.\n      ",
  "INTRINSICS.TypedArray.prototype.entries" : "\n          1. Let _O_ be the *this* value.\n          1. Perform ? ValidateTypedArray(_O_, ~seq-cst~).\n          1. Return CreateArrayIterator(_O_, ~key+value~).\n        ",
  "INTRINSICS.Array.prototype.sort:clo0" : "\n          1. [id=\"step-array-sort-comparefn\"] If _comparefn_ is not *undefined* and IsCallable(_comparefn_) is *false*, throw a *TypeError* exception.\n          1. Let _obj_ be ? ToObject(*this* value).\n          1. [id=\"step-array-sort-len\"] Let _len_ be ? LengthOfArrayLike(_obj_).\n          1. Let _SortCompare_ be a new Abstract Closure with parameters (_x_, _y_) that captures _comparefn_ and performs the following steps when called:\n            1. Return ? CompareArrayElements(_x_, _y_, _comparefn_).\n          1. [id=\"step-array-sortindexedproperties\"] Let _sortedList_ be ? SortIndexedProperties(_obj_, _len_, _SortCompare_, ~skip-holes~).\n          1. Let _itemCount_ be the number of elements in _sortedList_.\n          1. Let _j_ be 0.\n          1. Repeat, while _j_ < _itemCount_,\n            1. Perform ? Set(_obj_, ! ToString(ùîΩ(_j_)), _sortedList_[_j_], *true*).\n            1. Set _j_ to _j_ + 1.\n          1. NOTE: The call to SortIndexedProperties in step <emu-xref href=\"#step-array-sortindexedproperties\"></emu-xref> uses ~skip-holes~. The remaining indices are deleted to preserve the number of holes that were detected and excluded from the sort.\n          1. Repeat, while _j_ < _len_,\n            1. Perform ? DeletePropertyOrThrow(_obj_, ! ToString(ùîΩ(_j_))).\n            1. Set _j_ to _j_ + 1.\n          1. Return _obj_.\n        ",
  "TrimString" : "\n            1. Let _str_ be ? RequireObjectCoercible(_string_).\n            1. Let _S_ be ? ToString(_str_).\n            1. If _where_ is ~start~, then\n              1. Let _T_ be the String value that is a copy of _S_ with leading white space removed.\n            1. Else if _where_ is ~end~, then\n              1. Let _T_ be the String value that is a copy of _S_ with trailing white space removed.\n            1. Else,\n              1. Assert: _where_ is ~start+end~.\n              1. Let _T_ be the String value that is a copy of _S_ with both leading and trailing white space removed.\n            1. Return _T_.\n          ",
  "INTRINSICS.String.prototype.includes" : "\n          1. Let _O_ be ? RequireObjectCoercible(*this* value).\n          1. Let _S_ be ? ToString(_O_).\n          1. Let _isRegExp_ be ? IsRegExp(_searchString_).\n          1. If _isRegExp_ is *true*, throw a *TypeError* exception.\n          1. Let _searchStr_ be ? ToString(_searchString_).\n          1. Let _pos_ be ? ToIntegerOrInfinity(_position_).\n          1. Assert: If _position_ is *undefined*, then _pos_ is 0.\n          1. Let _len_ be the length of _S_.\n          1. Let _start_ be the result of clamping _pos_ between 0 and _len_.\n          1. Let _index_ be StringIndexOf(_S_, _searchStr_, _start_).\n          1. If _index_ ‚â† -1, return *true*.\n          1. Return *false*.\n        ",
  "Record[ModuleNamespaceExoticObject].PreventExtensions" : "\n          1. Return *true*.\n        ",
  "IdentifierReference[0,0].ContainsArguments" : "\n        1. If the StringValue of |Identifier| is *\"arguments\"*, return *true*.\n        1. Return *false*.\n      ",
  "GeneratorExpression[0,1].InstantiateGeneratorFunctionExpression" : "\n        1. Assert: _name_ is not present.\n        1. Set _name_ to StringValue of |BindingIdentifier|.\n        1. Let _outerEnv_ be the running execution context's LexicalEnvironment.\n        1. Let _funcEnv_ be NewDeclarativeEnvironment(_outerEnv_).\n        1. Perform ! _funcEnv_.CreateImmutableBinding(_name_, *false*).\n        1. Let _privateEnv_ be the running execution context's PrivateEnvironment.\n        1. Let _sourceText_ be the source text matched by |GeneratorExpression|.\n        1. Let _closure_ be OrdinaryFunctionCreate(%GeneratorFunction.prototype%, _sourceText_, |FormalParameters|, |GeneratorBody|, ~non-lexical-this~, _funcEnv_, _privateEnv_).\n        1. Perform SetFunctionName(_closure_, _name_).\n        1. Let _prototype_ be OrdinaryObjectCreate(%GeneratorFunction.prototype.prototype%).\n        1. Perform ! DefinePropertyOrThrow(_closure_, *\"prototype\"*, PropertyDescriptor { [[Value]]: _prototype_, [[Writable]]: *true*, [[Enumerable]]: *false*, [[Configurable]]: *false* }).\n        1. Perform ! _funcEnv_.InitializeBinding(_name_, _closure_).\n        1. Return _closure_.\n      ",
  "GeneratorExpression[0,0].NamedEvaluation" : "\n        1. Return InstantiateGeneratorFunctionExpression of |GeneratorExpression| with argument _name_.\n      ",
  "CallExpression[4,0].Evaluation" : "\n          1. Let _baseReference_ be ? Evaluation of |CallExpression|.\n          1. Let _baseValue_ be ? GetValue(_baseReference_).\n          1. If the source text matched by this |CallExpression| is strict mode code, let _strict_ be *true*; else let _strict_ be *false*.\n          1. Return ? EvaluatePropertyAccessWithExpressionKey(_baseValue_, |Expression|, _strict_).\n        ",
  "ThrowCompletion" : "\n          1. Return Completion Record { [[Type]]: ~throw~, [[Value]]: _value_, [[Target]]: ~empty~ }.\n        ",
  "RelationalExpression[5,0].Evaluation" : "\n        1. Let _lref_ be ? Evaluation of |RelationalExpression|.\n        1. Let _lval_ be ? GetValue(_lref_).\n        1. Let _rref_ be ? Evaluation of |ShiftExpression|.\n        1. Let _rval_ be ? GetValue(_rref_).\n        1. Return ? InstanceofOperator(_lval_, _rval_).\n      ",
  "NewExpression[1,0].IsFunctionDefinition" : "\n        1. Return *false*.\n      ",
  "__IS_ARRAY_INDEX__" : null,
  "GeneratorMethod[0,0].PropName" : "\n        1. Return PropName of |ClassElementName|.\n      ",
  "ImportClause[4,0].ImportEntriesForModule" : "\n          1. Let _entries1_ be ImportEntriesForModule of |ImportedDefaultBinding| with argument _module_.\n          1. Let _entries2_ be ImportEntriesForModule of |NamedImports| with argument _module_.\n          1. Return the list-concatenation of _entries1_ and _entries2_.\n        ",
  "ModuleItem[0,0].VarScopedDeclarations" : "\n        1. Return a new empty List.\n      ",
  "LeftHandSideExpression[2,0].IsDestructuring" : "\n          1. Return *false*.\n        ",
  "ArrowParameters[1,0].IteratorBindingInitialization" : "\n        1. Let _formals_ be the |ArrowFormalParameters| that is covered by |CoverParenthesizedExpressionAndArrowParameterList|.\n        1. Return ? IteratorBindingInitialization of _formals_ with arguments _iteratorRecord_ and _environment_.\n      ",
  "AsyncGeneratorDeclaration[0,0].BoundNames" : "\n        1. Return the BoundNames of |BindingIdentifier|.\n      ",
  "Module[0,0].Evaluation" : "\n          1. Return *undefined*.\n        ",
  "Record[DeclarativeEnvironmentRecord].WithBaseObject" : "\n            1. Return *undefined*.\n          ",
  "AssignmentExpression[5,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "CreateUnmappedArgumentsObject" : "\n          1. Let _len_ be the number of elements in _argumentsList_.\n          1. Let _obj_ be OrdinaryObjectCreate(%Object.prototype%, ¬´ [[ParameterMap]] ¬ª).\n          1. Set _obj_.[[ParameterMap]] to *undefined*.\n          1. Perform ! DefinePropertyOrThrow(_obj_, *\"length\"*, PropertyDescriptor { [[Value]]: ùîΩ(_len_), [[Writable]]: *true*, [[Enumerable]]: *false*, [[Configurable]]: *true* }).\n          1. Let _index_ be 0.\n          1. Repeat, while _index_ < _len_,\n            1. Let _val_ be _argumentsList_[_index_].\n            1. Perform ! CreateDataPropertyOrThrow(_obj_, ! ToString(ùîΩ(_index_)), _val_).\n            1. Set _index_ to _index_ + 1.\n          1. Perform ! DefinePropertyOrThrow(_obj_, @@iterator, PropertyDescriptor { [[Value]]: %Array.prototype.values%, [[Writable]]: *true*, [[Enumerable]]: *false*, [[Configurable]]: *true* }).\n          1. Perform ! DefinePropertyOrThrow(_obj_, *\"callee\"*, PropertyDescriptor { [[Get]]: %ThrowTypeError%, [[Set]]: %ThrowTypeError%, [[Enumerable]]: *false*, [[Configurable]]: *false* }).\n          1. Return _obj_.\n        ",
  "CaseBlock[1,3].HasCallInTailPosition" : "\n        1. Let _has_ be *false*.\n        1. If the first |CaseClauses| is present, set _has_ to HasCallInTailPosition of the first |CaseClauses| with argument _call_.\n        1. If _has_ is *true*, return *true*.\n        1. Set _has_ to HasCallInTailPosition of |DefaultClause| with argument _call_.\n        1. If _has_ is *true*, return *true*.\n        1. If the second |CaseClauses| is present, set _has_ to HasCallInTailPosition of the second |CaseClauses| with argument _call_.\n        1. Return _has_.\n      ",
  "Block[0,0].Evaluation" : "\n        1. Return ~empty~.\n      ",
  "AtomEscape[0,0].CompileAtom" : "\n          1. Let _n_ be the CapturingGroupNumber of |DecimalEscape|.\n          1. Assert: _n_ ‚â§ _rer_.[[CapturingGroupsCount]].\n          1. Return BackreferenceMatcher(_rer_, _n_, _direction_).\n        ",
  "HexLeadSurrogate[0,0].CharacterValue" : "\n          1. Return the MV of |Hex4Digits|.\n        ",
  "ClassIntersection[0,0].CompileToCharSet" : "\n          1. Let _A_ be CompileToCharSet of the first |ClassSetOperand| with argument _rer_.\n          1. Let _B_ be CompileToCharSet of the second |ClassSetOperand| with argument _rer_.\n          1. Return the intersection of CharSets _A_ and _B_.\n        ",
  "INTRINSICS.Date.prototype.getUTCSeconds" : "\n          1. Let _dateObject_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_dateObject_, [[DateValue]]).\n          1. Let _t_ be _dateObject_.[[DateValue]].\n          1. If _t_ is *NaN*, return *NaN*.\n          1. Return SecFromTime(_t_).\n        ",
  "INTRINSICS.TypedArray.prototype.slice" : "\n          1. Let _O_ be the *this* value.\n          1. Let _taRecord_ be ? ValidateTypedArray(_O_, ~seq-cst~).\n          1. Let _srcArrayLength_ be TypedArrayLength(_taRecord_).\n          1. Let _relativeStart_ be ? ToIntegerOrInfinity(_start_).\n          1. If _relativeStart_ = -‚àû, let _startIndex_ be 0.\n          1. Else if _relativeStart_ < 0, let _startIndex_ be max(_srcArrayLength_ + _relativeStart_, 0).\n          1. Else, let _startIndex_ be min(_relativeStart_, _srcArrayLength_).\n          1. If _end_ is *undefined*, let _relativeEnd_ be _srcArrayLength_; else let _relativeEnd_ be ? ToIntegerOrInfinity(_end_).\n          1. If _relativeEnd_ = -‚àû, let _endIndex_ be 0.\n          1. Else if _relativeEnd_ < 0, let _endIndex_ be max(_srcArrayLength_ + _relativeEnd_, 0).\n          1. Else, let _endIndex_ be min(_relativeEnd_, _srcArrayLength_).\n          1. Let _countBytes_ be max(_endIndex_ - _startIndex_, 0).\n          1. Let _A_ be ? TypedArraySpeciesCreate(_O_, ¬´ ùîΩ(_countBytes_) ¬ª).\n          1. If _countBytes_ > 0, then\n            1. Set _taRecord_ to MakeTypedArrayWithBufferWitnessRecord(_O_, ~seq-cst~).\n            1. If IsTypedArrayOutOfBounds(_taRecord_) is *true*, throw a *TypeError* exception.\n            1. Set _endIndex_ to min(_endIndex_, TypedArrayLength(_taRecord_)).\n            1. Set _countBytes_ to max(_endIndex_ - _startIndex_, 0).\n            1. Let _srcType_ be TypedArrayElementType(_O_).\n            1. Let _targetType_ be TypedArrayElementType(_A_).\n            1. If _srcType_ is _targetType_, then\n              1. NOTE: The transfer must be performed in a manner that preserves the bit-level encoding of the source data.\n              1. Let _srcBuffer_ be _O_.[[ViewedArrayBuffer]].\n              1. Let _targetBuffer_ be _A_.[[ViewedArrayBuffer]].\n              1. Let _elementSize_ be TypedArrayElementSize(_O_).\n              1. Let _srcByteOffset_ be _O_.[[ByteOffset]].\n              1. Let _srcByteIndex_ be (_startIndex_ √ó _elementSize_) + _srcByteOffset_.\n              1. Let _targetByteIndex_ be _A_.[[ByteOffset]].\n              1. Let _endByteIndex_ be _targetByteIndex_ + (_countBytes_ √ó _elementSize_).\n              1. Repeat, while _targetByteIndex_ < _endByteIndex_,\n                1. Let _value_ be GetValueFromBuffer(_srcBuffer_, _srcByteIndex_, ~uint8~, *true*, ~unordered~).\n                1. Perform SetValueInBuffer(_targetBuffer_, _targetByteIndex_, ~uint8~, _value_, *true*, ~unordered~).\n                1. Set _srcByteIndex_ to _srcByteIndex_ + 1.\n                1. Set _targetByteIndex_ to _targetByteIndex_ + 1.\n            1. Else,\n              1. Let _n_ be 0.\n              1. Let _k_ be _startIndex_.\n              1. Repeat, while _k_ < _endIndex_,\n                1. Let _Pk_ be ! ToString(ùîΩ(_k_)).\n                1. Let _kValue_ be ! Get(_O_, _Pk_).\n                1. Perform ! Set(_A_, ! ToString(ùîΩ(_n_)), _kValue_, *true*).\n                1. Set _k_ to _k_ + 1.\n                1. Set _n_ to _n_ + 1.\n          1. Return _A_.\n        ",
  "CaseBlock[1,1].ContainsUndefinedBreakTarget" : "\n        1. If the first |CaseClauses| is present, then\n          1. If ContainsUndefinedBreakTarget of the first |CaseClauses| with argument _labelSet_ is *true*, return *true*.\n        1. If ContainsUndefinedBreakTarget of |DefaultClause| with argument _labelSet_ is *true*, return *true*.\n        1. If the second |CaseClauses| is not present, return *false*.\n        1. Return ContainsUndefinedBreakTarget of the second |CaseClauses| with argument _labelSet_.\n      ",
  "MakeDay" : "\n          1. If _year_ is not finite, _month_ is not finite, or _date_ is not finite, return *NaN*.\n          1. Let _y_ be ùîΩ(! ToIntegerOrInfinity(_year_)).\n          1. Let _m_ be ùîΩ(! ToIntegerOrInfinity(_month_)).\n          1. Let _dt_ be ùîΩ(! ToIntegerOrInfinity(_date_)).\n          1. Let _ym_ be _y_ + ùîΩ(floor(‚Ñù(_m_) / 12)).\n          1. If _ym_ is not finite, return *NaN*.\n          1. Let _mn_ be ùîΩ(‚Ñù(_m_) modulo 12).\n          1. Find a finite time value _t_ such that YearFromTime(_t_) is _ym_, MonthFromTime(_t_) is _mn_, and DateFromTime(_t_) is *1*<sub>ùîΩ</sub>; but if this is not possible (because some argument is out of range), return *NaN*.\n          1. Return Day(_t_) + _dt_ - *1*<sub>ùîΩ</sub>.\n        ",
  "WordCharacters" : "\n            1. Let _basicWordChars_ be the CharSet containing every character in the ASCII word characters.\n            1. Let _extraWordChars_ be the CharSet containing all characters _c_ such that _c_ is not in _basicWordChars_ but Canonicalize(_rer_, _c_) is in _basicWordChars_.\n            1. Assert: _extraWordChars_ is empty unless HasEitherUnicodeFlag(_rer_) is *true* and _rer_.[[IgnoreCase]] is *true*.\n            1. Return the union of _basicWordChars_ and _extraWordChars_.\n          ",
  "AssignmentElementList[0,0].IteratorDestructuringAssignmentEvaluation" : "\n          1. Return ? IteratorDestructuringAssignmentEvaluation of |AssignmentElisionElement| with argument _iteratorRecord_.\n        ",
  "INTRINSICS.Date.prototype.setUTCFullYear" : "\n          1. Let _dateObject_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_dateObject_, [[DateValue]]).\n          1. Let _t_ be _dateObject_.[[DateValue]].\n          1. If _t_ is *NaN*, set _t_ to *+0*<sub>ùîΩ</sub>.\n          1. Let _y_ be ? ToNumber(_year_).\n          1. If _month_ is not present, let _m_ be MonthFromTime(_t_); otherwise, let _m_ be ? ToNumber(_month_).\n          1. If _date_ is not present, let _dt_ be DateFromTime(_t_); otherwise, let _dt_ be ? ToNumber(_date_).\n          1. Let _newDate_ be MakeDate(MakeDay(_y_, _m_, _dt_), TimeWithinDay(_t_)).\n          1. Let _v_ be TimeClip(_newDate_).\n          1. Set _dateObject_.[[DateValue]] to _v_.\n          1. Return _v_.\n        ",
  "ModuleItemList[1,0].ContainsDuplicateLabels" : "\n        1. Let _hasDuplicates_ be ContainsDuplicateLabels of |ModuleItemList| with argument _labelSet_.\n        1. If _hasDuplicates_ is *true*, return *true*.\n        1. Return ContainsDuplicateLabels of |ModuleItem| with argument _labelSet_.\n      ",
  "INTRINSICS.Math.fround" : "\n          1. Let _n_ be ? ToNumber(_x_).\n          1. If _n_ is *NaN*, return *NaN*.\n          1. If _n_ is one of *+0*<sub>ùîΩ</sub>, *-0*<sub>ùîΩ</sub>, *+‚àû*<sub>ùîΩ</sub>, or *-‚àû*<sub>ùîΩ</sub>, return _n_.\n          1. Let _n32_ be the result of converting _n_ to IEEE 754-2019 binary32 format using roundTiesToEven mode.\n          1. Let _n64_ be the result of converting _n32_ to IEEE 754-2019 binary64 format.\n          1. Return the ECMAScript Number value corresponding to _n64_.\n        ",
  "BindingIdentifier[1,0].BindingInitialization" : "\n        1. Return ? InitializeBoundName(*\"yield\"*, _value_, _environment_).\n      ",
  "ForInOfStatement[4,0].ContainsDuplicateLabels" : "\n        1. Return ContainsDuplicateLabels of |Statement| with argument _labelSet_.\n      ",
  "SetRealmGlobalObject" : "\n        1. If _globalObj_ is *undefined*, then\n          1. Let _intrinsics_ be _realmRec_.[[Intrinsics]].\n          1. Set _globalObj_ to OrdinaryObjectCreate(_intrinsics_.[[%Object.prototype%]]).\n        1. Assert: _globalObj_ is an Object.\n        1. If _thisValue_ is *undefined*, set _thisValue_ to _globalObj_.\n        1. Set _realmRec_.[[GlobalObject]] to _globalObj_.\n        1. Let _newGlobalEnv_ be NewGlobalEnvironment(_globalObj_, _thisValue_).\n        1. Set _realmRec_.[[GlobalEnv]] to _newGlobalEnv_.\n        1. Return ~unused~.\n      ",
  "BindingIdentifier[0,0].Evaluation" : "\n          1. Let _bindingId_ be StringValue of |BindingIdentifier|.\n          1. Return ? ResolveBinding(_bindingId_).\n        ",
  "AssignmentExpression[6,0].Evaluation" : "\n        1. Let _lref_ be ? Evaluation of |LeftHandSideExpression|.\n        1. [id=\"step-assignmentexpression-evaluation-lgcl-and-getvalue\"] Let _lval_ be ? GetValue(_lref_).\n        1. Let _lbool_ be ToBoolean(_lval_).\n        1. If _lbool_ is *false*, return _lval_.\n        1. If IsAnonymousFunctionDefinition(|AssignmentExpression|) is *true* and IsIdentifierRef of |LeftHandSideExpression| is *true*, then\n          1. Let _rval_ be ? NamedEvaluation of |AssignmentExpression| with argument _lref_.[[ReferencedName]].\n        1. Else,\n          1. Let _rref_ be ? Evaluation of |AssignmentExpression|.\n          1. Let _rval_ be ? GetValue(_rref_).\n        1. [id=\"step-assignmentexpression-evaluation-lgcl-and-putvalue\"] Perform ? PutValue(_lref_, _rval_).\n        1. Return _rval_.\n      ",
  "NewModuleEnvironment" : "\n          1. Let _env_ be a new Module Environment Record containing no bindings.\n          1. Set _env_.[[OuterEnv]] to _E_.\n          1. Return _env_.\n        ",
  "Number::sameValueZero" : "\n            1. If _x_ is *NaN* and _y_ is *NaN*, return *true*.\n            1. If _x_ is *+0*<sub>ùîΩ</sub> and _y_ is *-0*<sub>ùîΩ</sub>, return *true*.\n            1. If _x_ is *-0*<sub>ùîΩ</sub> and _y_ is *+0*<sub>ùîΩ</sub>, return *true*.\n            1. If _x_ is _y_, return *true*.\n            1. Return *false*.\n          ",
  "LexicalBinding[0,0].Evaluation" : "\n          1. Let _lhs_ be ! ResolveBinding(StringValue of |BindingIdentifier|).\n          1. Perform ! InitializeReferencedBinding(_lhs_, *undefined*).\n          1. Return ~empty~.\n        ",
  "AssignmentExpression[7,0].AssignmentTargetType" : "\n        1. Return ~invalid~.\n      ",
  "INTRINSICS.Date.prototype.toUTCString" : "\n          1. Let _dateObject_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_dateObject_, [[DateValue]]).\n          1. Let _tv_ be _dateObject_.[[DateValue]].\n          1. If _tv_ is *NaN*, return *\"Invalid Date\"*.\n          1. Let _weekday_ be the Name of the entry in <emu-xref href=\"#sec-todatestring-day-names\"></emu-xref> with the Number WeekDay(_tv_).\n          1. Let _month_ be the Name of the entry in <emu-xref href=\"#sec-todatestring-month-names\"></emu-xref> with the Number MonthFromTime(_tv_).\n          1. Let _day_ be ToZeroPaddedDecimalString(‚Ñù(DateFromTime(_tv_)), 2).\n          1. Let _yv_ be YearFromTime(_tv_).\n          1. If _yv_ is *+0*<sub>ùîΩ</sub> or _yv_ > *+0*<sub>ùîΩ</sub>, let _yearSign_ be the empty String; otherwise, let _yearSign_ be *\"-\"*.\n          1. Let _paddedYear_ be ToZeroPaddedDecimalString(abs(‚Ñù(_yv_)), 4).\n          1. Return the string-concatenation of _weekday_, *\",\"*, the code unit 0x0020 (SPACE), _day_, the code unit 0x0020 (SPACE), _month_, the code unit 0x0020 (SPACE), _yearSign_, _paddedYear_, the code unit 0x0020 (SPACE), and TimeString(_tv_).\n        ",
  "IfStatement[0,0].Evaluation" : "\n        1. Let _exprRef_ be ? Evaluation of |Expression|.\n        1. Let _exprValue_ be ToBoolean(? GetValue(_exprRef_)).\n        1. If _exprValue_ is *true*, then\n          1. Let _stmtCompletion_ be Completion(Evaluation of the first |Statement|).\n        1. Else,\n          1. Let _stmtCompletion_ be Completion(Evaluation of the second |Statement|).\n        1. Return ? UpdateEmpty(_stmtCompletion_, *undefined*).\n      ",
  "Assertion[1,0].CompileAssertion" : "\n          1. Return a new Matcher with parameters (_x_, _c_) that captures _rer_ and performs the following steps when called:\n            1. Assert: _x_ is a MatchState.\n            1. Assert: _c_ is a MatcherContinuation.\n            1. Let _Input_ be _x_.[[Input]].\n            1. Let _e_ be _x_.[[EndIndex]].\n            1. Let _InputLength_ be the number of elements in _Input_.\n            1. If _e_ = _InputLength_, or if _rer_.[[Multiline]] is *true* and the character _Input_[_e_] is matched by |LineTerminator|, then\n              1. Return _c_(_x_).\n            1. Return ~failure~.\n        ",
  "ToPrimitive" : "\n        1. If _input_ is an Object, then\n          1. Let _exoticToPrim_ be ? GetMethod(_input_, @@toPrimitive).\n          1. If _exoticToPrim_ is not *undefined*, then\n            1. If _preferredType_ is not present, then\n              1. Let _hint_ be *\"default\"*.\n            1. Else if _preferredType_ is ~string~, then\n              1. Let _hint_ be *\"string\"*.\n            1. Else,\n              1. Assert: _preferredType_ is ~number~.\n              1. Let _hint_ be *\"number\"*.\n            1. Let _result_ be ? Call(_exoticToPrim_, _input_, ¬´ _hint_ ¬ª).\n            1. If _result_ is not an Object, return _result_.\n            1. Throw a *TypeError* exception.\n          1. If _preferredType_ is not present, let _preferredType_ be ~number~.\n          1. Return ? OrdinaryToPrimitive(_input_, _preferredType_).\n        1. Return _input_.\n      ",
  "ClassString[1,0].CompileClassSetString" : "\n          1. Return CompileClassSetString of |NonEmptyClassString| with argument _rer_.\n        ",
  "MemberExpression[1,0].IsFunctionDefinition" : "\n        1. Return *false*.\n      ",
  "EnumerateObjectProperties" : "\n          1. Return an Iterator object (<emu-xref href=\"#sec-iterator-interface\"></emu-xref>) whose `next` method iterates over all the String-valued keys of enumerable properties of _O_. The iterator object is never directly accessible to ECMAScript code. The mechanics and order of enumerating the properties is not specified but must conform to the rules specified below.\n        ",
  "PrimaryExpression[1,0].IsFunctionDefinition" : "\n        1. Return *false*.\n      ",
  "Atom[4,1].CompileAtom" : "\n          1. Let _m_ be CompileSubpattern of |Disjunction| with arguments _rer_ and _direction_.\n          1. Let _parenIndex_ be CountLeftCapturingParensBefore(|Atom|).\n          1. Return a new Matcher with parameters (_x_, _c_) that captures _direction_, _m_, and _parenIndex_ and performs the following steps when called:\n            1. Assert: _x_ is a MatchState.\n            1. Assert: _c_ is a MatcherContinuation.\n            1. Let _d_ be a new MatcherContinuation with parameters (_y_) that captures _x_, _c_, _direction_, and _parenIndex_ and performs the following steps when called:\n              1. Assert: _y_ is a MatchState.\n              1. Let _cap_ be a copy of _y_.[[Captures]].\n              1. Let _Input_ be _x_.[[Input]].\n              1. Let _xe_ be _x_.[[EndIndex]].\n              1. Let _ye_ be _y_.[[EndIndex]].\n              1. If _direction_ is ~forward~, then\n                1. Assert: _xe_ ‚â§ _ye_.\n                1. Let _r_ be the CaptureRange { [[StartIndex]]: _xe_, [[EndIndex]]: _ye_ }.\n              1. Else,\n                1. Assert: _direction_ is ~backward~.\n                1. Assert: _ye_ ‚â§ _xe_.\n                1. Let _r_ be the CaptureRange { [[StartIndex]]: _ye_, [[EndIndex]]: _xe_ }.\n              1. Set _cap_[_parenIndex_ + 1] to _r_.\n              1. Let _z_ be the MatchState { [[Input]]: _Input_, [[EndIndex]]: _ye_, [[Captures]]: _cap_ }.\n              1. Return _c_(_z_).\n            1. Return _m_(_x_, _d_).\n        ",
  "INTRINSICS.Number.isSafeInteger" : "\n          1. If IsIntegralNumber(_number_) is *true*, then\n            1. If abs(‚Ñù(_number_)) ‚â§ 2<sup>53</sup> - 1, return *true*.\n          1. Return *false*.\n        ",
  "INTRINSICS.Math.ceil" : "\n          1. Let _n_ be ? ToNumber(_x_).\n          1. If _n_ is not finite or _n_ is either *+0*<sub>ùîΩ</sub> or *-0*<sub>ùîΩ</sub>, return _n_.\n          1. If _n_ < *-0*<sub>ùîΩ</sub> and _n_ > *-1*<sub>ùîΩ</sub>, return *-0*<sub>ùîΩ</sub>.\n          1. If _n_ is an integral Number, return _n_.\n          1. Return the smallest (closest to -‚àû) integral Number value that is not less than _n_.\n        ",
  "FunctionDeclaration[1,0].Contains" : "\n        1. Return *false*.\n      ",
  "ExportsList[1,0].ExportedNames" : "\n          1. Let _names1_ be the ExportedNames of |ExportsList|.\n          1. Let _names2_ be the ExportedNames of |ExportSpecifier|.\n          1. Return the list-concatenation of _names1_ and _names2_.\n        ",
  "DoWhileStatement[0,0].HasCallInTailPosition" : "\n        1. Return HasCallInTailPosition of |Statement| with argument _call_.\n      ",
  "Record[TypedArray].Set" : "\n          1. If _P_ is a String, then\n            1. Let _numericIndex_ be CanonicalNumericIndexString(_P_).\n            1. If _numericIndex_ is not *undefined*, then\n              1. If SameValue(_O_, _Receiver_) is *true*, then\n                1. Perform ? TypedArraySetElement(_O_, _numericIndex_, _V_).\n                1. Return *true*.\n              1. If IsValidIntegerIndex(_O_, _numericIndex_) is *false*, return *true*.\n          1. Return ? OrdinarySet(_O_, _P_, _V_, _Receiver_).\n        ",
  "ModuleItem[2,0].ExportEntries" : "\n          1. Return a new empty List.\n        ",
  "ArraySetLength" : "\n          1. If _Desc_ does not have a [[Value]] field, then\n            1. Return ! OrdinaryDefineOwnProperty(_A_, *\"length\"*, _Desc_).\n          1. Let _newLenDesc_ be a copy of _Desc_.\n          1. [id=\"step-arraysetlength-newlen\"] Let _newLen_ be ? ToUint32(_Desc_.[[Value]]).\n          1. [id=\"step-arraysetlength-numberlen\"] Let _numberLen_ be ? ToNumber(_Desc_.[[Value]]).\n          1. If SameValueZero(_newLen_, _numberLen_) is *false*, throw a *RangeError* exception.\n          1. Set _newLenDesc_.[[Value]] to _newLen_.\n          1. Let _oldLenDesc_ be OrdinaryGetOwnProperty(_A_, *\"length\"*).\n          1. Assert: IsDataDescriptor(_oldLenDesc_) is *true*.\n          1. Assert: _oldLenDesc_.[[Configurable]] is *false*.\n          1. Let _oldLen_ be _oldLenDesc_.[[Value]].\n          1. If _newLen_ ‚â• _oldLen_, then\n            1. Return ! OrdinaryDefineOwnProperty(_A_, *\"length\"*, _newLenDesc_).\n          1. If _oldLenDesc_.[[Writable]] is *false*, return *false*.\n          1. If _newLenDesc_ does not have a [[Writable]] field or _newLenDesc_.[[Writable]] is *true*, then\n            1. Let _newWritable_ be *true*.\n          1. Else,\n            1. NOTE: Setting the [[Writable]] attribute to *false* is deferred in case any elements cannot be deleted.\n            1. Let _newWritable_ be *false*.\n            1. Set _newLenDesc_.[[Writable]] to *true*.\n          1. Let _succeeded_ be ! OrdinaryDefineOwnProperty(_A_, *\"length\"*, _newLenDesc_).\n          1. If _succeeded_ is *false*, return *false*.\n          1. For each own property key _P_ of _A_ such that _P_ is an array index and ! ToUint32(_P_) ‚â• _newLen_, in descending numeric index order, do\n            1. Let _deleteSucceeded_ be ! _A_.[[Delete]](_P_).\n            1. If _deleteSucceeded_ is *false*, then\n              1. Set _newLenDesc_.[[Value]] to ! ToUint32(_P_) + *1*<sub>ùîΩ</sub>.\n              1. If _newWritable_ is *false*, set _newLenDesc_.[[Writable]] to *false*.\n              1. Perform ! OrdinaryDefineOwnProperty(_A_, *\"length\"*, _newLenDesc_).\n              1. Return *false*.\n          1. If _newWritable_ is *false*, then\n            1. Set _succeeded_ to ! OrdinaryDefineOwnProperty(_A_, *\"length\"*, PropertyDescriptor { [[Writable]]: *false* }).\n            1. Assert: _succeeded_ is *true*.\n          1. Return *true*.\n        ",
  "IsValidRegularExpressionLiteral" : "\n          1. Let _flags_ be FlagText of _literal_.\n          1. If _flags_ contains any code points other than `d`, `g`, `i`, `m`, `s`, `u`, `v`, or `y`, or if _flags_ contains any code point more than once, return *false*.\n          1. If _flags_ contains `u`, let _u_ be *true*; else let _u_ be *false*.\n          1. If _flags_ contains `v`, let _v_ be *true*; else let _v_ be *false*.\n          1. Let _patternText_ be BodyText of _literal_.\n          1. If _u_ is *false* and _v_ is *false*, then\n            1. Let _stringValue_ be CodePointsToString(_patternText_).\n            1. Set _patternText_ to the sequence of code points resulting from interpreting each of the 16-bit elements of _stringValue_ as a Unicode BMP code point. UTF-16 decoding is not applied to the elements.\n          1. Let _parseResult_ be ParsePattern(_patternText_, _u_, _v_).\n          1. If _parseResult_ is a Parse Node, return *true*; else return *false*.\n        ",
  "AsyncBlockStart:cont1" : "\n          1. Assert: _promiseCapability_ is a PromiseCapability Record.\n          1. Let _runningContext_ be the running execution context.\n          1. Let _closure_ be a new Abstract Closure with no parameters that captures _promiseCapability_ and _asyncBody_ and performs the following steps when called:\n            1. Let _acAsyncContext_ be the running execution context.\n            1. Let _result_ be Completion(Evaluation of _asyncBody_).\n            1. Assert: If we return here, the async function either threw an exception or performed an implicit or explicit return; all awaiting is done.\n            1. Remove _acAsyncContext_ from the execution context stack and restore the execution context that is at the top of the execution context stack as the running execution context.\n            1. If _result_ is a normal completion, then\n              1. Perform ! Call(_promiseCapability_.[[Resolve]], *undefined*, ¬´ *undefined* ¬ª).\n            1. Else if _result_ is a return completion, then\n              1. Perform ! Call(_promiseCapability_.[[Resolve]], *undefined*, ¬´ _result_.[[Value]] ¬ª).\n            1. Else,\n              1. Assert: _result_ is a throw completion.\n              1. Perform ! Call(_promiseCapability_.[[Reject]], *undefined*, ¬´ _result_.[[Value]] ¬ª).\n            1. [id=\"step-asyncblockstart-return-undefined\"] Return ~unused~.\n          1. Set the code evaluation state of _asyncContext_ such that when evaluation is resumed for that execution context, _closure_ will be called with no arguments.\n          1. Push _asyncContext_ onto the execution context stack; _asyncContext_ is now the running execution context.\n          1. <emu-meta effects=\"user-code\">Resume the suspended evaluation of _asyncContext_</emu-meta>. Let _result_ be the value returned by the resumed computation.\n          1. Assert: When we return here, _asyncContext_ has already been removed from the execution context stack and _runningContext_ is the currently running execution context.\n          1. Assert: _result_ is a normal completion with a value of ~unused~. The possible sources of this value are Await or, if the async function doesn't await anything, step <emu-xref href=\"#step-asyncblockstart-return-undefined\"></emu-xref> above.\n          1. Return ~unused~.\n        ",
  "ExportDeclaration[0,0].ExportEntries" : "\n          1. Let _module_ be the sole element of ModuleRequests of |FromClause|.\n          1. Return ExportEntriesForModule of |ExportFromClause| with argument _module_.\n        ",
  "CaseClause[0,1].ContainsDuplicateLabels" : "\n        1. If the |StatementList| is present, return ContainsDuplicateLabels of |StatementList| with argument _labelSet_.\n        1. Return *false*.\n      ",
  "INTRINSICS.Array.prototype.sort" : "\n          1. [id=\"step-array-sort-comparefn\"] If _comparefn_ is not *undefined* and IsCallable(_comparefn_) is *false*, throw a *TypeError* exception.\n          1. Let _obj_ be ? ToObject(*this* value).\n          1. [id=\"step-array-sort-len\"] Let _len_ be ? LengthOfArrayLike(_obj_).\n          1. Let _SortCompare_ be a new Abstract Closure with parameters (_x_, _y_) that captures _comparefn_ and performs the following steps when called:\n            1. Return ? CompareArrayElements(_x_, _y_, _comparefn_).\n          1. [id=\"step-array-sortindexedproperties\"] Let _sortedList_ be ? SortIndexedProperties(_obj_, _len_, _SortCompare_, ~skip-holes~).\n          1. Let _itemCount_ be the number of elements in _sortedList_.\n          1. Let _j_ be 0.\n          1. Repeat, while _j_ < _itemCount_,\n            1. Perform ? Set(_obj_, ! ToString(ùîΩ(_j_)), _sortedList_[_j_], *true*).\n            1. Set _j_ to _j_ + 1.\n          1. NOTE: The call to SortIndexedProperties in step <emu-xref href=\"#step-array-sortindexedproperties\"></emu-xref> uses ~skip-holes~. The remaining indices are deleted to preserve the number of holes that were detected and excluded from the sort.\n          1. Repeat, while _j_ < _len_,\n            1. Perform ? DeletePropertyOrThrow(_obj_, ! ToString(ùîΩ(_j_))).\n            1. Set _j_ to _j_ + 1.\n          1. Return _obj_.\n        ",
  "ContinueStatement[1,0].ContainsUndefinedContinueTarget" : "\n        1. If _iterationSet_ does not contain the StringValue of |LabelIdentifier|, return *true*.\n        1. Return *false*.\n      ",
  "MemberExpression[2,0].IsDestructuring" : "\n          1. Return *false*.\n        ",
  "ContinueStatement[0,0].ContainsUndefinedContinueTarget" : "\n        1. Return *false*.\n      ",
  "PrimaryExpression[3,0].IsFunctionDefinition" : "\n        1. Return *false*.\n      ",
  "IsUnresolvableReference" : "\n          1. If _V_.[[Base]] is ~unresolvable~, return *true*; otherwise return *false*.\n        ",
  "GeneratorStart:clo0" : "\n          1. Assert: The value of _generator_.[[GeneratorState]] is *undefined*.\n          1. Let _genContext_ be the running execution context.\n          1. Set the Generator component of _genContext_ to _generator_.\n          1. Let _closure_ be a new Abstract Closure with no parameters that captures _generatorBody_ and performs the following steps when called:\n            1. Let _acGenContext_ be the running execution context.\n            1. Let _acGenerator_ be the Generator component of _acGenContext_.\n            1. If _generatorBody_ is a Parse Node, then\n              1. Let _result_ be Completion(Evaluation of _generatorBody_).\n            1. Else,\n              1. Assert: _generatorBody_ is an Abstract Closure with no parameters.\n              1. Let _result_ be _generatorBody_().\n            1. Assert: If we return here, the generator either threw an exception or performed either an implicit or explicit return.\n            1. Remove _acGenContext_ from the execution context stack and restore the execution context that is at the top of the execution context stack as the running execution context.\n            1. Set _acGenerator_.[[GeneratorState]] to ~completed~.\n            1. NOTE: Once a generator enters the ~completed~ state it never leaves it and its associated execution context is never resumed. Any execution state associated with _acGenerator_ can be discarded at this point.\n            1. If _result_ is a normal completion, then\n              1. Let _resultValue_ be *undefined*.\n            1. Else if _result_ is a return completion, then\n              1. Let _resultValue_ be _result_.[[Value]].\n            1. Else,\n              1. Assert: _result_ is a throw completion.\n              1. Return ? _result_.\n            1. Return CreateIterResultObject(_resultValue_, *true*).\n          1. Set the code evaluation state of _genContext_ such that when evaluation is resumed for that execution context, _closure_ will be called with no arguments.\n          1. Set _generator_.[[GeneratorContext]] to _genContext_.\n          1. Set _generator_.[[GeneratorState]] to ~suspended-start~.\n          1. Return ~unused~.\n        ",
  "AsyncFunctionExpression[0,0].IsFunctionDefinition" : "\n        1. Return *true*.\n      ",
  "ImportMeta[0,0].AssignmentTargetType" : "\n        1. Return ~invalid~.\n      ",
  "LetOrConst[1,0].IsConstantDeclaration" : "\n        1. Return *true*.\n      ",
  "GeneratorBody[0,0].EvaluateBody" : "\n          1. Return ? EvaluateGeneratorBody of |GeneratorBody| with arguments _functionObject_ and _argumentsList_.\n        ",
  "ExportDeclaration[4,0].ExportEntries" : "\n          1. Let _names_ be BoundNames of |HoistableDeclaration|.\n          1. Let _localName_ be the sole element of _names_.\n          1. Return a List whose sole element is a new ExportEntry Record { [[ModuleRequest]]: *null*, [[ImportName]]: *null*, [[LocalName]]: _localName_, [[ExportName]]: *\"default\"* }.\n        ",
  "AsyncGeneratorExpression[0,1].Contains" : "\n        1. Return *false*.\n      ",
  "INTRINSICS.Array.prototype.reduce" : "\n          1. Let _O_ be ? ToObject(*this* value).\n          1. Let _len_ be ? LengthOfArrayLike(_O_).\n          1. If IsCallable(_callbackfn_) is *false*, throw a *TypeError* exception.\n          1. If _len_ = 0 and _initialValue_ is not present, throw a *TypeError* exception.\n          1. Let _k_ be 0.\n          1. Let _accumulator_ be *undefined*.\n          1. If _initialValue_ is present, then\n            1. Set _accumulator_ to _initialValue_.\n          1. Else,\n            1. Let _kPresent_ be *false*.\n            1. Repeat, while _kPresent_ is *false* and _k_ < _len_,\n              1. Let _Pk_ be ! ToString(ùîΩ(_k_)).\n              1. Set _kPresent_ to ? HasProperty(_O_, _Pk_).\n              1. If _kPresent_ is *true*, then\n                1. Set _accumulator_ to ? Get(_O_, _Pk_).\n              1. Set _k_ to _k_ + 1.\n            1. If _kPresent_ is *false*, throw a *TypeError* exception.\n          1. Repeat, while _k_ < _len_,\n            1. Let _Pk_ be ! ToString(ùîΩ(_k_)).\n            1. Let _kPresent_ be ? HasProperty(_O_, _Pk_).\n            1. If _kPresent_ is *true*, then\n              1. Let _kValue_ be ? Get(_O_, _Pk_).\n              1. Set _accumulator_ to ? Call(_callbackfn_, *undefined*, ¬´ _accumulator_, _kValue_, ùîΩ(_k_), _O_ ¬ª).\n            1. Set _k_ to _k_ + 1.\n          1. Return _accumulator_.\n        ",
  "ParsePattern" : "\n          1. If _v_ is *true* and _u_ is *true*, then\n            1. Let _parseResult_ be a List containing one or more *SyntaxError* objects.\n          1. Else if _v_ is *true*, then\n            1. Let _parseResult_ be ParseText(_patternText_, |Pattern[+UnicodeMode, +UnicodeSetsMode, +NamedCaptureGroups]|).\n          1. Else if _u_ is *true*, then\n            1. Let _parseResult_ be ParseText(_patternText_, |Pattern[+UnicodeMode, ~UnicodeSetsMode, +NamedCaptureGroups]|).\n          1. Else,\n            1. Let _parseResult_ be ParseText(_patternText_, |Pattern[~UnicodeMode, ~UnicodeSetsMode, +NamedCaptureGroups]|).\n          1. Return _parseResult_.\n        ",
  "ClassSetCharacter[2,0].CompileToCharSet" : "\n          1. Let _cv_ be the CharacterValue of this |ClassSetCharacter|.\n          1. Let _c_ be the character whose character value is _cv_.\n          1. Return the CharSet containing the single character _c_.\n        ",
  "AssignmentRestElement[0,0].IteratorDestructuringAssignmentEvaluation" : "\n          1. If |DestructuringAssignmentTarget| is neither an |ObjectLiteral| nor an |ArrayLiteral|, then\n            1. Let _lref_ be ? Evaluation of |DestructuringAssignmentTarget|.\n          1. Let _A_ be ! ArrayCreate(0).\n          1. Let _n_ be 0.\n          1. Repeat, while _iteratorRecord_.[[Done]] is *false*,\n            1. Let _next_ be ? IteratorStepValue(_iteratorRecord_).\n            1. If _next_ is not ~done~, then\n              1. Perform ! CreateDataPropertyOrThrow(_A_, ! ToString(ùîΩ(_n_)), _next_).\n              1. Set _n_ to _n_ + 1.\n          1. If |DestructuringAssignmentTarget| is neither an |ObjectLiteral| nor an |ArrayLiteral|, then\n            1. Return ? PutValue(_lref_, _A_).\n          1. Let _nestedAssignmentPattern_ be the |AssignmentPattern| that is covered by |DestructuringAssignmentTarget|.\n          1. Return ? DestructuringAssignmentEvaluation of _nestedAssignmentPattern_ with argument _A_.\n        ",
  "ArrayBindingPattern[2,3].BoundNames" : "\n        1. Let _names1_ be BoundNames of |BindingElementList|.\n        1. Let _names2_ be BoundNames of |BindingRestElement|.\n        1. Return the list-concatenation of _names1_ and _names2_.\n      ",
  "CreateAsyncFromSyncIterator" : "\n          1. Let _asyncIterator_ be OrdinaryObjectCreate(%AsyncFromSyncIteratorPrototype%, ¬´ [[SyncIteratorRecord]] ¬ª).\n          1. Set _asyncIterator_.[[SyncIteratorRecord]] to _syncIteratorRecord_.\n          1. Let _nextMethod_ be ! Get(_asyncIterator_, *\"next\"*).\n          1. Let _iteratorRecord_ be the Iterator Record { [[Iterator]]: _asyncIterator_, [[NextMethod]]: _nextMethod_, [[Done]]: *false* }.\n          1. Return _iteratorRecord_.\n        ",
  "ContinueDynamicImport:clo0" : "\n            1. If _moduleCompletion_ is an abrupt completion, then\n              1. Perform ! Call(_promiseCapability_.[[Reject]], *undefined*, ¬´ _moduleCompletion_.[[Value]] ¬ª).\n              1. Return ~unused~.\n            1. Let _module_ be _moduleCompletion_.[[Value]].\n            1. Let _loadPromise_ be _module_.LoadRequestedModules().\n            1. Let _rejectedClosure_ be a new Abstract Closure with parameters (_reason_) that captures _promiseCapability_ and performs the following steps when called:\n              1. Perform ! Call(_promiseCapability_.[[Reject]], *undefined*, ¬´ _reason_ ¬ª).\n              1. Return ~unused~.\n            1. Let _onRejected_ be CreateBuiltinFunction(_rejectedClosure_, 1, *\"\"*, ¬´ ¬ª).\n            1. Let _linkAndEvaluateClosure_ be a new Abstract Closure with no parameters that captures _module_, _promiseCapability_, and _onRejected_ and performs the following steps when called:\n              1. Let _link_ be Completion(_module_.Link()).\n              1. If _link_ is an abrupt completion, then\n                1. Perform ! Call(_promiseCapability_.[[Reject]], *undefined*, ¬´ _link_.[[Value]] ¬ª).\n                1. Return ~unused~.\n              1. Let _evaluatePromise_ be _module_.Evaluate().\n              1. Let _fulfilledClosure_ be a new Abstract Closure with no parameters that captures _module_ and _promiseCapability_ and performs the following steps when called:\n                1. Let _namespace_ be GetModuleNamespace(_module_).\n                1. Perform ! Call(_promiseCapability_.[[Resolve]], *undefined*, ¬´ _namespace_ ¬ª).\n                1. Return ~unused~.\n              1. Let _onFulfilled_ be CreateBuiltinFunction(_fulfilledClosure_, 0, *\"\"*, ¬´ ¬ª).\n              1. Perform PerformPromiseThen(_evaluatePromise_, _onFulfilled_, _onRejected_).\n              1. Return ~unused~.\n            1. Let _linkAndEvaluate_ be CreateBuiltinFunction(_linkAndEvaluateClosure_, 0, *\"\"*, ¬´ ¬ª).\n            1. Perform PerformPromiseThen(_loadPromise_, _linkAndEvaluate_, _onRejected_).\n            1. Return ~unused~.\n          ",
  "INTRINSICS.DataView.prototype.setFloat32" : "\n          1. Let _v_ be the *this* value.\n          1. If _littleEndian_ is not present, set _littleEndian_ to *false*.\n          1. Return ? SetViewValue(_v_, _byteOffset_, _littleEndian_, ~float32~, _value_).\n        ",
  "INTRINSICS.String.prototype.charCodeAt" : "\n          1. Let _O_ be ? RequireObjectCoercible(*this* value).\n          1. Let _S_ be ? ToString(_O_).\n          1. Let _position_ be ? ToIntegerOrInfinity(_pos_).\n          1. Let _size_ be the length of _S_.\n          1. If _position_ < 0 or _position_ ‚â• _size_, return *NaN*.\n          1. Return the Number value for the numeric value of the code unit at index _position_ within the String _S_.\n        ",
  "ClassElementList[1,0].PrototypePropertyNameList" : "\n        1. Let _list_ be PrototypePropertyNameList of |ClassElementList|.\n        1. Let _propName_ be PropName of |ClassElement|.\n        1. If _propName_ is ~empty~, return _list_.\n        1. If IsStatic of |ClassElement| is *true*, return _list_.\n        1. Return the list-concatenation of _list_ and ¬´ _propName_ ¬ª.\n      ",
  "PrimaryExpression[2,0].IsFunctionDefinition" : "\n        1. Return *false*.\n      ",
  "VariableDeclaration[0,1].BoundNames" : "\n        1. Return the BoundNames of |BindingIdentifier|.\n      ",
  "DefaultClause[0,1].LexicallyDeclaredNames" : "\n        1. If the |StatementList| is present, return the LexicallyDeclaredNames of |StatementList|.\n        1. Return a new empty List.\n      ",
  "FormalParameters[1,0].ExpectedArgumentCount" : "\n        1. Return 0.\n      ",
  "RequireObjectCoercible" : null,
  "ContinueModuleLoading" : "\n              1. If _state_.[[IsLoading]] is *false*, return ~unused~.\n              1. If _moduleCompletion_ is a normal completion, then\n                1. Perform InnerModuleLoading(_state_, _moduleCompletion_.[[Value]]).\n              1. Else,\n                1. Set _state_.[[IsLoading]] to *false*.\n                1. Perform ! Call(_state_.[[PromiseCapability]].[[Reject]], *undefined*, ¬´ _moduleCompletion_.[[Value]] ¬ª).\n              1. Return ~unused~.\n            ",
  "RemoveWaiter" : "\n          1. Assert: The surrounding agent is in the critical section for _WL_.\n          1. Assert: _WL_.[[Waiters]] contains _waiterRecord_.\n          1. Remove _waiterRecord_ from _WL_.[[Waiters]].\n          1. Return ~unused~.\n        ",
  "EqualityExpression[3,0].IsFunctionDefinition" : "\n        1. Return *false*.\n      ",
  "CaseClauses[1,0].LexicallyScopedDeclarations" : "\n        1. Let _declarations1_ be LexicallyScopedDeclarations of |CaseClauses|.\n        1. Let _declarations2_ be LexicallyScopedDeclarations of |CaseClause|.\n        1. Return the list-concatenation of _declarations1_ and _declarations2_.\n      ",
  "ClassEscape[1,0].IsCharacterClass" : "\n          1. Return *false*.\n        ",
  "ForStatement[2,0].ContainsUndefinedContinueTarget" : "\n        1. Return ContainsUndefinedContinueTarget of |Statement| with arguments _iterationSet_ and ¬´ ¬ª.\n      ",
  "DefaultClause[0,1].ContainsDuplicateLabels" : "\n        1. If the |StatementList| is present, return ContainsDuplicateLabels of |StatementList| with argument _labelSet_.\n        1. Return *false*.\n      ",
  "ClassSubtraction[0,0].CompileToCharSet" : "\n          1. Let _A_ be CompileToCharSet of the first |ClassSetOperand| with argument _rer_.\n          1. Let _B_ be CompileToCharSet of the second |ClassSetOperand| with argument _rer_.\n          1. Return the CharSet containing the CharSetElements of _A_ which are not also CharSetElements of _B_.\n        ",
  "INTRINSICS.Atomics.wait" : "\n        1. Return ? DoWait(~sync~, _typedArray_, _index_, _value_, _timeout_).\n      ",
  "ModuleItem[0,0].Evaluation" : "\n          1. Return ~empty~.\n        ",
  "INTRINSICS.Promise.allSettled" : "\n          1. Let _C_ be the *this* value.\n          1. Let _promiseCapability_ be ? NewPromiseCapability(_C_).\n          1. Let _promiseResolve_ be Completion(GetPromiseResolve(_C_)).\n          1. IfAbruptRejectPromise(_promiseResolve_, _promiseCapability_).\n          1. Let _iteratorRecord_ be Completion(GetIterator(_iterable_, ~sync~)).\n          1. IfAbruptRejectPromise(_iteratorRecord_, _promiseCapability_).\n          1. Let _result_ be Completion(PerformPromiseAllSettled(_iteratorRecord_, _C_, _promiseCapability_, _promiseResolve_)).\n          1. If _result_ is an abrupt completion, then\n            1. If _iteratorRecord_.[[Done]] is *false*, set _result_ to Completion(IteratorClose(_iteratorRecord_, _result_)).\n            1. IfAbruptRejectPromise(_result_, _promiseCapability_).\n          1. Return ? _result_.\n        ",
  "FunctionDeclaration[0,0].Evaluation" : "\n        1. Return ~empty~.\n      ",
  "INTRINSICS.FinalizationRegistry" : "\n          1. If NewTarget is *undefined*, throw a *TypeError* exception.\n          1. If IsCallable(_cleanupCallback_) is *false*, throw a *TypeError* exception.\n          1. Let _finalizationRegistry_ be ? OrdinaryCreateFromConstructor(NewTarget, *\"%FinalizationRegistry.prototype%\"*, ¬´ [[Realm]], [[CleanupCallback]], [[Cells]] ¬ª).\n          1. Let _fn_ be the active function object.\n          1. Set _finalizationRegistry_.[[Realm]] to _fn_.[[Realm]].\n          1. Set _finalizationRegistry_.[[CleanupCallback]] to HostMakeJobCallback(_cleanupCallback_).\n          1. Set _finalizationRegistry_.[[Cells]] to a new empty List.\n          1. Return _finalizationRegistry_.\n        ",
  "CaseBlock[1,3].CaseBlockEvaluation" : "\n        1. Let _V_ be *undefined*.\n        1. If the first |CaseClauses| is present, then\n          1. Let _A_ be the List of |CaseClause| items in the first |CaseClauses|, in source text order.\n        1. Else,\n          1. Let _A_ be a new empty List.\n        1. Let _found_ be *false*.\n        1. For each |CaseClause| _C_ of _A_, do\n          1. If _found_ is *false*, then\n            1. Set _found_ to ? CaseClauseIsSelected(_C_, _input_).\n          1. If _found_ is *true*, then\n            1. Let _R_ be Completion(Evaluation of _C_).\n            1. If _R_.[[Value]] is not ~empty~, set _V_ to _R_.[[Value]].\n            1. If _R_ is an abrupt completion, return ? UpdateEmpty(_R_, _V_).\n        1. Let _foundInB_ be *false*.\n        1. If the second |CaseClauses| is present, then\n          1. Let _B_ be the List of |CaseClause| items in the second |CaseClauses|, in source text order.\n        1. Else,\n          1. Let _B_ be a new empty List.\n        1. If _found_ is *false*, then\n          1. For each |CaseClause| _C_ of _B_, do\n            1. If _foundInB_ is *false*, then\n              1. Set _foundInB_ to ? CaseClauseIsSelected(_C_, _input_).\n            1. If _foundInB_ is *true*, then\n              1. Let _R_ be Completion(Evaluation of |CaseClause| _C_).\n              1. If _R_.[[Value]] is not ~empty~, set _V_ to _R_.[[Value]].\n              1. If _R_ is an abrupt completion, return ? UpdateEmpty(_R_, _V_).\n        1. If _foundInB_ is *true*, return _V_.\n        1. Let _defaultR_ be Completion(Evaluation of |DefaultClause|).\n        1. If _defaultR_.[[Value]] is not ~empty~, set _V_ to _defaultR_.[[Value]].\n        1. If _defaultR_ is an abrupt completion, return ? UpdateEmpty(_defaultR_, _V_).\n        1. NOTE: The following is another complete iteration of the second |CaseClauses|.\n        1. For each |CaseClause| _C_ of _B_, do\n          1. Let _R_ be Completion(Evaluation of |CaseClause| _C_).\n          1. If _R_.[[Value]] is not ~empty~, set _V_ to _R_.[[Value]].\n          1. If _R_ is an abrupt completion, return ? UpdateEmpty(_R_, _V_).\n        1. Return _V_.\n      ",
  "PrimaryExpression[12,0].HasCallInTailPosition" : "\n        1. Let _expr_ be the |ParenthesizedExpression| that is covered by |CoverParenthesizedExpressionAndArrowParameterList|.\n        1. Return HasCallInTailPosition of _expr_ with argument _call_.\n      ",
  "MemberExpression[7,0].IsFunctionDefinition" : "\n        1. Return *false*.\n      ",
  "DoWhileStatement[0,0].ContainsDuplicateLabels" : "\n        1. Return ContainsDuplicateLabels of |Statement| with argument _labelSet_.\n      ",
  "AsyncFunctionExpression[0,1].ContainsArguments" : "\n        1. Return *false*.\n      ",
  "AsyncGeneratorValidate" : "\n          1. Perform ? RequireInternalSlot(_generator_, [[AsyncGeneratorContext]]).\n          1. Perform ? RequireInternalSlot(_generator_, [[AsyncGeneratorState]]).\n          1. Perform ? RequireInternalSlot(_generator_, [[AsyncGeneratorQueue]]).\n          1. If _generator_.[[GeneratorBrand]] is not _generatorBrand_, throw a *TypeError* exception.\n          1. Return ~unused~.\n        ",
  "INTRINSICS.Map.prototype.forEach" : "\n          1. Let _M_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_M_, [[MapData]]).\n          1. If IsCallable(_callbackfn_) is *false*, throw a *TypeError* exception.\n          1. Let _entries_ be _M_.[[MapData]].\n          1. Let _numEntries_ be the number of elements in _entries_.\n          1. Let _index_ be 0.\n          1. Repeat, while _index_ < _numEntries_,\n            1. Let _e_ be _entries_[_index_].\n            1. Set _index_ to _index_ + 1.\n            1. If _e_.[[Key]] is not ~empty~, then\n              1. Perform ? Call(_callbackfn_, _thisArg_, ¬´ _e_.[[Value]], _e_.[[Key]], _M_ ¬ª).\n              1. NOTE: The number of elements in _entries_ may have increased during execution of _callbackfn_.\n              1. Set _numEntries_ to the number of elements in _entries_.\n          1. Return *undefined*.\n        ",
  "LexicalBinding[0,0].BoundNames" : "\n        1. Return the BoundNames of |BindingIdentifier|.\n      ",
  "GetUTCEpochNanoseconds" : "\n          1. Let _date_ be MakeDay(ùîΩ(_year_), ùîΩ(_month_ - 1), ùîΩ(_day_)).\n          1. Let _time_ be MakeTime(ùîΩ(_hour_), ùîΩ(_minute_), ùîΩ(_second_), ùîΩ(_millisecond_)).\n          1. Let _ms_ be MakeDate(_date_, _time_).\n          1. Assert: _ms_ is an integral Number.\n          1. Return ‚Ñ§(‚Ñù(_ms_) √ó 10<sup>6</sup> + _microsecond_ √ó 10<sup>3</sup> + _nanosecond_).\n        ",
  "TryStatement[2,0].ContainsUndefinedContinueTarget" : "\n        1. If ContainsUndefinedContinueTarget of |Block| with arguments _iterationSet_ and ¬´ ¬ª is *true*, return *true*.\n        1. If ContainsUndefinedContinueTarget of |Catch| with arguments _iterationSet_ and ¬´ ¬ª is *true*, return *true*.\n        1. Return ContainsUndefinedContinueTarget of |Finally| with arguments _iterationSet_ and ¬´ ¬ª.\n      ",
  "UpdateExpression[3,0].IsFunctionDefinition" : "\n        1. Return *false*.\n      ",
  "INTRINSICS.get Promise[@@species]" : "\n          1. Return the *this* value.\n        ",
  "IsLooselyEqual" : "\n        1. If Type(_x_) is Type(_y_), then\n          1. Return IsStrictlyEqual(_x_, _y_).\n        1. If _x_ is *null* and _y_ is *undefined*, return *true*.\n        1. If _x_ is *undefined* and _y_ is *null*, return *true*.\n        1. [id=\"step-abstract-equality-comparison-web-compat-insertion-point\"] NOTE: This step is replaced in section <emu-xref href=\"#sec-IsHTMLDDA-internal-slot-aec\"></emu-xref>.\n        1. If _x_ is a Number and _y_ is a String, return ! IsLooselyEqual(_x_, ! ToNumber(_y_)).\n        1. If _x_ is a String and _y_ is a Number, return ! IsLooselyEqual(! ToNumber(_x_), _y_).\n        1. If _x_ is a BigInt and _y_ is a String, then\n          1. Let _n_ be StringToBigInt(_y_).\n          1. If _n_ is *undefined*, return *false*.\n          1. Return ! IsLooselyEqual(_x_, _n_).\n        1. If _x_ is a String and _y_ is a BigInt, return ! IsLooselyEqual(_y_, _x_).\n        1. If _x_ is a Boolean, return ! IsLooselyEqual(! ToNumber(_x_), _y_).\n        1. If _y_ is a Boolean, return ! IsLooselyEqual(_x_, ! ToNumber(_y_)).\n        1. If _x_ is either a String, a Number, a BigInt, or a Symbol and _y_ is an Object, return ! IsLooselyEqual(_x_, ? ToPrimitive(_y_)).\n        1. If _x_ is an Object and _y_ is either a String, a Number, a BigInt, or a Symbol, return ! IsLooselyEqual(? ToPrimitive(_x_), _y_).\n        1. If _x_ is a BigInt and _y_ is a Number, or if _x_ is a Number and _y_ is a BigInt, then\n          1. If _x_ is not finite or _y_ is not finite, return *false*.\n          1. If ‚Ñù(_x_) = ‚Ñù(_y_), return *true*; otherwise return *false*.\n        1. Return *false*.\n      ",
  "OrdinarySetPrototypeOf" : "\n          1. Let _current_ be _O_.[[Prototype]].\n          1. If SameValue(_V_, _current_) is *true*, return *true*.\n          1. Let _extensible_ be _O_.[[Extensible]].\n          1. If _extensible_ is *false*, return *false*.\n          1. Let _p_ be _V_.\n          1. Let _done_ be *false*.\n          1. [id=\"step-ordinarysetprototypeof-loop\"] Repeat, while _done_ is *false*,\n            1. If _p_ is *null*, then\n              1. Set _done_ to *true*.\n            1. Else if SameValue(_p_, _O_) is *true*, then\n              1. Return *false*.\n            1. Else,\n              1. If _p_.[[GetPrototypeOf]] is not the ordinary object internal method defined in <emu-xref href=\"#sec-ordinary-object-internal-methods-and-internal-slots-getprototypeof\"></emu-xref>, set _done_ to *true*.\n              1. Else, set _p_ to _p_.[[Prototype]].\n          1. Set _O_.[[Prototype]] to _V_.\n          1. Return *true*.\n        ",
  "IsPrivateReference" : "\n          1. If _V_.[[ReferencedName]] is a Private Name, return *true*; otherwise return *false*.\n        ",
  "FindViaPredicate" : "\n            1. If IsCallable(_predicate_) is *false*, throw a *TypeError* exception.\n            1. If _direction_ is ~ascending~, then\n              1. Let _indices_ be a List of the integers in the interval from 0 (inclusive) to _len_ (exclusive), in ascending order.\n            1. Else,\n              1. Let _indices_ be a List of the integers in the interval from 0 (inclusive) to _len_ (exclusive), in descending order.\n            1. For each integer _k_ of _indices_, do\n              1. Let _Pk_ be ! ToString(ùîΩ(_k_)).\n              1. NOTE: If _O_ is a TypedArray, the following invocation of Get will return a normal completion.\n              1. Let _kValue_ be ? Get(_O_, _Pk_).\n              1. Let _testResult_ be ? Call(_predicate_, _thisArg_, ¬´ _kValue_, ùîΩ(_k_), _O_ ¬ª).\n              1. If ToBoolean(_testResult_) is *true*, return the Record { [[Index]]: ùîΩ(_k_), [[Value]]: _kValue_ }.\n            1. Return the Record { [[Index]]: *-1*<sub>ùîΩ</sub>, [[Value]]: *undefined* }.\n          ",
  "ClassElement[4,0].PrivateBoundIdentifiers" : "\n        1. Return a new empty List.\n      ",
  "StatementListItem[0,0].TopLevelVarScopedDeclarations" : "\n        1. If |Statement| is <emu-grammar>Statement : LabelledStatement</emu-grammar>, return TopLevelVarScopedDeclarations of |Statement|.\n        1. Return VarScopedDeclarations of |Statement|.\n      ",
  "INTRINSICS.Array.prototype.forEach" : "\n          1. Let _O_ be ? ToObject(*this* value).\n          1. Let _len_ be ? LengthOfArrayLike(_O_).\n          1. If IsCallable(_callbackfn_) is *false*, throw a *TypeError* exception.\n          1. Let _k_ be 0.\n          1. Repeat, while _k_ < _len_,\n            1. Let _Pk_ be ! ToString(ùîΩ(_k_)).\n            1. Let _kPresent_ be ? HasProperty(_O_, _Pk_).\n            1. If _kPresent_ is *true*, then\n              1. Let _kValue_ be ? Get(_O_, _Pk_).\n              1. Perform ? Call(_callbackfn_, _thisArg_, ¬´ _kValue_, ùîΩ(_k_), _O_ ¬ª).\n            1. Set _k_ to _k_ + 1.\n          1. Return *undefined*.\n        ",
  "INTRINSICS.Proxy.revocable:clo0" : "\n          1. Let _proxy_ be ? ProxyCreate(_target_, _handler_).\n          1. Let _revokerClosure_ be a new Abstract Closure with no parameters that captures nothing and performs the following steps when called:\n            1. Let _F_ be the active function object.\n            1. Let _p_ be _F_.[[RevocableProxy]].\n            1. If _p_ is *null*, return *undefined*.\n            1. Set _F_.[[RevocableProxy]] to *null*.\n            1. Assert: _p_ is a Proxy exotic object.\n            1. Set _p_.[[ProxyTarget]] to *null*.\n            1. Set _p_.[[ProxyHandler]] to *null*.\n            1. Return *undefined*.\n          1. Let _revoker_ be CreateBuiltinFunction(_revokerClosure_, 0, *\"\"*, ¬´ [[RevocableProxy]] ¬ª).\n          1. Set _revoker_.[[RevocableProxy]] to _proxy_.\n          1. Let _result_ be OrdinaryObjectCreate(%Object.prototype%).\n          1. Perform ! CreateDataPropertyOrThrow(_result_, *\"proxy\"*, _proxy_).\n          1. Perform ! CreateDataPropertyOrThrow(_result_, *\"revoke\"*, _revoker_).\n          1. Return _result_.\n        ",
  "CreateResolvingFunctions" : "\n          1. Let _alreadyResolved_ be the Record { [[Value]]: *false* }.\n          1. Let _stepsResolve_ be the algorithm steps defined in <emu-xref href=\"#sec-promise-resolve-functions\" title></emu-xref>.\n          1. Let _lengthResolve_ be the number of non-optional parameters of the function definition in <emu-xref href=\"#sec-promise-resolve-functions\" title></emu-xref>.\n          1. Let _resolve_ be CreateBuiltinFunction(_stepsResolve_, _lengthResolve_, *\"\"*, ¬´ [[Promise]], [[AlreadyResolved]] ¬ª).\n          1. Set _resolve_.[[Promise]] to _promise_.\n          1. Set _resolve_.[[AlreadyResolved]] to _alreadyResolved_.\n          1. Let _stepsReject_ be the algorithm steps defined in <emu-xref href=\"#sec-promise-reject-functions\" title></emu-xref>.\n          1. Let _lengthReject_ be the number of non-optional parameters of the function definition in <emu-xref href=\"#sec-promise-reject-functions\" title></emu-xref>.\n          1. Let _reject_ be CreateBuiltinFunction(_stepsReject_, _lengthReject_, *\"\"*, ¬´ [[Promise]], [[AlreadyResolved]] ¬ª).\n          1. Set _reject_.[[Promise]] to _promise_.\n          1. Set _reject_.[[AlreadyResolved]] to _alreadyResolved_.\n          1. Return the Record { [[Resolve]]: _resolve_, [[Reject]]: _reject_ }.\n        ",
  "DefineMethodProperty" : "\n        1. Assert: _homeObject_ is an ordinary, extensible object.\n        1. If _key_ is a Private Name, then\n          1. Return PrivateElement { [[Key]]: _key_, [[Kind]]: ~method~, [[Value]]: _closure_ }.\n        1. Else,\n          1. Let _desc_ be the PropertyDescriptor { [[Value]]: _closure_, [[Writable]]: *true*, [[Enumerable]]: _enumerable_, [[Configurable]]: *true* }.\n          1. Perform ? DefinePropertyOrThrow(_homeObject_, _key_, _desc_).\n          1. NOTE: DefinePropertyOrThrow only returns an abrupt completion when attempting to define a class static method whose _key_ is *\"prototype\"*.\n          1. Return ~unused~.\n      ",
  "INTRINSICS.Object.prototype.isPrototypeOf" : "\n          1. [id=\"step-isprototypeof-check-object\"] If _V_ is not an Object, return *false*.\n          1. [id=\"step-isprototypeof-toobject\"] Let _O_ be ? ToObject(*this* value).\n          1. Repeat,\n            1. Set _V_ to ? <emu-meta effects=\"user-code\">_V_.[[GetPrototypeOf]]()</emu-meta>.\n            1. If _V_ is *null*, return *false*.\n            1. If SameValue(_O_, _V_) is *true*, return *true*.\n        ",
  "AddRestrictedFunctionProperties" : "\n        1. Assert: _realm_.[[Intrinsics]].[[%ThrowTypeError%]] exists and has been initialized.\n        1. Let _thrower_ be _realm_.[[Intrinsics]].[[%ThrowTypeError%]].\n        1. Perform ! DefinePropertyOrThrow(_F_, *\"caller\"*, PropertyDescriptor { [[Get]]: _thrower_, [[Set]]: _thrower_, [[Enumerable]]: *false*, [[Configurable]]: *true* }).\n        1. Perform ! DefinePropertyOrThrow(_F_, *\"arguments\"*, PropertyDescriptor { [[Get]]: _thrower_, [[Set]]: _thrower_, [[Enumerable]]: *false*, [[Configurable]]: *true* }).\n        1. Return ~unused~.\n      ",
  "FunctionDeclaration[0,0].BoundNames" : "\n        1. Return the BoundNames of |BindingIdentifier|.\n      ",
  "BindingList[1,0].BoundNames" : "\n        1. Let _names1_ be the BoundNames of |BindingList|.\n        1. Let _names2_ be the BoundNames of |LexicalBinding|.\n        1. Return the list-concatenation of _names1_ and _names2_.\n      ",
  "INTRINSICS.DataView.prototype.getInt16" : "\n          1. Let _v_ be the *this* value.\n          1. If _littleEndian_ is not present, set _littleEndian_ to *false*.\n          1. Return ? GetViewValue(_v_, _byteOffset_, _littleEndian_, ~int16~).\n        ",
  "CallExpression[0,0].Evaluation" : "\n          1. Let _expr_ be the |CallMemberExpression| that is covered by |CoverCallExpressionAndAsyncArrowHead|.\n          1. Let _memberExpr_ be the |MemberExpression| of _expr_.\n          1. Let _arguments_ be the |Arguments| of _expr_.\n          1. Let _ref_ be ? Evaluation of _memberExpr_.\n          1. Let _func_ be ? GetValue(_ref_).\n          1. If _ref_ is a Reference Record, IsPropertyReference(_ref_) is *false*, and _ref_.[[ReferencedName]] is *\"eval\"*, then\n            1. If SameValue(_func_, %eval%) is *true*, then\n              1. Let _argList_ be ? ArgumentListEvaluation of _arguments_.\n              1. If _argList_ has no elements, return *undefined*.\n              1. Let _evalArg_ be the first element of _argList_.\n              1. If the source text matched by this |CallExpression| is strict mode code, let _strictCaller_ be *true*. Otherwise let _strictCaller_ be *false*.\n              1. [id=\"step-callexpression-evaluation-direct-eval\"] Return ? PerformEval(_evalArg_, _strictCaller_, *true*).\n          1. Let _thisCall_ be this |CallExpression|.\n          1. Let _tailCall_ be IsInTailPosition(_thisCall_).\n          1. Return ? EvaluateCall(_func_, _ref_, _arguments_, _tailCall_).\n        ",
  "Catch[0,0].CatchClauseEvaluation" : "\n        1. Let _oldEnv_ be the running execution context's LexicalEnvironment.\n        1. Let _catchEnv_ be NewDeclarativeEnvironment(_oldEnv_).\n        1. For each element _argName_ of the BoundNames of |CatchParameter|, do\n          1. Perform ! _catchEnv_.CreateMutableBinding(_argName_, *false*).\n        1. Set the running execution context's LexicalEnvironment to _catchEnv_.\n        1. Let _status_ be Completion(BindingInitialization of |CatchParameter| with arguments _thrownValue_ and _catchEnv_).\n        1. If _status_ is an abrupt completion, then\n          1. Set the running execution context's LexicalEnvironment to _oldEnv_.\n          1. Return ? _status_.\n        1. Let _B_ be Completion(Evaluation of |Block|).\n        1. Set the running execution context's LexicalEnvironment to _oldEnv_.\n        1. Return ? _B_.\n      ",
  "INTRINSICS.Reflect.has" : "\n        1. If _target_ is not an Object, throw a *TypeError* exception.\n        1. Let _key_ be ? ToPropertyKey(_propertyKey_).\n        1. Return ? <emu-meta effects=\"user-code\">_target_.[[HasProperty]]</emu-meta>(_key_).\n      ",
  "UTF16SurrogatePairToCodePoint" : "\n        1. Assert: _lead_ is a leading surrogate and _trail_ is a trailing surrogate.\n        1. Let _cp_ be (_lead_ - 0xD800) √ó 0x400 + (_trail_ - 0xDC00) + 0x10000.\n        1. Return the code point _cp_.\n      ",
  "Elision[0,0].ArrayAccumulation" : "\n          1. Let _len_ be _nextIndex_ + 1.\n          1. Perform ? Set(_array_, *\"length\"*, ùîΩ(_len_), *true*).\n          1. NOTE: The above step throws if _len_ exceeds 2<sup>32</sup> - 1.\n          1. Return _len_.\n        ",
  "WeakRefDeref" : "\n          1. Let _target_ be _weakRef_.[[WeakRefTarget]].\n          1. If _target_ is not ~empty~, then\n            1. Perform AddToKeptObjects(_target_).\n            1. Return _target_.\n          1. Return *undefined*.\n        ",
  "ExportDeclaration[2,0].ModuleRequests" : "\n          1. Return a new empty List.\n        ",
  "TypedArrayCreate" : "\n          1. Let _internalSlotsList_ be ¬´ [[Prototype]], [[Extensible]], [[ViewedArrayBuffer]], [[TypedArrayName]], [[ContentType]], [[ByteLength]], [[ByteOffset]], [[ArrayLength]] ¬ª.\n          1. Let _A_ be MakeBasicObject(_internalSlotsList_).\n          1. Set _A_.[[GetOwnProperty]] as specified in <emu-xref href=\"#sec-typedarray-getownproperty\"></emu-xref>.\n          1. Set _A_.[[HasProperty]] as specified in <emu-xref href=\"#sec-typedarray-hasproperty\"></emu-xref>.\n          1. Set _A_.[[DefineOwnProperty]] as specified in <emu-xref href=\"#sec-typedarray-defineownproperty\"></emu-xref>.\n          1. Set _A_.[[Get]] as specified in <emu-xref href=\"#sec-typedarray-get\"></emu-xref>.\n          1. Set _A_.[[Set]] as specified in <emu-xref href=\"#sec-typedarray-set\"></emu-xref>.\n          1. Set _A_.[[Delete]] as specified in <emu-xref href=\"#sec-typedarray-delete\"></emu-xref>.\n          1. Set _A_.[[OwnPropertyKeys]] as specified in <emu-xref href=\"#sec-typedarray-ownpropertykeys\"></emu-xref>.\n          1. Set _A_.[[Prototype]] to _prototype_.\n          1. Return _A_.\n        ",
  "QuantifierPrefix[0,0].CompileQuantifierPrefix" : "\n          1. Return the Record { [[Min]]: 0, [[Max]]: +‚àû }.\n        ",
  "AgentSignifier" : "\n        1. Let _AR_ be the Agent Record of the surrounding agent.\n        1. Return _AR_.[[Signifier]].\n      ",
  "VariableDeclarationList[1,0].VarScopedDeclarations" : "\n        1. Let _declarations1_ be VarScopedDeclarations of |VariableDeclarationList|.\n        1. Return the list-concatenation of _declarations1_ and ¬´ |VariableDeclaration| ¬ª.\n      ",
  "MethodDefinition[5,0].ContainsArguments" : "\n        1. Return ContainsArguments of |ClassElementName|.\n      ",
  "ArrayBindingPattern[2,1].IteratorBindingInitialization" : "\n        1. Perform ? IteratorBindingInitialization of |BindingElementList| with arguments _iteratorRecord_ and _environment_.\n        1. If |Elision| is present, then\n          1. Perform ? IteratorDestructuringAssignmentEvaluation of |Elision| with argument _iteratorRecord_.\n        1. Return ? IteratorBindingInitialization of |BindingRestElement| with arguments _iteratorRecord_ and _environment_.\n      ",
  "InitializeTypedArrayFromArrayLike" : "\n            1. Let _len_ be ? LengthOfArrayLike(_arrayLike_).\n            1. Perform ? AllocateTypedArrayBuffer(_O_, _len_).\n            1. Let _k_ be 0.\n            1. Repeat, while _k_ < _len_,\n              1. Let _Pk_ be ! ToString(ùîΩ(_k_)).\n              1. Let _kValue_ be ? Get(_arrayLike_, _Pk_).\n              1. Perform ? Set(_O_, _Pk_, _kValue_, *true*).\n              1. Set _k_ to _k_ + 1.\n            1. Return ~unused~.\n          ",
  "BreakableStatement[0,0].LabelledEvaluation" : "\n        1. Let _stmtResult_ be Completion(LoopEvaluation of |IterationStatement| with argument _labelSet_).\n        1. If _stmtResult_ is a break completion, then\n          1. If _stmtResult_.[[Target]] is ~empty~, then\n            1. If _stmtResult_.[[Value]] is ~empty~, set _stmtResult_ to NormalCompletion(*undefined*).\n            1. Else, set _stmtResult_ to NormalCompletion(_stmtResult_.[[Value]]).\n        1. Return ? _stmtResult_.\n      ",
  "DecimalBigIntegerLiteral[1,0].NumericValue" : "\n          1. Return the BigInt value for the MV of |NonZeroDigit|.\n        ",
  "StatementListItem[1,0].ContainsDuplicateLabels" : "\n        1. Return *false*.\n      ",
  "INTRINSICS.Array.prototype.toSorted:clo0" : "\n          1. If _comparefn_ is not *undefined* and IsCallable(_comparefn_) is *false*, throw a *TypeError* exception.\n          1. Let _O_ be ? ToObject(*this* value).\n          1. Let _len_ be ? LengthOfArrayLike(_O_).\n          1. Let _A_ be ? ArrayCreate(_len_).\n          1. Let _SortCompare_ be a new Abstract Closure with parameters (_x_, _y_) that captures _comparefn_ and performs the following steps when called:\n            1. Return ? CompareArrayElements(_x_, _y_, _comparefn_).\n          1. Let _sortedList_ be ? SortIndexedProperties(_O_, _len_, _SortCompare_, ~read-through-holes~).\n          1. Let _j_ be 0.\n          1. Repeat, while _j_ < _len_,\n            1. Perform ! CreateDataPropertyOrThrow(_A_, ! ToString(ùîΩ(_j_)), _sortedList_[_j_]).\n            1. Set _j_ to _j_ + 1.\n          1. Return _A_.\n        ",
  "AsyncGeneratorDeclaration[0,0].InstantiateFunctionObject" : "\n        1. Return InstantiateAsyncGeneratorFunctionObject of |AsyncGeneratorDeclaration| with arguments _env_ and _privateEnv_.\n      ",
  "NewGlobalEnvironment" : "\n          1. Let _objRec_ be NewObjectEnvironment(_G_, *false*, *null*).\n          1. Let _dclRec_ be NewDeclarativeEnvironment(*null*).\n          1. Let _env_ be a new Global Environment Record.\n          1. Set _env_.[[ObjectRecord]] to _objRec_.\n          1. Set _env_.[[GlobalThisValue]] to _thisValue_.\n          1. Set _env_.[[DeclarativeRecord]] to _dclRec_.\n          1. Set _env_.[[VarNames]] to a new empty List.\n          1. Set _env_.[[OuterEnv]] to *null*.\n          1. Return _env_.\n        ",
  "INTRINSICS.Date.prototype.getTime" : "\n          1. Let _dateObject_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_dateObject_, [[DateValue]]).\n          1. Return _dateObject_.[[DateValue]].\n        ",
  "AsyncGeneratorExpression[0,0].Evaluation" : "\n        1. Return InstantiateAsyncGeneratorFunctionExpression of |AsyncGeneratorExpression|.\n      ",
  "Module[0,0].ModuleRequests" : "\n          1. Return a new empty List.\n        ",
  "ModuleItemList[1,0].ExportEntries" : "\n          1. Let _entries1_ be ExportEntries of |ModuleItemList|.\n          1. Let _entries2_ be ExportEntries of |ModuleItem|.\n          1. Return the list-concatenation of _entries1_ and _entries2_.\n        ",
  "SerializeJSONObject" : "\n          1. If _state_.[[Stack]] contains _value_, throw a *TypeError* exception because the structure is cyclical.\n          1. Append _value_ to _state_.[[Stack]].\n          1. Let _stepback_ be _state_.[[Indent]].\n          1. Set _state_.[[Indent]] to the string-concatenation of _state_.[[Indent]] and _state_.[[Gap]].\n          1. If _state_.[[PropertyList]] is not *undefined*, then\n            1. Let _K_ be _state_.[[PropertyList]].\n          1. Else,\n            1. Let _K_ be ? EnumerableOwnProperties(_value_, ~key~).\n          1. Let _partial_ be a new empty List.\n          1. For each element _P_ of _K_, do\n            1. Let _strP_ be ? SerializeJSONProperty(_state_, _P_, _value_).\n            1. If _strP_ is not *undefined*, then\n              1. Let _member_ be QuoteJSONString(_P_).\n              1. Set _member_ to the string-concatenation of _member_ and *\":\"*.\n              1. If _state_.[[Gap]] is not the empty String, then\n                1. Set _member_ to the string-concatenation of _member_ and the code unit 0x0020 (SPACE).\n              1. Set _member_ to the string-concatenation of _member_ and _strP_.\n              1. Append _member_ to _partial_.\n          1. If _partial_ is empty, then\n            1. Let _final_ be *\"{}\"*.\n          1. Else,\n            1. If _state_.[[Gap]] is the empty String, then\n              1. Let _properties_ be the String value formed by concatenating all the element Strings of _partial_ with each adjacent pair of Strings separated with the code unit 0x002C (COMMA). A comma is not inserted either before the first String or after the last String.\n              1. Let _final_ be the string-concatenation of *\"{\"*, _properties_, and *\"}\"*.\n            1. Else,\n              1. Let _separator_ be the string-concatenation of the code unit 0x002C (COMMA), the code unit 0x000A (LINE FEED), and _state_.[[Indent]].\n              1. Let _properties_ be the String value formed by concatenating all the element Strings of _partial_ with each adjacent pair of Strings separated with _separator_. The _separator_ String is not inserted either before the first String or after the last String.\n              1. Let _final_ be the string-concatenation of *\"{\"*, the code unit 0x000A (LINE FEED), _state_.[[Indent]], _properties_, the code unit 0x000A (LINE FEED), _stepback_, and *\"}\"*.\n          1. Remove the last element of _state_.[[Stack]].\n          1. Set _state_.[[Indent]] to _stepback_.\n          1. Return _final_.\n        ",
  "MethodDefinition[0,0].PropName" : "\n        1. Return PropName of |ClassElementName|.\n      ",
  "ClassDeclaration[0,0].Evaluation" : "\n        1. Perform ? BindingClassDeclarationEvaluation of this |ClassDeclaration|.\n        1. Return ~empty~.\n      ",
  "NumberBitwiseOp" : "\n            1. Let _lnum_ be ! ToInt32(_x_).\n            1. Let _rnum_ be ! ToInt32(_y_).\n            1. Let _lbits_ be the 32-bit two's complement bit string representing ‚Ñù(_lnum_).\n            1. Let _rbits_ be the 32-bit two's complement bit string representing ‚Ñù(_rnum_).\n            1. If _op_ is `&`, then\n              1. Let _result_ be the result of applying the bitwise AND operation to _lbits_ and _rbits_.\n            1. Else if _op_ is `^`, then\n              1. Let _result_ be the result of applying the bitwise exclusive OR (XOR) operation to _lbits_ and _rbits_.\n            1. Else,\n              1. Assert: _op_ is `|`.\n              1. Let _result_ be the result of applying the bitwise inclusive OR operation to _lbits_ and _rbits_.\n            1. Return the Number value for the integer represented by the 32-bit two's complement bit string _result_.\n          ",
  "__HAS_DUPLICATE__" : null,
  "ForStatement[1,3].ContainsDuplicateLabels" : "\n        1. Return ContainsDuplicateLabels of |Statement| with argument _labelSet_.\n      ",
  "GetRawBytesFromSharedBlock" : "\n          1. Let _elementSize_ be the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"></emu-xref> for Element Type _type_.\n          1. Let _execution_ be the [[CandidateExecution]] field of the surrounding agent's Agent Record.\n          1. Let _eventsRecord_ be the Agent Events Record of _execution_.[[EventsRecords]] whose [[AgentSignifier]] is AgentSignifier().\n          1. If _isTypedArray_ is *true* and IsNoTearConfiguration(_type_, _order_) is *true*, let _noTear_ be *true*; otherwise let _noTear_ be *false*.\n          1. Let _rawValue_ be a List of length _elementSize_ whose elements are nondeterministically chosen byte values.\n          1. NOTE: In implementations, _rawValue_ is the result of a non-atomic or atomic read instruction on the underlying hardware. The nondeterminism is a semantic prescription of the memory model to describe observable behaviour of hardware with weak consistency.\n          1. Let _readEvent_ be ReadSharedMemory { [[Order]]: _order_, [[NoTear]]: _noTear_, [[Block]]: _block_, [[ByteIndex]]: _byteIndex_, [[ElementSize]]: _elementSize_ }.\n          1. Append _readEvent_ to _eventsRecord_.[[EventList]].\n          1. Append Chosen Value Record { [[Event]]: _readEvent_, [[ChosenValue]]: _rawValue_ } to _execution_.[[ChosenValues]].\n          1. Return _rawValue_.\n        ",
  "INTRINSICS.Date.prototype.getUTCHours" : "\n          1. Let _dateObject_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_dateObject_, [[DateValue]]).\n          1. Let _t_ be _dateObject_.[[DateValue]].\n          1. If _t_ is *NaN*, return *NaN*.\n          1. Return HourFromTime(_t_).\n        ",
  "CreateMapIterator:clo0" : "\n          1. Perform ? RequireInternalSlot(_map_, [[MapData]]).\n          1. Let _closure_ be a new Abstract Closure with no parameters that captures _map_ and _kind_ and performs the following steps when called:\n            1. Let _entries_ be _map_.[[MapData]].\n            1. Let _index_ be 0.\n            1. Let _numEntries_ be the number of elements in _entries_.\n            1. Repeat, while _index_ < _numEntries_,\n              1. Let _e_ be _entries_[_index_].\n              1. Set _index_ to _index_ + 1.\n              1. If _e_.[[Key]] is not ~empty~, then\n                1. If _kind_ is ~key~, then\n                  1. Let _result_ be _e_.[[Key]].\n                1. Else if _kind_ is ~value~, then\n                  1. Let _result_ be _e_.[[Value]].\n                1. Else,\n                  1. Assert: _kind_ is ~key+value~.\n                  1. Let _result_ be CreateArrayFromList(¬´ _e_.[[Key]], _e_.[[Value]] ¬ª).\n                1. Perform ? GeneratorYield(CreateIterResultObject(_result_, *false*)).\n                1. NOTE: The number of elements in _entries_ may have increased while execution of this abstract operation was paused by Yield.\n                1. Set _numEntries_ to the number of elements in _entries_.\n            1. Return NormalCompletion(*undefined*).\n          1. Return CreateIteratorFromClosure(_closure_, *\"%MapIteratorPrototype%\"*, %MapIteratorPrototype%).\n        ",
  "FunctionDeclaration[1,0].Evaluation" : "\n        1. Return ~empty~.\n      ",
  "SingleNameBinding[0,1].HasInitializer" : "\n        1. Return *true*.\n      ",
  "INTRINSICS.Math.hypot" : "\n          1. Let _coerced_ be a new empty List.\n          1. For each element _arg_ of _args_, do\n            1. Let _n_ be ? ToNumber(_arg_).\n            1. Append _n_ to _coerced_.\n          1. For each element _number_ of _coerced_, do\n            1. If _number_ is either *+‚àû*<sub>ùîΩ</sub> or *-‚àû*<sub>ùîΩ</sub>, return *+‚àû*<sub>ùîΩ</sub>.\n          1. Let _onlyZero_ be *true*.\n          1. For each element _number_ of _coerced_, do\n            1. If _number_ is *NaN*, return *NaN*.\n            1. If _number_ is neither *+0*<sub>ùîΩ</sub> nor *-0*<sub>ùîΩ</sub>, set _onlyZero_ to *false*.\n          1. If _onlyZero_ is *true*, return *+0*<sub>ùîΩ</sub>.\n          1. Return an implementation-approximated Number value representing the square root of the sum of squares of the mathematical values of the elements of _coerced_.\n        ",
  "PrimaryExpression[1,0].IsIdentifierRef" : "\n        1. Return *true*.\n      ",
  "UnicodeMatchPropertyValue" : "\n            1. Assert: _p_ is a canonical, unaliased Unicode property name listed in the ‚ÄúCanonical property name‚Äù column of <emu-xref href=\"#table-nonbinary-unicode-properties\"></emu-xref>.\n            1. Assert: _v_ is a property value or property value alias for the Unicode property _p_ listed in <a href=\"https://unicode.org/Public/UCD/latest/ucd/PropertyValueAliases.txt\"><code>PropertyValueAliases.txt</code></a>.\n            1. Let _value_ be the canonical property value of _v_ as given in the ‚ÄúCanonical property value‚Äù column of the corresponding row.\n            1. Return the List of Unicode code points _value_.\n          ",
  "DecimalBigIntegerLiteral[0,0].NumericValue" : "\n          1. Return *0*<sub>‚Ñ§</sub>.\n        ",
  "INTRINSICS.Math.trunc" : "\n          1. Let _n_ be ? ToNumber(_x_).\n          1. If _n_ is not finite or _n_ is either *+0*<sub>ùîΩ</sub> or *-0*<sub>ùîΩ</sub>, return _n_.\n          1. If _n_ < *1*<sub>ùîΩ</sub> and _n_ > *+0*<sub>ùîΩ</sub>, return *+0*<sub>ùîΩ</sub>.\n          1. If _n_ < *-0*<sub>ùîΩ</sub> and _n_ > *-1*<sub>ùîΩ</sub>, return *-0*<sub>ùîΩ</sub>.\n          1. Return the integral Number nearest _n_ in the direction of *+0*<sub>ùîΩ</sub>.\n        ",
  "ArrayBindingPattern[0,1].BoundNames" : "\n        1. Return the BoundNames of |BindingRestElement|.\n      ",
  "LabelledItem[1,0].VarDeclaredNames" : "\n        1. Return a new empty List.\n      ",
  "ShiftExpression[3,0].Evaluation" : "\n          1. Return ? EvaluateStringOrNumericBinaryExpression(|ShiftExpression|, `>>>`, |AdditiveExpression|).\n        ",
  "ClassExpression[0,0].IsFunctionDefinition" : "\n        1. Return *true*.\n      ",
  "INTRINSICS.String.prototype.trimStart" : "\n          1. Let _S_ be the *this* value.\n          1. Return ? TrimString(_S_, ~start~).\n        ",
  "BigInt::toString" : "\n            1. If _x_ < *0*<sub>‚Ñ§</sub>, return the string-concatenation of *\"-\"* and BigInt::toString(-_x_, _radix_).\n            1. Return the String value consisting of the representation of _x_ using radix _radix_.\n          ",
  "ParenthesizedExpression[0,0].NamedEvaluation" : "\n        1. Assert: IsAnonymousFunctionDefinition(|Expression|) is *true*.\n        1. Return ? NamedEvaluation of |Expression| with argument _name_.\n      ",
  "ForInOfStatement[5,0].ForInOfLoopEvaluation" : "\n          1. Let _keyResult_ be ? ForIn/OfHeadEvaluation(BoundNames of |ForDeclaration|, |AssignmentExpression|, ~iterate~).\n          1. Return ? ForIn/OfBodyEvaluation(|ForDeclaration|, |Statement|, _keyResult_, ~iterate~, ~lexical-binding~, _labelSet_).\n        ",
  "AsyncFunctionDeclaration[0,0].InstantiateAsyncFunctionObject" : "\n        1. Let _name_ be StringValue of |BindingIdentifier|.\n        1. Let _sourceText_ be the source text matched by |AsyncFunctionDeclaration|.\n        1. Let _F_ be OrdinaryFunctionCreate(%AsyncFunction.prototype%, _sourceText_, |FormalParameters|, |AsyncFunctionBody|, ~non-lexical-this~, _env_, _privateEnv_).\n        1. Perform SetFunctionName(_F_, _name_).\n        1. Return _F_.\n      ",
  "Decode" : "\n          1. Let _len_ be the length of _string_.\n          1. Let _R_ be the empty String.\n          1. Let _k_ be 0.\n          1. Repeat, while _k_ < _len_,\n            1. Let _C_ be the code unit at index _k_ within _string_.\n            1. Let _S_ be _C_.\n            1. If _C_ is the code unit 0x0025 (PERCENT SIGN), then\n              1. If _k_ + 3 > _len_, throw a *URIError* exception.\n              1. Let _escape_ be the substring of _string_ from _k_ to _k_ + 3.\n              1. Let _B_ be ParseHexOctet(_string_, _k_ + 1).\n              1. If _B_ is not an integer, throw a *URIError* exception.\n              1. Set _k_ to _k_ + 2.\n              1. Let _n_ be the number of leading 1 bits in _B_.\n              1. If _n_ = 0, then\n                1. Let _asciiChar_ be the code unit whose numeric value is _B_.\n                1. If _preserveEscapeSet_ contains _asciiChar_, set _S_ to _escape_. Otherwise, set _S_ to _asciiChar_.\n              1. Else,\n                1. If _n_ = 1 or _n_ > 4, throw a *URIError* exception.\n                1. Let _Octets_ be ¬´ _B_ ¬ª.\n                1. Let _j_ be 1.\n                1. Repeat, while _j_ < _n_,\n                  1. Set _k_ to _k_ + 1.\n                  1. If _k_ + 3 > _len_, throw a *URIError* exception.\n                  1. If the code unit at index _k_ within _string_ is not the code unit 0x0025 (PERCENT SIGN), throw a *URIError* exception.\n                  1. Let _continuationByte_ be ParseHexOctet(_string_, _k_ + 1).\n                  1. If _continuationByte_ is not an integer, throw a *URIError* exception.\n                  1. Append _continuationByte_ to _Octets_.\n                  1. Set _k_ to _k_ + 2.\n                  1. Set _j_ to _j_ + 1.\n                1. Assert: The length of _Octets_ is _n_.\n                1. If _Octets_ does not contain a valid UTF-8 encoding of a Unicode code point, throw a *URIError* exception.\n                1. Let _V_ be the code point obtained by applying the UTF-8 transformation to _Octets_, that is, from a List of octets into a 21-bit value.\n                1. Set _S_ to UTF16EncodeCodePoint(_V_).\n            1. Set _R_ to the string-concatenation of _R_ and _S_.\n            1. Set _k_ to _k_ + 1.\n          1. Return _R_.\n        ",
  "GeneratorExpression[0,0].IsFunctionDefinition" : "\n        1. Return *true*.\n      ",
  "ForInOfStatement[2,0].VarDeclaredNames" : "\n        1. Return the VarDeclaredNames of |Statement|.\n      ",
  "UnaryExpression[2,0].IsFunctionDefinition" : "\n        1. Return *false*.\n      ",
  "INTRINSICS.get Map[@@species]" : "\n          1. Return the *this* value.\n        ",
  "ClassStringDisjunctionContents[0,0].CompileToCharSet" : "\n          1. Let _s_ be CompileClassSetString of |ClassString| with argument _rer_.\n          1. Return the CharSet containing the one string _s_.\n        ",
  "ArrayAssignmentPattern[2,1].DestructuringAssignmentEvaluation" : "\n          1. Let _iteratorRecord_ be ? GetIterator(_value_, ~sync~).\n          1. Let _status_ be Completion(IteratorDestructuringAssignmentEvaluation of |AssignmentElementList| with argument _iteratorRecord_).\n          1. If _status_ is an abrupt completion, then\n            1. If _iteratorRecord_.[[Done]] is *false*, return ? IteratorClose(_iteratorRecord_, _status_).\n            1. Return ? _status_.\n          1. If |Elision| is present, then\n            1. Set _status_ to Completion(IteratorDestructuringAssignmentEvaluation of |Elision| with argument _iteratorRecord_).\n            1. If _status_ is an abrupt completion, then\n              1. Assert: _iteratorRecord_.[[Done]] is *true*.\n              1. Return ? _status_.\n          1. If |AssignmentRestElement| is present, then\n            1. Set _status_ to Completion(IteratorDestructuringAssignmentEvaluation of |AssignmentRestElement| with argument _iteratorRecord_).\n          1. If _iteratorRecord_.[[Done]] is *false*, return ? IteratorClose(_iteratorRecord_, _status_).\n          1. Return ? _status_.\n        ",
  "FunctionStatementList[0,0].LexicallyScopedDeclarations" : "\n        1. Return a new empty List.\n      ",
  "Record[BoundFunctionExoticObject].Call" : "\n          1. Let _target_ be _F_.[[BoundTargetFunction]].\n          1. Let _boundThis_ be _F_.[[BoundThis]].\n          1. Let _boundArgs_ be _F_.[[BoundArguments]].\n          1. Let _args_ be the list-concatenation of _boundArgs_ and _argumentsList_.\n          1. Return ? Call(_target_, _boundThis_, _args_).\n        ",
  "ModuleItemList[1,0].ExportedBindings" : "\n          1. Let _names1_ be ExportedBindings of |ModuleItemList|.\n          1. Let _names2_ be ExportedBindings of |ModuleItem|.\n          1. Return the list-concatenation of _names1_ and _names2_.\n        ",
  "AssignmentExpression[8,0].IsFunctionDefinition" : "\n        1. Return *false*.\n      ",
  "INTRINSICS.Map.prototype.clear" : "\n          1. Let _M_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_M_, [[MapData]]).\n          1. For each Record { [[Key]], [[Value]] } _p_ of _M_.[[MapData]], do\n            1. Set _p_.[[Key]] to ~empty~.\n            1. Set _p_.[[Value]] to ~empty~.\n          1. Return *undefined*.\n        ",
  "PerformEval" : "\n          1. Assert: If _direct_ is *false*, then _strictCaller_ is also *false*.\n          1. If _x_ is not a String, return _x_.\n          1. Let _evalRealm_ be the current Realm Record.\n          1. NOTE: In the case of a direct eval, _evalRealm_ is the realm of both the caller of `eval` and of the `eval` function itself.\n          1. Perform ? HostEnsureCanCompileStrings(_evalRealm_, ¬´ ¬ª, _x_, _direct_).\n          1. Let _inFunction_ be *false*.\n          1. Let _inMethod_ be *false*.\n          1. Let _inDerivedConstructor_ be *false*.\n          1. Let _inClassFieldInitializer_ be *false*.\n          1. If _direct_ is *true*, then\n            1. Let _thisEnvRec_ be GetThisEnvironment().\n            1. If _thisEnvRec_ is a Function Environment Record, then\n              1. Let _F_ be _thisEnvRec_.[[FunctionObject]].\n              1. Set _inFunction_ to *true*.\n              1. Set _inMethod_ to _thisEnvRec_.HasSuperBinding().\n              1. If IsConstructor(_F_) is *true* and _F_.[[ConstructorKind]] is ~derived~, set _inDerivedConstructor_ to *true*.\n              1. Let _classFieldInitializerName_ be _F_.[[ClassFieldInitializerName]].\n              1. If _classFieldInitializerName_ is not ~empty~, set _inClassFieldInitializer_ to *true*.\n          1. Perform the following substeps in an implementation-defined order, possibly interleaving parsing and error detection:\n            1. Let _script_ be ParseText(StringToCodePoints(_x_), |Script|).\n            1. If _script_ is a List of errors, throw a *SyntaxError* exception.\n            1. If _script_ Contains |ScriptBody| is *false*, return *undefined*.\n            1. Let _body_ be the |ScriptBody| of _script_.\n            1. If _inFunction_ is *false* and _body_ Contains |NewTarget|, throw a *SyntaxError* exception.\n            1. If _inMethod_ is *false* and _body_ Contains |SuperProperty|, throw a *SyntaxError* exception.\n            1. If _inDerivedConstructor_ is *false* and _body_ Contains |SuperCall|, throw a *SyntaxError* exception.\n            1. If _inClassFieldInitializer_ is *true* and ContainsArguments of _body_ is *true*, throw a *SyntaxError* exception.\n          1. If _strictCaller_ is *true*, let _strictEval_ be *true*.\n          1. Else, let _strictEval_ be IsStrict of _script_.\n          1. Let _runningContext_ be the running execution context.\n          1. NOTE: If _direct_ is *true*, _runningContext_ will be the execution context that performed the direct eval. If _direct_ is *false*, _runningContext_ will be the execution context for the invocation of the `eval` function.\n          1. If _direct_ is *true*, then\n            1. Let _lexEnv_ be NewDeclarativeEnvironment(_runningContext_'s LexicalEnvironment).\n            1. Let _varEnv_ be _runningContext_'s VariableEnvironment.\n            1. Let _privateEnv_ be _runningContext_'s PrivateEnvironment.\n          1. Else,\n            1. Let _lexEnv_ be NewDeclarativeEnvironment(_evalRealm_.[[GlobalEnv]]).\n            1. Let _varEnv_ be _evalRealm_.[[GlobalEnv]].\n            1. Let _privateEnv_ be *null*.\n          1. If _strictEval_ is *true*, set _varEnv_ to _lexEnv_.\n          1. If _runningContext_ is not already suspended, suspend _runningContext_.\n          1. Let _evalContext_ be a new ECMAScript code execution context.\n          1. Set _evalContext_'s Function to *null*.\n          1. Set _evalContext_'s Realm to _evalRealm_.\n          1. Set _evalContext_'s ScriptOrModule to _runningContext_'s ScriptOrModule.\n          1. Set _evalContext_'s VariableEnvironment to _varEnv_.\n          1. Set _evalContext_'s LexicalEnvironment to _lexEnv_.\n          1. Set _evalContext_'s PrivateEnvironment to _privateEnv_.\n          1. Push _evalContext_ onto the execution context stack; _evalContext_ is now the running execution context.\n          1. Let _result_ be Completion(EvalDeclarationInstantiation(_body_, _varEnv_, _lexEnv_, _privateEnv_, _strictEval_)).\n          1. If _result_ is a normal completion, then\n            1. Set _result_ to Completion(Evaluation of _body_).\n          1. If _result_ is a normal completion and _result_.[[Value]] is ~empty~, then\n            1. Set _result_ to NormalCompletion(*undefined*).\n          1. Suspend _evalContext_ and remove it from the execution context stack.\n          1. Resume the context that is now on the top of the execution context stack as the running execution context.\n          1. Return ? _result_.\n        ",
  "PrepareForTailCall" : "\n        1. Assert: The current execution context will not subsequently be used for the evaluation of any ECMAScript code or built-in functions. The invocation of Call subsequent to the invocation of this abstract operation will create and push a new execution context before performing any such evaluation.\n        1. Discard all resources associated with the current execution context.\n        1. Return ~unused~.\n      ",
  "INTRINSICS.String.fromCodePoint" : "\n          1. Let _result_ be the empty String.\n          1. For each element _next_ of _codePoints_, do\n            1. Let _nextCP_ be ? ToNumber(_next_).\n            1. If IsIntegralNumber(_nextCP_) is *false*, throw a *RangeError* exception.\n            1. If ‚Ñù(_nextCP_) < 0 or ‚Ñù(_nextCP_) > 0x10FFFF, throw a *RangeError* exception.\n            1. Set _result_ to the string-concatenation of _result_ and UTF16EncodeCodePoint(‚Ñù(_nextCP_)).\n          1. Assert: If _codePoints_ is empty, then _result_ is the empty String.\n          1. Return _result_.\n        ",
  "DecimalBigIntegerLiteral[1,1].NumericValue" : "\n          1. Let _n_ be the number of code points in |DecimalDigits|, excluding all occurrences of |NumericLiteralSeparator|.\n          1. Let _mv_ be (the MV of |NonZeroDigit| √ó 10<sup>_n_</sup>) plus the MV of |DecimalDigits|.\n          1. Return ‚Ñ§(_mv_).\n        ",
  "DeletePropertyOrThrow" : "\n        1. Let _success_ be ? <emu-meta effects=\"user-code\">_O_.[[Delete]]</emu-meta>(_P_).\n        1. If _success_ is *false*, throw a *TypeError* exception.\n        1. Return ~unused~.\n      ",
  "SubstitutionTemplate[0,0].Evaluation" : "\n          1. Let _head_ be the TV of |TemplateHead| as defined in <emu-xref href=\"#sec-template-literal-lexical-components\"></emu-xref>.\n          1. Let _subRef_ be ? Evaluation of |Expression|.\n          1. Let _sub_ be ? GetValue(_subRef_).\n          1. Let _middle_ be ? ToString(_sub_).\n          1. Let _tail_ be ? Evaluation of |TemplateSpans|.\n          1. Return the string-concatenation of _head_, _middle_, and _tail_.\n        ",
  "CaseClause[0,1].LexicallyDeclaredNames" : "\n        1. If the |StatementList| is present, return the LexicallyDeclaredNames of |StatementList|.\n        1. Return a new empty List.\n      ",
  "CaseClause[0,0].ContainsUndefinedBreakTarget" : "\n        1. If the |StatementList| is present, return ContainsUndefinedBreakTarget of |StatementList| with argument _labelSet_.\n        1. Return *false*.\n      ",
  "ForStatement[1,1].ContainsDuplicateLabels" : "\n        1. Return ContainsDuplicateLabels of |Statement| with argument _labelSet_.\n      ",
  "LiteralPropertyName[2,0].PropName" : "\n        1. Let _nbr_ be the NumericValue of |NumericLiteral|.\n        1. Return ! ToString(_nbr_).\n      ",
  "ExportDeclaration[5,0].ExportEntries" : "\n          1. Let _names_ be BoundNames of |ClassDeclaration|.\n          1. Let _localName_ be the sole element of _names_.\n          1. Return a List whose sole element is a new ExportEntry Record { [[ModuleRequest]]: *null*, [[ImportName]]: *null*, [[LocalName]]: _localName_, [[ExportName]]: *\"default\"* }.\n        ",
  "INTRINSICS.Object.preventExtensions" : "\n          1. If _O_ is not an Object, return _O_.\n          1. Let _status_ be ? <emu-meta effects=\"user-code\">_O_.[[PreventExtensions]]()</emu-meta>.\n          1. If _status_ is *false*, throw a *TypeError* exception.\n          1. Return _O_.\n        ",
  "StatementListItem[1,0].TopLevelVarDeclaredNames" : "\n        1. If |Declaration| is <emu-grammar>Declaration : HoistableDeclaration</emu-grammar>, then\n          1. Return the BoundNames of |HoistableDeclaration|.\n        1. Return a new empty List.\n      ",
  "ShiftExpression[2,0].AssignmentTargetType" : "\n        1. Return ~invalid~.\n      ",
  "IsConcatSpreadable" : "\n            1. If _O_ is not an Object, return *false*.\n            1. Let _spreadable_ be ? Get(_O_, @@isConcatSpreadable).\n            1. If _spreadable_ is not *undefined*, return ToBoolean(_spreadable_).\n            1. Return ? IsArray(_O_).\n          ",
  "Record[DeclarativeEnvironmentRecord].CreateMutableBinding" : "\n            1. Assert: _envRec_ does not already have a binding for _N_.\n            1. Create a mutable binding in _envRec_ for _N_ and record that it is uninitialized. If _D_ is *true*, record that the newly created binding may be deleted by a subsequent DeleteBinding call.\n            1. Return ~unused~.\n          ",
  "ClassElement[2,0].ClassElementKind" : "\n        1. Return ~non-constructor-method~.\n      ",
  "Record[ProxyExoticObject].Delete" : "\n        1. Perform ? ValidateNonRevokedProxy(_O_).\n        1. Let _target_ be _O_.[[ProxyTarget]].\n        1. Let _handler_ be _O_.[[ProxyHandler]].\n        1. Assert: _handler_ is an Object.\n        1. Let _trap_ be ? GetMethod(_handler_, *\"deleteProperty\"*).\n        1. If _trap_ is *undefined*, then\n          1. Return ? <emu-meta effects=\"user-code\">_target_.[[Delete]]</emu-meta>(_P_).\n        1. Let _booleanTrapResult_ be ToBoolean(? Call(_trap_, _handler_, ¬´ _target_, _P_ ¬ª)).\n        1. If _booleanTrapResult_ is *false*, return *false*.\n        1. Let _targetDesc_ be ? <emu-meta effects=\"user-code\">_target_.[[GetOwnProperty]]</emu-meta>(_P_).\n        1. If _targetDesc_ is *undefined*, return *true*.\n        1. If _targetDesc_.[[Configurable]] is *false*, throw a *TypeError* exception.\n        1. Let _extensibleTarget_ be ? IsExtensible(_target_).\n        1. If _extensibleTarget_ is *false*, throw a *TypeError* exception.\n        1. Return *true*.\n      ",
  "INTRINSICS.TypedArray.prototype.map" : "\n          1. Let _O_ be the *this* value.\n          1. Let _taRecord_ be ? ValidateTypedArray(_O_, ~seq-cst~).\n          1. Let _len_ be TypedArrayLength(_taRecord_).\n          1. If IsCallable(_callbackfn_) is *false*, throw a *TypeError* exception.\n          1. Let _A_ be ? TypedArraySpeciesCreate(_O_, ¬´ ùîΩ(_len_) ¬ª).\n          1. Let _k_ be 0.\n          1. Repeat, while _k_ < _len_,\n            1. Let _Pk_ be ! ToString(ùîΩ(_k_)).\n            1. Let _kValue_ be ! Get(_O_, _Pk_).\n            1. Let _mappedValue_ be ? Call(_callbackfn_, _thisArg_, ¬´ _kValue_, ùîΩ(_k_), _O_ ¬ª).\n            1. Perform ? Set(_A_, _Pk_, _mappedValue_, *true*).\n            1. Set _k_ to _k_ + 1.\n          1. Return _A_.\n        ",
  "INTRINSICS.Math.expm1" : "\n          1. Let _n_ be ? ToNumber(_x_).\n          1. If _n_ is one of *NaN*, *+0*<sub>ùîΩ</sub>, *-0*<sub>ùîΩ</sub>, or *+‚àû*<sub>ùîΩ</sub>, return _n_.\n          1. If _n_ is *-‚àû*<sub>ùîΩ</sub>, return *-1*<sub>ùîΩ</sub>.\n          1. Return an implementation-approximated Number value representing the result of subtracting 1 from the exponential function of ‚Ñù(_n_).\n        ",
  "ArrayBindingPattern[2,2].ContainsExpression" : "\n        1. Return ContainsExpression of |BindingElementList|.\n      ",
  "ClassElementList[1,0].NonConstructorElements" : "\n        1. Let _list_ be NonConstructorElements of |ClassElementList|.\n        1. If ClassElementKind of |ClassElement| is ~non-constructor-method~, then\n          1. Append |ClassElement| to the end of _list_.\n        1. Return _list_.\n      ",
  "INTRINSICS.Object.getOwnPropertySymbols" : "\n          1. Return CreateArrayFromList(? GetOwnPropertyKeys(_O_, ~symbol~)).\n        ",
  "ScriptBody[0,0].LexicallyDeclaredNames" : "\n        1. Return TopLevelLexicallyDeclaredNames of |StatementList|.\n      ",
  "AsyncGeneratorExpression[0,0].InstantiateAsyncGeneratorFunctionExpression" : "\n        1. If _name_ is not present, set _name_ to *\"\"*.\n        1. Let _env_ be the LexicalEnvironment of the running execution context.\n        1. Let _privateEnv_ be the running execution context's PrivateEnvironment.\n        1. Let _sourceText_ be the source text matched by |AsyncGeneratorExpression|.\n        1. Let _closure_ be OrdinaryFunctionCreate(%AsyncGeneratorFunction.prototype%, _sourceText_, |FormalParameters|, |AsyncGeneratorBody|, ~non-lexical-this~, _env_, _privateEnv_).\n        1. Perform SetFunctionName(_closure_, _name_).\n        1. Let _prototype_ be OrdinaryObjectCreate(%AsyncGeneratorFunction.prototype.prototype%).\n        1. Perform ! DefinePropertyOrThrow(_closure_, *\"prototype\"*, PropertyDescriptor { [[Value]]: _prototype_, [[Writable]]: *true*, [[Enumerable]]: *false*, [[Configurable]]: *false* }).\n        1. Return _closure_.\n      ",
  "EqualityExpression[2,0].Evaluation" : "\n        1. Let _lref_ be ? Evaluation of |EqualityExpression|.\n        1. Let _lval_ be ? GetValue(_lref_).\n        1. Let _rref_ be ? Evaluation of |RelationalExpression|.\n        1. Let _rval_ be ? GetValue(_rref_).\n        1. Let _r_ be ? IsLooselyEqual(_rval_, _lval_).\n        1. If _r_ is *true*, return *false*. Otherwise, return *true*.\n      ",
  "Record[ModuleNamespaceExoticObject].OwnPropertyKeys" : "\n          1. Let _exports_ be _O_.[[Exports]].\n          1. Let _symbolKeys_ be OrdinaryOwnPropertyKeys(_O_).\n          1. Return the list-concatenation of _exports_ and _symbolKeys_.\n        ",
  "SingleNameBinding[0,0].KeyedBindingInitialization" : "\n          1. Let _bindingId_ be StringValue of |BindingIdentifier|.\n          1. Let _lhs_ be ? ResolveBinding(_bindingId_, _environment_).\n          1. Let _v_ be ? GetV(_value_, _propertyName_).\n          1. If |Initializer| is present and _v_ is *undefined*, then\n            1. If IsAnonymousFunctionDefinition(|Initializer|) is *true*, then\n              1. Set _v_ to ? NamedEvaluation of |Initializer| with argument _bindingId_.\n            1. Else,\n              1. Let _defaultValue_ be ? Evaluation of |Initializer|.\n              1. Set _v_ to ? GetValue(_defaultValue_).\n          1. If _environment_ is *undefined*, return ? PutValue(_lhs_, _v_).\n          1. Return ? InitializeReferencedBinding(_lhs_, _v_).\n        ",
  "BuiltinCallOrConstruct" : "\n        1. Let _callerContext_ be the running execution context.\n        1. If _callerContext_ is not already suspended, suspend _callerContext_.\n        1. Let _calleeContext_ be a new execution context.\n        1. Set the Function of _calleeContext_ to _F_.\n        1. Let _calleeRealm_ be _F_.[[Realm]].\n        1. Set the Realm of _calleeContext_ to _calleeRealm_.\n        1. Set the ScriptOrModule of _calleeContext_ to *null*.\n        1. Perform any necessary implementation-defined initialization of _calleeContext_.\n        1. Push _calleeContext_ onto the execution context stack; _calleeContext_ is now the running execution context.\n        1. [id=\"step-call-builtin-function-result\"] Let _result_ be the Completion Record that is <emu-meta effects=\"user-code\">the result of evaluating</emu-meta> _F_ in a manner that conforms to the specification of _F_. If _thisArgument_ is ~uninitialized~, the *this* value is uninitialized; otherwise, _thisArgument_ provides the *this* value. _argumentsList_ provides the named parameters. _newTarget_ provides the NewTarget value.\n        1. NOTE: If _F_ is defined in this document, ‚Äúthe specification of _F_‚Äù is the behaviour specified for it via algorithm steps or other means.\n        1. Remove _calleeContext_ from the execution context stack and restore _callerContext_ as the running execution context.\n        1. Return ? _result_.\n      ",
  "ClassUnion[0,0].MayContainStrings" : "\n          1. If the |ClassUnion| is present, return MayContainStrings of the |ClassUnion|.\n          1. Return *false*.\n        ",
  "Script[0,0].LexicallyScopedDeclarations" : "\n        1. Return a new empty List.\n      ",
  "SwitchStatement[0,0].VarDeclaredNames" : "\n        1. Return the VarDeclaredNames of |CaseBlock|.\n      ",
  "INTRINSICS.Set.prototype.clear" : "\n          1. Let _S_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_S_, [[SetData]]).\n          1. For each element _e_ of _S_.[[SetData]], do\n            1. Replace the element of _S_.[[SetData]] whose value is _e_ with an element whose value is ~empty~.\n          1. Return *undefined*.\n        ",
  "Record[FunctionEnvironmentRecord].HasSuperBinding" : "\n            1. If _envRec_.[[ThisBindingStatus]] is ~lexical~, return *false*.\n            1. If _envRec_.[[FunctionObject]].[[HomeObject]] is *undefined*, return *false*; otherwise, return *true*.\n          ",
  "FieldDefinition[0,1].PrivateBoundIdentifiers" : "\n        1. Return PrivateBoundIdentifiers of |ClassElementName|.\n      ",
  "IdentifierReference[2,0].AssignmentTargetType" : "\n        1. Return ~simple~.\n      ",
  "PrimaryExpression[9,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "AsyncGeneratorDeclaration[1,0].InstantiateFunctionObject" : "\n        1. Return InstantiateAsyncGeneratorFunctionObject of |AsyncGeneratorDeclaration| with arguments _env_ and _privateEnv_.\n      ",
  "ExportSpecifier[1,0].ExportedBindings" : "\n          1. Return a List whose sole element is the StringValue of the first |ModuleExportName|.\n        ",
  "RelationalExpression[7,0].AllPrivateIdentifiersValid" : "\n        1. If _names_ contains the StringValue of |PrivateIdentifier|, then\n          1. Return AllPrivateIdentifiersValid of |ShiftExpression| with argument _names_.\n        1. Return *false*.\n      ",
  "MakeConstructor" : "\n        1. If _F_ is an ECMAScript function object, then\n          1. Assert: IsConstructor(_F_) is *false*.\n          1. Assert: _F_ is an extensible object that does not have a *\"prototype\"* own property.\n          1. Set _F_.[[Construct]] to the definition specified in <emu-xref href=\"#sec-ecmascript-function-objects-construct-argumentslist-newtarget\"></emu-xref>.\n        1. Else,\n          1. Set _F_.[[Construct]] to the definition specified in <emu-xref href=\"#sec-built-in-function-objects-construct-argumentslist-newtarget\"></emu-xref>.\n        1. Set _F_.[[ConstructorKind]] to ~base~.\n        1. If _writablePrototype_ is not present, set _writablePrototype_ to *true*.\n        1. If _prototype_ is not present, then\n          1. Set _prototype_ to OrdinaryObjectCreate(%Object.prototype%).\n          1. Perform ! DefinePropertyOrThrow(_prototype_, *\"constructor\"*, PropertyDescriptor { [[Value]]: _F_, [[Writable]]: _writablePrototype_, [[Enumerable]]: *false*, [[Configurable]]: *true* }).\n        1. Perform ! DefinePropertyOrThrow(_F_, *\"prototype\"*, PropertyDescriptor { [[Value]]: _prototype_, [[Writable]]: _writablePrototype_, [[Enumerable]]: *false*, [[Configurable]]: *false* }).\n        1. Return ~unused~.\n      ",
  "CaseBlock[1,0].ContainsDuplicateLabels" : "\n        1. If the first |CaseClauses| is present, then\n          1. If ContainsDuplicateLabels of the first |CaseClauses| with argument _labelSet_ is *true*, return *true*.\n        1. If ContainsDuplicateLabels of |DefaultClause| with argument _labelSet_ is *true*, return *true*.\n        1. If the second |CaseClauses| is not present, return *false*.\n        1. Return ContainsDuplicateLabels of the second |CaseClauses| with argument _labelSet_.\n      ",
  "BindingIdentifier[2,0].BindingInitialization" : "\n        1. Return ? InitializeBoundName(*\"await\"*, _value_, _environment_).\n      ",
  "ArrowFunction[0,0].Contains" : "\n        1. If _symbol_ is not one of |NewTarget|, |SuperProperty|, |SuperCall|, `super`, or `this`, return *false*.\n        1. If |ArrowParameters| Contains _symbol_ is *true*, return *true*.\n        1. Return |ConciseBody| Contains _symbol_.\n      ",
  "ModuleItemList[1,0].VarDeclaredNames" : "\n        1. Let _names1_ be VarDeclaredNames of |ModuleItemList|.\n        1. Let _names2_ be VarDeclaredNames of |ModuleItem|.\n        1. Return the list-concatenation of _names1_ and _names2_.\n      ",
  "Number::add" : "\n            1. If _x_ is *NaN* or _y_ is *NaN*, return *NaN*.\n            1. If _x_ is *+‚àû*<sub>ùîΩ</sub> and _y_ is *-‚àû*<sub>ùîΩ</sub>, return *NaN*.\n            1. If _x_ is *-‚àû*<sub>ùîΩ</sub> and _y_ is *+‚àû*<sub>ùîΩ</sub>, return *NaN*.\n            1. If _x_ is either *+‚àû*<sub>ùîΩ</sub> or *-‚àû*<sub>ùîΩ</sub>, return _x_.\n            1. If _y_ is either *+‚àû*<sub>ùîΩ</sub> or *-‚àû*<sub>ùîΩ</sub>, return _y_.\n            1. Assert: _x_ and _y_ are both finite.\n            1. If _x_ is *-0*<sub>ùîΩ</sub> and _y_ is *-0*<sub>ùîΩ</sub>, return *-0*<sub>ùîΩ</sub>.\n            1. Return ùîΩ(‚Ñù(_x_) + ‚Ñù(_y_)).\n          ",
  "MinFromTime" : "\n          1. Return ùîΩ(floor(‚Ñù(_t_ / msPerMinute)) modulo MinutesPerHour).\n        ",
  "ForDeclaration[0,0].BoundNames" : "\n        1. Return the BoundNames of |ForBinding|.\n      ",
  "FormalParameters[1,0].IsSimpleParameterList" : "\n        1. Return *false*.\n      ",
  "INTRINSICS.Reflect.ownKeys" : "\n        1. If _target_ is not an Object, throw a *TypeError* exception.\n        1. Let _keys_ be ? <emu-meta effects=\"user-code\">_target_.[[OwnPropertyKeys]]()</emu-meta>.\n        1. Return CreateArrayFromList(_keys_).\n      ",
  "SetImmutablePrototype" : "\n          1. Let _current_ be ? <emu-meta effects=\"user-code\">_O_.[[GetPrototypeOf]]</emu-meta>().\n          1. If SameValue(_V_, _current_) is *true*, return *true*.\n          1. Return *false*.\n        ",
  "ReturnStatement[0,0].Evaluation" : "\n        1. Return Completion Record { [[Type]]: ~return~, [[Value]]: *undefined*, [[Target]]: ~empty~ }.\n      ",
  "PrimaryExpression[12,0].NamedEvaluation" : "\n        1. Let _expr_ be the |ParenthesizedExpression| that is covered by |CoverParenthesizedExpressionAndArrowParameterList|.\n        1. Return ? NamedEvaluation of _expr_ with argument _name_.\n      ",
  "WithStatement[0,0].HasCallInTailPosition" : "\n        1. Return HasCallInTailPosition of |Statement| with argument _call_.\n      ",
  "BindingElement[1,1].IsSimpleParameterList" : "\n        1. Return *false*.\n      ",
  "SetTypedArrayFromTypedArray" : "\n            1. Let _targetBuffer_ be _target_.[[ViewedArrayBuffer]].\n            1. Let _targetRecord_ be MakeTypedArrayWithBufferWitnessRecord(_target_, ~seq-cst~).\n            1. If IsTypedArrayOutOfBounds(_targetRecord_) is *true*, throw a *TypeError* exception.\n            1. Let _targetLength_ be TypedArrayLength(_targetRecord_).\n            1. Let _srcBuffer_ be _source_.[[ViewedArrayBuffer]].\n            1. Let _srcRecord_ be MakeTypedArrayWithBufferWitnessRecord(_source_, ~seq-cst~).\n            1. If IsTypedArrayOutOfBounds(_srcRecord_) is *true*, throw a *TypeError* exception.\n            1. Let _srcLength_ be TypedArrayLength(_srcRecord_).\n            1. Let _targetType_ be TypedArrayElementType(_target_).\n            1. Let _targetElementSize_ be TypedArrayElementSize(_target_).\n            1. Let _targetByteOffset_ be _target_.[[ByteOffset]].\n            1. Let _srcType_ be TypedArrayElementType(_source_).\n            1. Let _srcElementSize_ be TypedArrayElementSize(_source_).\n            1. Let _srcByteOffset_ be _source_.[[ByteOffset]].\n            1. If _targetOffset_ = +‚àû, throw a *RangeError* exception.\n            1. If _srcLength_ + _targetOffset_ > _targetLength_, throw a *RangeError* exception.\n            1. If _target_.[[ContentType]] is not _source_.[[ContentType]], throw a *TypeError* exception.\n            1. If IsSharedArrayBuffer(_srcBuffer_) is *true*, IsSharedArrayBuffer(_targetBuffer_) is *true*, and _srcBuffer_.[[ArrayBufferData]] is _targetBuffer_.[[ArrayBufferData]], let _sameSharedArrayBuffer_ be *true*; otherwise, let _sameSharedArrayBuffer_ be *false*.\n            1. If SameValue(_srcBuffer_, _targetBuffer_) is *true* or _sameSharedArrayBuffer_ is *true*, then\n              1. Let _srcByteLength_ be TypedArrayByteLength(_srcRecord_).\n              1. Set _srcBuffer_ to ? CloneArrayBuffer(_srcBuffer_, _srcByteOffset_, _srcByteLength_).\n              1. Let _srcByteIndex_ be 0.\n            1. Else,\n              1. Let _srcByteIndex_ be _srcByteOffset_.\n            1. Let _targetByteIndex_ be (_targetOffset_ √ó _targetElementSize_) + _targetByteOffset_.\n            1. Let _limit_ be _targetByteIndex_ + (_targetElementSize_ √ó _srcLength_).\n            1. If _srcType_ is _targetType_, then\n              1. NOTE: The transfer must be performed in a manner that preserves the bit-level encoding of the source data.\n              1. Repeat, while _targetByteIndex_ < _limit_,\n                1. Let _value_ be GetValueFromBuffer(_srcBuffer_, _srcByteIndex_, ~uint8~, *true*, ~unordered~).\n                1. Perform SetValueInBuffer(_targetBuffer_, _targetByteIndex_, ~uint8~, _value_, *true*, ~unordered~).\n                1. Set _srcByteIndex_ to _srcByteIndex_ + 1.\n                1. Set _targetByteIndex_ to _targetByteIndex_ + 1.\n            1. Else,\n              1. Repeat, while _targetByteIndex_ < _limit_,\n                1. Let _value_ be GetValueFromBuffer(_srcBuffer_, _srcByteIndex_, _srcType_, *true*, ~unordered~).\n                1. Perform SetValueInBuffer(_targetBuffer_, _targetByteIndex_, _targetType_, _value_, *true*, ~unordered~).\n                1. Set _srcByteIndex_ to _srcByteIndex_ + _srcElementSize_.\n                1. Set _targetByteIndex_ to _targetByteIndex_ + _targetElementSize_.\n            1. Return ~unused~.\n          ",
  "IsCompatiblePropertyDescriptor" : "\n          1. Return ValidateAndApplyPropertyDescriptor(*undefined*, *\"\"*, _Extensible_, _Desc_, _Current_).\n        ",
  "AsyncGeneratorExpression[0,0].Contains" : "\n        1. Return *false*.\n      ",
  "MethodDefinition[5,0].ComputedPropertyContains" : "\n        1. Return the result of ComputedPropertyContains of |ClassElementName| with argument _symbol_.\n      ",
  "StatementList[1,0].LexicallyScopedDeclarations" : "\n        1. Let _declarations1_ be LexicallyScopedDeclarations of |StatementList|.\n        1. Let _declarations2_ be LexicallyScopedDeclarations of |StatementListItem|.\n        1. Return the list-concatenation of _declarations1_ and _declarations2_.\n      ",
  "TestIntegrityLevel" : "\n        1. Let _extensible_ be ? IsExtensible(_O_).\n        1. If _extensible_ is *true*, return *false*.\n        1. NOTE: If the object is extensible, none of its properties are examined.\n        1. Let _keys_ be ? _O_.[[OwnPropertyKeys]]().\n        1. For each element _k_ of _keys_, do\n          1. Let _currentDesc_ be ? <emu-meta effects=\"user-code\">_O_.[[GetOwnProperty]]</emu-meta>(_k_).\n          1. If _currentDesc_ is not *undefined*, then\n            1. If _currentDesc_.[[Configurable]] is *true*, return *false*.\n            1. If _level_ is ~frozen~ and IsDataDescriptor(_currentDesc_) is *true*, then\n              1. If _currentDesc_.[[Writable]] is *true*, return *false*.\n        1. Return *true*.\n      ",
  "AsyncGeneratorMethod[0,0].ComputedPropertyContains" : "\n        1. Return the result of ComputedPropertyContains of |ClassElementName| with argument _symbol_.\n      ",
  "INTRINSICS.Date.prototype.toJSON" : "\n          1. Let _O_ be ? ToObject(*this* value).\n          1. Let _tv_ be ? ToPrimitive(_O_, ~number~).\n          1. If _tv_ is a Number and _tv_ is not finite, return *null*.\n          1. Return ? Invoke(_O_, *\"toISOString\"*).\n        ",
  "FunctionExpression[0,1].InstantiateOrdinaryFunctionExpression" : "\n        1. Assert: _name_ is not present.\n        1. Set _name_ to StringValue of |BindingIdentifier|.\n        1. Let _outerEnv_ be the running execution context's LexicalEnvironment.\n        1. Let _funcEnv_ be NewDeclarativeEnvironment(_outerEnv_).\n        1. Perform ! _funcEnv_.CreateImmutableBinding(_name_, *false*).\n        1. Let _privateEnv_ be the running execution context's PrivateEnvironment.\n        1. Let _sourceText_ be the source text matched by |FunctionExpression|.\n        1. Let _closure_ be OrdinaryFunctionCreate(%Function.prototype%, _sourceText_, |FormalParameters|, |FunctionBody|, ~non-lexical-this~, _funcEnv_, _privateEnv_).\n        1. Perform SetFunctionName(_closure_, _name_).\n        1. Perform MakeConstructor(_closure_).\n        1. Perform ! _funcEnv_.InitializeBinding(_name_, _closure_).\n        1. Return _closure_.\n      ",
  "EqualityExpression[3,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "WithStatement[0,0].Evaluation" : "\n        1. Let _val_ be ? Evaluation of |Expression|.\n        1. Let _obj_ be ? ToObject(? GetValue(_val_)).\n        1. Let _oldEnv_ be the running execution context's LexicalEnvironment.\n        1. Let _newEnv_ be NewObjectEnvironment(_obj_, *true*, _oldEnv_).\n        1. Set the running execution context's LexicalEnvironment to _newEnv_.\n        1. Let _C_ be Completion(Evaluation of |Statement|).\n        1. Set the running execution context's LexicalEnvironment to _oldEnv_.\n        1. Return ? UpdateEmpty(_C_, *undefined*).\n      ",
  "Statement[3,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "Number::remainder" : "\n            1. If _n_ is *NaN* or _d_ is *NaN*, return *NaN*.\n            1. If _n_ is either *+‚àû*<sub>ùîΩ</sub> or *-‚àû*<sub>ùîΩ</sub>, return *NaN*.\n            1. If _d_ is either *+‚àû*<sub>ùîΩ</sub> or *-‚àû*<sub>ùîΩ</sub>, return _n_.\n            1. If _d_ is either *+0*<sub>ùîΩ</sub> or *-0*<sub>ùîΩ</sub>, return *NaN*.\n            1. If _n_ is either *+0*<sub>ùîΩ</sub> or *-0*<sub>ùîΩ</sub>, return _n_.\n            1. Assert: _n_ and _d_ are finite and non-zero.\n            1. Let _quotient_ be ‚Ñù(_n_) / ‚Ñù(_d_).\n            1. Let _q_ be truncate(_quotient_).\n            1. Let _r_ be ‚Ñù(_n_) - (‚Ñù(_d_) √ó _q_).\n            1. If _r_ = 0 and _n_ < *-0*<sub>ùîΩ</sub>, return *-0*<sub>ùîΩ</sub>.\n            1. Return ùîΩ(_r_).\n          ",
  "ForInOfStatement[3,0].ContainsUndefinedContinueTarget" : "\n        1. Return ContainsUndefinedContinueTarget of |Statement| with arguments _iterationSet_ and ¬´ ¬ª.\n      ",
  "ArrayBindingPattern[0,2].BoundNames" : "\n        1. Return a new empty List.\n      ",
  "ArrowFunction[0,0].InstantiateArrowFunctionExpression" : "\n        1. If _name_ is not present, set _name_ to *\"\"*.\n        1. Let _env_ be the LexicalEnvironment of the running execution context.\n        1. Let _privateEnv_ be the running execution context's PrivateEnvironment.\n        1. Let _sourceText_ be the source text matched by |ArrowFunction|.\n        1. [id=\"step-arrowfunction-evaluation-functioncreate\"] Let _closure_ be OrdinaryFunctionCreate(%Function.prototype%, _sourceText_, |ArrowParameters|, |ConciseBody|, ~lexical-this~, _env_, _privateEnv_).\n        1. Perform SetFunctionName(_closure_, _name_).\n        1. Return _closure_.\n      ",
  "YearFromTime" : "\n          1. [declared=\"y\"] Return the largest integral Number _y_ (closest to +‚àû) such that TimeFromYear(_y_) ‚â§ _t_.\n        ",
  "GetViewByteLength" : "\n          1. Assert: IsViewOutOfBounds(_viewRecord_) is *false*.\n          1. Let _view_ be _viewRecord_.[[Object]].\n          1. If _view_.[[ByteLength]] is not ~auto~, return _view_.[[ByteLength]].\n          1. Assert: IsFixedLengthArrayBuffer(_view_.[[ViewedArrayBuffer]]) is *false*.\n          1. Let _byteOffset_ be _view_.[[ByteOffset]].\n          1. Let _byteLength_ be _viewRecord_.[[CachedBufferByteLength]].\n          1. Assert: _byteLength_ is not ~detached~.\n          1. Return _byteLength_ - _byteOffset_.\n        ",
  "ImportClause[3,0].ImportEntriesForModule" : "\n          1. Let _entries1_ be ImportEntriesForModule of |ImportedDefaultBinding| with argument _module_.\n          1. Let _entries2_ be ImportEntriesForModule of |NameSpaceImport| with argument _module_.\n          1. Return the list-concatenation of _entries1_ and _entries2_.\n        ",
  "INTRINSICS.get Set.prototype.size" : "\n          1. Let _S_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_S_, [[SetData]]).\n          1. Let _count_ be 0.\n          1. For each element _e_ of _S_.[[SetData]], do\n            1. If _e_ is not ~empty~, set _count_ to _count_ + 1.\n          1. Return ùîΩ(_count_).\n        ",
  "AsyncGeneratorAwaitReturn" : "\n          1. Let _queue_ be _generator_.[[AsyncGeneratorQueue]].\n          1. Assert: _queue_ is not empty.\n          1. Let _next_ be the first element of _queue_.\n          1. Let _completion_ be Completion(_next_.[[Completion]]).\n          1. Assert: _completion_ is a return completion.\n          1. Let _promise_ be ? PromiseResolve(%Promise%, _completion_.[[Value]]).\n          1. Let _fulfilledClosure_ be a new Abstract Closure with parameters (_value_) that captures _generator_ and performs the following steps when called:\n            1. Set _generator_.[[AsyncGeneratorState]] to ~completed~.\n            1. Let _result_ be NormalCompletion(_value_).\n            1. Perform AsyncGeneratorCompleteStep(_generator_, _result_, *true*).\n            1. Perform AsyncGeneratorDrainQueue(_generator_).\n            1. Return *undefined*.\n          1. Let _onFulfilled_ be CreateBuiltinFunction(_fulfilledClosure_, 1, *\"\"*, ¬´ ¬ª).\n          1. Let _rejectedClosure_ be a new Abstract Closure with parameters (_reason_) that captures _generator_ and performs the following steps when called:\n            1. Set _generator_.[[AsyncGeneratorState]] to ~completed~.\n            1. Let _result_ be ThrowCompletion(_reason_).\n            1. Perform AsyncGeneratorCompleteStep(_generator_, _result_, *true*).\n            1. Perform AsyncGeneratorDrainQueue(_generator_).\n            1. Return *undefined*.\n          1. Let _onRejected_ be CreateBuiltinFunction(_rejectedClosure_, 1, *\"\"*, ¬´ ¬ª).\n          1. Perform PerformPromiseThen(_promise_, _onFulfilled_, _onRejected_).\n          1. Return ~unused~.\n        ",
  "NewExpression[1,0].Evaluation" : "\n          1. Return ? EvaluateNew(|NewExpression|, ~empty~).\n        ",
  "RelationalExpression[3,0].AssignmentTargetType" : "\n        1. Return ~invalid~.\n      ",
  "INTRINSICS.Math.cbrt" : "\n          1. Let _n_ be ? ToNumber(_x_).\n          1. If _n_ is not finite or _n_ is either *+0*<sub>ùîΩ</sub> or *-0*<sub>ùîΩ</sub>, return _n_.\n          1. Return an implementation-approximated Number value representing the result of the cube root of ‚Ñù(_n_).\n        ",
  "GetIterator" : "\n        1. If _kind_ is ~async~, then\n          1. Let _method_ be ? GetMethod(_obj_, @@asyncIterator).\n          1. If _method_ is *undefined*, then\n            1. Let _syncMethod_ be ? GetMethod(_obj_, @@iterator).\n            1. If _syncMethod_ is *undefined*, throw a *TypeError* exception.\n            1. Let _syncIteratorRecord_ be ? GetIteratorFromMethod(_obj_, _syncMethod_).\n            1. Return CreateAsyncFromSyncIterator(_syncIteratorRecord_).\n        1. Else,\n          1. Let _method_ be ? GetMethod(_obj_, @@iterator).\n        1. If _method_ is *undefined*, throw a *TypeError* exception.\n        1. Return ? GetIteratorFromMethod(_obj_, _method_).\n      ",
  "AsyncGeneratorStart:clo0" : "\n          1. Assert: _generator_.[[AsyncGeneratorState]] is *undefined*.\n          1. Let _genContext_ be the running execution context.\n          1. Set the Generator component of _genContext_ to _generator_.\n          1. Let _closure_ be a new Abstract Closure with no parameters that captures _generatorBody_ and performs the following steps when called:\n            1. Let _acGenContext_ be the running execution context.\n            1. Let _acGenerator_ be the Generator component of _acGenContext_.\n            1. If _generatorBody_ is a Parse Node, then\n              1. Let _result_ be Completion(Evaluation of _generatorBody_).\n            1. Else,\n              1. Assert: _generatorBody_ is an Abstract Closure with no parameters.\n              1. Let _result_ be Completion(_generatorBody_()).\n            1. Assert: If we return here, the async generator either threw an exception or performed either an implicit or explicit return.\n            1. Remove _acGenContext_ from the execution context stack and restore the execution context that is at the top of the execution context stack as the running execution context.\n            1. Set _acGenerator_.[[AsyncGeneratorState]] to ~completed~.\n            1. If _result_ is a normal completion, set _result_ to NormalCompletion(*undefined*).\n            1. If _result_ is a return completion, set _result_ to NormalCompletion(_result_.[[Value]]).\n            1. Perform AsyncGeneratorCompleteStep(_acGenerator_, _result_, *true*).\n            1. Perform AsyncGeneratorDrainQueue(_acGenerator_).\n            1. Return *undefined*.\n          1. Set the code evaluation state of _genContext_ such that when evaluation is resumed for that execution context, _closure_ will be called with no arguments.\n          1. Set _generator_.[[AsyncGeneratorContext]] to _genContext_.\n          1. Set _generator_.[[AsyncGeneratorState]] to ~suspended-start~.\n          1. Set _generator_.[[AsyncGeneratorQueue]] to a new empty List.\n          1. Return ~unused~.\n        ",
  "Number::toString" : "\n            1. If _x_ is *NaN*, return *\"NaN\"*.\n            1. If _x_ is either *+0*<sub>ùîΩ</sub> or *-0*<sub>ùîΩ</sub>, return *\"0\"*.\n            1. If _x_ < *-0*<sub>ùîΩ</sub>, return the string-concatenation of *\"-\"* and Number::toString(-_x_, _radix_).\n            1. If _x_ is *+‚àû*<sub>ùîΩ</sub>, return *\"Infinity\"*.\n            1. [id=\"step-number-tostring-intermediate-values\"] Let _n_, _k_, and _s_ be integers such that _k_ ‚â• 1, _radix_<sup>_k_ - 1</sup> ‚â§ _s_ < _radix_<sup>_k_</sup>, ùîΩ(_s_ √ó _radix_<sup>_n_ - _k_</sup>) is _x_, and _k_ is as small as possible. Note that _k_ is the number of digits in the representation of _s_ using radix _radix_, that _s_ is not divisible by _radix_, and that the least significant digit of _s_ is not necessarily uniquely determined by these criteria.\n            1. If _radix_ ‚â† 10 or _n_ is in the inclusive interval from -5 to 21, then\n              1. If _n_ ‚â• _k_, then\n                1. Return the string-concatenation of:\n                  * the code units of the _k_ digits of the representation of _s_ using radix _radix_\n                  * _n_ - _k_ occurrences of the code unit 0x0030 (DIGIT ZERO)\n              1. Else if _n_ > 0, then\n                1. Return the string-concatenation of:\n                  * the code units of the most significant _n_ digits of the representation of _s_ using radix _radix_\n                  * the code unit 0x002E (FULL STOP)\n                  * the code units of the remaining _k_ - _n_ digits of the representation of _s_ using radix _radix_\n              1. Else,\n                1. Assert: _n_ ‚â§ 0.\n                1. Return the string-concatenation of:\n                  * the code unit 0x0030 (DIGIT ZERO)\n                  * the code unit 0x002E (FULL STOP)\n                  * -_n_ occurrences of the code unit 0x0030 (DIGIT ZERO)\n                  * the code units of the _k_ digits of the representation of _s_ using radix _radix_\n            1. NOTE: In this case, the input will be represented using scientific E notation, such as `1.2e+3`.\n            1. Assert: _radix_ is 10.\n            1. If _n_ < 0, then\n              1. Let _exponentSign_ be the code unit 0x002D (HYPHEN-MINUS).\n            1. Else,\n              1. Let _exponentSign_ be the code unit 0x002B (PLUS SIGN).\n            1. If _k_ = 1, then\n              1. Return the string-concatenation of:\n                * the code unit of the single digit of _s_\n                * the code unit 0x0065 (LATIN SMALL LETTER E)\n                * _exponentSign_\n                * the code units of the decimal representation of abs(_n_ - 1)\n            1. Return the string-concatenation of:\n              * the code unit of the most significant digit of the decimal representation of _s_\n              * the code unit 0x002E (FULL STOP)\n              * the code units of the remaining _k_ - 1 digits of the decimal representation of _s_\n              * the code unit 0x0065 (LATIN SMALL LETTER E)\n              * _exponentSign_\n              * the code units of the decimal representation of abs(_n_ - 1)\n          ",
  "ClassElementList[0,0].NonConstructorElements" : "\n        1. If ClassElementKind of |ClassElement| is ~non-constructor-method~, then\n          1. Return ¬´ |ClassElement| ¬ª.\n        1. Return a new empty List.\n      ",
  "Record[StringExoticObject].DefineOwnProperty" : "\n          1. Let _stringDesc_ be StringGetOwnProperty(_S_, _P_).\n          1. If _stringDesc_ is not *undefined*, then\n            1. Let _extensible_ be _S_.[[Extensible]].\n            1. Return IsCompatiblePropertyDescriptor(_extensible_, _Desc_, _stringDesc_).\n          1. Return ! OrdinaryDefineOwnProperty(_S_, _P_, _Desc_).\n        ",
  "INTRINSICS.DataView.prototype.setInt16" : "\n          1. Let _v_ be the *this* value.\n          1. If _littleEndian_ is not present, set _littleEndian_ to *false*.\n          1. Return ? SetViewValue(_v_, _byteOffset_, _littleEndian_, ~int16~, _value_).\n        ",
  "ArrayBindingPattern[0,3].BoundNames" : "\n        1. Return the BoundNames of |BindingRestElement|.\n      ",
  "OptionalChain[7,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "MethodDefinition[2,0].SpecialMethod" : "\n        1. Return *true*.\n      ",
  "StringNumericLiteral[0,1].StringNumericValue" : "\n            1. Return *+0*<sub>ùîΩ</sub>.\n          ",
  "UnaryExpression[7,0].AssignmentTargetType" : "\n        1. Return ~invalid~.\n      ",
  "ExportDeclaration[2,0].BoundNames" : "\n        1. Return the BoundNames of |VariableStatement|.\n      ",
  "INTRINSICS.Reflect.set" : "\n        1. If _target_ is not an Object, throw a *TypeError* exception.\n        1. Let _key_ be ? ToPropertyKey(_propertyKey_).\n        1. If _receiver_ is not present, then\n          1. Set _receiver_ to _target_.\n        1. Return ? <emu-meta effects=\"user-code\">_target_.[[Set]]</emu-meta>(_key_, _V_, _receiver_).\n      ",
  "ForInOfStatement[7,0].ContainsUndefinedBreakTarget" : "\n        1. Return ContainsUndefinedBreakTarget of |Statement| with argument _labelSet_.\n      ",
  "INTRINSICS.Promise.prototype.finally:clo0:clo0" : "\n          1. Let _promise_ be the *this* value.\n          1. If _promise_ is not an Object, throw a *TypeError* exception.\n          1. Let _C_ be ? SpeciesConstructor(_promise_, %Promise%).\n          1. Assert: IsConstructor(_C_) is *true*.\n          1. If IsCallable(_onFinally_) is *false*, then\n            1. Let _thenFinally_ be _onFinally_.\n            1. Let _catchFinally_ be _onFinally_.\n          1. Else,\n            1. Let _thenFinallyClosure_ be a new Abstract Closure with parameters (_value_) that captures _onFinally_ and _C_ and performs the following steps when called:\n              1. Let _result_ be ? Call(_onFinally_, *undefined*).\n              1. Let _p_ be ? PromiseResolve(_C_, _result_).\n              1. Let _returnValue_ be a new Abstract Closure with no parameters that captures _value_ and performs the following steps when called:\n                1. Return _value_.\n              1. Let _valueThunk_ be CreateBuiltinFunction(_returnValue_, 0, *\"\"*, ¬´ ¬ª).\n              1. Return ? Invoke(_p_, *\"then\"*, ¬´ _valueThunk_ ¬ª).\n            1. Let _thenFinally_ be CreateBuiltinFunction(_thenFinallyClosure_, 1, *\"\"*, ¬´ ¬ª).\n            1. Let _catchFinallyClosure_ be a new Abstract Closure with parameters (_reason_) that captures _onFinally_ and _C_ and performs the following steps when called:\n              1. Let _result_ be ? Call(_onFinally_, *undefined*).\n              1. Let _p_ be ? PromiseResolve(_C_, _result_).\n              1. Let _throwReason_ be a new Abstract Closure with no parameters that captures _reason_ and performs the following steps when called:\n                1. Return ThrowCompletion(_reason_).\n              1. Let _thrower_ be CreateBuiltinFunction(_throwReason_, 0, *\"\"*, ¬´ ¬ª).\n              1. Return ? Invoke(_p_, *\"then\"*, ¬´ _thrower_ ¬ª).\n            1. Let _catchFinally_ be CreateBuiltinFunction(_catchFinallyClosure_, 1, *\"\"*, ¬´ ¬ª).\n          1. Return ? Invoke(_promise_, *\"then\"*, ¬´ _thenFinally_, _catchFinally_ ¬ª).\n        ",
  "INTRINSICS.Number.prototype.toExponential" : "\n          1. Let _x_ be ? ThisNumberValue(*this* value).\n          1. Let _f_ be ? ToIntegerOrInfinity(_fractionDigits_).\n          1. Assert: If _fractionDigits_ is *undefined*, then _f_ is 0.\n          1. If _x_ is not finite, return Number::toString(_x_, 10).\n          1. If _f_ < 0 or _f_ > 100, throw a *RangeError* exception.\n          1. Set _x_ to ‚Ñù(_x_).\n          1. Let _s_ be the empty String.\n          1. If _x_ < 0, then\n            1. Set _s_ to *\"-\"*.\n            1. Set _x_ to -_x_.\n          1. If _x_ = 0, then\n            1. Let _m_ be the String value consisting of _f_ + 1 occurrences of the code unit 0x0030 (DIGIT ZERO).\n            1. Let _e_ be 0.\n          1. Else,\n            1. If _fractionDigits_ is not *undefined*, then\n              1. Let _e_ and _n_ be integers such that 10<sup>_f_</sup> ‚â§ _n_ < 10<sup>_f_ + 1</sup> and for which _n_ √ó 10<sup>_e_ - _f_</sup> - _x_ is as close to zero as possible. If there are two such sets of _e_ and _n_, pick the _e_ and _n_ for which _n_ √ó 10<sup>_e_ - _f_</sup> is larger.\n            1. Else,\n              1. [id=\"step-number-proto-toexponential-intermediate-values\"] Let _e_, _n_, and _ff_ be integers such that _ff_ ‚â• 0, 10<sup>_ff_</sup> ‚â§ _n_ < 10<sup>_ff_ + 1</sup>, ùîΩ(_n_ √ó 10<sup>_e_ - _ff_</sup>) is ùîΩ(_x_), and _ff_ is as small as possible. Note that the decimal representation of _n_ has _ff_ + 1 digits, _n_ is not divisible by 10, and the least significant digit of _n_ is not necessarily uniquely determined by these criteria.\n              1. Set _f_ to _ff_.\n            1. Let _m_ be the String value consisting of the digits of the decimal representation of _n_ (in order, with no leading zeroes).\n          1. If _f_ ‚â† 0, then\n            1. Let _a_ be the first code unit of _m_.\n            1. Let _b_ be the other _f_ code units of _m_.\n            1. Set _m_ to the string-concatenation of _a_, *\".\"*, and _b_.\n          1. If _e_ = 0, then\n            1. Let _c_ be *\"+\"*.\n            1. Let _d_ be *\"0\"*.\n          1. Else,\n            1. If _e_ > 0, then\n              1. Let _c_ be *\"+\"*.\n            1. Else,\n              1. Assert: _e_ < 0.\n              1. Let _c_ be *\"-\"*.\n              1. Set _e_ to -_e_.\n            1. Let _d_ be the String value consisting of the digits of the decimal representation of _e_ (in order, with no leading zeroes).\n          1. Set _m_ to the string-concatenation of _m_, *\"e\"*, _c_, and _d_.\n          1. Return the string-concatenation of _s_ and _m_.\n        ",
  "Record[GlobalEnvironmentRecord].HasRestrictedGlobalProperty" : "\n            1. Let _ObjRec_ be _envRec_.[[ObjectRecord]].\n            1. Let _globalObject_ be _ObjRec_.[[BindingObject]].\n            1. Let _existingProp_ be ? <emu-meta effects=\"user-code\">_globalObject_.[[GetOwnProperty]]</emu-meta>(_N_).\n            1. If _existingProp_ is *undefined*, return *false*.\n            1. If _existingProp_.[[Configurable]] is *true*, return *false*.\n            1. Return *true*.\n          ",
  "CopyDataProperties" : "\n        1. If _source_ is either *undefined* or *null*, return ~unused~.\n        1. Let _from_ be ! ToObject(_source_).\n        1. Let _keys_ be ? <emu-meta effects=\"user-code\">_from_.[[OwnPropertyKeys]]</emu-meta>().\n        1. For each element _nextKey_ of _keys_, do\n          1. Let _excluded_ be *false*.\n          1. For each element _e_ of _excludedItems_, do\n            1. If SameValue(_e_, _nextKey_) is *true*, then\n              1. Set _excluded_ to *true*.\n          1. If _excluded_ is *false*, then\n            1. Let _desc_ be ? <emu-meta effects=\"user-code\">_from_.[[GetOwnProperty]]</emu-meta>(_nextKey_).\n            1. If _desc_ is not *undefined* and _desc_.[[Enumerable]] is *true*, then\n              1. Let _propValue_ be ? Get(_from_, _nextKey_).\n              1. Perform ! CreateDataPropertyOrThrow(_target_, _nextKey_, _propValue_).\n        1. Return ~unused~.\n      ",
  "INTRINSICS.DataView.prototype.getFloat32" : "\n          1. Let _v_ be the *this* value.\n          1. If _littleEndian_ is not present, set _littleEndian_ to *false*.\n          1. Return ? GetViewValue(_v_, _byteOffset_, _littleEndian_, ~float32~).\n        ",
  "StatementListItem[1,0].TopLevelLexicallyDeclaredNames" : "\n        1. If |Declaration| is <emu-grammar>Declaration : HoistableDeclaration</emu-grammar>, then\n          1. Return a new empty List.\n        1. Return the BoundNames of |Declaration|.\n      ",
  "Record[DeclarativeEnvironmentRecord].SetMutableBinding" : "\n            1. [id=\"step-setmutablebinding-missing-binding\"] If _envRec_ does not have a binding for _N_, then\n              1. If _S_ is *true*, throw a *ReferenceError* exception.\n              1. Perform ! _envRec_.CreateMutableBinding(_N_, *true*).\n              1. Perform ! _envRec_.InitializeBinding(_N_, _V_).\n              1. Return ~unused~.\n            1. If the binding for _N_ in _envRec_ is a strict binding, set _S_ to *true*.\n            1. If the binding for _N_ in _envRec_ has not yet been initialized, then\n              1. Throw a *ReferenceError* exception.\n            1. Else if the binding for _N_ in _envRec_ is a mutable binding, then\n              1. Change its bound value to _V_.\n            1. Else,\n              1. Assert: This is an attempt to change the value of an immutable binding.\n              1. If _S_ is *true*, throw a *TypeError* exception.\n            1. Return ~unused~.\n          ",
  "StatementList[1,0].TopLevelLexicallyScopedDeclarations" : "\n        1. Let _declarations1_ be TopLevelLexicallyScopedDeclarations of |StatementList|.\n        1. Let _declarations2_ be TopLevelLexicallyScopedDeclarations of |StatementListItem|.\n        1. Return the list-concatenation of _declarations1_ and _declarations2_.\n      ",
  "INTRINSICS.BigInt.prototype.valueOf" : "\n          1. Return ? ThisBigIntValue(*this* value).\n        ",
  "DefaultClause[0,0].HasCallInTailPosition" : "\n        1. If |StatementList| is present, return HasCallInTailPosition of |StatementList| with argument _call_.\n        1. Return *false*.\n      ",
  "ExportDeclaration[1,0].ExportEntries" : "\n          1. Return ExportEntriesForModule of |NamedExports| with argument *null*.\n        ",
  "Record[GlobalEnvironmentRecord].HasThisBinding" : "\n            1. Return *true*.\n          ",
  "Record[ProxyExoticObject].Set" : "\n        1. Perform ? ValidateNonRevokedProxy(_O_).\n        1. Let _target_ be _O_.[[ProxyTarget]].\n        1. Let _handler_ be _O_.[[ProxyHandler]].\n        1. Assert: _handler_ is an Object.\n        1. Let _trap_ be ? GetMethod(_handler_, *\"set\"*).\n        1. If _trap_ is *undefined*, then\n          1. Return ? <emu-meta effects=\"user-code\">_target_.[[Set]]</emu-meta>(_P_, _V_, _Receiver_).\n        1. Let _booleanTrapResult_ be ToBoolean(? Call(_trap_, _handler_, ¬´ _target_, _P_, _V_, _Receiver_ ¬ª)).\n        1. If _booleanTrapResult_ is *false*, return *false*.\n        1. Let _targetDesc_ be ? <emu-meta effects=\"user-code\">_target_.[[GetOwnProperty]]</emu-meta>(_P_).\n        1. If _targetDesc_ is not *undefined* and _targetDesc_.[[Configurable]] is *false*, then\n          1. If IsDataDescriptor(_targetDesc_) is *true* and _targetDesc_.[[Writable]] is *false*, then\n            1. If SameValue(_V_, _targetDesc_.[[Value]]) is *false*, throw a *TypeError* exception.\n          1. If IsAccessorDescriptor(_targetDesc_) is *true*, then\n            1. If _targetDesc_.[[Set]] is *undefined*, throw a *TypeError* exception.\n        1. Return *true*.\n      ",
  "CaseBlock[1,1].VarDeclaredNames" : "\n        1. If the first |CaseClauses| is present, let _names1_ be the VarDeclaredNames of the first |CaseClauses|.\n        1. Else, let _names1_ be a new empty List.\n        1. Let _names2_ be VarDeclaredNames of |DefaultClause|.\n        1. If the second |CaseClauses| is present, let _names3_ be the VarDeclaredNames of the second |CaseClauses|.\n        1. Else, let _names3_ be a new empty List.\n        1. Return the list-concatenation of _names1_, _names2_, and _names3_.\n      ",
  "MatchTwoAlternatives" : "\n            1. Return a new Matcher with parameters (_x_, _c_) that captures _m1_ and _m2_ and performs the following steps when called:\n              1. Assert: _x_ is a MatchState.\n              1. Assert: _c_ is a MatcherContinuation.\n              1. Let _r_ be _m1_(_x_, _c_).\n              1. If _r_ is not ~failure~, return _r_.\n              1. Return _m2_(_x_, _c_).\n          ",
  "ClassElementName[0,0].PrivateBoundIdentifiers" : "\n        1. Return a new empty List.\n      ",
  "ForInOfStatement[5,0].VarDeclaredNames" : "\n        1. Return the VarDeclaredNames of |Statement|.\n      ",
  "ImportSpecifier[1,0].BoundNames" : "\n        1. Return the BoundNames of |ImportedBinding|.\n      ",
  "LengthOfArrayLike" : "\n        1. Return ‚Ñù(? ToLength(? Get(_obj_, *\"length\"*))).\n      ",
  "AssignmentElisionElement[0,1].IteratorDestructuringAssignmentEvaluation" : "\n          1. Perform ? IteratorDestructuringAssignmentEvaluation of |Elision| with argument _iteratorRecord_.\n          1. Return ? IteratorDestructuringAssignmentEvaluation of |AssignmentElement| with argument _iteratorRecord_.\n        ",
  "INTRINSICS.Date.prototype.getDay" : "\n          1. Let _dateObject_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_dateObject_, [[DateValue]]).\n          1. Let _t_ be _dateObject_.[[DateValue]].\n          1. If _t_ is *NaN*, return *NaN*.\n          1. Return WeekDay(LocalTime(_t_)).\n        ",
  "Literal[1,0].Evaluation" : "\n          1. If |BooleanLiteral| is the token `false`, return *false*.\n          1. If |BooleanLiteral| is the token `true`, return *true*.\n        ",
  "ForStatement[1,0].ForLoopEvaluation" : "\n          1. Perform ? Evaluation of |VariableDeclarationList|.\n          1. If the first |Expression| is present, let _test_ be the first |Expression|; otherwise, let _test_ be ~empty~.\n          1. If the second |Expression| is present, let _increment_ be the second |Expression|; otherwise, let _increment_ be ~empty~.\n          1. Return ? ForBodyEvaluation(_test_, _increment_, |Statement|, ¬´ ¬ª, _labelSet_).\n        ",
  "ForInOfStatement[5,0].ContainsUndefinedContinueTarget" : "\n        1. Return ContainsUndefinedContinueTarget of |Statement| with arguments _iterationSet_ and ¬´ ¬ª.\n      ",
  "BitwiseXORExpression[1,0].Evaluation" : "\n        1. Return ? EvaluateStringOrNumericBinaryExpression(|BitwiseXORExpression|, `^`, |BitwiseANDExpression|).\n      ",
  "ClassElementList[1,0].ComputedPropertyContains" : "\n        1. Let _inList_ be ComputedPropertyContains of |ClassElementList| with argument _symbol_.\n        1. If _inList_ is *true*, return *true*.\n        1. Return the result of ComputedPropertyContains of |ClassElement| with argument _symbol_.\n      ",
  "LabelledItem[0,0].TopLevelVarScopedDeclarations" : "\n        1. If |Statement| is <emu-grammar>Statement : LabelledStatement</emu-grammar>, return TopLevelVarScopedDeclarations of |Statement|.\n        1. Return VarScopedDeclarations of |Statement|.\n      ",
  "INTRINSICS.Set.prototype.forEach" : "\n          1. Let _S_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_S_, [[SetData]]).\n          1. If IsCallable(_callbackfn_) is *false*, throw a *TypeError* exception.\n          1. Let _entries_ be _S_.[[SetData]].\n          1. Let _numEntries_ be the number of elements in _entries_.\n          1. Let _index_ be 0.\n          1. Repeat, while _index_ < _numEntries_,\n            1. Let _e_ be _entries_[_index_].\n            1. Set _index_ to _index_ + 1.\n            1. If _e_ is not ~empty~, then\n              1. Perform ? Call(_callbackfn_, _thisArg_, ¬´ _e_, _e_, _S_ ¬ª).\n              1. NOTE: The number of elements in _entries_ may have increased during execution of _callbackfn_.\n              1. Set _numEntries_ to the number of elements in _entries_.\n          1. Return *undefined*.\n        ",
  "GeneratorExpression[0,0].InstantiateGeneratorFunctionExpression" : "\n        1. If _name_ is not present, set _name_ to *\"\"*.\n        1. Let _env_ be the LexicalEnvironment of the running execution context.\n        1. Let _privateEnv_ be the running execution context's PrivateEnvironment.\n        1. Let _sourceText_ be the source text matched by |GeneratorExpression|.\n        1. Let _closure_ be OrdinaryFunctionCreate(%GeneratorFunction.prototype%, _sourceText_, |FormalParameters|, |GeneratorBody|, ~non-lexical-this~, _env_, _privateEnv_).\n        1. Perform SetFunctionName(_closure_, _name_).\n        1. Let _prototype_ be OrdinaryObjectCreate(%GeneratorFunction.prototype.prototype%).\n        1. Perform ! DefinePropertyOrThrow(_closure_, *\"prototype\"*, PropertyDescriptor { [[Value]]: _prototype_, [[Writable]]: *true*, [[Enumerable]]: *false*, [[Configurable]]: *false* }).\n        1. Return _closure_.\n      ",
  "INTRINSICS.Set.prototype.delete" : "\n          1. Let _S_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_S_, [[SetData]]).\n          1. For each element _e_ of _S_.[[SetData]], do\n            1. If _e_ is not ~empty~ and SameValueZero(_e_, _value_) is *true*, then\n              1. Replace the element of _S_.[[SetData]] whose value is _e_ with an element whose value is ~empty~.\n              1. Return *true*.\n          1. Return *false*.\n        ",
  "ArrayLiteral[2,1].Evaluation" : "\n          1. Let _array_ be ! ArrayCreate(0).\n          1. Let _nextIndex_ be ? ArrayAccumulation of |ElementList| with arguments _array_ and 0.\n          1. If |Elision| is present, then\n            1. Perform ? ArrayAccumulation of |Elision| with arguments _array_ and _nextIndex_.\n          1. Return _array_.\n        ",
  "StatementListItem[1,0].TopLevelLexicallyScopedDeclarations" : "\n        1. If |Declaration| is <emu-grammar>Declaration : HoistableDeclaration</emu-grammar>, then\n          1. Return a new empty List.\n        1. Return ¬´ |Declaration| ¬ª.\n      ",
  "BindingProperty[0,0].PropertyBindingInitialization" : "\n          1. Let _name_ be the sole element of the BoundNames of |SingleNameBinding|.\n          1. Perform ? KeyedBindingInitialization of |SingleNameBinding| with arguments _value_, _environment_, and _name_.\n          1. Return ¬´ _name_ ¬ª.\n        ",
  "ExportDeclaration[1,0].IsConstantDeclaration" : "\n        1. Return *false*.\n      ",
  "Statement[2,0].ContainsUndefinedContinueTarget" : "\n        1. Return *false*.\n      ",
  "AdditiveExpression[2,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "ExportFromClause[0,0].ExportEntriesForModule" : "\n          1. Let _entry_ be the ExportEntry Record { [[ModuleRequest]]: _module_, [[ImportName]]: ~all-but-default~, [[LocalName]]: *null*, [[ExportName]]: *null* }.\n          1. Return ¬´ _entry_ ¬ª.\n        ",
  "CreateArrayIterator" : "\n          1. Let _closure_ be a new Abstract Closure with no parameters that captures _kind_ and _array_ and performs the following steps when called:\n            1. Let _index_ be 0.\n            1. Repeat,\n              1. If _array_ has a [[TypedArrayName]] internal slot, then\n                1. Let _taRecord_ be MakeTypedArrayWithBufferWitnessRecord(_array_, ~seq-cst~).\n                1. If IsTypedArrayOutOfBounds(_taRecord_) is *true*, throw a *TypeError* exception.\n                1. Let _len_ be TypedArrayLength(_taRecord_).\n              1. Else,\n                1. Let _len_ be ? LengthOfArrayLike(_array_).\n              1. If _index_ ‚â• _len_, return NormalCompletion(*undefined*).\n              1. Let _indexNumber_ be ùîΩ(_index_).\n              1. If _kind_ is ~key~, then\n                1. Let _result_ be _indexNumber_.\n              1. Else,\n                1. Let _elementKey_ be ! ToString(_indexNumber_).\n                1. Let _elementValue_ be ? Get(_array_, _elementKey_).\n                1. If _kind_ is ~value~, then\n                  1. Let _result_ be _elementValue_.\n                1. Else,\n                  1. Assert: _kind_ is ~key+value~.\n                  1. Let _result_ be CreateArrayFromList(¬´ _indexNumber_, _elementValue_ ¬ª).\n              1. Perform ? GeneratorYield(CreateIterResultObject(_result_, *false*)).\n              1. Set _index_ to _index_ + 1.\n          1. Return CreateIteratorFromClosure(_closure_, *\"%ArrayIteratorPrototype%\"*, %ArrayIteratorPrototype%).\n        ",
  "ArrowFunction[0,0].Evaluation" : "\n        1. Return InstantiateArrowFunctionExpression of |ArrowFunction|.\n      ",
  "TryStatement[1,0].ContainsUndefinedBreakTarget" : "\n        1. Let _hasUndefinedLabels_ be ContainsUndefinedBreakTarget of |Block| with argument _labelSet_.\n        1. If _hasUndefinedLabels_ is *true*, return *true*.\n        1. Return ContainsUndefinedBreakTarget of |Finally| with argument _labelSet_.\n      ",
  "CreateListIteratorRecord:clo0" : "\n        1. Let _closure_ be a new Abstract Closure with no parameters that captures _list_ and performs the following steps when called:\n          1. For each element _E_ of _list_, do\n            1. Perform ? GeneratorYield(CreateIterResultObject(_E_, *false*)).\n          1. Return NormalCompletion(*undefined*).\n        1. Let _iterator_ be CreateIteratorFromClosure(_closure_, ~empty~, %IteratorPrototype%).\n        1. Return the Iterator Record { [[Iterator]]: _iterator_, [[NextMethod]]: %GeneratorFunction.prototype.prototype.next%, [[Done]]: *false* }.\n      ",
  "INTRINSICS.DataView.prototype.setFloat64" : "\n          1. Let _v_ be the *this* value.\n          1. If _littleEndian_ is not present, set _littleEndian_ to *false*.\n          1. Return ? SetViewValue(_v_, _byteOffset_, _littleEndian_, ~float64~, _value_).\n        ",
  "MakeMatchIndicesIndexPairArray" : "\n          1. Let _n_ be the number of elements in _indices_.\n          1. Assert: _n_ < 2<sup>32</sup> - 1.\n          1. Assert: _groupNames_ has _n_ - 1 elements.\n          1. NOTE: The _groupNames_ List contains elements aligned with the _indices_ List starting at _indices_[1].\n          1. Let _A_ be ! ArrayCreate(_n_).\n          1. If _hasGroups_ is *true*, then\n            1. Let _groups_ be OrdinaryObjectCreate(*null*).\n          1. Else,\n            1. Let _groups_ be *undefined*.\n          1. Perform ! CreateDataPropertyOrThrow(_A_, *\"groups\"*, _groups_).\n          1. For each integer _i_ such that 0 ‚â§ _i_ < _n_, in ascending order, do\n            1. Let _matchIndices_ be _indices_[_i_].\n            1. If _matchIndices_ is not *undefined*, then\n              1. Let _matchIndexPair_ be GetMatchIndexPair(_S_, _matchIndices_).\n            1. Else,\n              1. Let _matchIndexPair_ be *undefined*.\n            1. Perform ! CreateDataPropertyOrThrow(_A_, ! ToString(ùîΩ(_i_)), _matchIndexPair_).\n            1. If _i_ > 0 and _groupNames_[_i_ - 1] is not *undefined*, then\n              1. Assert: _groups_ is not *undefined*.\n              1. Perform ! CreateDataPropertyOrThrow(_groups_, _groupNames_[_i_ - 1], _matchIndexPair_).\n          1. Return _A_.\n        ",
  "ClassElement[5,0].ComputedPropertyContains" : "\n        1. Return *false*.\n      ",
  "MethodDefinition[4,0].HasDirectSuper" : "\n        1. Return |FunctionBody| Contains |SuperCall|.\n      ",
  "WhileStatement[0,0].HasCallInTailPosition" : "\n        1. Return HasCallInTailPosition of |Statement| with argument _call_.\n      ",
  "IsTimeZoneOffsetString" : "\n            1. Let _parseResult_ be ParseText(StringToCodePoints(_offsetString_), |UTCOffset|).\n            1. If _parseResult_ is a List of errors, return *false*.\n            1. Return *true*.\n          ",
  "Record[CyclicModuleRecord].Evaluate" : "\n            1. Assert: This call to Evaluate is not happening at the same time as another call to Evaluate within the surrounding agent.\n            1. Assert: _module_.[[Status]] is one of ~linked~, ~evaluating-async~, or ~evaluated~.\n            1. If _module_.[[Status]] is either ~evaluating-async~ or ~evaluated~, set _module_ to _module_.[[CycleRoot]].\n            1. If _module_.[[TopLevelCapability]] is not ~empty~, then\n              1. Return _module_.[[TopLevelCapability]].[[Promise]].\n            1. Let _stack_ be a new empty List.\n            1. Let _capability_ be ! NewPromiseCapability(%Promise%).\n            1. Set _module_.[[TopLevelCapability]] to _capability_.\n            1. Let _result_ be Completion(InnerModuleEvaluation(_module_, _stack_, 0)).\n            1. If _result_ is an abrupt completion, then\n              1. For each Cyclic Module Record _m_ of _stack_, do\n                1. Assert: _m_.[[Status]] is ~evaluating~.\n                1. Set _m_.[[Status]] to ~evaluated~.\n                1. Set _m_.[[EvaluationError]] to _result_.\n              1. Assert: _module_.[[Status]] is ~evaluated~.\n              1. Assert: _module_.[[EvaluationError]] is _result_.\n              1. Perform ! Call(_capability_.[[Reject]], *undefined*, ¬´ _result_.[[Value]] ¬ª).\n            1. Else,\n              1. Assert: _module_.[[Status]] is either ~evaluating-async~ or ~evaluated~.\n              1. Assert: _module_.[[EvaluationError]] is ~empty~.\n              1. If _module_.[[AsyncEvaluation]] is *false*, then\n                1. Assert: _module_.[[Status]] is ~evaluated~.\n                1. Perform ! Call(_capability_.[[Resolve]], *undefined*, ¬´ *undefined* ¬ª).\n              1. Assert: _stack_ is empty.\n            1. Return _capability_.[[Promise]].\n          ",
  "Number::equal" : "\n            1. If _x_ is *NaN*, return *false*.\n            1. If _y_ is *NaN*, return *false*.\n            1. If _x_ is _y_, return *true*.\n            1. If _x_ is *+0*<sub>ùîΩ</sub> and _y_ is *-0*<sub>ùîΩ</sub>, return *true*.\n            1. If _x_ is *-0*<sub>ùîΩ</sub> and _y_ is *+0*<sub>ùîΩ</sub>, return *true*.\n            1. Return *false*.\n          ",
  "INTRINSICS.TypeError" : null,
  "Module[0,0].VarScopedDeclarations" : "\n        1. Return a new empty List.\n      ",
  "PerformPromiseRace" : "\n            1. Repeat,\n              1. Let _next_ be ? IteratorStepValue(_iteratorRecord_).\n              1. If _next_ is ~done~, then\n                1. Return _resultCapability_.[[Promise]].\n              1. Let _nextPromise_ be ? Call(_promiseResolve_, _constructor_, ¬´ _next_ ¬ª).\n              1. Perform ? Invoke(_nextPromise_, *\"then\"*, ¬´ _resultCapability_.[[Resolve]], _resultCapability_.[[Reject]] ¬ª).\n          ",
  "CompletePropertyDescriptor" : "\n          1. Let _like_ be the Record { [[Value]]: *undefined*, [[Writable]]: *false*, [[Get]]: *undefined*, [[Set]]: *undefined*, [[Enumerable]]: *false*, [[Configurable]]: *false* }.\n          1. If IsGenericDescriptor(_Desc_) is *true* or IsDataDescriptor(_Desc_) is *true*, then\n            1. If _Desc_ does not have a [[Value]] field, set _Desc_.[[Value]] to _like_.[[Value]].\n            1. If _Desc_ does not have a [[Writable]] field, set _Desc_.[[Writable]] to _like_.[[Writable]].\n          1. Else,\n            1. If _Desc_ does not have a [[Get]] field, set _Desc_.[[Get]] to _like_.[[Get]].\n            1. If _Desc_ does not have a [[Set]] field, set _Desc_.[[Set]] to _like_.[[Set]].\n          1. If _Desc_ does not have an [[Enumerable]] field, set _Desc_.[[Enumerable]] to _like_.[[Enumerable]].\n          1. If _Desc_ does not have a [[Configurable]] field, set _Desc_.[[Configurable]] to _like_.[[Configurable]].\n          1. Return ~unused~.\n        ",
  "CallExpression[7,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "GetSuperConstructor" : "\n          1. Let _envRec_ be GetThisEnvironment().\n          1. Assert: _envRec_ is a Function Environment Record.\n          1. Let _activeFunction_ be _envRec_.[[FunctionObject]].\n          1. Assert: _activeFunction_ is an ECMAScript function object.\n          1. Let _superConstructor_ be ! _activeFunction_.[[GetPrototypeOf]]().\n          1. Return _superConstructor_.\n        ",
  "SetTypedArrayFromArrayLike" : "\n            1. Let _targetRecord_ be MakeTypedArrayWithBufferWitnessRecord(_target_, ~seq-cst~).\n            1. If IsTypedArrayOutOfBounds(_targetRecord_) is *true*, throw a *TypeError* exception.\n            1. Let _targetLength_ be TypedArrayLength(_targetRecord_).\n            1. Let _src_ be ? ToObject(_source_).\n            1. Let _srcLength_ be ? LengthOfArrayLike(_src_).\n            1. If _targetOffset_ = +‚àû, throw a *RangeError* exception.\n            1. If _srcLength_ + _targetOffset_ > _targetLength_, throw a *RangeError* exception.\n            1. Let _k_ be 0.\n            1. Repeat, while _k_ < _srcLength_,\n              1. Let _Pk_ be ! ToString(ùîΩ(_k_)).\n              1. Let _value_ be ? Get(_src_, _Pk_).\n              1. Let _targetIndex_ be ùîΩ(_targetOffset_ + _k_).\n              1. Perform ? TypedArraySetElement(_target_, _targetIndex_, _value_).\n              1. Set _k_ to _k_ + 1.\n            1. Return ~unused~.\n          ",
  "MemberExpression[6,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "ArrayBindingPattern[0,0].IteratorBindingInitialization" : "\n        1. Return ~unused~.\n      ",
  "ThisNumberValue" : "\n            1. If _value_ is a Number, return _value_.\n            1. If _value_ is an Object and _value_ has a [[NumberData]] internal slot, then\n              1. Let _n_ be _value_.[[NumberData]].\n              1. Assert: _n_ is a Number.\n              1. Return _n_.\n            1. Throw a *TypeError* exception.\n          ",
  "INTRINSICS.parseInt" : "\n        1. Let _inputString_ be ? ToString(_string_).\n        1. Let _S_ be ! TrimString(_inputString_, ~start~).\n        1. Let _sign_ be 1.\n        1. If _S_ is not empty and the first code unit of _S_ is the code unit 0x002D (HYPHEN-MINUS), set _sign_ to -1.\n        1. If _S_ is not empty and the first code unit of _S_ is either the code unit 0x002B (PLUS SIGN) or the code unit 0x002D (HYPHEN-MINUS), set _S_ to the substring of _S_ from index 1.\n        1. Let _R_ be ‚Ñù(? ToInt32(_radix_)).\n        1. Let _stripPrefix_ be *true*.\n        1. If _R_ ‚â† 0, then\n          1. If _R_ < 2 or _R_ > 36, return *NaN*.\n          1. If _R_ ‚â† 16, set _stripPrefix_ to *false*.\n        1. Else,\n          1. Set _R_ to 10.\n        1. If _stripPrefix_ is *true*, then\n          1. If the length of _S_ is at least 2 and the first two code units of _S_ are either *\"0x\"* or *\"0X\"*, then\n            1. Set _S_ to the substring of _S_ from index 2.\n            1. Set _R_ to 16.\n        1. If _S_ contains a code unit that is not a radix-_R_ digit, let _end_ be the index within _S_ of the first such code unit; otherwise, let _end_ be the length of _S_.\n        1. Let _Z_ be the substring of _S_ from 0 to _end_.\n        1. If _Z_ is empty, return *NaN*.\n        1. Let _mathInt_ be the integer value that is represented by _Z_ in radix-_R_ notation, using the letters <b>A</b> through <b>Z</b> and <b>a</b> through <b>z</b> for digits with values 10 through 35. (However, if _R_ = 10 and _Z_ contains more than 20 significant digits, every significant digit after the 20th may be replaced by a 0 digit, at the option of the implementation; and if _R_ is not one of 2, 4, 8, 10, 16, or 32, then _mathInt_ may be an implementation-approximated integer representing the integer value denoted by _Z_ in radix-_R_ notation.)\n        1. If _mathInt_ = 0, then\n          1. If _sign_ = -1, return *-0*<sub>ùîΩ</sub>.\n          1. Return *+0*<sub>ùîΩ</sub>.\n        1. Return ùîΩ(_sign_ √ó _mathInt_).\n      ",
  "Statement[8,0].VarScopedDeclarations" : "\n        1. Return a new empty List.\n      ",
  "CaseBlock[1,2].VarDeclaredNames" : "\n        1. If the first |CaseClauses| is present, let _names1_ be the VarDeclaredNames of the first |CaseClauses|.\n        1. Else, let _names1_ be a new empty List.\n        1. Let _names2_ be VarDeclaredNames of |DefaultClause|.\n        1. If the second |CaseClauses| is present, let _names3_ be the VarDeclaredNames of the second |CaseClauses|.\n        1. Else, let _names3_ be a new empty List.\n        1. Return the list-concatenation of _names1_, _names2_, and _names3_.\n      ",
  "<DEFAULT>.ContainsArguments" : "\n        1. For each child node _child_ of this Parse Node, do\n          1. If _child_ is an instance of a nonterminal, then\n            1. If ContainsArguments of _child_ is *true*, return *true*.\n        1. Return *false*.\n      ",
  "FormalParameters[4,0].IsSimpleParameterList" : "\n        1. Return *false*.\n      ",
  "INTRINSICS.Math.sqrt" : "\n          1. Let _n_ be ? ToNumber(_x_).\n          1. If _n_ is one of *NaN*, *+0*<sub>ùîΩ</sub>, *-0*<sub>ùîΩ</sub>, or *+‚àû*<sub>ùîΩ</sub>, return _n_.\n          1. If _n_ < *-0*<sub>ùîΩ</sub>, return *NaN*.\n          1. Return an implementation-approximated Number value representing the result of the square root of ‚Ñù(_n_).\n        ",
  "BigInt::multiply" : "\n            1. Return _x_ √ó _y_.\n          ",
  "GetImportedModule" : "\n          1. Assert: Exactly one element of _referrer_.[[LoadedModules]] is a Record whose [[Specifier]] is _specifier_, since LoadRequestedModules has completed successfully on _referrer_ prior to invoking this abstract operation.\n          1. Let _record_ be the Record in _referrer_.[[LoadedModules]] whose [[Specifier]] is _specifier_.\n          1. Return _record_.[[Module]].\n        ",
  "INTRINSICS.RegExp.prototype[@@matchAll]" : "\n          1. Let _R_ be the *this* value.\n          1. If _R_ is not an Object, throw a *TypeError* exception.\n          1. Let _S_ be ? ToString(_string_).\n          1. Let _C_ be ? SpeciesConstructor(_R_, %RegExp%).\n          1. Let _flags_ be ? ToString(? Get(_R_, *\"flags\"*)).\n          1. Let _matcher_ be ? Construct(_C_, ¬´ _R_, _flags_ ¬ª).\n          1. Let _lastIndex_ be ? ToLength(? Get(_R_, *\"lastIndex\"*)).\n          1. Perform ? Set(_matcher_, *\"lastIndex\"*, _lastIndex_, *true*).\n          1. If _flags_ contains *\"g\"*, let _global_ be *true*.\n          1. Else, let _global_ be *false*.\n          1. If _flags_ contains *\"u\"* or _flags_ contains *\"v\"*, let _fullUnicode_ be *true*.\n          1. Else, let _fullUnicode_ be *false*.\n          1. Return CreateRegExpStringIterator(_matcher_, _S_, _global_, _fullUnicode_).\n        ",
  "ForStatement[1,1].HasCallInTailPosition" : "\n        1. Return HasCallInTailPosition of |Statement| with argument _call_.\n      ",
  "OrdinaryObjectCreate" : "\n        1. Let _internalSlotsList_ be ¬´ [[Prototype]], [[Extensible]] ¬ª.\n        1. If _additionalInternalSlotsList_ is present, set _internalSlotsList_ to the list-concatenation of _internalSlotsList_ and _additionalInternalSlotsList_.\n        1. Let _O_ be MakeBasicObject(_internalSlotsList_).\n        1. Set _O_.[[Prototype]] to _proto_.\n        1. Return _O_.\n      ",
  "GroupSpecifiersThatMatch" : "\n          1. Let _name_ be the CapturingGroupName of _thisGroupName_.\n          1. Let _pattern_ be the |Pattern| containing _thisGroupName_.\n          1. Let _result_ be a new empty List.\n          1. For each |GroupSpecifier| _gs_ that _pattern_ contains, do\n            1. If the CapturingGroupName of _gs_ is _name_, then\n              1. Append _gs_ to _result_.\n          1. Return _result_.\n        ",
  "ExportDeclaration[2,0].ExportedNames" : "\n          1. Return the BoundNames of |VariableStatement|.\n        ",
  "CharacterRange" : "\n            1. Assert: _A_ and _B_ each contain exactly one character.\n            1. Let _a_ be the one character in CharSet _A_.\n            1. Let _b_ be the one character in CharSet _B_.\n            1. Let _i_ be the character value of character _a_.\n            1. Let _j_ be the character value of character _b_.\n            1. Assert: _i_ ‚â§ _j_.\n            1. Return the CharSet containing all characters with a character value in the inclusive interval from _i_ to _j_.\n          ",
  "ForStatement[0,4].VarDeclaredNames" : "\n        1. Return the VarDeclaredNames of |Statement|.\n      ",
  "INTRINSICS.yet:`Promise.allSettled`ResolveElementFunction" : "\n            1. Let _F_ be the active function object.\n            1. Let _alreadyCalled_ be _F_.[[AlreadyCalled]].\n            1. If _alreadyCalled_.[[Value]] is *true*, return *undefined*.\n            1. Set _alreadyCalled_.[[Value]] to *true*.\n            1. Let _index_ be _F_.[[Index]].\n            1. Let _values_ be _F_.[[Values]].\n            1. Let _promiseCapability_ be _F_.[[Capability]].\n            1. Let _remainingElementsCount_ be _F_.[[RemainingElements]].\n            1. Let _obj_ be OrdinaryObjectCreate(%Object.prototype%).\n            1. Perform ! CreateDataPropertyOrThrow(_obj_, *\"status\"*, *\"fulfilled\"*).\n            1. Perform ! CreateDataPropertyOrThrow(_obj_, *\"value\"*, _x_).\n            1. Set _values_[_index_] to _obj_.\n            1. Set _remainingElementsCount_.[[Value]] to _remainingElementsCount_.[[Value]] - 1.\n            1. If _remainingElementsCount_.[[Value]] = 0, then\n              1. Let _valuesArray_ be CreateArrayFromList(_values_).\n              1. Return ? Call(_promiseCapability_.[[Resolve]], *undefined*, ¬´ _valuesArray_ ¬ª).\n            1. Return *undefined*.\n          ",
  "BindingIdentifier[0,0].BindingInitialization" : "\n        1. Let _name_ be StringValue of |Identifier|.\n        1. Return ? InitializeBoundName(_name_, _value_, _environment_).\n      ",
  "RelationalExpression[3,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "NonemptyClassRanges[1,0].CompileToCharSet" : "\n          1. Let _A_ be CompileToCharSet of |ClassAtom| with argument _rer_.\n          1. Let _B_ be CompileToCharSet of |NonemptyClassRangesNoDash| with argument _rer_.\n          1. Return the union of CharSets _A_ and _B_.\n        ",
  "CallExpression[4,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "PrimaryExpression[7,0].IsIdentifierRef" : "\n        1. Return *false*.\n      ",
  "ForStatement[0,3].ContainsUndefinedBreakTarget" : "\n        1. Return ContainsUndefinedBreakTarget of |Statement| with argument _labelSet_.\n      ",
  "ForStatement[0,7].ForLoopEvaluation" : "\n          1. If the first |Expression| is present, then\n            1. Let _exprRef_ be ? Evaluation of the first |Expression|.\n            1. Perform ? GetValue(_exprRef_).\n          1. If the second |Expression| is present, let _test_ be the second |Expression|; otherwise, let _test_ be ~empty~.\n          1. If the third |Expression| is present, let _increment_ be the third |Expression|; otherwise, let _increment_ be ~empty~.\n          1. Return ? ForBodyEvaluation(_test_, _increment_, |Statement|, ¬´ ¬ª, _labelSet_).\n        ",
  "PrimaryExpression[4,0].IsIdentifierRef" : "\n        1. Return *false*.\n      ",
  "IsArray" : "\n        1. If _argument_ is not an Object, return *false*.\n        1. If _argument_ is an Array exotic object, return *true*.\n        1. If _argument_ is a Proxy exotic object, then\n          1. Perform ? ValidateNonRevokedProxy(_argument_).\n          1. Let _proxyTarget_ be _argument_.[[ProxyTarget]].\n          1. Return ? IsArray(_proxyTarget_).\n        1. Return *false*.\n      ",
  "ForStatement[1,2].HasCallInTailPosition" : "\n        1. Return HasCallInTailPosition of |Statement| with argument _call_.\n      ",
  "AsyncMethod[0,0].ComputedPropertyContains" : "\n        1. Return the result of ComputedPropertyContains of |ClassElementName| with argument _symbol_.\n      ",
  "ForStatement[1,2].ForLoopEvaluation" : "\n          1. Perform ? Evaluation of |VariableDeclarationList|.\n          1. If the first |Expression| is present, let _test_ be the first |Expression|; otherwise, let _test_ be ~empty~.\n          1. If the second |Expression| is present, let _increment_ be the second |Expression|; otherwise, let _increment_ be ~empty~.\n          1. Return ? ForBodyEvaluation(_test_, _increment_, |Statement|, ¬´ ¬ª, _labelSet_).\n        ",
  "CaseClause[0,1].ContainsUndefinedBreakTarget" : "\n        1. If the |StatementList| is present, return ContainsUndefinedBreakTarget of |StatementList| with argument _labelSet_.\n        1. Return *false*.\n      ",
  "LabelledItem[0,0].LexicallyScopedDeclarations" : "\n        1. Return a new empty List.\n      ",
  "INTRINSICS.get ArrayBuffer.prototype.detached" : "\n          1. Let _O_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_O_, [[ArrayBufferData]]).\n          1. If IsSharedArrayBuffer(_O_) is *true*, throw a *TypeError* exception.\n          1. Return IsDetachedBuffer(_O_).\n        ",
  "Statement[11,0].VarDeclaredNames" : "\n        1. Return a new empty List.\n      ",
  "BindingRestElement[0,0].ContainsExpression" : "\n        1. Return *false*.\n      ",
  "PrivateIdentifier[0,0].StringValue" : "\n        1. Return the string-concatenation of 0x0023 (NUMBER SIGN) and the StringValue of |IdentifierName|.\n      ",
  "PrivateFieldAdd" : "\n        1. If the host is a web browser, then\n          1. Perform ? HostEnsureCanAddPrivateElement(_O_).\n        1. Let _entry_ be PrivateElementFind(_O_, _P_).\n        1. If _entry_ is not ~empty~, throw a *TypeError* exception.\n        1. Append PrivateElement { [[Key]]: _P_, [[Kind]]: ~field~, [[Value]]: _value_ } to _O_.[[PrivateElements]].\n        1. Return ~unused~.\n      ",
  "CreateRegExpStringIterator" : "\n          1. Let _closure_ be a new Abstract Closure with no parameters that captures _R_, _S_, _global_, and _fullUnicode_ and performs the following steps when called:\n            1. Repeat,\n              1. Let _match_ be ? RegExpExec(_R_, _S_).\n              1. If _match_ is *null*, return *undefined*.\n              1. If _global_ is *false*, then\n                1. Perform ? GeneratorYield(CreateIterResultObject(_match_, *false*)).\n                1. Return *undefined*.\n              1. Let _matchStr_ be ? ToString(? Get(_match_, *\"0\"*)).\n              1. If _matchStr_ is the empty String, then\n                1. Let _thisIndex_ be ‚Ñù(? ToLength(? Get(_R_, *\"lastIndex\"*))).\n                1. Let _nextIndex_ be AdvanceStringIndex(_S_, _thisIndex_, _fullUnicode_).\n                1. Perform ? Set(_R_, *\"lastIndex\"*, ùîΩ(_nextIndex_), *true*).\n              1. Perform ? GeneratorYield(CreateIterResultObject(_match_, *false*)).\n          1. Return CreateIteratorFromClosure(_closure_, *\"%RegExpStringIteratorPrototype%\"*, %RegExpStringIteratorPrototype%).\n        ",
  "ClassAtomNoDash[0,0].CompileToCharSet" : "\n          1. Return the CharSet containing the character matched by |SourceCharacter|.\n        ",
  "MemberExpression[5,0].IsIdentifierRef" : "\n        1. Return *false*.\n      ",
  "NamedExports[0,0].ExportEntriesForModule" : "\n          1. Return a new empty List.\n        ",
  "AssignmentExpression[4,0].Evaluation" : "\n        1. If |LeftHandSideExpression| is neither an |ObjectLiteral| nor an |ArrayLiteral|, then\n          1. Let _lref_ be ? Evaluation of |LeftHandSideExpression|.\n          1. If IsAnonymousFunctionDefinition(|AssignmentExpression|) and IsIdentifierRef of |LeftHandSideExpression| are both *true*, then\n            1. Let _rval_ be ? NamedEvaluation of |AssignmentExpression| with argument _lref_.[[ReferencedName]].\n          1. Else,\n            1. Let _rref_ be ? Evaluation of |AssignmentExpression|.\n            1. Let _rval_ be ? GetValue(_rref_).\n          1. [id=\"step-assignmentexpression-evaluation-simple-putvalue\"] Perform ? PutValue(_lref_, _rval_).\n          1. Return _rval_.\n        1. Let _assignmentPattern_ be the |AssignmentPattern| that is covered by |LeftHandSideExpression|.\n        1. Let _rref_ be ? Evaluation of |AssignmentExpression|.\n        1. Let _rval_ be ? GetValue(_rref_).\n        1. Perform ? DestructuringAssignmentEvaluation of _assignmentPattern_ with argument _rval_.\n        1. Return _rval_.\n      ",
  "INTRINSICS.TypedArray.prototype.join" : "\n          1. Let _O_ be the *this* value.\n          1. Let _taRecord_ be ? ValidateTypedArray(_O_, ~seq-cst~).\n          1. Let _len_ be TypedArrayLength(_taRecord_).\n          1. If _separator_ is *undefined*, let _sep_ be *\",\"*.\n          1. Else, let _sep_ be ? ToString(_separator_).\n          1. Let _R_ be the empty String.\n          1. Let _k_ be 0.\n          1. Repeat, while _k_ < _len_,\n            1. If _k_ > 0, set _R_ to the string-concatenation of _R_ and _sep_.\n            1. Let _element_ be ! Get(_O_, ! ToString(ùîΩ(_k_))).\n            1. If _element_ is *undefined*, let _next_ be the empty String; otherwise, let _next_ be ! ToString(_element_).\n            1. Set _R_ to the string-concatenation of _R_ and _next_.\n            1. Set _k_ to _k_ + 1.\n          1. Return _R_.\n        ",
  "NonemptyClassRangesNoDash[2,0].CompileToCharSet" : "\n          1. Let _A_ be CompileToCharSet of |ClassAtomNoDash| with argument _rer_.\n          1. Let _B_ be CompileToCharSet of |ClassAtom| with argument _rer_.\n          1. Let _C_ be CompileToCharSet of |ClassContents| with argument _rer_.\n          1. Let _D_ be CharacterRange(_A_, _B_).\n          1. Return the union of _D_ and _C_.\n        ",
  "INTRINSICS.get TypedArray[@@species]" : "\n          1. Return the *this* value.\n        ",
  "SetDefaultGlobalBindings" : "\n        1. Let _global_ be _realmRec_.[[GlobalObject]].\n        1. For each property of the Global Object specified in clause <emu-xref href=\"#sec-global-object\"></emu-xref>, do\n          1. Let _name_ be the String value of the property name.\n          1. Let _desc_ be the fully populated data Property Descriptor for the property, containing the specified attributes for the property. For properties listed in <emu-xref href=\"#sec-function-properties-of-the-global-object\"></emu-xref>, <emu-xref href=\"#sec-constructor-properties-of-the-global-object\"></emu-xref>, or <emu-xref href=\"#sec-other-properties-of-the-global-object\"></emu-xref> the value of the [[Value]] attribute is the corresponding intrinsic object from _realmRec_.\n          1. Perform ? DefinePropertyOrThrow(_global_, _name_, _desc_).\n        1. Return _global_.\n      ",
  "StringPaddingBuiltinsImpl" : "\n            1. Let _S_ be ? ToString(_O_).\n            1. Let _intMaxLength_ be ‚Ñù(? ToLength(_maxLength_)).\n            1. Let _stringLength_ be the length of _S_.\n            1. If _intMaxLength_ ‚â§ _stringLength_, return _S_.\n            1. If _fillString_ is *undefined*, set _fillString_ to the String value consisting solely of the code unit 0x0020 (SPACE).\n            1. Else, set _fillString_ to ? ToString(_fillString_).\n            1. Return StringPad(_S_, _intMaxLength_, _fillString_, _placement_).\n          ",
  "INTRINSICS.SharedArrayBuffer" : "\n          1. If NewTarget is *undefined*, throw a *TypeError* exception.\n          1. Let _byteLength_ be ? ToIndex(_length_).\n          1. Let _requestedMaxByteLength_ be ? GetArrayBufferMaxByteLengthOption(_options_).\n          1. Return ? AllocateSharedArrayBuffer(NewTarget, _byteLength_, _requestedMaxByteLength_).\n        ",
  "ExportDeclaration[0,0].ExportedBindings" : "\n          1. Return a new empty List.\n        ",
  "OptionalChain[4,0].ChainEvaluation" : "\n          1. Let _fieldNameString_ be the StringValue of |PrivateIdentifier|.\n          1. Return MakePrivateReference(_baseValue_, _fieldNameString_).\n        ",
  "SuperProperty[1,0].Evaluation" : "\n          1. Let _env_ be GetThisEnvironment().\n          1. Let _actualThis_ be ? _env_.GetThisBinding().\n          1. Let _propertyKey_ be StringValue of |IdentifierName|.\n          1. If the source text matched by this |SuperProperty| is strict mode code, let _strict_ be *true*; else let _strict_ be *false*.\n          1. Return ? MakeSuperPropertyReference(_actualThis_, _propertyKey_, _strict_).\n        ",
  "INTRINSICS.Array.prototype.slice" : "\n          1. Let _O_ be ? ToObject(*this* value).\n          1. Let _len_ be ? LengthOfArrayLike(_O_).\n          1. Let _relativeStart_ be ? ToIntegerOrInfinity(_start_).\n          1. If _relativeStart_ = -‚àû, let _k_ be 0.\n          1. Else if _relativeStart_ < 0, let _k_ be max(_len_ + _relativeStart_, 0).\n          1. Else, let _k_ be min(_relativeStart_, _len_).\n          1. If _end_ is *undefined*, let _relativeEnd_ be _len_; else let _relativeEnd_ be ? ToIntegerOrInfinity(_end_).\n          1. If _relativeEnd_ = -‚àû, let _final_ be 0.\n          1. Else if _relativeEnd_ < 0, let _final_ be max(_len_ + _relativeEnd_, 0).\n          1. Else, let _final_ be min(_relativeEnd_, _len_).\n          1. Let _count_ be max(_final_ - _k_, 0).\n          1. Let _A_ be ? ArraySpeciesCreate(_O_, _count_).\n          1. Let _n_ be 0.\n          1. Repeat, while _k_ < _final_,\n            1. Let _Pk_ be ! ToString(ùîΩ(_k_)).\n            1. Let _kPresent_ be ? HasProperty(_O_, _Pk_).\n            1. If _kPresent_ is *true*, then\n              1. Let _kValue_ be ? Get(_O_, _Pk_).\n              1. Perform ? CreateDataPropertyOrThrow(_A_, ! ToString(ùîΩ(_n_)), _kValue_).\n            1. Set _k_ to _k_ + 1.\n            1. Set _n_ to _n_ + 1.\n          1. [id=\"step-array-proto-slice-set-length\"] Perform ? Set(_A_, *\"length\"*, ùîΩ(_n_), *true*).\n          1. Return _A_.\n        ",
  "DefaultClause[0,1].LexicallyScopedDeclarations" : "\n        1. If the |StatementList| is present, return the LexicallyScopedDeclarations of |StatementList|.\n        1. Return a new empty List.\n      ",
  "HasOwnProperty" : "\n        1. Let _desc_ be ? <emu-meta effects=\"user-code\">_O_.[[GetOwnProperty]]</emu-meta>(_P_).\n        1. If _desc_ is *undefined*, return *false*.\n        1. Return *true*.\n      ",
  "PutValue" : "\n          1. If _V_ is not a Reference Record, throw a *ReferenceError* exception.\n          1. If IsUnresolvableReference(_V_) is *true*, then\n            1. If _V_.[[Strict]] is *true*, throw a *ReferenceError* exception.\n            1. Let _globalObj_ be GetGlobalObject().\n            1. Perform ? Set(_globalObj_, _V_.[[ReferencedName]], _W_, *false*).\n            1. Return ~unused~.\n          1. If IsPropertyReference(_V_) is *true*, then\n            1. [id=\"step-putvalue-toobject\"] Let _baseObj_ be ? ToObject(_V_.[[Base]]).\n            1. If IsPrivateReference(_V_) is *true*, then\n              1. Return ? PrivateSet(_baseObj_, _V_.[[ReferencedName]], _W_).\n            1. Let _succeeded_ be ? <emu-meta effects=\"user-code\">_baseObj_.[[Set]]</emu-meta>(_V_.[[ReferencedName]], _W_, GetThisValue(_V_)).\n            1. If _succeeded_ is *false* and _V_.[[Strict]] is *true*, throw a *TypeError* exception.\n            1. Return ~unused~.\n          1. Else,\n            1. Let _base_ be _V_.[[Base]].\n            1. Assert: _base_ is an Environment Record.\n            1. Return ? <emu-meta effects=\"user-code\">_base_.SetMutableBinding</emu-meta>(_V_.[[ReferencedName]], _W_, _V_.[[Strict]]) (see <emu-xref href=\"#sec-environment-records\"></emu-xref>).\n        ",
  "GetValue" : "\n          1. If _V_ is not a Reference Record, return _V_.\n          1. If IsUnresolvableReference(_V_) is *true*, throw a *ReferenceError* exception.\n          1. If IsPropertyReference(_V_) is *true*, then\n            1. [id=\"step-getvalue-toobject\"] Let _baseObj_ be ? ToObject(_V_.[[Base]]).\n            1. If IsPrivateReference(_V_) is *true*, then\n              1. Return ? PrivateGet(_baseObj_, _V_.[[ReferencedName]]).\n            1. Return ? <emu-meta effects=\"user-code\">_baseObj_.[[Get]]</emu-meta>(_V_.[[ReferencedName]], GetThisValue(_V_)).\n          1. Else,\n            1. Let _base_ be _V_.[[Base]].\n            1. Assert: _base_ is an Environment Record.\n            1. Return ? <emu-meta effects=\"user-code\">_base_.GetBindingValue</emu-meta>(_V_.[[ReferencedName]], _V_.[[Strict]]) (see <emu-xref href=\"#sec-environment-records\"></emu-xref>).\n        ",
  "LabelledItem[0,0].LexicallyDeclaredNames" : "\n        1. Return a new empty List.\n      ",
  "IfStatement[0,0].VarDeclaredNames" : "\n        1. Let _names1_ be VarDeclaredNames of the first |Statement|.\n        1. Let _names2_ be VarDeclaredNames of the second |Statement|.\n        1. Return the list-concatenation of _names1_ and _names2_.\n      ",
  "Expression[0,0].HasCallInTailPosition" : "\n        1. Return HasCallInTailPosition of |AssignmentExpression| with argument _call_.\n      ",
  "Record[DeclarativeEnvironmentRecord].GetBindingValue" : "\n            1. Assert: _envRec_ has a binding for _N_.\n            1. If the binding for _N_ in _envRec_ is an uninitialized binding, throw a *ReferenceError* exception.\n            1. Return the value currently bound to _N_ in _envRec_.\n          ",
  "StatementListItem[0,0].LexicallyScopedDeclarations" : "\n        1. If |Statement| is <emu-grammar>Statement : LabelledStatement</emu-grammar>, return LexicallyScopedDeclarations of |LabelledStatement|.\n        1. Return a new empty List.\n      ",
  "CreateNonEnumerableDataPropertyOrThrow" : "\n        1. Assert: _O_ is an ordinary, extensible object with no non-configurable properties.\n        1. Let _newDesc_ be the PropertyDescriptor { [[Value]]: _V_, [[Writable]]: *true*, [[Enumerable]]: *false*, [[Configurable]]: *true* }.\n        1. Perform ! DefinePropertyOrThrow(_O_, _P_, _newDesc_).\n        1. Return ~unused~.\n      ",
  "ArrayAssignmentPattern[2,0].DestructuringAssignmentEvaluation" : "\n          1. Let _iteratorRecord_ be ? GetIterator(_value_, ~sync~).\n          1. Let _status_ be Completion(IteratorDestructuringAssignmentEvaluation of |AssignmentElementList| with argument _iteratorRecord_).\n          1. If _status_ is an abrupt completion, then\n            1. If _iteratorRecord_.[[Done]] is *false*, return ? IteratorClose(_iteratorRecord_, _status_).\n            1. Return ? _status_.\n          1. If |Elision| is present, then\n            1. Set _status_ to Completion(IteratorDestructuringAssignmentEvaluation of |Elision| with argument _iteratorRecord_).\n            1. If _status_ is an abrupt completion, then\n              1. Assert: _iteratorRecord_.[[Done]] is *true*.\n              1. Return ? _status_.\n          1. If |AssignmentRestElement| is present, then\n            1. Set _status_ to Completion(IteratorDestructuringAssignmentEvaluation of |AssignmentRestElement| with argument _iteratorRecord_).\n          1. If _iteratorRecord_.[[Done]] is *false*, return ? IteratorClose(_iteratorRecord_, _status_).\n          1. Return ? _status_.\n        ",
  "RegExpIdentifierName[1,0].RegExpIdentifierCodePoints" : "\n          1. Let _cps_ be RegExpIdentifierCodePoints of the derived |RegExpIdentifierName|.\n          1. Let _cp_ be RegExpIdentifierCodePoint of |RegExpIdentifierPart|.\n          1. Return the list-concatenation of _cps_ and ¬´ _cp_ ¬ª.\n        ",
  "MemberExpression[1,0].IsIdentifierRef" : "\n        1. Return *false*.\n      ",
  "UpdateExpression[4,0].Evaluation" : "\n          1. Let _expr_ be ? Evaluation of |UnaryExpression|.\n          1. Let _oldValue_ be ? ToNumeric(? GetValue(_expr_)).\n          1. If _oldValue_ is a Number, then\n            1. Let _newValue_ be Number::subtract(_oldValue_, *1*<sub>ùîΩ</sub>).\n          1. Else,\n            1. Assert: _oldValue_ is a BigInt.\n            1. Let _newValue_ be BigInt::subtract(_oldValue_, *1*<sub>‚Ñ§</sub>).\n          1. Perform ? PutValue(_expr_, _newValue_).\n          1. Return _newValue_.\n        ",
  "INTRINSICS.DataView.prototype.getUint32" : "\n          1. Let _v_ be the *this* value.\n          1. If _littleEndian_ is not present, set _littleEndian_ to *false*.\n          1. Return ? GetViewValue(_v_, _byteOffset_, _littleEndian_, ~uint32~).\n        ",
  "MemberExpression[4,0].IsIdentifierRef" : "\n        1. Return *false*.\n      ",
  "Atom[1,0].CompileAtom" : "\n          1. Let _A_ be AllCharacters(_rer_).\n          1. If _rer_.[[DotAll]] is not *true*, then\n            1. Remove from _A_ all characters corresponding to a code point on the right-hand side of the |LineTerminator| production.\n          1. Return CharacterSetMatcher(_rer_, _A_, *false*, _direction_).\n        ",
  "ClassExpression[0,1].IsFunctionDefinition" : "\n        1. Return *true*.\n      ",
  "INTRINSICS.Date.prototype.setMonth" : "\n          1. Let _dateObject_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_dateObject_, [[DateValue]]).\n          1. Let _t_ be _dateObject_.[[DateValue]].\n          1. Let _m_ be ? ToNumber(_month_).\n          1. If _date_ is present, let _dt_ be ? ToNumber(_date_).\n          1. If _t_ is *NaN*, return *NaN*.\n          1. Set _t_ to LocalTime(_t_).\n          1. If _date_ is not present, let _dt_ be DateFromTime(_t_).\n          1. Let _newDate_ be MakeDate(MakeDay(YearFromTime(_t_), _m_, _dt_), TimeWithinDay(_t_)).\n          1. Let _u_ be TimeClip(UTC(_newDate_)).\n          1. Set _dateObject_.[[DateValue]] to _u_.\n          1. Return _u_.\n        ",
  "Expression[1,0].AssignmentTargetType" : "\n        1. Return ~invalid~.\n      ",
  "ModuleItem[2,0].ImportEntries" : "\n          1. Return a new empty List.\n        ",
  "ShiftExpression[2,0].Evaluation" : "\n          1. Return ? EvaluateStringOrNumericBinaryExpression(|ShiftExpression|, `>>`, |AdditiveExpression|).\n        ",
  "INTRINSICS.Promise.withResolvers" : "\n          1. Let _C_ be the *this* value.\n          1. Let _promiseCapability_ be ? NewPromiseCapability(_C_).\n          1. Let _obj_ be OrdinaryObjectCreate(%Object.prototype%).\n          1. Perform ! CreateDataPropertyOrThrow(_obj_, *\"promise\"*, _promiseCapability_.[[Promise]]).\n          1. Perform ! CreateDataPropertyOrThrow(_obj_, *\"resolve\"*, _promiseCapability_.[[Resolve]]).\n          1. Perform ! CreateDataPropertyOrThrow(_obj_, *\"reject\"*, _promiseCapability_.[[Reject]]).\n          1. Return _obj_.\n        ",
  "NewObjectEnvironment" : "\n          1. Let _env_ be a new Object Environment Record.\n          1. Set _env_.[[BindingObject]] to _O_.\n          1. Set _env_.[[IsWithEnvironment]] to _W_.\n          1. Set _env_.[[OuterEnv]] to _E_.\n          1. Return _env_.\n        ",
  "SubstitutionTemplate[0,0].TemplateStrings" : "\n          1. Let _head_ be ¬´ TemplateString(|TemplateHead|, _raw_) ¬ª.\n          1. Let _tail_ be TemplateStrings of |TemplateSpans| with argument _raw_.\n          1. Return the list-concatenation of _head_ and _tail_.\n        ",
  "PrimaryExpression[3,0].AssignmentTargetType" : "\n        1. Return ~invalid~.\n      ",
  "INTRINSICS.Function.prototype.call" : "\n          1. Let _func_ be the *this* value.\n          1. If IsCallable(_func_) is *false*, throw a *TypeError* exception.\n          1. Perform PrepareForTailCall().\n          1. [id=\"step-function-proto-call-call\"] Return ? Call(_func_, _thisArg_, _args_).\n        ",
  "ClassSubtraction[1,0].CompileToCharSet" : "\n          1. Let _A_ be CompileToCharSet of the |ClassSubtraction| with argument _rer_.\n          1. Let _B_ be CompileToCharSet of the |ClassSetOperand| with argument _rer_.\n          1. Return the CharSet containing the CharSetElements of _A_ which are not also CharSetElements of _B_.\n        ",
  "PrimaryExpression[5,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "TemplateString" : "\n          1. If _raw_ is *true*, then\n            1. Let _string_ be the TRV of _templateToken_.\n          1. Else,\n            1. Let _string_ be the TV of _templateToken_.\n          1. Return _string_.\n        ",
  "ClassContents[0,0].MayContainStrings" : "\n          1. Return *false*.\n        ",
  "AssignmentExpression[8,0].Evaluation" : "\n        1. Let _lref_ be ? Evaluation of |LeftHandSideExpression|.\n        1. [id=\"step-assignmentexpression-evaluation-lgcl-nullish-getvalue\"] Let _lval_ be ? GetValue(_lref_).\n        1. If _lval_ is neither *undefined* nor *null*, return _lval_.\n        1. If IsAnonymousFunctionDefinition(|AssignmentExpression|) is *true* and IsIdentifierRef of |LeftHandSideExpression| is *true*, then\n          1. Let _rval_ be ? NamedEvaluation of |AssignmentExpression| with argument _lref_.[[ReferencedName]].\n        1. Else,\n          1. Let _rref_ be ? Evaluation of |AssignmentExpression|.\n          1. Let _rval_ be ? GetValue(_rref_).\n        1. [id=\"step-assignmentexpression-evaluation-lgcl-nullish-putvalue\"] Perform ? PutValue(_lref_, _rval_).\n        1. Return _rval_.\n      ",
  "AssignmentElement[0,1].IteratorDestructuringAssignmentEvaluation" : "\n          1. If |DestructuringAssignmentTarget| is neither an |ObjectLiteral| nor an |ArrayLiteral|, then\n            1. Let _lref_ be ? Evaluation of |DestructuringAssignmentTarget|.\n          1. Let _value_ be *undefined*.\n          1. If _iteratorRecord_.[[Done]] is *false*, then\n            1. Let _next_ be ? IteratorStepValue(_iteratorRecord_).\n            1. If _next_ is not ~done~, then\n              1. Set _value_ to _next_.\n          1. If |Initializer| is present and _value_ is *undefined*, then\n            1. If IsAnonymousFunctionDefinition(|Initializer|) is *true* and IsIdentifierRef of |DestructuringAssignmentTarget| is *true*, then\n              1. Let _v_ be ? NamedEvaluation of |Initializer| with argument _lref_.[[ReferencedName]].\n            1. Else,\n              1. Let _defaultValue_ be ? Evaluation of |Initializer|.\n              1. Let _v_ be ? GetValue(_defaultValue_).\n          1. Else,\n            1. Let _v_ be _value_.\n          1. If |DestructuringAssignmentTarget| is either an |ObjectLiteral| or an |ArrayLiteral|, then\n            1. Let _nestedAssignmentPattern_ be the |AssignmentPattern| that is covered by |DestructuringAssignmentTarget|.\n            1. Return ? DestructuringAssignmentEvaluation of _nestedAssignmentPattern_ with argument _v_.\n          1. Return ? PutValue(_lref_, _v_).\n        ",
  "INTRINSICS.isNaN" : "\n        1. Let _num_ be ? ToNumber(_number_).\n        1. If _num_ is *NaN*, return *true*.\n        1. Otherwise, return *false*.\n      ",
  "Record[DeclarativeEnvironmentRecord].HasBinding" : "\n            1. If _envRec_ has a binding for _N_, return *true*.\n            1. Return *false*.\n          ",
  "UTF16EncodeCodePoint" : "\n        1. Assert: 0 ‚â§ _cp_ ‚â§ 0x10FFFF.\n        1. If _cp_ ‚â§ 0xFFFF, return the String value consisting of the code unit whose numeric value is _cp_.\n        1. Let _cu1_ be the code unit whose numeric value is floor((_cp_ - 0x10000) / 0x400) + 0xD800.\n        1. Let _cu2_ be the code unit whose numeric value is ((_cp_ - 0x10000) modulo 0x400) + 0xDC00.\n        1. Return the string-concatenation of _cu1_ and _cu2_.\n      ",
  "HexTrailSurrogate[0,0].CharacterValue" : "\n          1. Return the MV of |Hex4Digits|.\n        ",
  "ForStatement[0,5].HasCallInTailPosition" : "\n        1. Return HasCallInTailPosition of |Statement| with argument _call_.\n      ",
  "INTRINSICS.GeneratorFunction.prototype.prototype.return" : "\n          1. Let _g_ be the *this* value.\n          1. Let _C_ be Completion Record { [[Type]]: ~return~, [[Value]]: _value_, [[Target]]: ~empty~ }.\n          1. Return ? GeneratorResumeAbrupt(_g_, _C_, ~empty~).\n        ",
  "PerformPromiseAllSettled" : "\n            1. Let _values_ be a new empty List.\n            1. Let _remainingElementsCount_ be the Record { [[Value]]: 1 }.\n            1. Let _index_ be 0.\n            1. Repeat,\n              1. Let _next_ be ? IteratorStepValue(_iteratorRecord_).\n              1. If _next_ is ~done~, then\n                1. Set _remainingElementsCount_.[[Value]] to _remainingElementsCount_.[[Value]] - 1.\n                1. If _remainingElementsCount_.[[Value]] = 0, then\n                  1. Let _valuesArray_ be CreateArrayFromList(_values_).\n                  1. Perform ? Call(_resultCapability_.[[Resolve]], *undefined*, ¬´ _valuesArray_ ¬ª).\n                1. Return _resultCapability_.[[Promise]].\n              1. Append *undefined* to _values_.\n              1. Let _nextPromise_ be ? Call(_promiseResolve_, _constructor_, ¬´ _next_ ¬ª).\n              1. Let _stepsFulfilled_ be the algorithm steps defined in <emu-xref href=\"#sec-promise.allsettled-resolve-element-functions\" title></emu-xref>.\n              1. Let _lengthFulfilled_ be the number of non-optional parameters of the function definition in <emu-xref href=\"#sec-promise.allsettled-resolve-element-functions\" title></emu-xref>.\n              1. Let _onFulfilled_ be CreateBuiltinFunction(_stepsFulfilled_, _lengthFulfilled_, *\"\"*, ¬´ [[AlreadyCalled]], [[Index]], [[Values]], [[Capability]], [[RemainingElements]] ¬ª).\n              1. Let _alreadyCalled_ be the Record { [[Value]]: *false* }.\n              1. Set _onFulfilled_.[[AlreadyCalled]] to _alreadyCalled_.\n              1. Set _onFulfilled_.[[Index]] to _index_.\n              1. Set _onFulfilled_.[[Values]] to _values_.\n              1. Set _onFulfilled_.[[Capability]] to _resultCapability_.\n              1. Set _onFulfilled_.[[RemainingElements]] to _remainingElementsCount_.\n              1. Let _stepsRejected_ be the algorithm steps defined in <emu-xref href=\"#sec-promise.allsettled-reject-element-functions\" title></emu-xref>.\n              1. Let _lengthRejected_ be the number of non-optional parameters of the function definition in <emu-xref href=\"#sec-promise.allsettled-reject-element-functions\" title></emu-xref>.\n              1. Let _onRejected_ be CreateBuiltinFunction(_stepsRejected_, _lengthRejected_, *\"\"*, ¬´ [[AlreadyCalled]], [[Index]], [[Values]], [[Capability]], [[RemainingElements]] ¬ª).\n              1. Set _onRejected_.[[AlreadyCalled]] to _alreadyCalled_.\n              1. Set _onRejected_.[[Index]] to _index_.\n              1. Set _onRejected_.[[Values]] to _values_.\n              1. Set _onRejected_.[[Capability]] to _resultCapability_.\n              1. Set _onRejected_.[[RemainingElements]] to _remainingElementsCount_.\n              1. Set _remainingElementsCount_.[[Value]] to _remainingElementsCount_.[[Value]] + 1.\n              1. Perform ? Invoke(_nextPromise_, *\"then\"*, ¬´ _onFulfilled_, _onRejected_ ¬ª).\n              1. Set _index_ to _index_ + 1.\n          ",
  "BigInt::bitwiseOR" : "\n            1. Return BigIntBitwiseOp(`|`, _x_, _y_).\n          ",
  "BreakableStatement[1,0].LabelledEvaluation" : "\n        1. Let _stmtResult_ be Completion(Evaluation of |SwitchStatement|).\n        1. If _stmtResult_ is a break completion, then\n          1. If _stmtResult_.[[Target]] is ~empty~, then\n            1. If _stmtResult_.[[Value]] is ~empty~, set _stmtResult_ to NormalCompletion(*undefined*).\n            1. Else, set _stmtResult_ to NormalCompletion(_stmtResult_.[[Value]]).\n        1. Return ? _stmtResult_.\n      ",
  "__FLAT_LIST__" : null,
  "TryStatement[0,0].VarScopedDeclarations" : "\n        1. Let _declarations1_ be VarScopedDeclarations of |Block|.\n        1. Let _declarations2_ be VarScopedDeclarations of |Catch|.\n        1. Return the list-concatenation of _declarations1_ and _declarations2_.\n      ",
  "ClassStringDisjunctionContents[1,0].MayContainStrings" : "\n          1. If MayContainStrings of the |ClassString| is *true*, return *true*.\n          1. Return MayContainStrings of the |ClassStringDisjunctionContents|.\n        ",
  "GetThisValue" : "\n          1. Assert: IsPropertyReference(_V_) is *true*.\n          1. If IsSuperReference(_V_) is *true*, return _V_.[[ThisValue]]; otherwise return _V_.[[Base]].\n        ",
  "AsyncMethod[0,0].HasDirectSuper" : "\n        1. If |UniqueFormalParameters| Contains |SuperCall| is *true*, return *true*.\n        1. Return |AsyncFunctionBody| Contains |SuperCall|.\n      ",
  "ForStatement[0,0].ContainsUndefinedBreakTarget" : "\n        1. Return ContainsUndefinedBreakTarget of |Statement| with argument _labelSet_.\n      ",
  "OrdinaryDelete" : "\n          1. Let _desc_ be ? <emu-meta effects=\"user-code\">_O_.[[GetOwnProperty]]</emu-meta>(_P_).\n          1. If _desc_ is *undefined*, return *true*.\n          1. If _desc_.[[Configurable]] is *true*, then\n            1. Remove the own property with name _P_ from _O_.\n            1. Return *true*.\n          1. Return *false*.\n        ",
  "OptionalChain[4,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "FunctionExpression[0,1].IsFunctionDefinition" : "\n        1. Return *true*.\n      ",
  "CaseBlock[0,0].ContainsUndefinedContinueTarget" : "\n        1. Return *false*.\n      ",
  "CompareArrayElements" : "\n            1. If _x_ and _y_ are both *undefined*, return *+0*<sub>ùîΩ</sub>.\n            1. If _x_ is *undefined*, return *1*<sub>ùîΩ</sub>.\n            1. If _y_ is *undefined*, return *-1*<sub>ùîΩ</sub>.\n            1. If _comparefn_ is not *undefined*, then\n              1. Let _v_ be ? ToNumber(? Call(_comparefn_, *undefined*, ¬´ _x_, _y_ ¬ª)).\n              1. If _v_ is *NaN*, return *+0*<sub>ùîΩ</sub>.\n              1. Return _v_.\n            1. [id=\"step-sortcompare-tostring-x\"] Let _xString_ be ? ToString(_x_).\n            1. [id=\"step-sortcompare-tostring-y\"] Let _yString_ be ? ToString(_y_).\n            1. Let _xSmaller_ be ! IsLessThan(_xString_, _yString_, *true*).\n            1. If _xSmaller_ is *true*, return *-1*<sub>ùîΩ</sub>.\n            1. Let _ySmaller_ be ! IsLessThan(_yString_, _xString_, *true*).\n            1. If _ySmaller_ is *true*, return *1*<sub>ùîΩ</sub>.\n            1. Return *+0*<sub>ùîΩ</sub>.\n          ",
  "INTRINSICS.Array.prototype.reduceRight" : "\n          1. Let _O_ be ? ToObject(*this* value).\n          1. Let _len_ be ? LengthOfArrayLike(_O_).\n          1. If IsCallable(_callbackfn_) is *false*, throw a *TypeError* exception.\n          1. If _len_ = 0 and _initialValue_ is not present, throw a *TypeError* exception.\n          1. Let _k_ be _len_ - 1.\n          1. Let _accumulator_ be *undefined*.\n          1. If _initialValue_ is present, then\n            1. Set _accumulator_ to _initialValue_.\n          1. Else,\n            1. Let _kPresent_ be *false*.\n            1. Repeat, while _kPresent_ is *false* and _k_ ‚â• 0,\n              1. Let _Pk_ be ! ToString(ùîΩ(_k_)).\n              1. Set _kPresent_ to ? HasProperty(_O_, _Pk_).\n              1. If _kPresent_ is *true*, then\n                1. Set _accumulator_ to ? Get(_O_, _Pk_).\n              1. Set _k_ to _k_ - 1.\n            1. If _kPresent_ is *false*, throw a *TypeError* exception.\n          1. Repeat, while _k_ ‚â• 0,\n            1. Let _Pk_ be ! ToString(ùîΩ(_k_)).\n            1. Let _kPresent_ be ? HasProperty(_O_, _Pk_).\n            1. If _kPresent_ is *true*, then\n              1. Let _kValue_ be ? Get(_O_, _Pk_).\n              1. Set _accumulator_ to ? Call(_callbackfn_, *undefined*, ¬´ _accumulator_, _kValue_, ùîΩ(_k_), _O_ ¬ª).\n            1. Set _k_ to _k_ - 1.\n          1. Return _accumulator_.\n        ",
  "CharacterClassEscape[1,0].MayContainStrings" : "\n          1. Return *false*.\n        ",
  "CaseBlock[0,0].LexicallyDeclaredNames" : "\n        1. Return a new empty List.\n      ",
  "TemplateSpans[1,0].Evaluation" : "\n          1. Let _head_ be ? Evaluation of |TemplateMiddleList|.\n          1. Let _tail_ be the TV of |TemplateTail| as defined in <emu-xref href=\"#sec-template-literal-lexical-components\"></emu-xref>.\n          1. Return the string-concatenation of _head_ and _tail_.\n        ",
  "INTRINSICS.WeakMap.prototype.set" : "\n          1. Let _M_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_M_, [[WeakMapData]]).\n          1. If CanBeHeldWeakly(_key_) is *false*, throw a *TypeError* exception.\n          1. For each Record { [[Key]], [[Value]] } _p_ of _M_.[[WeakMapData]], do\n            1. If _p_.[[Key]] is not ~empty~ and SameValue(_p_.[[Key]], _key_) is *true*, then\n              1. Set _p_.[[Value]] to _value_.\n              1. Return _M_.\n          1. Let _p_ be the Record { [[Key]]: _key_, [[Value]]: _value_ }.\n          1. Append _p_ to _M_.[[WeakMapData]].\n          1. Return _M_.\n        ",
  "AssignmentProperty[0,1].PropertyDestructuringAssignmentEvaluation" : "\n          1. Let _P_ be StringValue of |IdentifierReference|.\n          1. Let _lref_ be ? ResolveBinding(_P_).\n          1. Let _v_ be ? GetV(_value_, _P_).\n          1. If |Initializer| is present and _v_ is *undefined*, then\n            1. If IsAnonymousFunctionDefinition(|Initializer|) is *true*, then\n              1. Set _v_ to ? NamedEvaluation of |Initializer| with argument _P_.\n            1. Else,\n              1. Let _defaultValue_ be ? Evaluation of |Initializer|.\n              1. Set _v_ to ? GetValue(_defaultValue_).\n          1. Perform ? PutValue(_lref_, _v_).\n          1. Return ¬´ _P_ ¬ª.\n        ",
  "ExportDeclaration[2,0].LexicallyScopedDeclarations" : "\n        1. Return a new empty List.\n      ",
  "Record[ModuleNamespaceExoticObject].DefineOwnProperty" : "\n          1. If _P_ is a Symbol, return ! OrdinaryDefineOwnProperty(_O_, _P_, _Desc_).\n          1. Let _current_ be ? _O_.[[GetOwnProperty]](_P_).\n          1. If _current_ is *undefined*, return *false*.\n          1. If _Desc_ has a [[Configurable]] field and _Desc_.[[Configurable]] is *true*, return *false*.\n          1. If _Desc_ has an [[Enumerable]] field and _Desc_.[[Enumerable]] is *false*, return *false*.\n          1. If IsAccessorDescriptor(_Desc_) is *true*, return *false*.\n          1. If _Desc_ has a [[Writable]] field and _Desc_.[[Writable]] is *false*, return *false*.\n          1. If _Desc_ has a [[Value]] field, return SameValue(_Desc_.[[Value]], _current_.[[Value]]).\n          1. Return *true*.\n        ",
  "PrimaryExpression[3,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "BitwiseORExpression[1,0].IsFunctionDefinition" : "\n        1. Return *false*.\n      ",
  "AsyncArrowFunction[0,0].Contains" : "\n        1. If _symbol_ is not one of |NewTarget|, |SuperProperty|, |SuperCall|, `super`, or `this`, return *false*.\n        1. Return |AsyncConciseBody| Contains _symbol_.\n      ",
  "ParseHexOctet" : "\n          1. Let _len_ be the length of _string_.\n          1. Assert: _position_ + 2 ‚â§ _len_.\n          1. Let _hexDigits_ be the substring of _string_ from _position_ to _position_ + 2.\n          1. Let _parseResult_ be ParseText(StringToCodePoints(_hexDigits_), |HexDigits[~Sep]|).\n          1. If _parseResult_ is not a Parse Node, return _parseResult_.\n          1. Let _n_ be the MV of _parseResult_.\n          1. Assert: _n_ is in the inclusive interval from 0 to 255.\n          1. Return _n_.\n        ",
  "Statement[6,0].VarDeclaredNames" : "\n        1. Return a new empty List.\n      ",
  "StrUnsignedDecimalLiteral[1,2].StringNumericValue" : "\n            1. Let _a_ be MV of the first |DecimalDigits|.\n            1. If the second |DecimalDigits| is present, then\n              1. Let _b_ be MV of the second |DecimalDigits|.\n              1. Let _n_ be the number of code points in the second |DecimalDigits|.\n            1. Else,\n              1. Let _b_ be 0.\n              1. Let _n_ be 0.\n            1. If |ExponentPart| is present, let _e_ be MV of |ExponentPart|. Otherwise, let _e_ be 0.\n            1. Return RoundMVResult((_a_ + (_b_ √ó 10<sup>-_n_</sup>)) √ó 10<sup>_e_</sup>).\n          ",
  "ImportDeclaration[0,0].BoundNames" : "\n        1. Return the BoundNames of |ImportClause|.\n      ",
  "Record[ProxyExoticObject].Call" : "\n        1. Perform ? ValidateNonRevokedProxy(_O_).\n        1. Let _target_ be _O_.[[ProxyTarget]].\n        1. Let _handler_ be _O_.[[ProxyHandler]].\n        1. Assert: _handler_ is an Object.\n        1. Let _trap_ be ? GetMethod(_handler_, *\"apply\"*).\n        1. If _trap_ is *undefined*, then\n          1. Return ? Call(_target_, _thisArgument_, _argumentsList_).\n        1. Let _argArray_ be CreateArrayFromList(_argumentsList_).\n        1. Return ? Call(_trap_, _handler_, ¬´ _target_, _thisArgument_, _argArray_ ¬ª).\n      ",
  "BigInt::remainder" : "\n            1. If _d_ is *0*<sub>‚Ñ§</sub>, throw a *RangeError* exception.\n            1. If _n_ is *0*<sub>‚Ñ§</sub>, return *0*<sub>‚Ñ§</sub>.\n            1. Let _quotient_ be ‚Ñù(_n_) / ‚Ñù(_d_).\n            1. Let _q_ be ‚Ñ§(truncate(_quotient_)).\n            1. Return _n_ - (_d_ √ó _q_).\n          ",
  "INTRINSICS.get ArrayBuffer.prototype.maxByteLength" : "\n          1. Let _O_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_O_, [[ArrayBufferData]]).\n          1. If IsSharedArrayBuffer(_O_) is *true*, throw a *TypeError* exception.\n          1. If IsDetachedBuffer(_O_) is *true*, return *+0*<sub>ùîΩ</sub>.\n          1. If IsFixedLengthArrayBuffer(_O_) is *true*, then\n            1. Let _length_ be _O_.[[ArrayBufferByteLength]].\n          1. Else,\n            1. Let _length_ be _O_.[[ArrayBufferMaxByteLength]].\n          1. Return ùîΩ(_length_).\n        ",
  "CallExpression[6,0].HasCallInTailPosition" : "\n        1. If this |CallExpression| is _call_, return *true*.\n        1. Return *false*.\n      ",
  "TryStatement[2,0].Evaluation" : "\n        1. Let _B_ be Completion(Evaluation of |Block|).\n        1. If _B_ is a throw completion, let _C_ be Completion(CatchClauseEvaluation of |Catch| with argument _B_.[[Value]]).\n        1. Else, let _C_ be _B_.\n        1. Let _F_ be Completion(Evaluation of |Finally|).\n        1. If _F_ is a normal completion, set _F_ to _C_.\n        1. Return ? UpdateEmpty(_F_, *undefined*).\n      ",
  "INTRINSICS.Object.getOwnPropertyDescriptors" : "\n          1. Let _obj_ be ? ToObject(_O_).\n          1. Let _ownKeys_ be ? <emu-meta effects=\"user-code\">_obj_.[[OwnPropertyKeys]]()</emu-meta>.\n          1. Let _descriptors_ be OrdinaryObjectCreate(%Object.prototype%).\n          1. For each element _key_ of _ownKeys_, do\n            1. Let _desc_ be ? <emu-meta effects=\"user-code\">_obj_.[[GetOwnProperty]]</emu-meta>(_key_).\n            1. Let _descriptor_ be FromPropertyDescriptor(_desc_).\n            1. If _descriptor_ is not *undefined*, perform ! CreateDataPropertyOrThrow(_descriptors_, _key_, _descriptor_).\n          1. Return _descriptors_.\n        ",
  "INTRINSICS.get TypedArray.prototype.length" : "\n          1. Let _O_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_O_, [[TypedArrayName]]).\n          1. Assert: _O_ has [[ViewedArrayBuffer]] and [[ArrayLength]] internal slots.\n          1. Let _taRecord_ be MakeTypedArrayWithBufferWitnessRecord(_O_, ~seq-cst~).\n          1. If IsTypedArrayOutOfBounds(_taRecord_) is *true*, return *+0*<sub>ùîΩ</sub>.\n          1. Let _length_ be TypedArrayLength(_taRecord_).\n          1. Return ùîΩ(_length_).\n        ",
  "GeneratorStart" : "\n          1. Assert: The value of _generator_.[[GeneratorState]] is *undefined*.\n          1. Let _genContext_ be the running execution context.\n          1. Set the Generator component of _genContext_ to _generator_.\n          1. Let _closure_ be a new Abstract Closure with no parameters that captures _generatorBody_ and performs the following steps when called:\n            1. Let _acGenContext_ be the running execution context.\n            1. Let _acGenerator_ be the Generator component of _acGenContext_.\n            1. If _generatorBody_ is a Parse Node, then\n              1. Let _result_ be Completion(Evaluation of _generatorBody_).\n            1. Else,\n              1. Assert: _generatorBody_ is an Abstract Closure with no parameters.\n              1. Let _result_ be _generatorBody_().\n            1. Assert: If we return here, the generator either threw an exception or performed either an implicit or explicit return.\n            1. Remove _acGenContext_ from the execution context stack and restore the execution context that is at the top of the execution context stack as the running execution context.\n            1. Set _acGenerator_.[[GeneratorState]] to ~completed~.\n            1. NOTE: Once a generator enters the ~completed~ state it never leaves it and its associated execution context is never resumed. Any execution state associated with _acGenerator_ can be discarded at this point.\n            1. If _result_ is a normal completion, then\n              1. Let _resultValue_ be *undefined*.\n            1. Else if _result_ is a return completion, then\n              1. Let _resultValue_ be _result_.[[Value]].\n            1. Else,\n              1. Assert: _result_ is a throw completion.\n              1. Return ? _result_.\n            1. Return CreateIterResultObject(_resultValue_, *true*).\n          1. Set the code evaluation state of _genContext_ such that when evaluation is resumed for that execution context, _closure_ will be called with no arguments.\n          1. Set _generator_.[[GeneratorContext]] to _genContext_.\n          1. Set _generator_.[[GeneratorState]] to ~suspended-start~.\n          1. Return ~unused~.\n        ",
  "UnaryExpression[6,0].AssignmentTargetType" : "\n        1. Return ~invalid~.\n      ",
  "AsyncGeneratorYield:cont0" : "\n          1. Let _genContext_ be the running execution context.\n          1. Assert: _genContext_ is the execution context of a generator.\n          1. Let _generator_ be the value of the Generator component of _genContext_.\n          1. Assert: GetGeneratorKind() is ~async~.\n          1. Let _completion_ be NormalCompletion(_value_).\n          1. Assert: The execution context stack has at least two elements.\n          1. Let _previousContext_ be the second to top element of the execution context stack.\n          1. Let _previousRealm_ be _previousContext_'s Realm.\n          1. Perform AsyncGeneratorCompleteStep(_generator_, _completion_, *false*, _previousRealm_).\n          1. Let _queue_ be _generator_.[[AsyncGeneratorQueue]].\n          1. If _queue_ is not empty, then\n            1. NOTE: Execution continues without suspending the generator.\n            1. Let _toYield_ be the first element of _queue_.\n            1. Let _resumptionValue_ be Completion(_toYield_.[[Completion]]).\n            1. Return ? AsyncGeneratorUnwrapYieldResumption(_resumptionValue_).\n          1. Else,\n            1. Set _generator_.[[AsyncGeneratorState]] to ~suspended-yield~.\n            1. Remove _genContext_ from the execution context stack and restore the execution context that is at the top of the execution context stack as the running execution context.\n            1. Let _callerContext_ be the running execution context.\n            1. Resume _callerContext_ passing *undefined*. If _genContext_ is ever resumed again, let _resumptionValue_ be the Completion Record with which it is resumed.\n            1. Assert: If control reaches here, then _genContext_ is the running execution context again.\n            1. Return ? AsyncGeneratorUnwrapYieldResumption(_resumptionValue_).\n        ",
  "ForInOfStatement[8,0].ContainsDuplicateLabels" : "\n        1. Return ContainsDuplicateLabels of |Statement| with argument _labelSet_.\n      ",
  "Record[ModuleEnvironmentRecord].CreateImportBinding" : "\n            1. Assert: _envRec_ does not already have a binding for _N_.\n            1. Assert: When _M_.[[Environment]] is instantiated, it will have a direct binding for _N2_.\n            1. Create an immutable indirect binding in _envRec_ for _N_ that references _M_ and _N2_ as its target binding and record that the binding is initialized.\n            1. Return ~unused~.\n          ",
  "HoistableDeclaration[1,0].DeclarationPart" : "\n        1. Return |GeneratorDeclaration|.\n      ",
  "IsViewOutOfBounds" : "\n          1. Let _view_ be _viewRecord_.[[Object]].\n          1. Let _bufferByteLength_ be _viewRecord_.[[CachedBufferByteLength]].\n          1. Assert: IsDetachedBuffer(_view_.[[ViewedArrayBuffer]]) is *true* if and only if _bufferByteLength_ is ~detached~.\n          1. If _bufferByteLength_ is ~detached~, return *true*.\n          1. Let _byteOffsetStart_ be _view_.[[ByteOffset]].\n          1. If _view_.[[ByteLength]] is ~auto~, then\n            1. Let _byteOffsetEnd_ be _bufferByteLength_.\n          1. Else,\n            1. Let _byteOffsetEnd_ be _byteOffsetStart_ + _view_.[[ByteLength]].\n          1. If _byteOffsetStart_ > _bufferByteLength_ or _byteOffsetEnd_ > _bufferByteLength_, return *true*.\n          1. NOTE: 0-length DataViews are not considered out-of-bounds.\n          1. Return *false*.\n        ",
  "ArrayAssignmentPattern[0,3].DestructuringAssignmentEvaluation" : "\n          1. Let _iteratorRecord_ be ? GetIterator(_value_, ~sync~).\n          1. If |Elision| is present, then\n            1. Let _status_ be Completion(IteratorDestructuringAssignmentEvaluation of |Elision| with argument _iteratorRecord_).\n            1. If _status_ is an abrupt completion, then\n              1. Assert: _iteratorRecord_.[[Done]] is *true*.\n              1. Return ? _status_.\n          1. Let _result_ be Completion(IteratorDestructuringAssignmentEvaluation of |AssignmentRestElement| with argument _iteratorRecord_).\n          1. If _iteratorRecord_.[[Done]] is *false*, return ? IteratorClose(_iteratorRecord_, _result_).\n          1. Return _result_.\n        ",
  "PrimaryExpression[11,0].IsFunctionDefinition" : "\n        1. Return *false*.\n      ",
  "Record[BoundFunctionExoticObject].Construct" : "\n          1. Let _target_ be _F_.[[BoundTargetFunction]].\n          1. Assert: IsConstructor(_target_) is *true*.\n          1. Let _boundArgs_ be _F_.[[BoundArguments]].\n          1. Let _args_ be the list-concatenation of _boundArgs_ and _argumentsList_.\n          1. If SameValue(_F_, _newTarget_) is *true*, set _newTarget_ to _target_.\n          1. Return ? Construct(_target_, _args_, _newTarget_).\n        ",
  "Statement[7,0].ContainsUndefinedContinueTarget" : "\n        1. Return *false*.\n      ",
  "PrivateElementFind" : "\n        1. If _O_.[[PrivateElements]] contains a PrivateElement _pe_ such that _pe_.[[Key]] is _P_, then\n          1. Return _pe_.\n        1. Return ~empty~.\n      ",
  "AssignmentExpression[1,0].IsFunctionDefinition" : "\n        1. Return *false*.\n      ",
  "ShiftExpression[3,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "Record[GlobalEnvironmentRecord].InitializeBinding" : "\n            1. Let _DclRec_ be _envRec_.[[DeclarativeRecord]].\n            1. If ! _DclRec_.HasBinding(_N_) is *true*, then\n              1. Return ! _DclRec_.InitializeBinding(_N_, _V_).\n            1. Assert: If the binding exists, it must be in the Object Environment Record.\n            1. Let _ObjRec_ be _envRec_.[[ObjectRecord]].\n            1. Return ? <emu-meta effects=\"user-code\">_ObjRec_.InitializeBinding</emu-meta>(_N_, _V_).\n          ",
  "AsyncFunctionExpression[0,0].InstantiateAsyncFunctionExpression" : "\n        1. If _name_ is not present, set _name_ to *\"\"*.\n        1. Let _env_ be the LexicalEnvironment of the running execution context.\n        1. Let _privateEnv_ be the running execution context's PrivateEnvironment.\n        1. Let _sourceText_ be the source text matched by |AsyncFunctionExpression|.\n        1. Let _closure_ be OrdinaryFunctionCreate(%AsyncFunction.prototype%, _sourceText_, |FormalParameters|, |AsyncFunctionBody|, ~non-lexical-this~, _env_, _privateEnv_).\n        1. Perform SetFunctionName(_closure_, _name_).\n        1. Return _closure_.\n      ",
  "ModuleItem[1,0].VarScopedDeclarations" : "\n        1. If |ExportDeclaration| is `export` |VariableStatement|, return VarScopedDeclarations of |VariableStatement|.\n        1. Return a new empty List.\n      ",
  "ClassDeclaration[0,0].IsConstantDeclaration" : "\n        1. Return *false*.\n      ",
  "AssignmentElement[0,0].IteratorDestructuringAssignmentEvaluation" : "\n          1. If |DestructuringAssignmentTarget| is neither an |ObjectLiteral| nor an |ArrayLiteral|, then\n            1. Let _lref_ be ? Evaluation of |DestructuringAssignmentTarget|.\n          1. Let _value_ be *undefined*.\n          1. If _iteratorRecord_.[[Done]] is *false*, then\n            1. Let _next_ be ? IteratorStepValue(_iteratorRecord_).\n            1. If _next_ is not ~done~, then\n              1. Set _value_ to _next_.\n          1. If |Initializer| is present and _value_ is *undefined*, then\n            1. If IsAnonymousFunctionDefinition(|Initializer|) is *true* and IsIdentifierRef of |DestructuringAssignmentTarget| is *true*, then\n              1. Let _v_ be ? NamedEvaluation of |Initializer| with argument _lref_.[[ReferencedName]].\n            1. Else,\n              1. Let _defaultValue_ be ? Evaluation of |Initializer|.\n              1. Let _v_ be ? GetValue(_defaultValue_).\n          1. Else,\n            1. Let _v_ be _value_.\n          1. If |DestructuringAssignmentTarget| is either an |ObjectLiteral| or an |ArrayLiteral|, then\n            1. Let _nestedAssignmentPattern_ be the |AssignmentPattern| that is covered by |DestructuringAssignmentTarget|.\n            1. Return ? DestructuringAssignmentEvaluation of _nestedAssignmentPattern_ with argument _v_.\n          1. Return ? PutValue(_lref_, _v_).\n        ",
  "ArrayBindingPattern[0,1].ContainsExpression" : "\n        1. Return ContainsExpression of |BindingRestElement|.\n      ",
  "INTRINSICS.get ArrayBuffer.prototype.resizable" : "\n          1. Let _O_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_O_, [[ArrayBufferData]]).\n          1. If IsSharedArrayBuffer(_O_) is *true*, throw a *TypeError* exception.\n          1. If IsFixedLengthArrayBuffer(_O_) is *false*, return *true*; otherwise return *false*.\n        ",
  "CreateArrayIterator:clo0" : "\n          1. Let _closure_ be a new Abstract Closure with no parameters that captures _kind_ and _array_ and performs the following steps when called:\n            1. Let _index_ be 0.\n            1. Repeat,\n              1. If _array_ has a [[TypedArrayName]] internal slot, then\n                1. Let _taRecord_ be MakeTypedArrayWithBufferWitnessRecord(_array_, ~seq-cst~).\n                1. If IsTypedArrayOutOfBounds(_taRecord_) is *true*, throw a *TypeError* exception.\n                1. Let _len_ be TypedArrayLength(_taRecord_).\n              1. Else,\n                1. Let _len_ be ? LengthOfArrayLike(_array_).\n              1. If _index_ ‚â• _len_, return NormalCompletion(*undefined*).\n              1. Let _indexNumber_ be ùîΩ(_index_).\n              1. If _kind_ is ~key~, then\n                1. Let _result_ be _indexNumber_.\n              1. Else,\n                1. Let _elementKey_ be ! ToString(_indexNumber_).\n                1. Let _elementValue_ be ? Get(_array_, _elementKey_).\n                1. If _kind_ is ~value~, then\n                  1. Let _result_ be _elementValue_.\n                1. Else,\n                  1. Assert: _kind_ is ~key+value~.\n                  1. Let _result_ be CreateArrayFromList(¬´ _indexNumber_, _elementValue_ ¬ª).\n              1. Perform ? GeneratorYield(CreateIterResultObject(_result_, *false*)).\n              1. Set _index_ to _index_ + 1.\n          1. Return CreateIteratorFromClosure(_closure_, *\"%ArrayIteratorPrototype%\"*, %ArrayIteratorPrototype%).\n        ",
  "INTRINSICS.Atomics.load" : "\n        1. Let _byteIndexInBuffer_ be ? ValidateAtomicAccessOnIntegerTypedArray(_typedArray_, _index_).\n        1. Perform ? RevalidateAtomicAccess(_typedArray_, _byteIndexInBuffer_).\n        1. Let _buffer_ be _typedArray_.[[ViewedArrayBuffer]].\n        1. Let _elementType_ be TypedArrayElementType(_typedArray_).\n        1. Return GetValueFromBuffer(_buffer_, _byteIndexInBuffer_, _elementType_, *true*, ~seq-cst~).\n      ",
  "LabelledItem[1,0].TopLevelVarDeclaredNames" : "\n        1. Return BoundNames of |FunctionDeclaration|.\n      ",
  "MethodDefinition[0,0].SpecialMethod" : "\n        1. Return *false*.\n      ",
  "GetModifySetValueInBuffer" : "\n          1. Assert: IsDetachedBuffer(_arrayBuffer_) is *false*.\n          1. Assert: There are sufficient bytes in _arrayBuffer_ starting at _byteIndex_ to represent a value of _type_.\n          1. Assert: _value_ is a BigInt if IsBigIntElementType(_type_) is *true*; otherwise, _value_ is a Number.\n          1. Let _block_ be _arrayBuffer_.[[ArrayBufferData]].\n          1. Let _elementSize_ be the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"></emu-xref> for Element Type _type_.\n          1. Let _isLittleEndian_ be the value of the [[LittleEndian]] field of the surrounding agent's Agent Record.\n          1. Let _rawBytes_ be NumericToRawBytes(_type_, _value_, _isLittleEndian_).\n          1. If IsSharedArrayBuffer(_arrayBuffer_) is *true*, then\n            1. Let _execution_ be the [[CandidateExecution]] field of the surrounding agent's Agent Record.\n            1. Let _eventsRecord_ be the Agent Events Record of _execution_.[[EventsRecords]] whose [[AgentSignifier]] is AgentSignifier().\n            1. Let _rawBytesRead_ be a List of length _elementSize_ whose elements are nondeterministically chosen byte values.\n            1. NOTE: In implementations, _rawBytesRead_ is the result of a load-link, of a load-exclusive, or of an operand of a read-modify-write instruction on the underlying hardware. The nondeterminism is a semantic prescription of the memory model to describe observable behaviour of hardware with weak consistency.\n            1. Let _rmwEvent_ be ReadModifyWriteSharedMemory { [[Order]]: ~seq-cst~, [[NoTear]]: *true*, [[Block]]: _block_, [[ByteIndex]]: _byteIndex_, [[ElementSize]]: _elementSize_, [[Payload]]: _rawBytes_, [[ModifyOp]]: _op_ }.\n            1. Append _rmwEvent_ to _eventsRecord_.[[EventList]].\n            1. Append Chosen Value Record { [[Event]]: _rmwEvent_, [[ChosenValue]]: _rawBytesRead_ } to _execution_.[[ChosenValues]].\n          1. Else,\n            1. Let _rawBytesRead_ be a List of length _elementSize_ whose elements are the sequence of _elementSize_ bytes starting with _block_[_byteIndex_].\n            1. Let _rawBytesModified_ be _op_(_rawBytesRead_, _rawBytes_).\n            1. Store the individual bytes of _rawBytesModified_ into _block_, starting at _block_[_byteIndex_].\n          1. Return RawBytesToNumeric(_type_, _rawBytesRead_, _isLittleEndian_).\n        ",
  "INTRINSICS.RegExp.prototype.test" : "\n          1. Let _R_ be the *this* value.\n          1. If _R_ is not an Object, throw a *TypeError* exception.\n          1. Let _string_ be ? ToString(_S_).\n          1. Let _match_ be ? RegExpExec(_R_, _string_).\n          1. If _match_ is not *null*, return *true*; else return *false*.\n        ",
  "ClassUnion[1,1].MayContainStrings" : "\n          1. If MayContainStrings of the |ClassSetOperand| is *true*, return *true*.\n          1. If |ClassUnion| is present, return MayContainStrings of the |ClassUnion|.\n          1. Return *false*.\n        ",
  "PrimaryExpression[5,0].IsIdentifierRef" : "\n        1. Return *false*.\n      ",
  "ClassDeclaration[1,0].IsConstantDeclaration" : "\n        1. Return *false*.\n      ",
  "CharacterClassEscape[3,0].CompileToCharSet" : "\n          1. Let _S_ be the CharSet returned by <emu-grammar>CharacterClassEscape :: `s`</emu-grammar>.\n          1. Return CharacterComplement(_rer_, _S_).\n        ",
  "SingleNameBinding[0,0].HasInitializer" : "\n        1. Return *false*.\n      ",
  "SwitchStatement[0,0].ContainsDuplicateLabels" : "\n        1. Return ContainsDuplicateLabels of |CaseBlock| with argument _labelSet_.\n      ",
  "ClassStaticBlockStatementList[0,0].ContainsDuplicateLabels" : "\n        1. Return *false*.\n      ",
  "SameValue" : "\n        1. If Type(_x_) is not Type(_y_), return *false*.\n        1. If _x_ is a Number, then\n          1. Return Number::sameValue(_x_, _y_).\n        1. Return SameValueNonNumber(_x_, _y_).\n      ",
  "RelationalExpression[2,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "EvaluatePropertyAccessWithExpressionKey" : "\n        1. Let _propertyNameReference_ be ? Evaluation of _expression_.\n        1. Let _propertyNameValue_ be ? GetValue(_propertyNameReference_).\n        1. Let _propertyKey_ be ? ToPropertyKey(_propertyNameValue_).\n        1. Return the Reference Record { [[Base]]: _baseValue_, [[ReferencedName]]: _propertyKey_, [[Strict]]: _strict_, [[ThisValue]]: ~empty~ }.\n      ",
  "LogicalANDExpression[1,0].IsFunctionDefinition" : "\n        1. Return *false*.\n      ",
  "INTRINSICS.get TypedArray.prototype.byteOffset" : "\n          1. Let _O_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_O_, [[TypedArrayName]]).\n          1. Assert: _O_ has a [[ViewedArrayBuffer]] internal slot.\n          1. Let _taRecord_ be MakeTypedArrayWithBufferWitnessRecord(_O_, ~seq-cst~).\n          1. If IsTypedArrayOutOfBounds(_taRecord_) is *true*, return *+0*<sub>ùîΩ</sub>.\n          1. Let _offset_ be _O_.[[ByteOffset]].\n          1. Return ùîΩ(_offset_).\n        ",
  "AsyncArrowBindingIdentifier[0,0].ContainsExpression" : "\n        1. Return *false*.\n      ",
  "UnaryExpression[4,0].Evaluation" : "\n          1. Let _expr_ be ? Evaluation of |UnaryExpression|.\n          1. Return ? ToNumber(? GetValue(_expr_)).\n        ",
  "INTRINSICS.Reflect.deleteProperty" : "\n        1. If _target_ is not an Object, throw a *TypeError* exception.\n        1. Let _key_ be ? ToPropertyKey(_propertyKey_).\n        1. Return ? <emu-meta effects=\"user-code\">_target_.[[Delete]]</emu-meta>(_key_).\n      ",
  "UpdateExpression[3,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "CaseClause[0,0].LexicallyDeclaredNames" : "\n        1. If the |StatementList| is present, return the LexicallyDeclaredNames of |StatementList|.\n        1. Return a new empty List.\n      ",
  "WithStatement[0,0].ContainsUndefinedBreakTarget" : "\n        1. Return ContainsUndefinedBreakTarget of |Statement| with argument _labelSet_.\n      ",
  "INTRINSICS.Object" : "\n          1. If NewTarget is neither *undefined* nor the active function object, then\n            1. Return ? OrdinaryCreateFromConstructor(NewTarget, *\"%Object.prototype%\"*).\n          1. If _value_ is either *undefined* or *null*, return OrdinaryObjectCreate(%Object.prototype%).\n          1. Return ! ToObject(_value_).\n        ",
  "INTRINSICS.Object.isFrozen" : "\n          1. If _O_ is not an Object, return *true*.\n          1. Return ? TestIntegrityLevel(_O_, ~frozen~).\n        ",
  "CaseBlock[1,2].HasCallInTailPosition" : "\n        1. Let _has_ be *false*.\n        1. If the first |CaseClauses| is present, set _has_ to HasCallInTailPosition of the first |CaseClauses| with argument _call_.\n        1. If _has_ is *true*, return *true*.\n        1. Set _has_ to HasCallInTailPosition of |DefaultClause| with argument _call_.\n        1. If _has_ is *true*, return *true*.\n        1. If the second |CaseClauses| is present, set _has_ to HasCallInTailPosition of the second |CaseClauses| with argument _call_.\n        1. Return _has_.\n      ",
  "ClassSetOperand[2,0].CompileToCharSet" : "\n          1. Let _A_ be CompileToCharSet of |ClassSetCharacter| with argument _rer_.\n          1. Return MaybeSimpleCaseFolding(_rer_, _A_).\n        ",
  "AsyncGeneratorMethod[0,0].ContainsArguments" : "\n        1. Return ContainsArguments of |ClassElementName|.\n      ",
  "INTRINSICS.DataView.prototype.getBigInt64" : "\n          1. Let _v_ be the *this* value.\n          1. Return ? GetViewValue(_v_, _byteOffset_, _littleEndian_, ~bigint64~).\n        ",
  "IsDetachedBuffer" : "\n          1. If _arrayBuffer_.[[ArrayBufferData]] is *null*, return *true*.\n          1. Return *false*.\n        ",
  "ForInOfStatement[0,0].ForInOfLoopEvaluation" : "\n          1. Let _keyResult_ be ? ForIn/OfHeadEvaluation(¬´ ¬ª, |Expression|, ~enumerate~).\n          1. Return ? ForIn/OfBodyEvaluation(|LeftHandSideExpression|, |Statement|, _keyResult_, ~enumerate~, ~assignment~, _labelSet_).\n        ",
  "Record[GlobalEnvironmentRecord].SetMutableBinding" : "\n            1. Let _DclRec_ be _envRec_.[[DeclarativeRecord]].\n            1. If ! _DclRec_.HasBinding(_N_) is *true*, then\n              1. Return ? _DclRec_.SetMutableBinding(_N_, _V_, _S_).\n            1. Let _ObjRec_ be _envRec_.[[ObjectRecord]].\n            1. Return ? <emu-meta effects=\"user-code\">_ObjRec_.SetMutableBinding</emu-meta>(_N_, _V_, _S_).\n          ",
  "INTRINSICS.AsyncGeneratorFunction.prototype.prototype.return" : "\n          1. Let _generator_ be the *this* value.\n          1. Let _promiseCapability_ be ! NewPromiseCapability(%Promise%).\n          1. Let _result_ be Completion(AsyncGeneratorValidate(_generator_, ~empty~)).\n          1. IfAbruptRejectPromise(_result_, _promiseCapability_).\n          1. Let _completion_ be Completion Record { [[Type]]: ~return~, [[Value]]: _value_, [[Target]]: ~empty~ }.\n          1. Perform AsyncGeneratorEnqueue(_generator_, _completion_, _promiseCapability_).\n          1. Let _state_ be _generator_.[[AsyncGeneratorState]].\n          1. If _state_ is either ~suspended-start~ or ~completed~, then\n            1. Set _generator_.[[AsyncGeneratorState]] to ~awaiting-return~.\n            1. Perform ! AsyncGeneratorAwaitReturn(_generator_).\n          1. Else if _state_ is ~suspended-yield~, then\n            1. Perform AsyncGeneratorResume(_generator_, _completion_).\n          1. Else,\n            1. Assert: _state_ is either ~executing~ or ~awaiting-return~.\n          1. Return _promiseCapability_.[[Promise]].\n        ",
  "ArrayBindingPattern[2,2].IteratorBindingInitialization" : "\n        1. Perform ? IteratorBindingInitialization of |BindingElementList| with arguments _iteratorRecord_ and _environment_.\n        1. Return ? IteratorDestructuringAssignmentEvaluation of |Elision| with argument _iteratorRecord_.\n      ",
  "ParenthesizedExpression[0,0].HasCallInTailPosition" : "\n        1. Return HasCallInTailPosition of |Expression| with argument _call_.\n      ",
  "ClassIntersection[0,0].MayContainStrings" : "\n          1. If MayContainStrings of the first |ClassSetOperand| is *false*, return *false*.\n          1. If MayContainStrings of the second |ClassSetOperand| is *false*, return *false*.\n          1. Return *true*.\n        ",
  "FunctionExpression[0,0].HasName" : "\n        1. Return *false*.\n      ",
  "Record[OrdinaryObject].OwnPropertyKeys" : "\n        1. Return OrdinaryOwnPropertyKeys(_O_).\n      ",
  "CreateIterResultObject" : "\n        1. Let _obj_ be OrdinaryObjectCreate(%Object.prototype%).\n        1. Perform ! CreateDataPropertyOrThrow(_obj_, *\"value\"*, _value_).\n        1. Perform ! CreateDataPropertyOrThrow(_obj_, *\"done\"*, _done_).\n        1. Return _obj_.\n      ",
  "Record[ModuleNamespaceExoticObject].GetPrototypeOf" : "\n          1. Return *null*.\n        ",
  "VariableStatement[0,0].Evaluation" : "\n          1. Perform ? Evaluation of |VariableDeclarationList|.\n          1. Return ~empty~.\n        ",
  "INTRINSICS.String.prototype.trim" : "\n          1. Let _S_ be the *this* value.\n          1. Return ? TrimString(_S_, ~start+end~).\n        ",
  "ScriptBody[0,0].LexicallyScopedDeclarations" : "\n        1. Return TopLevelLexicallyScopedDeclarations of |StatementList|.\n      ",
  "AsyncGeneratorDeclaration[1,0].Contains" : "\n        1. Return *false*.\n      ",
  "FormalParameterList[1,0].HasInitializer" : "\n        1. If HasInitializer of |FormalParameterList| is *true*, return *true*.\n        1. Return HasInitializer of |FormalParameter|.\n      ",
  "ModuleItem[2,0].ExportedBindings" : "\n          1. Return a new empty List.\n        ",
  "UnaryExpression[6,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "ForInOfStatement[6,0].ForInOfLoopEvaluation" : "\n          1. Let _keyResult_ be ? ForIn/OfHeadEvaluation(¬´ ¬ª, |AssignmentExpression|, ~async-iterate~).\n          1. Return ? ForIn/OfBodyEvaluation(|LeftHandSideExpression|, |Statement|, _keyResult_, ~iterate~, ~assignment~, _labelSet_, ~async~).\n        ",
  "INTRINSICS.AggregateError" : "\n            1. If NewTarget is *undefined*, let _newTarget_ be the active function object; else let _newTarget_ be NewTarget.\n            1. Let _O_ be ? OrdinaryCreateFromConstructor(_newTarget_, *\"%AggregateError.prototype%\"*, ¬´ [[ErrorData]] ¬ª).\n            1. If _message_ is not *undefined*, then\n              1. Let _msg_ be ? ToString(_message_).\n              1. Perform CreateNonEnumerableDataPropertyOrThrow(_O_, *\"message\"*, _msg_).\n            1. Perform ? InstallErrorCause(_O_, _options_).\n            1. Let _errorsList_ be ? IteratorToList(? GetIterator(_errors_, ~sync~)).\n            1. Perform ! DefinePropertyOrThrow(_O_, *\"errors\"*, PropertyDescriptor { [[Configurable]]: *true*, [[Enumerable]]: *false*, [[Writable]]: *true*, [[Value]]: CreateArrayFromList(_errorsList_) }).\n            1. Return _O_.\n          ",
  "ValidateAtomicAccess" : "\n          1. Let _length_ be TypedArrayLength(_taRecord_).\n          1. Let _accessIndex_ be ? ToIndex(_requestIndex_).\n          1. Assert: _accessIndex_ ‚â• 0.\n          1. If _accessIndex_ ‚â• _length_, throw a *RangeError* exception.\n          1. Let _typedArray_ be _taRecord_.[[Object]].\n          1. Let _elementSize_ be TypedArrayElementSize(_typedArray_).\n          1. Let _offset_ be _typedArray_.[[ByteOffset]].\n          1. Return (_accessIndex_ √ó _elementSize_) + _offset_.\n        ",
  "ExportDeclaration[4,0].Evaluation" : "\n          1. Return ? Evaluation of |HoistableDeclaration|.\n        ",
  "RegExpExec" : "\n          1. Let _exec_ be ? Get(_R_, *\"exec\"*).\n          1. If IsCallable(_exec_) is *true*, then\n            1. Let _result_ be ? Call(_exec_, _R_, ¬´ _S_ ¬ª).\n            1. If _result_ is not an Object and _result_ is not *null*, throw a *TypeError* exception.\n            1. Return _result_.\n          1. Perform ? RequireInternalSlot(_R_, [[RegExpMatcher]]).\n          1. Return ? RegExpBuiltinExec(_R_, _S_).\n        ",
  "ArrayBindingPattern[2,0].BoundNames" : "\n        1. Return the BoundNames of |BindingElementList|.\n      ",
  "Quantifier[1,0].CompileQuantifier" : "\n          1. Let _qp_ be CompileQuantifierPrefix of |QuantifierPrefix|.\n          1. Return the Record { [[Min]]: _qp_.[[Min]], [[Max]]: _qp_.[[Max]], [[Greedy]]: *false* }.\n        ",
  "ClassStaticBlockStatementList[0,0].VarDeclaredNames" : "\n        1. Return a new empty List.\n      ",
  "ClassElement[4,0].ComputedPropertyContains" : "\n        1. Return *false*.\n      ",
  "GetViewValue" : "\n          1. Perform ? RequireInternalSlot(_view_, [[DataView]]).\n          1. Assert: _view_ has a [[ViewedArrayBuffer]] internal slot.\n          1. Let _getIndex_ be ? ToIndex(_requestIndex_).\n          1. Set _isLittleEndian_ to ToBoolean(_isLittleEndian_).\n          1. Let _viewOffset_ be _view_.[[ByteOffset]].\n          1. Let _viewRecord_ be MakeDataViewWithBufferWitnessRecord(_view_, ~unordered~).\n          1. NOTE: Bounds checking is not a synchronizing operation when _view_'s backing buffer is a growable SharedArrayBuffer.\n          1. If IsViewOutOfBounds(_viewRecord_) is *true*, throw a *TypeError* exception.\n          1. Let _viewSize_ be GetViewByteLength(_viewRecord_).\n          1. Let _elementSize_ be the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"></emu-xref> for Element Type _type_.\n          1. If _getIndex_ + _elementSize_ > _viewSize_, throw a *RangeError* exception.\n          1. Let _bufferIndex_ be _getIndex_ + _viewOffset_.\n          1. Return GetValueFromBuffer(_view_.[[ViewedArrayBuffer]], _bufferIndex_, _type_, *false*, ~unordered~, _isLittleEndian_).\n        ",
  "INTRINSICS.Map.prototype.set" : "\n          1. Let _M_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_M_, [[MapData]]).\n          1. For each Record { [[Key]], [[Value]] } _p_ of _M_.[[MapData]], do\n            1. If _p_.[[Key]] is not ~empty~ and SameValueZero(_p_.[[Key]], _key_) is *true*, then\n              1. Set _p_.[[Value]] to _value_.\n              1. Return _M_.\n          1. If _key_ is *-0*<sub>ùîΩ</sub>, set _key_ to *+0*<sub>ùîΩ</sub>.\n          1. Let _p_ be the Record { [[Key]]: _key_, [[Value]]: _value_ }.\n          1. Append _p_ to _M_.[[MapData]].\n          1. Return _M_.\n        ",
  "BigInt::bitwiseNOT" : "\n            1. Return -_x_ - *1*<sub>‚Ñ§</sub>.\n          ",
  "ClassElement[4,0].ClassElementEvaluation" : "\n        1. Return ClassStaticBlockDefinitionEvaluation of |ClassStaticBlock| with argument _object_.\n      ",
  "ElementList[2,0].ArrayAccumulation" : "\n          1. Set _nextIndex_ to ? ArrayAccumulation of |ElementList| with arguments _array_ and _nextIndex_.\n          1. If |Elision| is present, then\n            1. Set _nextIndex_ to ? ArrayAccumulation of |Elision| with arguments _array_ and _nextIndex_.\n          1. Let _initResult_ be ? Evaluation of |AssignmentExpression|.\n          1. Let _initValue_ be ? GetValue(_initResult_).\n          1. Perform ! CreateDataPropertyOrThrow(_array_, ! ToString(ùîΩ(_nextIndex_)), _initValue_).\n          1. Return _nextIndex_ + 1.\n        ",
  "StrUnsignedDecimalLiteral[3,0].StringNumericValue" : "\n            1. Let _a_ be MV of |DecimalDigits|.\n            1. If |ExponentPart| is present, let _e_ be MV of |ExponentPart|. Otherwise, let _e_ be 0.\n            1. Return RoundMVResult(_a_ √ó 10<sup>_e_</sup>).\n          ",
  "AsyncFunctionExpression[0,1].Contains" : "\n        1. Return *false*.\n      ",
  "IfStatement[1,0].ContainsDuplicateLabels" : "\n        1. Return ContainsDuplicateLabels of |Statement| with argument _labelSet_.\n      ",
  "ModuleItem[0,0].ContainsDuplicateLabels" : "\n        1. Return *false*.\n      ",
  "LiteralPropertyName[0,0].PropName" : "\n        1. Return StringValue of |IdentifierName|.\n      ",
  "ContinueStatement[1,0].Evaluation" : "\n        1. Let _label_ be the StringValue of |LabelIdentifier|.\n        1. Return Completion Record { [[Type]]: ~continue~, [[Value]]: ~empty~, [[Target]]: _label_ }.\n      ",
  "SetFunctionLength" : "\n        1. Assert: _F_ is an extensible object that does not have a *\"length\"* own property.\n        1. Perform ! DefinePropertyOrThrow(_F_, *\"length\"*, PropertyDescriptor { [[Value]]: ùîΩ(_length_), [[Writable]]: *false*, [[Enumerable]]: *false*, [[Configurable]]: *true* }).\n        1. Return ~unused~.\n      ",
  "INTRINSICS.DataView.prototype.getUint16" : "\n          1. Let _v_ be the *this* value.\n          1. If _littleEndian_ is not present, set _littleEndian_ to *false*.\n          1. Return ? GetViewValue(_v_, _byteOffset_, _littleEndian_, ~uint16~).\n        ",
  "INTRINSICS.Array.prototype.concat" : "\n          1. Let _O_ be ? ToObject(*this* value).\n          1. Let _A_ be ? ArraySpeciesCreate(_O_, 0).\n          1. Let _n_ be 0.\n          1. Prepend _O_ to _items_.\n          1. For each element _E_ of _items_, do\n            1. Let _spreadable_ be ? IsConcatSpreadable(_E_).\n            1. If _spreadable_ is *true*, then\n              1. Let _len_ be ? LengthOfArrayLike(_E_).\n              1. If _n_ + _len_ > 2<sup>53</sup> - 1, throw a *TypeError* exception.\n              1. Let _k_ be 0.\n              1. Repeat, while _k_ < _len_,\n                1. Let _Pk_ be ! ToString(ùîΩ(_k_)).\n                1. Let _exists_ be ? HasProperty(_E_, _Pk_).\n                1. If _exists_ is *true*, then\n                  1. Let _subElement_ be ? Get(_E_, _Pk_).\n                  1. Perform ? CreateDataPropertyOrThrow(_A_, ! ToString(ùîΩ(_n_)), _subElement_).\n                1. Set _n_ to _n_ + 1.\n                1. Set _k_ to _k_ + 1.\n            1. Else,\n              1. NOTE: _E_ is added as a single item rather than spread.\n              1. If _n_ ‚â• 2<sup>53</sup> - 1, throw a *TypeError* exception.\n              1. Perform ? CreateDataPropertyOrThrow(_A_, ! ToString(ùîΩ(_n_)), _E_).\n              1. Set _n_ to _n_ + 1.\n          1. [id=\"step-array-proto-concat-set-length\"] Perform ? Set(_A_, *\"length\"*, ùîΩ(_n_), *true*).\n          1. Return _A_.\n        ",
  "Record[ObjectEnvironmentRecord].WithBaseObject" : "\n            1. If _envRec_.[[IsWithEnvironment]] is *true*, return _envRec_.[[BindingObject]].\n            1. Otherwise, return *undefined*.\n          ",
  "INTRINSICS.Date.prototype.valueOf" : "\n          1. Let _dateObject_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_dateObject_, [[DateValue]]).\n          1. Return _dateObject_.[[DateValue]].\n        ",
  "PrimaryExpression[12,0].Evaluation" : "\n          1. Let _expr_ be the |ParenthesizedExpression| that is covered by |CoverParenthesizedExpressionAndArrowParameterList|.\n          1. Return ? Evaluation of _expr_.\n        ",
  "MemberExpression[5,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "AsyncArrowBindingIdentifier[0,0].IteratorBindingInitialization" : "\n        1. Let _v_ be *undefined*.\n        1. Assert: _iteratorRecord_.[[Done]] is *false*.\n        1. Let _next_ be ? IteratorStepValue(_iteratorRecord_).\n        1. If _next_ is not ~done~, then\n          1. Set _v_ to _next_.\n        1. Return ? BindingInitialization of |BindingIdentifier| with arguments _v_ and _environment_.\n      ",
  "ForStatement[0,4].ForLoopEvaluation" : "\n          1. If the first |Expression| is present, then\n            1. Let _exprRef_ be ? Evaluation of the first |Expression|.\n            1. Perform ? GetValue(_exprRef_).\n          1. If the second |Expression| is present, let _test_ be the second |Expression|; otherwise, let _test_ be ~empty~.\n          1. If the third |Expression| is present, let _increment_ be the third |Expression|; otherwise, let _increment_ be ~empty~.\n          1. Return ? ForBodyEvaluation(_test_, _increment_, |Statement|, ¬´ ¬ª, _labelSet_).\n        ",
  "INTRINSICS.Set.prototype.entries" : "\n          1. Let _S_ be the *this* value.\n          1. Return ? CreateSetIterator(_S_, ~key+value~).\n        ",
  "NonEmptyClassString[0,1].MayContainStrings" : "\n          1. If |NonEmptyClassString| is present, return *true*.\n          1. Return *false*.\n        ",
  "MemberExpression[7,0].AllPrivateIdentifiersValid" : "\n        1. If _names_ contains the StringValue of |PrivateIdentifier|, then\n          1. Return AllPrivateIdentifiersValid of |MemberExpression| with argument _names_.\n        1. Return *false*.\n      ",
  "StringToCodePoints" : "\n        1. Let _codePoints_ be a new empty List.\n        1. Let _size_ be the length of _string_.\n        1. Let _position_ be 0.\n        1. Repeat, while _position_ < _size_,\n          1. Let _cp_ be CodePointAt(_string_, _position_).\n          1. Append _cp_.[[CodePoint]] to _codePoints_.\n          1. Set _position_ to _position_ + _cp_.[[CodeUnitCount]].\n        1. Return _codePoints_.\n      ",
  "CaseClauses[1,0].ContainsDuplicateLabels" : "\n        1. Let _hasDuplicates_ be ContainsDuplicateLabels of |CaseClauses| with argument _labelSet_.\n        1. If _hasDuplicates_ is *true*, return *true*.\n        1. Return ContainsDuplicateLabels of |CaseClause| with argument _labelSet_.\n      ",
  "INTRINSICS.AsyncGeneratorFunction" : "\n          1. Let _C_ be the active function object.\n          1. If _bodyArg_ is not present, set _bodyArg_ to the empty String.\n          1. Return ? CreateDynamicFunction(_C_, NewTarget, ~async-generator~, _parameterArgs_, _bodyArg_).\n        ",
  "Number::divide" : "\n            1. If _x_ is *NaN* or _y_ is *NaN*, return *NaN*.\n            1. If _x_ is either *+‚àû*<sub>ùîΩ</sub> or *-‚àû*<sub>ùîΩ</sub>, then\n              1. If _y_ is either *+‚àû*<sub>ùîΩ</sub> or *-‚àû*<sub>ùîΩ</sub>, return *NaN*.\n              1. If _y_ is *+0*<sub>ùîΩ</sub> or _y_ > *+0*<sub>ùîΩ</sub>, return _x_.\n              1. Return -_x_.\n            1. If _y_ is *+‚àû*<sub>ùîΩ</sub>, then\n              1. If _x_ is *+0*<sub>ùîΩ</sub> or _x_ > *+0*<sub>ùîΩ</sub>, return *+0*<sub>ùîΩ</sub>. Otherwise, return *-0*<sub>ùîΩ</sub>.\n            1. If _y_ is *-‚àû*<sub>ùîΩ</sub>, then\n              1. If _x_ is *+0*<sub>ùîΩ</sub> or _x_ > *+0*<sub>ùîΩ</sub>, return *-0*<sub>ùîΩ</sub>. Otherwise, return *+0*<sub>ùîΩ</sub>.\n            1. If _x_ is either *+0*<sub>ùîΩ</sub> or *-0*<sub>ùîΩ</sub>, then\n              1. If _y_ is either *+0*<sub>ùîΩ</sub> or *-0*<sub>ùîΩ</sub>, return *NaN*.\n              1. If _y_ > *+0*<sub>ùîΩ</sub>, return _x_.\n              1. Return -_x_.\n            1. If _y_ is *+0*<sub>ùîΩ</sub>, then\n              1. If _x_ > *+0*<sub>ùîΩ</sub>, return *+‚àû*<sub>ùîΩ</sub>. Otherwise, return *-‚àû*<sub>ùîΩ</sub>.\n            1. If _y_ is *-0*<sub>ùîΩ</sub>, then\n              1. If _x_ > *+0*<sub>ùîΩ</sub>, return *-‚àû*<sub>ùîΩ</sub>. Otherwise, return *+‚àû*<sub>ùîΩ</sub>.\n            1. Return ùîΩ(‚Ñù(_x_) / ‚Ñù(_y_)).\n          ",
  "SortIndexedProperties" : "\n            1. Let _items_ be a new empty List.\n            1. Let _k_ be 0.\n            1. Repeat, while _k_ < _len_,\n              1. Let _Pk_ be ! ToString(ùîΩ(_k_)).\n              1. If _holes_ is ~skip-holes~, then\n                1. Let _kRead_ be ? HasProperty(_obj_, _Pk_).\n              1. Else,\n                1. Assert: _holes_ is ~read-through-holes~.\n                1. Let _kRead_ be *true*.\n              1. If _kRead_ is *true*, then\n                1. Let _kValue_ be ? Get(_obj_, _Pk_).\n                1. Append _kValue_ to _items_.\n              1. Set _k_ to _k_ + 1.\n            1. [id=\"step-array-sort\"] Sort _items_ using an implementation-defined sequence of <emu-meta effects=\"user-code\">calls to _SortCompare_</emu-meta>. If any such call returns an abrupt completion, stop before performing any further calls to _SortCompare_ and return that Completion Record.\n            1. Return _items_.\n          ",
  "INTRINSICS.FinalizationRegistry.prototype.unregister" : "\n          1. Let _finalizationRegistry_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_finalizationRegistry_, [[Cells]]).\n          1. If CanBeHeldWeakly(_unregisterToken_) is *false*, throw a *TypeError* exception.\n          1. Let _removed_ be *false*.\n          1. For each Record { [[WeakRefTarget]], [[HeldValue]], [[UnregisterToken]] } _cell_ of _finalizationRegistry_.[[Cells]], do\n            1. If _cell_.[[UnregisterToken]] is not ~empty~ and SameValue(_cell_.[[UnregisterToken]], _unregisterToken_) is *true*, then\n              1. Remove _cell_ from _finalizationRegistry_.[[Cells]].\n              1. Set _removed_ to *true*.\n          1. Return _removed_.\n        ",
  "GetNewTarget" : "\n        1. Let _envRec_ be GetThisEnvironment().\n        1. Assert: _envRec_ has a [[NewTarget]] field.\n        1. Return _envRec_.[[NewTarget]].\n      ",
  "ForStatement[0,2].VarDeclaredNames" : "\n        1. Return the VarDeclaredNames of |Statement|.\n      ",
  "Number::bitwiseNOT" : "\n            1. Let _oldValue_ be ! ToInt32(_x_).\n            1. Return the result of applying bitwise complement to _oldValue_. The mathematical value of the result is exactly representable as a 32-bit two's complement bit string.\n          ",
  "Record[GlobalEnvironmentRecord].CreateMutableBinding" : "\n            1. Let _DclRec_ be _envRec_.[[DeclarativeRecord]].\n            1. If ! _DclRec_.HasBinding(_N_) is *true*, throw a *TypeError* exception.\n            1. Return ! _DclRec_.CreateMutableBinding(_N_, _D_).\n          ",
  "Pattern[0,0].CompilePattern" : "\n          1. Let _m_ be CompileSubpattern of |Disjunction| with arguments _rer_ and ~forward~.\n          1. Return a new Abstract Closure with parameters (_Input_, _index_) that captures _rer_ and _m_ and performs the following steps when called:\n            1. Assert: _Input_ is a List of characters.\n            1. Assert: 0 ‚â§ _index_ ‚â§ the number of elements in _Input_.\n            1. Let _c_ be a new MatcherContinuation with parameters (_y_) that captures nothing and performs the following steps when called:\n              1. Assert: _y_ is a MatchState.\n              1. Return _y_.\n            1. Let _cap_ be a List of _rer_.[[CapturingGroupsCount]] *undefined* values, indexed 1 through _rer_.[[CapturingGroupsCount]].\n            1. Let _x_ be the MatchState { [[Input]]: _Input_, [[EndIndex]]: _index_, [[Captures]]: _cap_ }.\n            1. Return _m_(_x_, _c_).\n        ",
  "AvailableNamedTimeZoneIdentifiers" : "\n          1. If the implementation does not include local political rules for any time zones, then\n            1. Return ¬´ the Time Zone Identifier Record { [[Identifier]]: *\"UTC\"*, [[PrimaryIdentifier]]: *\"UTC\"* } ¬ª.\n          1. Let _identifiers_ be the List of unique available named time zone identifiers.\n          1. [declared=\"comparefn\"] Sort _identifiers_ into the same order as if an Array of the same values had been sorted using %Array.prototype.sort% with *undefined* as _comparefn_.\n          1. Let _result_ be a new empty List.\n          1. For each element _identifier_ of _identifiers_, do\n            1. Let _primary_ be _identifier_.\n            1. If _identifier_ is a non-primary time zone identifier in this implementation and _identifier_ is not *\"UTC\"*, then\n              1. Set _primary_ to the primary time zone identifier associated with _identifier_.\n              1. NOTE: An implementation may need to resolve _identifier_ iteratively to obtain the primary time zone identifier.\n            1. Let _record_ be the Time Zone Identifier Record { [[Identifier]]: _identifier_, [[PrimaryIdentifier]]: _primary_ }.\n            1. Append _record_ to _result_.\n          1. Assert: _result_ contains a Time Zone Identifier Record _r_ such that _r_.[[Identifier]] is *\"UTC\"* and _r_.[[PrimaryIdentifier]] is *\"UTC\"*.\n          1. Return _result_.\n        ",
  "FormalParameters[4,0].IteratorBindingInitialization" : "\n        1. Perform ? IteratorBindingInitialization of |FormalParameterList| with arguments _iteratorRecord_ and _environment_.\n        1. Return ? IteratorBindingInitialization of |FunctionRestParameter| with arguments _iteratorRecord_ and _environment_.\n      ",
  "GetIteratorFromMethod" : "\n        1. Let _iterator_ be ? Call(_method_, _obj_).\n        1. If _iterator_ is not an Object, throw a *TypeError* exception.\n        1. Let _nextMethod_ be ? Get(_iterator_, *\"next\"*).\n        1. Let _iteratorRecord_ be the Iterator Record { [[Iterator]]: _iterator_, [[NextMethod]]: _nextMethod_, [[Done]]: *false* }.\n        1. Return _iteratorRecord_.\n      ",
  "ImportCall[0,0].Evaluation" : "\n          1. Let _referrer_ be GetActiveScriptOrModule().\n          1. If _referrer_ is *null*, set _referrer_ to the current Realm Record.\n          1. Let _argRef_ be ? Evaluation of |AssignmentExpression|.\n          1. Let _specifier_ be ? GetValue(_argRef_).\n          1. Let _promiseCapability_ be ! NewPromiseCapability(%Promise%).\n          1. Let _specifierString_ be Completion(ToString(_specifier_)).\n          1. IfAbruptRejectPromise(_specifierString_, _promiseCapability_).\n          1. Perform HostLoadImportedModule(_referrer_, _specifierString_, ~empty~, _promiseCapability_).\n          1. Return _promiseCapability_.[[Promise]].\n        ",
  "INTRINSICS.TypedArray.prototype.forEach" : "\n          1. Let _O_ be the *this* value.\n          1. Let _taRecord_ be ? ValidateTypedArray(_O_, ~seq-cst~).\n          1. Let _len_ be TypedArrayLength(_taRecord_).\n          1. If IsCallable(_callbackfn_) is *false*, throw a *TypeError* exception.\n          1. Let _k_ be 0.\n          1. Repeat, while _k_ < _len_,\n            1. Let _Pk_ be ! ToString(ùîΩ(_k_)).\n            1. Let _kValue_ be ! Get(_O_, _Pk_).\n            1. Perform ? Call(_callbackfn_, _thisArg_, ¬´ _kValue_, ùîΩ(_k_), _O_ ¬ª).\n            1. Set _k_ to _k_ + 1.\n          1. Return *undefined*.\n        ",
  "FunctionExpression[0,1].Evaluation" : "\n        1. Return InstantiateOrdinaryFunctionExpression of |FunctionExpression|.\n      ",
  "NormalCompletion" : "\n          1. Return Completion Record { [[Type]]: ~normal~, [[Value]]: _value_, [[Target]]: ~empty~ }.\n        ",
  "FunctionDeclaration[0,0].IsConstantDeclaration" : "\n        1. Return *false*.\n      ",
  "ExportsList[1,0].ExportEntriesForModule" : "\n          1. Let _specs1_ be the ExportEntriesForModule of |ExportsList| with argument _module_.\n          1. Let _specs2_ be the ExportEntriesForModule of |ExportSpecifier| with argument _module_.\n          1. Return the list-concatenation of _specs1_ and _specs2_.\n        ",
  "UnaryExpression[3,0].Evaluation" : "\n          1. Let _val_ be ? Evaluation of |UnaryExpression|.\n          1. If _val_ is a Reference Record, then\n            1. If IsUnresolvableReference(_val_) is *true*, return *\"undefined\"*.\n          1. Set _val_ to ? GetValue(_val_).\n          1. If _val_ is *undefined*, return *\"undefined\"*.\n          1. If _val_ is *null*, return *\"object\"*.\n          1. If _val_ is a String, return *\"string\"*.\n          1. If _val_ is a Symbol, return *\"symbol\"*.\n          1. If _val_ is a Boolean, return *\"boolean\"*.\n          1. If _val_ is a Number, return *\"number\"*.\n          1. If _val_ is a BigInt, return *\"bigint\"*.\n          1. Assert: _val_ is an Object.\n          1. [id=\"step-typeof-web-compat-insertion-point\"] NOTE: This step is replaced in section <emu-xref href=\"#sec-IsHTMLDDA-internal-slot-typeof\"></emu-xref>.\n          1. If _val_ has a [[Call]] internal slot, return *\"function\"*.\n          1. Return *\"object\"*.\n        ",
  "ForStatement[2,1].VarDeclaredNames" : "\n        1. Return the VarDeclaredNames of |Statement|.\n      ",
  "ClassContents[1,0].MayContainStrings" : "\n          1. Return *false*.\n        ",
  "UnicodeEscapeSequence[0,0].IdentifierCodePoint" : "\n          1. Return the code point whose numeric value is the MV of |Hex4Digits|.\n        ",
  "VariableDeclaration[0,1].Evaluation" : "\n          1. Let _bindingId_ be StringValue of |BindingIdentifier|.\n          1. Let _lhs_ be ? ResolveBinding(_bindingId_).\n          1. If IsAnonymousFunctionDefinition(|Initializer|) is *true*, then\n            1. Let _value_ be ? NamedEvaluation of |Initializer| with argument _bindingId_.\n          1. Else,\n            1. Let _rhs_ be ? Evaluation of |Initializer|.\n            1. Let _value_ be ? GetValue(_rhs_).\n          1. [id=\"step-vardecllist-evaluation-putvalue\"] Perform ? PutValue(_lhs_, _value_).\n          1. Return ~empty~.\n        ",
  "AllocateSharedArrayBuffer" : "\n          1. Let _slots_ be ¬´ [[ArrayBufferData]] ¬ª.\n          1. If _maxByteLength_ is present and _maxByteLength_ is not ~empty~, let _allocatingGrowableBuffer_ be *true*; otherwise let _allocatingGrowableBuffer_ be *false*.\n          1. If _allocatingGrowableBuffer_ is *true*, then\n            1. If _byteLength_ > _maxByteLength_, throw a *RangeError* exception.\n            1. Append [[ArrayBufferByteLengthData]] and [[ArrayBufferMaxByteLength]] to _slots_.\n          1. Else,\n            1. Append [[ArrayBufferByteLength]] to _slots_.\n          1. Let _obj_ be ? OrdinaryCreateFromConstructor(_constructor_, *\"%SharedArrayBuffer.prototype%\"*, _slots_).\n          1. If _allocatingGrowableBuffer_ is *true*, let _allocLength_ be _maxByteLength_; otherwise let _allocLength_ be _byteLength_.\n          1. Let _block_ be ? CreateSharedByteDataBlock(_allocLength_).\n          1. Set _obj_.[[ArrayBufferData]] to _block_.\n          1. If _allocatingGrowableBuffer_ is *true*, then\n            1. Assert: _byteLength_ ‚â§ _maxByteLength_.\n            1. Let _byteLengthBlock_ be ? CreateSharedByteDataBlock(8).\n            1. Perform SetValueInBuffer(_byteLengthBlock_, 0, ~biguint64~, ‚Ñ§(_byteLength_), *true*, ~seq-cst~).\n            1. Set _obj_.[[ArrayBufferByteLengthData]] to _byteLengthBlock_.\n            1. Set _obj_.[[ArrayBufferMaxByteLength]] to _maxByteLength_.\n          1. Else,\n            1. Set _obj_.[[ArrayBufferByteLength]] to _byteLength_.\n          1. Return _obj_.\n        ",
  "ClassElement[1,0].ClassElementKind" : "\n        1. Return ~non-constructor-method~.\n      ",
  "ShiftExpression[3,0].IsFunctionDefinition" : "\n        1. Return *false*.\n      ",
  "Statement[3,0].ContainsUndefinedContinueTarget" : "\n        1. Return *false*.\n      ",
  "BreakStatement[0,0].ContainsUndefinedBreakTarget" : "\n        1. Return *false*.\n      ",
  "IsWordChar" : "\n            1. Let _InputLength_ be the number of elements in _Input_.\n            1. If _e_ = -1 or _e_ = _InputLength_, return *false*.\n            1. Let _c_ be the character _Input_[_e_].\n            1. If WordCharacters(_rer_) contains _c_, return *true*.\n            1. Return *false*.\n          ",
  "ForStatement[0,2].VarScopedDeclarations" : "\n        1. Return the VarScopedDeclarations of |Statement|.\n      ",
  "ExportDeclaration[5,0].ExportedNames" : "\n          1. Return ¬´ *\"default\"* ¬ª.\n        ",
  "ArrayBindingPattern[0,2].ContainsExpression" : "\n        1. Return *false*.\n      ",
  "INTRINSICS.Object.groupBy" : "\n          1. Let _groups_ be ? GroupBy(_items_, _callbackfn_, ~property~).\n          1. Let _obj_ be OrdinaryObjectCreate(*null*).\n          1. For each Record { [[Key]], [[Elements]] } _g_ of _groups_, do\n            1. Let _elements_ be CreateArrayFromList(_g_.[[Elements]]).\n            1. Perform ! CreateDataPropertyOrThrow(_obj_, _g_.[[Key]], _elements_).\n          1. Return _obj_.\n        ",
  "ModuleItem[0,0].ExportedNames" : "\n          1. Return a new empty List.\n        ",
  "INTRINSICS.TypedArray.prototype.indexOf" : "\n          1. Let _O_ be the *this* value.\n          1. Let _taRecord_ be ? ValidateTypedArray(_O_, ~seq-cst~).\n          1. Let _len_ be TypedArrayLength(_taRecord_).\n          1. If _len_ = 0, return *-1*<sub>ùîΩ</sub>.\n          1. Let _n_ be ? ToIntegerOrInfinity(_fromIndex_).\n          1. Assert: If _fromIndex_ is *undefined*, then _n_ is 0.\n          1. If _n_ = +‚àû, return *-1*<sub>ùîΩ</sub>.\n          1. Else if _n_ = -‚àû, set _n_ to 0.\n          1. If _n_ ‚â• 0, then\n            1. Let _k_ be _n_.\n          1. Else,\n            1. Let _k_ be _len_ + _n_.\n            1. If _k_ < 0, set _k_ to 0.\n          1. Repeat, while _k_ < _len_,\n            1. Let _kPresent_ be ! HasProperty(_O_, ! ToString(ùîΩ(_k_))).\n            1. If _kPresent_ is *true*, then\n              1. Let _elementK_ be ! Get(_O_, ! ToString(ùîΩ(_k_))).\n              1. If IsStrictlyEqual(_searchElement_, _elementK_) is *true*, return ùîΩ(_k_).\n            1. Set _k_ to _k_ + 1.\n          1. Return *-1*<sub>ùîΩ</sub>.\n        ",
  "Record[ModuleNamespaceExoticObject].SetPrototypeOf" : "\n          1. Return ! SetImmutablePrototype(_O_, _V_).\n        ",
  "CaseBlock[1,1].HasCallInTailPosition" : "\n        1. Let _has_ be *false*.\n        1. If the first |CaseClauses| is present, set _has_ to HasCallInTailPosition of the first |CaseClauses| with argument _call_.\n        1. If _has_ is *true*, return *true*.\n        1. Set _has_ to HasCallInTailPosition of |DefaultClause| with argument _call_.\n        1. If _has_ is *true*, return *true*.\n        1. If the second |CaseClauses| is present, set _has_ to HasCallInTailPosition of the second |CaseClauses| with argument _call_.\n        1. Return _has_.\n      ",
  "Elision[0,0].IteratorDestructuringAssignmentEvaluation" : "\n          1. If _iteratorRecord_.[[Done]] is *false*, then\n            1. Let _next_ be Completion(IteratorStep(_iteratorRecord_)).\n            1. If _next_ is an abrupt completion, set _iteratorRecord_.[[Done]] to *true*.\n            1. ReturnIfAbrupt(_next_).\n            1. If _next_ is *false*, set _iteratorRecord_.[[Done]] to *true*.\n          1. Return ~unused~.\n        ",
  "ForStatement[2,3].VarDeclaredNames" : "\n        1. Return the VarDeclaredNames of |Statement|.\n      ",
  "AssignmentExpression[8,0].AssignmentTargetType" : "\n        1. Return ~invalid~.\n      ",
  "CoverCallExpressionAndAsyncArrowHead[0,0].BoundNames" : "\n        1. Let _head_ be the |AsyncArrowHead| that is covered by |CoverCallExpressionAndAsyncArrowHead|.\n        1. Return the BoundNames of _head_.\n      ",
  "ExportFromClause[1,0].ExportedNames" : "\n          1. Return a List whose sole element is the StringValue of |ModuleExportName|.\n        ",
  "Block[0,0].ContainsUndefinedContinueTarget" : "\n        1. Return *false*.\n      ",
  "ToInt8" : "\n        1. Let _number_ be ? ToNumber(_argument_).\n        1. If _number_ is not finite or _number_ is either *+0*<sub>ùîΩ</sub> or *-0*<sub>ùîΩ</sub>, return *+0*<sub>ùîΩ</sub>.\n        1. Let _int_ be truncate(‚Ñù(_number_)).\n        1. Let _int8bit_ be _int_ modulo 2<sup>8</sup>.\n        1. If _int8bit_ ‚â• 2<sup>7</sup>, return ùîΩ(_int8bit_ - 2<sup>8</sup>); otherwise return ùîΩ(_int8bit_).\n      ",
  "ArrayAssignmentPattern[0,0].DestructuringAssignmentEvaluation" : "\n          1. Let _iteratorRecord_ be ? GetIterator(_value_, ~sync~).\n          1. Return ? IteratorClose(_iteratorRecord_, NormalCompletion(~unused~)).\n        ",
  "ToBigInt64" : "\n        1. Let _n_ be ? ToBigInt(_argument_).\n        1. Let _int64bit_ be ‚Ñù(_n_) modulo 2<sup>64</sup>.\n        1. If _int64bit_ ‚â• 2<sup>63</sup>, return ‚Ñ§(_int64bit_ - 2<sup>64</sup>); otherwise return ‚Ñ§(_int64bit_).\n      ",
  "ImportDeclaration[1,0].BoundNames" : "\n        1. Return a new empty List.\n      ",
  "PrimaryExpression[8,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "INTRINSICS.ReferenceError" : null,
  "MethodDefinition[0,0].PrivateBoundIdentifiers" : "\n        1. Return PrivateBoundIdentifiers of |ClassElementName|.\n      ",
  "ShiftExpression[1,0].AssignmentTargetType" : "\n        1. Return ~invalid~.\n      ",
  "ClearKeptObjects" : "\n      1. Let _agentRecord_ be the surrounding agent's Agent Record.\n      1. Set _agentRecord_.[[KeptAlive]] to a new empty List.\n      1. Return ~unused~.\n    ",
  "ArrayBindingPattern[0,0].ContainsExpression" : "\n        1. Return *false*.\n      ",
  "AssignmentExpression[4,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "BindingProperty[1,0].ContainsExpression" : "\n        1. Let _has_ be IsComputedPropertyKey of |PropertyName|.\n        1. If _has_ is *true*, return *true*.\n        1. Return ContainsExpression of |BindingElement|.\n      ",
  "CharacterClassEscape[3,0].MayContainStrings" : "\n          1. Return *false*.\n        ",
  "ClassEscape[0,0].CompileToCharSet" : "\n          1. Let _cv_ be the CharacterValue of this |ClassEscape|.\n          1. Let _c_ be the character whose character value is _cv_.\n          1. Return the CharSet containing the single character _c_.\n        ",
  "Declaration[1,0].DeclarationPart" : "\n        1. Return |ClassDeclaration|.\n      ",
  "CharacterClassEscape[0,0].MayContainStrings" : "\n          1. Return *false*.\n        ",
  "CreateArrayFromList" : "\n        1. Let _array_ be ! ArrayCreate(0).\n        1. Let _n_ be 0.\n        1. For each element _e_ of _elements_, do\n          1. Perform ! CreateDataPropertyOrThrow(_array_, ! ToString(ùîΩ(_n_)), _e_).\n          1. Set _n_ to _n_ + 1.\n        1. Return _array_.\n      ",
  "INTRINSICS.Date.prototype.toTimeString" : "\n          1. Let _dateObject_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_dateObject_, [[DateValue]]).\n          1. Let _tv_ be _dateObject_.[[DateValue]].\n          1. If _tv_ is *NaN*, return *\"Invalid Date\"*.\n          1. Let _t_ be LocalTime(_tv_).\n          1. Return the string-concatenation of TimeString(_t_) and TimeZoneString(_tv_).\n        ",
  "ArrayAssignmentPattern[0,1].DestructuringAssignmentEvaluation" : "\n          1. Let _iteratorRecord_ be ? GetIterator(_value_, ~sync~).\n          1. If |Elision| is present, then\n            1. Let _status_ be Completion(IteratorDestructuringAssignmentEvaluation of |Elision| with argument _iteratorRecord_).\n            1. If _status_ is an abrupt completion, then\n              1. Assert: _iteratorRecord_.[[Done]] is *true*.\n              1. Return ? _status_.\n          1. Let _result_ be Completion(IteratorDestructuringAssignmentEvaluation of |AssignmentRestElement| with argument _iteratorRecord_).\n          1. If _iteratorRecord_.[[Done]] is *false*, return ? IteratorClose(_iteratorRecord_, _result_).\n          1. Return _result_.\n        ",
  "ObjectAssignmentPattern[3,1].DestructuringAssignmentEvaluation" : "\n          1. Perform ? RequireObjectCoercible(_value_).\n          1. Let _excludedNames_ be ? PropertyDestructuringAssignmentEvaluation of |AssignmentPropertyList| with argument _value_.\n          1. Return ? RestDestructuringAssignmentEvaluation of |AssignmentRestProperty| with arguments _value_ and _excludedNames_.\n        ",
  "LexicalBinding[1,0].Evaluation" : "\n          1. Let _rhs_ be ? Evaluation of |Initializer|.\n          1. Let _value_ be ? GetValue(_rhs_).\n          1. Let _env_ be the running execution context's LexicalEnvironment.\n          1. Return ? BindingInitialization of |BindingPattern| with arguments _value_ and _env_.\n        ",
  "Number::bitwiseOR" : "\n            1. Return NumberBitwiseOp(`|`, _x_, _y_).\n          ",
  "Record[StringExoticObject].OwnPropertyKeys" : "\n          1. Let _keys_ be a new empty List.\n          1. Let _str_ be _O_.[[StringData]].\n          1. Assert: _str_ is a String.\n          1. Let _len_ be the length of _str_.\n          1. For each integer _i_ such that 0 ‚â§ _i_ < _len_, in ascending order, do\n            1. Append ! ToString(ùîΩ(_i_)) to _keys_.\n          1. For each own property key _P_ of _O_ such that _P_ is an array index and ! ToIntegerOrInfinity(_P_) ‚â• _len_, in ascending numeric index order, do\n            1. Append _P_ to _keys_.\n          1. For each own property key _P_ of _O_ such that _P_ is a String and _P_ is not an array index, in ascending chronological order of property creation, do\n            1. Append _P_ to _keys_.\n          1. For each own property key _P_ of _O_ such that _P_ is a Symbol, in ascending chronological order of property creation, do\n            1. Append _P_ to _keys_.\n          1. Return _keys_.\n        ",
  "INTRINSICS.Number" : "\n          1. If _value_ is present, then\n            1. Let _prim_ be ? ToNumeric(_value_).\n            1. If _prim_ is a BigInt, let _n_ be ùîΩ(‚Ñù(_prim_)).\n            1. Otherwise, let _n_ be _prim_.\n          1. Else,\n            1. Let _n_ be *+0*<sub>ùîΩ</sub>.\n          1. If NewTarget is *undefined*, return _n_.\n          1. Let _O_ be ? OrdinaryCreateFromConstructor(NewTarget, *\"%Number.prototype%\"*, ¬´ [[NumberData]] ¬ª).\n          1. Set _O_.[[NumberData]] to _n_.\n          1. Return _O_.\n        ",
  "AsyncConciseBody[1,0].AsyncConciseBodyContainsUseStrict" : "\n        1. Return FunctionBodyContainsUseStrict of |AsyncFunctionBody|.\n      ",
  "AsyncConciseBody[0,0].VarDeclaredNames" : "\n        1. Return a new empty List.\n      ",
  "INTRINSICS.Object.prototype.propertyIsEnumerable" : "\n          1. [id=\"step-propertyisenumerable-topropertykey\"] Let _P_ be ? ToPropertyKey(_V_).\n          1. [id=\"step-propertyisenumerable-toobject\"] Let _O_ be ? ToObject(*this* value).\n          1. Let _desc_ be ? <emu-meta effects=\"user-code\">_O_.[[GetOwnProperty]]</emu-meta>(_P_).\n          1. If _desc_ is *undefined*, return *false*.\n          1. Return _desc_.[[Enumerable]].\n        ",
  "BindingElementList[1,0].IteratorBindingInitialization" : "\n        1. Perform ? IteratorBindingInitialization of |BindingElementList| with arguments _iteratorRecord_ and _environment_.\n        1. Return ? IteratorBindingInitialization of |BindingElisionElement| with arguments _iteratorRecord_ and _environment_.\n      ",
  "ThisBigIntValue" : "\n            1. If _value_ is a BigInt, return _value_.\n            1. If _value_ is an Object and _value_ has a [[BigIntData]] internal slot, then\n              1. Assert: _value_.[[BigIntData]] is a BigInt.\n              1. Return _value_.[[BigIntData]].\n            1. Throw a *TypeError* exception.\n          ",
  "LabelledItem[1,0].ContainsUndefinedBreakTarget" : "\n        1. Return *false*.\n      ",
  "ForStatement[2,2].ContainsDuplicateLabels" : "\n        1. Return ContainsDuplicateLabels of |Statement| with argument _labelSet_.\n      ",
  "INTRINSICS.TypedArray.prototype.reduce" : "\n          1. Let _O_ be the *this* value.\n          1. Let _taRecord_ be ? ValidateTypedArray(_O_, ~seq-cst~).\n          1. Let _len_ be TypedArrayLength(_taRecord_).\n          1. If IsCallable(_callbackfn_) is *false*, throw a *TypeError* exception.\n          1. If _len_ = 0 and _initialValue_ is not present, throw a *TypeError* exception.\n          1. Let _k_ be 0.\n          1. Let _accumulator_ be *undefined*.\n          1. If _initialValue_ is present, then\n            1. Set _accumulator_ to _initialValue_.\n          1. Else,\n            1. Let _Pk_ be ! ToString(ùîΩ(_k_)).\n            1. Set _accumulator_ to ! Get(_O_, _Pk_).\n            1. Set _k_ to _k_ + 1.\n          1. Repeat, while _k_ < _len_,\n            1. Let _Pk_ be ! ToString(ùîΩ(_k_)).\n            1. Let _kValue_ be ! Get(_O_, _Pk_).\n            1. Set _accumulator_ to ? Call(_callbackfn_, *undefined*, ¬´ _accumulator_, _kValue_, ùîΩ(_k_), _O_ ¬ª).\n            1. Set _k_ to _k_ + 1.\n          1. Return _accumulator_.\n        ",
  "FunctionExpression[0,1].ContainsArguments" : "\n        1. Return *false*.\n      ",
  "GeneratorResume:cont0" : "\n          1. Let _state_ be ? GeneratorValidate(_generator_, _generatorBrand_).\n          1. If _state_ is ~completed~, return CreateIterResultObject(*undefined*, *true*).\n          1. Assert: _state_ is either ~suspended-start~ or ~suspended-yield~.\n          1. Let _genContext_ be _generator_.[[GeneratorContext]].\n          1. Let _methodContext_ be the running execution context.\n          1. Suspend _methodContext_.\n          1. Set _generator_.[[GeneratorState]] to ~executing~.\n          1. Push _genContext_ onto the execution context stack; _genContext_ is now the running execution context.\n          1. <emu-meta effects=\"user-code\">Resume the suspended evaluation of _genContext_</emu-meta> using NormalCompletion(_value_) as the result of the operation that suspended it. Let _result_ be the value returned by the resumed computation.\n          1. Assert: When we return here, _genContext_ has already been removed from the execution context stack and _methodContext_ is the currently running execution context.\n          1. Return ? _result_.\n        ",
  "INTRINSICS.Math.tan" : "\n          1. Let _n_ be ? ToNumber(_x_).\n          1. If _n_ is one of *NaN*, *+0*<sub>ùîΩ</sub>, or *-0*<sub>ùîΩ</sub>, return _n_.\n          1. If _n_ is either *+‚àû*<sub>ùîΩ</sub> or *-‚àû*<sub>ùîΩ</sub>, return *NaN*.\n          1. Return an implementation-approximated Number value representing the result of the tangent of ‚Ñù(_n_).\n        ",
  "AdvanceStringIndex" : "\n          1. Assert: _index_ ‚â§ 2<sup>53</sup> - 1.\n          1. If _unicode_ is *false*, return _index_ + 1.\n          1. Let _length_ be the length of _S_.\n          1. If _index_ + 1 ‚â• _length_, return _index_ + 1.\n          1. Let _cp_ be CodePointAt(_S_, _index_).\n          1. Return _index_ + _cp_.[[CodeUnitCount]].\n        ",
  "ForStatement[0,1].ContainsUndefinedContinueTarget" : "\n        1. Return ContainsUndefinedContinueTarget of |Statement| with arguments _iterationSet_ and ¬´ ¬ª.\n      ",
  "PrepareForOrdinaryCall" : "\n          1. Let _callerContext_ be the running execution context.\n          1. Let _calleeContext_ be a new ECMAScript code execution context.\n          1. Set the Function of _calleeContext_ to _F_.\n          1. Let _calleeRealm_ be _F_.[[Realm]].\n          1. Set the Realm of _calleeContext_ to _calleeRealm_.\n          1. Set the ScriptOrModule of _calleeContext_ to _F_.[[ScriptOrModule]].\n          1. Let _localEnv_ be NewFunctionEnvironment(_F_, _newTarget_).\n          1. Set the LexicalEnvironment of _calleeContext_ to _localEnv_.\n          1. Set the VariableEnvironment of _calleeContext_ to _localEnv_.\n          1. Set the PrivateEnvironment of _calleeContext_ to _F_.[[PrivateEnvironment]].\n          1. If _callerContext_ is not already suspended, suspend _callerContext_.\n          1. Push _calleeContext_ onto the execution context stack; _calleeContext_ is now the running execution context.\n          1. NOTE: Any exception objects produced after this point are associated with _calleeRealm_.\n          1. Return _calleeContext_.\n        ",
  "INTRINSICS.Number.prototype.valueOf" : "\n          1. Return ? ThisNumberValue(*this* value).\n        ",
  "ArgumentList[2,0].ArgumentListEvaluation" : "\n          1. Let _precedingArgs_ be ? ArgumentListEvaluation of |ArgumentList|.\n          1. Let _ref_ be ? Evaluation of |AssignmentExpression|.\n          1. Let _arg_ be ? GetValue(_ref_).\n          1. Return the list-concatenation of _precedingArgs_ and ¬´ _arg_ ¬ª.\n        ",
  "INTRINSICS.String.prototype.valueOf" : "\n          1. Return ? ThisStringValue(*this* value).\n        ",
  "ContinueDynamicImport:clo1:clo0" : "\n            1. If _moduleCompletion_ is an abrupt completion, then\n              1. Perform ! Call(_promiseCapability_.[[Reject]], *undefined*, ¬´ _moduleCompletion_.[[Value]] ¬ª).\n              1. Return ~unused~.\n            1. Let _module_ be _moduleCompletion_.[[Value]].\n            1. Let _loadPromise_ be _module_.LoadRequestedModules().\n            1. Let _rejectedClosure_ be a new Abstract Closure with parameters (_reason_) that captures _promiseCapability_ and performs the following steps when called:\n              1. Perform ! Call(_promiseCapability_.[[Reject]], *undefined*, ¬´ _reason_ ¬ª).\n              1. Return ~unused~.\n            1. Let _onRejected_ be CreateBuiltinFunction(_rejectedClosure_, 1, *\"\"*, ¬´ ¬ª).\n            1. Let _linkAndEvaluateClosure_ be a new Abstract Closure with no parameters that captures _module_, _promiseCapability_, and _onRejected_ and performs the following steps when called:\n              1. Let _link_ be Completion(_module_.Link()).\n              1. If _link_ is an abrupt completion, then\n                1. Perform ! Call(_promiseCapability_.[[Reject]], *undefined*, ¬´ _link_.[[Value]] ¬ª).\n                1. Return ~unused~.\n              1. Let _evaluatePromise_ be _module_.Evaluate().\n              1. Let _fulfilledClosure_ be a new Abstract Closure with no parameters that captures _module_ and _promiseCapability_ and performs the following steps when called:\n                1. Let _namespace_ be GetModuleNamespace(_module_).\n                1. Perform ! Call(_promiseCapability_.[[Resolve]], *undefined*, ¬´ _namespace_ ¬ª).\n                1. Return ~unused~.\n              1. Let _onFulfilled_ be CreateBuiltinFunction(_fulfilledClosure_, 0, *\"\"*, ¬´ ¬ª).\n              1. Perform PerformPromiseThen(_evaluatePromise_, _onFulfilled_, _onRejected_).\n              1. Return ~unused~.\n            1. Let _linkAndEvaluate_ be CreateBuiltinFunction(_linkAndEvaluateClosure_, 0, *\"\"*, ¬´ ¬ª).\n            1. Perform PerformPromiseThen(_loadPromise_, _linkAndEvaluate_, _onRejected_).\n            1. Return ~unused~.\n          ",
  "ReturnStatement[0,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "SuperProperty[0,0].Evaluation" : "\n          1. Let _env_ be GetThisEnvironment().\n          1. Let _actualThis_ be ? _env_.GetThisBinding().\n          1. Let _propertyNameReference_ be ? Evaluation of |Expression|.\n          1. Let _propertyNameValue_ be ? GetValue(_propertyNameReference_).\n          1. Let _propertyKey_ be ? ToPropertyKey(_propertyNameValue_).\n          1. If the source text matched by this |SuperProperty| is strict mode code, let _strict_ be *true*; else let _strict_ be *false*.\n          1. Return ? MakeSuperPropertyReference(_actualThis_, _propertyKey_, _strict_).\n        ",
  "NestedClass[2,0].CompileToCharSet" : "\n          1. Return CompileToCharSet of |CharacterClassEscape| with argument _rer_.\n        ",
  "INTRINSICS.print" : null,
  "StatementList[1,0].TopLevelVarScopedDeclarations" : "\n        1. Let _declarations1_ be TopLevelVarScopedDeclarations of |StatementList|.\n        1. Let _declarations2_ be TopLevelVarScopedDeclarations of |StatementListItem|.\n        1. Return the list-concatenation of _declarations1_ and _declarations2_.\n      ",
  "GeneratorMethod[0,0].MethodDefinitionEvaluation" : "\n        1. Let _propKey_ be ? Evaluation of |ClassElementName|.\n        1. Let _env_ be the running execution context's LexicalEnvironment.\n        1. Let _privateEnv_ be the running execution context's PrivateEnvironment.\n        1. Let _sourceText_ be the source text matched by |GeneratorMethod|.\n        1. Let _closure_ be OrdinaryFunctionCreate(%GeneratorFunction.prototype%, _sourceText_, |UniqueFormalParameters|, |GeneratorBody|, ~non-lexical-this~, _env_, _privateEnv_).\n        1. Perform MakeMethod(_closure_, _object_).\n        1. Perform SetFunctionName(_closure_, _propKey_).\n        1. Let _prototype_ be OrdinaryObjectCreate(%GeneratorFunction.prototype.prototype%).\n        1. Perform ! DefinePropertyOrThrow(_closure_, *\"prototype\"*, PropertyDescriptor { [[Value]]: _prototype_, [[Writable]]: *true*, [[Enumerable]]: *false*, [[Configurable]]: *false* }).\n        1. Return ? DefineMethodProperty(_object_, _propKey_, _closure_, _enumerable_).\n      ",
  "DefaultClause[0,0].Evaluation" : "\n        1. Return ~empty~.\n      ",
  "UnaryExpression[1,0].AssignmentTargetType" : "\n        1. Return ~invalid~.\n      ",
  "CreateMappedArgumentsObject" : "\n          1. Assert: _formals_ does not contain a rest parameter, any binding patterns, or any initializers. It may contain duplicate identifiers.\n          1. Let _len_ be the number of elements in _argumentsList_.\n          1. Let _obj_ be MakeBasicObject(¬´ [[Prototype]], [[Extensible]], [[ParameterMap]] ¬ª).\n          1. Set _obj_.[[GetOwnProperty]] as specified in <emu-xref href=\"#sec-arguments-exotic-objects-getownproperty-p\"></emu-xref>.\n          1. Set _obj_.[[DefineOwnProperty]] as specified in <emu-xref href=\"#sec-arguments-exotic-objects-defineownproperty-p-desc\"></emu-xref>.\n          1. Set _obj_.[[Get]] as specified in <emu-xref href=\"#sec-arguments-exotic-objects-get-p-receiver\"></emu-xref>.\n          1. Set _obj_.[[Set]] as specified in <emu-xref href=\"#sec-arguments-exotic-objects-set-p-v-receiver\"></emu-xref>.\n          1. Set _obj_.[[Delete]] as specified in <emu-xref href=\"#sec-arguments-exotic-objects-delete-p\"></emu-xref>.\n          1. Set _obj_.[[Prototype]] to %Object.prototype%.\n          1. Let _map_ be OrdinaryObjectCreate(*null*).\n          1. Set _obj_.[[ParameterMap]] to _map_.\n          1. Let _parameterNames_ be the BoundNames of _formals_.\n          1. Let _numberOfParameters_ be the number of elements in _parameterNames_.\n          1. Let _index_ be 0.\n          1. Repeat, while _index_ < _len_,\n            1. Let _val_ be _argumentsList_[_index_].\n            1. Perform ! CreateDataPropertyOrThrow(_obj_, ! ToString(ùîΩ(_index_)), _val_).\n            1. Set _index_ to _index_ + 1.\n          1. Perform ! DefinePropertyOrThrow(_obj_, *\"length\"*, PropertyDescriptor { [[Value]]: ùîΩ(_len_), [[Writable]]: *true*, [[Enumerable]]: *false*, [[Configurable]]: *true* }).\n          1. Let _mappedNames_ be a new empty List.\n          1. Set _index_ to _numberOfParameters_ - 1.\n          1. Repeat, while _index_ ‚â• 0,\n            1. Let _name_ be _parameterNames_[_index_].\n            1. If _mappedNames_ does not contain _name_, then\n              1. Append _name_ to _mappedNames_.\n              1. If _index_ < _len_, then\n                1. Let _g_ be MakeArgGetter(_name_, _env_).\n                1. Let _p_ be MakeArgSetter(_name_, _env_).\n                1. Perform ! _map_.[[DefineOwnProperty]](! ToString(ùîΩ(_index_)), PropertyDescriptor { [[Set]]: _p_, [[Get]]: _g_, [[Enumerable]]: *false*, [[Configurable]]: *true* }).\n            1. Set _index_ to _index_ - 1.\n          1. Perform ! DefinePropertyOrThrow(_obj_, @@iterator, PropertyDescriptor { [[Value]]: %Array.prototype.values%, [[Writable]]: *true*, [[Enumerable]]: *false*, [[Configurable]]: *true* }).\n          1. Perform ! DefinePropertyOrThrow(_obj_, *\"callee\"*, PropertyDescriptor { [[Value]]: _func_, [[Writable]]: *true*, [[Enumerable]]: *false*, [[Configurable]]: *true* }).\n          1. Return _obj_.\n        ",
  "LabelledStatement[0,0].ContainsUndefinedContinueTarget" : "\n        1. Let _label_ be the StringValue of |LabelIdentifier|.\n        1. Let _newLabelSet_ be the list-concatenation of _labelSet_ and ¬´ _label_ ¬ª.\n        1. Return ContainsUndefinedContinueTarget of |LabelledItem| with arguments _iterationSet_ and _newLabelSet_.\n      ",
  "__CLAMP__" : null,
  "OrdinarySetWithOwnDescriptor" : "\n          1. If _ownDesc_ is *undefined*, then\n            1. Let _parent_ be ? <emu-meta effects=\"user-code\">_O_.[[GetPrototypeOf]]</emu-meta>().\n            1. If _parent_ is not *null*, then\n              1. Return ? <emu-meta effects=\"user-code\">_parent_.[[Set]]</emu-meta>(_P_, _V_, _Receiver_).\n            1. Else,\n              1. Set _ownDesc_ to the PropertyDescriptor { [[Value]]: *undefined*, [[Writable]]: *true*, [[Enumerable]]: *true*, [[Configurable]]: *true* }.\n          1. If IsDataDescriptor(_ownDesc_) is *true*, then\n            1. If _ownDesc_.[[Writable]] is *false*, return *false*.\n            1. If _Receiver_ is not an Object, return *false*.\n            1. Let _existingDescriptor_ be ? <emu-meta effects=\"user-code\">_Receiver_.[[GetOwnProperty]]</emu-meta>(_P_).\n            1. If _existingDescriptor_ is not *undefined*, then\n              1. If IsAccessorDescriptor(_existingDescriptor_) is *true*, return *false*.\n              1. If _existingDescriptor_.[[Writable]] is *false*, return *false*.\n              1. Let _valueDesc_ be the PropertyDescriptor { [[Value]]: _V_ }.\n              1. Return ? <emu-meta effects=\"user-code\">_Receiver_.[[DefineOwnProperty]]</emu-meta>(_P_, _valueDesc_).\n            1. Else,\n              1. Assert: _Receiver_ does not currently have a property _P_.\n              1. Return ? CreateDataProperty(_Receiver_, _P_, _V_).\n          1. Assert: IsAccessorDescriptor(_ownDesc_) is *true*.\n          1. Let _setter_ be _ownDesc_.[[Set]].\n          1. If _setter_ is *undefined*, return *false*.\n          1. Perform ? Call(_setter_, _Receiver_, ¬´ _V_ ¬ª).\n          1. Return *true*.\n        ",
  "ClassUnion[0,1].CompileToCharSet" : "\n          1. Let _A_ be CompileToCharSet of |ClassSetRange| with argument _rer_.\n          1. If |ClassUnion| is present, then\n            1. Let _B_ be CompileToCharSet of |ClassUnion| with argument _rer_.\n            1. Return the union of CharSets _A_ and _B_.\n          1. Return _A_.\n        ",
  "LogicalANDExpression[1,0].AssignmentTargetType" : "\n        1. Return ~invalid~.\n      ",
  "ToPropertyDescriptor" : "\n          1. If _Obj_ is not an Object, throw a *TypeError* exception.\n          1. Let _desc_ be a new Property Descriptor that initially has no fields.\n          1. Let _hasEnumerable_ be ? HasProperty(_Obj_, *\"enumerable\"*).\n          1. If _hasEnumerable_ is *true*, then\n            1. Let _enumerable_ be ToBoolean(? Get(_Obj_, *\"enumerable\"*)).\n            1. Set _desc_.[[Enumerable]] to _enumerable_.\n          1. Let _hasConfigurable_ be ? HasProperty(_Obj_, *\"configurable\"*).\n          1. If _hasConfigurable_ is *true*, then\n            1. Let _configurable_ be ToBoolean(? Get(_Obj_, *\"configurable\"*)).\n            1. Set _desc_.[[Configurable]] to _configurable_.\n          1. Let _hasValue_ be ? HasProperty(_Obj_, *\"value\"*).\n          1. If _hasValue_ is *true*, then\n            1. Let _value_ be ? Get(_Obj_, *\"value\"*).\n            1. Set _desc_.[[Value]] to _value_.\n          1. Let _hasWritable_ be ? HasProperty(_Obj_, *\"writable\"*).\n          1. If _hasWritable_ is *true*, then\n            1. Let _writable_ be ToBoolean(? Get(_Obj_, *\"writable\"*)).\n            1. Set _desc_.[[Writable]] to _writable_.\n          1. Let _hasGet_ be ? HasProperty(_Obj_, *\"get\"*).\n          1. If _hasGet_ is *true*, then\n            1. Let _getter_ be ? Get(_Obj_, *\"get\"*).\n            1. If IsCallable(_getter_) is *false* and _getter_ is not *undefined*, throw a *TypeError* exception.\n            1. Set _desc_.[[Get]] to _getter_.\n          1. Let _hasSet_ be ? HasProperty(_Obj_, *\"set\"*).\n          1. If _hasSet_ is *true*, then\n            1. Let _setter_ be ? Get(_Obj_, *\"set\"*).\n            1. If IsCallable(_setter_) is *false* and _setter_ is not *undefined*, throw a *TypeError* exception.\n            1. Set _desc_.[[Set]] to _setter_.\n          1. If _desc_ has a [[Get]] field or _desc_ has a [[Set]] field, then\n            1. If _desc_ has a [[Value]] field or _desc_ has a [[Writable]] field, throw a *TypeError* exception.\n          1. Return _desc_.\n        ",
  "Record[ObjectEnvironmentRecord].HasSuperBinding" : "\n            1. Return *false*.\n          ",
  "INTRINSICS.String.prototype.split" : "\n          1. Let _O_ be ? RequireObjectCoercible(*this* value).\n          1. If _separator_ is neither *undefined* nor *null*, then\n            1. Let _splitter_ be ? GetMethod(_separator_, @@split).\n            1. If _splitter_ is not *undefined*, then\n              1. Return ? Call(_splitter_, _separator_, ¬´ _O_, _limit_ ¬ª).\n          1. Let _S_ be ? ToString(_O_).\n          1. If _limit_ is *undefined*, let _lim_ be 2<sup>32</sup> - 1; else let _lim_ be ‚Ñù(? ToUint32(_limit_)).\n          1. Let _R_ be ? ToString(_separator_).\n          1. If _lim_ = 0, then\n            1. Return CreateArrayFromList(¬´ ¬ª).\n          1. If _separator_ is *undefined*, then\n            1. Return CreateArrayFromList(¬´ _S_ ¬ª).\n          1. Let _separatorLength_ be the length of _R_.\n          1. If _separatorLength_ = 0, then\n            1. Let _head_ be the substring of _S_ from 0 to _lim_.\n            1. Let _codeUnits_ be a List consisting of the sequence of code units that are the elements of _head_.\n            1. Return CreateArrayFromList(_codeUnits_).\n          1. If _S_ is the empty String, return CreateArrayFromList(¬´ _S_ ¬ª).\n          1. Let _substrings_ be a new empty List.\n          1. Let _i_ be 0.\n          1. Let _j_ be StringIndexOf(_S_, _R_, 0).\n          1. Repeat, while _j_ ‚â† -1,\n            1. Let _T_ be the substring of _S_ from _i_ to _j_.\n            1. Append _T_ to _substrings_.\n            1. If the number of elements in _substrings_ is _lim_, return CreateArrayFromList(_substrings_).\n            1. Set _i_ to _j_ + _separatorLength_.\n            1. Set _j_ to StringIndexOf(_S_, _R_, _i_).\n          1. Let _T_ be the substring of _S_ from _i_.\n          1. Append _T_ to _substrings_.\n          1. Return CreateArrayFromList(_substrings_).\n        ",
  "ForStatement[2,1].VarScopedDeclarations" : "\n        1. Return the VarScopedDeclarations of |Statement|.\n      ",
  "INTRINSICS.Array.from" : "\n          1. Let _C_ be the *this* value.\n          1. If _mapfn_ is *undefined*, then\n            1. Let _mapping_ be *false*.\n          1. Else,\n            1. If IsCallable(_mapfn_) is *false*, throw a *TypeError* exception.\n            1. Let _mapping_ be *true*.\n          1. Let _usingIterator_ be ? GetMethod(_items_, @@iterator).\n          1. If _usingIterator_ is not *undefined*, then\n            1. If IsConstructor(_C_) is *true*, then\n              1. Let _A_ be ? Construct(_C_).\n            1. Else,\n              1. Let _A_ be ! ArrayCreate(0).\n            1. Let _iteratorRecord_ be ? GetIteratorFromMethod(_items_, _usingIterator_).\n            1. Let _k_ be 0.\n            1. Repeat,\n              1. If _k_ ‚â• 2<sup>53</sup> - 1, then\n                1. Let _error_ be ThrowCompletion(a newly created *TypeError* object).\n                1. Return ? IteratorClose(_iteratorRecord_, _error_).\n              1. Let _Pk_ be ! ToString(ùîΩ(_k_)).\n              1. Let _next_ be ? IteratorStepValue(_iteratorRecord_).\n              1. If _next_ is ~done~, then\n                1. Perform ? Set(_A_, *\"length\"*, ùîΩ(_k_), *true*).\n                1. Return _A_.\n              1. If _mapping_ is *true*, then\n                1. Let _mappedValue_ be Completion(Call(_mapfn_, _thisArg_, ¬´ _next_, ùîΩ(_k_) ¬ª)).\n                1. IfAbruptCloseIterator(_mappedValue_, _iteratorRecord_).\n              1. Else,\n                1. Let _mappedValue_ be _next_.\n              1. Let _defineStatus_ be Completion(CreateDataPropertyOrThrow(_A_, _Pk_, _mappedValue_)).\n              1. IfAbruptCloseIterator(_defineStatus_, _iteratorRecord_).\n              1. Set _k_ to _k_ + 1.\n          1. NOTE: _items_ is not an Iterable so assume it is an array-like object.\n          1. Let _arrayLike_ be ! ToObject(_items_).\n          1. Let _len_ be ? LengthOfArrayLike(_arrayLike_).\n          1. If IsConstructor(_C_) is *true*, then\n            1. Let _A_ be ? Construct(_C_, ¬´ ùîΩ(_len_) ¬ª).\n          1. Else,\n            1. Let _A_ be ? ArrayCreate(_len_).\n          1. Let _k_ be 0.\n          1. Repeat, while _k_ < _len_,\n            1. Let _Pk_ be ! ToString(ùîΩ(_k_)).\n            1. Let _kValue_ be ? Get(_arrayLike_, _Pk_).\n            1. If _mapping_ is *true*, then\n              1. Let _mappedValue_ be ? Call(_mapfn_, _thisArg_, ¬´ _kValue_, ùîΩ(_k_) ¬ª).\n            1. Else,\n              1. Let _mappedValue_ be _kValue_.\n            1. Perform ? CreateDataPropertyOrThrow(_A_, _Pk_, _mappedValue_).\n            1. Set _k_ to _k_ + 1.\n          1. Perform ? Set(_A_, *\"length\"*, ùîΩ(_len_), *true*).\n          1. Return _A_.\n        ",
  "INTRINSICS.get RegExp.prototype.sticky" : "\n          1. Let _R_ be the *this* value.\n          1. Let _cu_ be the code unit 0x0079 (LATIN SMALL LETTER Y).\n          1. Return ? RegExpHasFlag(_R_, _cu_).\n        ",
  "AsyncFunctionBody[0,0].EvaluateAsyncFunctionBody" : "\n        1. Let _promiseCapability_ be ! NewPromiseCapability(%Promise%).\n        1. Let _declResult_ be Completion(FunctionDeclarationInstantiation(_functionObject_, _argumentsList_)).\n        1. If _declResult_ is an abrupt completion, then\n          1. Perform ! Call(_promiseCapability_.[[Reject]], *undefined*, ¬´ _declResult_.[[Value]] ¬ª).\n        1. Else,\n          1. Perform AsyncFunctionStart(_promiseCapability_, |FunctionBody|).\n        1. Return Completion Record { [[Type]]: ~return~, [[Value]]: _promiseCapability_.[[Promise]], [[Target]]: ~empty~ }.\n      ",
  "UnaryExpression[3,0].IsFunctionDefinition" : "\n        1. Return *false*.\n      ",
  "ForStatement[2,3].ContainsUndefinedBreakTarget" : "\n        1. Return ContainsUndefinedBreakTarget of |Statement| with argument _labelSet_.\n      ",
  "INTRINSICS.Symbol" : "\n          1. If NewTarget is not *undefined*, throw a *TypeError* exception.\n          1. If _description_ is *undefined*, let _descString_ be *undefined*.\n          1. Else, let _descString_ be ? ToString(_description_).\n          1. Return a new Symbol whose [[Description]] is _descString_.\n        ",
  "ExpressionStatement[0,0].Evaluation" : "\n        1. Let _exprRef_ be ? Evaluation of |Expression|.\n        1. Return ? GetValue(_exprRef_).\n      ",
  "CaseBlock[1,2].LexicallyDeclaredNames" : "\n        1. If the first |CaseClauses| is present, let _names1_ be the LexicallyDeclaredNames of the first |CaseClauses|.\n        1. Else, let _names1_ be a new empty List.\n        1. Let _names2_ be LexicallyDeclaredNames of |DefaultClause|.\n        1. If the second |CaseClauses| is present, let _names3_ be the LexicallyDeclaredNames of the second |CaseClauses|.\n        1. Else, let _names3_ be a new empty List.\n        1. Return the list-concatenation of _names1_, _names2_, and _names3_.\n      ",
  "CaseBlock[1,1].CaseBlockEvaluation" : "\n        1. Let _V_ be *undefined*.\n        1. If the first |CaseClauses| is present, then\n          1. Let _A_ be the List of |CaseClause| items in the first |CaseClauses|, in source text order.\n        1. Else,\n          1. Let _A_ be a new empty List.\n        1. Let _found_ be *false*.\n        1. For each |CaseClause| _C_ of _A_, do\n          1. If _found_ is *false*, then\n            1. Set _found_ to ? CaseClauseIsSelected(_C_, _input_).\n          1. If _found_ is *true*, then\n            1. Let _R_ be Completion(Evaluation of _C_).\n            1. If _R_.[[Value]] is not ~empty~, set _V_ to _R_.[[Value]].\n            1. If _R_ is an abrupt completion, return ? UpdateEmpty(_R_, _V_).\n        1. Let _foundInB_ be *false*.\n        1. If the second |CaseClauses| is present, then\n          1. Let _B_ be the List of |CaseClause| items in the second |CaseClauses|, in source text order.\n        1. Else,\n          1. Let _B_ be a new empty List.\n        1. If _found_ is *false*, then\n          1. For each |CaseClause| _C_ of _B_, do\n            1. If _foundInB_ is *false*, then\n              1. Set _foundInB_ to ? CaseClauseIsSelected(_C_, _input_).\n            1. If _foundInB_ is *true*, then\n              1. Let _R_ be Completion(Evaluation of |CaseClause| _C_).\n              1. If _R_.[[Value]] is not ~empty~, set _V_ to _R_.[[Value]].\n              1. If _R_ is an abrupt completion, return ? UpdateEmpty(_R_, _V_).\n        1. If _foundInB_ is *true*, return _V_.\n        1. Let _defaultR_ be Completion(Evaluation of |DefaultClause|).\n        1. If _defaultR_.[[Value]] is not ~empty~, set _V_ to _defaultR_.[[Value]].\n        1. If _defaultR_ is an abrupt completion, return ? UpdateEmpty(_defaultR_, _V_).\n        1. NOTE: The following is another complete iteration of the second |CaseClauses|.\n        1. For each |CaseClause| _C_ of _B_, do\n          1. Let _R_ be Completion(Evaluation of |CaseClause| _C_).\n          1. If _R_.[[Value]] is not ~empty~, set _V_ to _R_.[[Value]].\n          1. If _R_ is an abrupt completion, return ? UpdateEmpty(_R_, _V_).\n        1. Return _V_.\n      ",
  "Call" : "\n        1. If _argumentsList_ is not present, set _argumentsList_ to a new empty List.\n        1. If IsCallable(_F_) is *false*, throw a *TypeError* exception.\n        1. Return ? <emu-meta effects=\"user-code\">_F_.[[Call]]</emu-meta>(_V_, _argumentsList_).\n      ",
  "Statement[2,0].ContainsUndefinedBreakTarget" : "\n        1. Return *false*.\n      ",
  "BinaryOr" : "\n            1. If _x_ = 1 or _y_ = 1, return 1.\n            1. Else, return 0.\n          ",
  "OptionalExpression[1,0].HasCallInTailPosition" : "\n        1. Return HasCallInTailPosition of |OptionalChain| with argument _call_.\n      ",
  "INTRINSICS.Map.prototype.entries" : "\n          1. Let _M_ be the *this* value.\n          1. Return ? CreateMapIterator(_M_, ~key+value~).\n        ",
  "FieldDefinition[0,1].PropName" : "\n        1. Return PropName of |ClassElementName|.\n      ",
  "ForStatement[1,0].ContainsUndefinedBreakTarget" : "\n        1. Return ContainsUndefinedBreakTarget of |Statement| with argument _labelSet_.\n      ",
  "TemplateMiddleList[0,0].SubstitutionEvaluation" : "\n          1. Let _subRef_ be ? Evaluation of |Expression|.\n          1. Let _sub_ be ? GetValue(_subRef_).\n          1. Return ¬´ _sub_ ¬ª.\n        ",
  "LocalTime" : "\n          1. Let _systemTimeZoneIdentifier_ be SystemTimeZoneIdentifier().\n          1. If IsTimeZoneOffsetString(_systemTimeZoneIdentifier_) is *true*, then\n            1. Let _offsetNs_ be ParseTimeZoneOffsetString(_systemTimeZoneIdentifier_).\n          1. Else,\n            1. Let _offsetNs_ be GetNamedTimeZoneOffsetNanoseconds(_systemTimeZoneIdentifier_, ‚Ñ§(‚Ñù(_t_) √ó 10<sup>6</sup>)).\n          1. Let _offsetMs_ be truncate(_offsetNs_ / 10<sup>6</sup>).\n          1. Return _t_ + ùîΩ(_offsetMs_).\n        ",
  "ValidateTypedArray" : "\n          1. Perform ? RequireInternalSlot(_O_, [[TypedArrayName]]).\n          1. Assert: _O_ has a [[ViewedArrayBuffer]] internal slot.\n          1. Let _taRecord_ be MakeTypedArrayWithBufferWitnessRecord(_O_, _order_).\n          1. If IsTypedArrayOutOfBounds(_taRecord_) is *true*, throw a *TypeError* exception.\n          1. Return _taRecord_.\n        ",
  "ObjectBindingPattern[0,0].BindingInitialization" : "\n        1. Return ~unused~.\n      ",
  "AsyncArrowFunction[0,0].HasName" : "\n        1. Return *false*.\n      ",
  "Record[GlobalEnvironmentRecord].GetThisBinding" : "\n            1. Return _envRec_.[[GlobalThisValue]].\n          ",
  "GlobalDeclarationInstantiation" : "\n        1. Let _lexNames_ be the LexicallyDeclaredNames of _script_.\n        1. Let _varNames_ be the VarDeclaredNames of _script_.\n        1. For each element _name_ of _lexNames_, do\n          1. If _env_.HasVarDeclaration(_name_) is *true*, throw a *SyntaxError* exception.\n          1. If _env_.HasLexicalDeclaration(_name_) is *true*, throw a *SyntaxError* exception.\n          1. Let _hasRestrictedGlobal_ be ? _env_.HasRestrictedGlobalProperty(_name_).\n          1. If _hasRestrictedGlobal_ is *true*, throw a *SyntaxError* exception.\n        1. For each element _name_ of _varNames_, do\n          1. If _env_.HasLexicalDeclaration(_name_) is *true*, throw a *SyntaxError* exception.\n        1. Let _varDeclarations_ be the VarScopedDeclarations of _script_.\n        1. Let _functionsToInitialize_ be a new empty List.\n        1. Let _declaredFunctionNames_ be a new empty List.\n        1. For each element _d_ of _varDeclarations_, in reverse List order, do\n          1. If _d_ is not either a |VariableDeclaration|, a |ForBinding|, or a |BindingIdentifier|, then\n            1. Assert: _d_ is either a |FunctionDeclaration|, a |GeneratorDeclaration|, an |AsyncFunctionDeclaration|, or an |AsyncGeneratorDeclaration|.\n            1. NOTE: If there are multiple function declarations for the same name, the last declaration is used.\n            1. Let _fn_ be the sole element of the BoundNames of _d_.\n            1. If _declaredFunctionNames_ does not contain _fn_, then\n              1. Let _fnDefinable_ be ? _env_.CanDeclareGlobalFunction(_fn_).\n              1. If _fnDefinable_ is *false*, throw a *TypeError* exception.\n              1. Append _fn_ to _declaredFunctionNames_.\n              1. Insert _d_ as the first element of _functionsToInitialize_.\n        1. Let _declaredVarNames_ be a new empty List.\n        1. For each element _d_ of _varDeclarations_, do\n          1. If _d_ is either a |VariableDeclaration|, a |ForBinding|, or a |BindingIdentifier|, then\n            1. For each String _vn_ of the BoundNames of _d_, do\n              1. If _declaredFunctionNames_ does not contain _vn_, then\n                1. Let _vnDefinable_ be ? _env_.CanDeclareGlobalVar(_vn_).\n                1. If _vnDefinable_ is *false*, throw a *TypeError* exception.\n                1. If _declaredVarNames_ does not contain _vn_, then\n                  1. Append _vn_ to _declaredVarNames_.\n        1. NOTE: No abnormal terminations occur after this algorithm step if the global object is an ordinary object. However, if the global object is a Proxy exotic object it may exhibit behaviours that cause abnormal terminations in some of the following steps.\n        1. [id=\"step-globaldeclarationinstantiation-web-compat-insertion-point\"] NOTE: Annex <emu-xref href=\"#sec-web-compat-globaldeclarationinstantiation\"></emu-xref> adds additional steps at this point.\n        1. Let _lexDeclarations_ be the LexicallyScopedDeclarations of _script_.\n        1. Let _privateEnv_ be *null*.\n        1. For each element _d_ of _lexDeclarations_, do\n          1. NOTE: Lexically declared names are only instantiated here but not initialized.\n          1. For each element _dn_ of the BoundNames of _d_, do\n            1. If IsConstantDeclaration of _d_ is *true*, then\n              1. Perform ? <emu-meta effects=\"user-code\">_env_.CreateImmutableBinding</emu-meta>(_dn_, *true*).\n            1. Else,\n              1. Perform ? <emu-meta effects=\"user-code\">_env_.CreateMutableBinding</emu-meta>(_dn_, *false*).\n        1. For each Parse Node _f_ of _functionsToInitialize_, do\n          1. Let _fn_ be the sole element of the BoundNames of _f_.\n          1. Let _fo_ be InstantiateFunctionObject of _f_ with arguments _env_ and _privateEnv_.\n          1. Perform ? <emu-meta effects=\"user-code\">_env_.CreateGlobalFunctionBinding</emu-meta>(_fn_, _fo_, *false*).\n        1. For each String _vn_ of _declaredVarNames_, do\n          1. Perform ? <emu-meta effects=\"user-code\">_env_.CreateGlobalVarBinding</emu-meta>(_vn_, *false*).\n        1. Return ~unused~.\n      ",
  "ClassTail[0,0].ClassDefinitionEvaluation" : "\n        1. Let _env_ be the LexicalEnvironment of the running execution context.\n        1. Let _classEnv_ be NewDeclarativeEnvironment(_env_).\n        1. If _classBinding_ is not *undefined*, then\n          1. Perform ! _classEnv_.CreateImmutableBinding(_classBinding_, *true*).\n        1. Let _outerPrivateEnvironment_ be the running execution context's PrivateEnvironment.\n        1. Let _classPrivateEnvironment_ be NewPrivateEnvironment(_outerPrivateEnvironment_).\n        1. If |ClassBody| is present, then\n          1. For each String _dn_ of the PrivateBoundIdentifiers of |ClassBody|, do\n            1. If _classPrivateEnvironment_.[[Names]] contains a Private Name _pn_ such that _pn_.[[Description]] is _dn_, then\n              1. Assert: This is only possible for getter/setter pairs.\n            1. Else,\n              1. Let _name_ be a new Private Name whose [[Description]] is _dn_.\n              1. Append _name_ to _classPrivateEnvironment_.[[Names]].\n        1. If |ClassHeritage| is not present, then\n          1. Let _protoParent_ be %Object.prototype%.\n          1. Let _constructorParent_ be %Function.prototype%.\n        1. Else,\n          1. Set the running execution context's LexicalEnvironment to _classEnv_.\n          1. NOTE: The running execution context's PrivateEnvironment is _outerPrivateEnvironment_ when evaluating |ClassHeritage|.\n          1. Let _superclassRef_ be Completion(Evaluation of |ClassHeritage|).\n          1. Set the running execution context's LexicalEnvironment to _env_.\n          1. Let _superclass_ be ? GetValue(? _superclassRef_).\n          1. If _superclass_ is *null*, then\n            1. Let _protoParent_ be *null*.\n            1. Let _constructorParent_ be %Function.prototype%.\n          1. Else if IsConstructor(_superclass_) is *false*, then\n            1. Throw a *TypeError* exception.\n          1. Else,\n            1. Let _protoParent_ be ? Get(_superclass_, *\"prototype\"*).\n            1. If _protoParent_ is not an Object and _protoParent_ is not *null*, throw a *TypeError* exception.\n            1. Let _constructorParent_ be _superclass_.\n        1. Let _proto_ be OrdinaryObjectCreate(_protoParent_).\n        1. If |ClassBody| is not present, let _constructor_ be ~empty~.\n        1. Else, let _constructor_ be ConstructorMethod of |ClassBody|.\n        1. Set the running execution context's LexicalEnvironment to _classEnv_.\n        1. Set the running execution context's PrivateEnvironment to _classPrivateEnvironment_.\n        1. If _constructor_ is ~empty~, then\n          1. Let _defaultConstructor_ be a new Abstract Closure with no parameters that captures nothing and performs the following steps when called:\n            1. Let _args_ be the List of arguments that was passed to this function by [[Call]] or [[Construct]].\n            1. If NewTarget is *undefined*, throw a *TypeError* exception.\n            1. Let _F_ be the active function object.\n            1. If _F_.[[ConstructorKind]] is ~derived~, then\n              1. NOTE: This branch behaves similarly to `constructor(...args) { super(...args); }`. The most notable distinction is that while the aforementioned ECMAScript source text observably calls the @@iterator method on `%Array.prototype%`, this function does not.\n              1. Let _func_ be ! _F_.[[GetPrototypeOf]]().\n              1. If IsConstructor(_func_) is *false*, throw a *TypeError* exception.\n              1. Let _result_ be ? Construct(_func_, _args_, NewTarget).\n            1. Else,\n              1. NOTE: This branch behaves similarly to `constructor() {}`.\n              1. Let _result_ be ? OrdinaryCreateFromConstructor(NewTarget, *\"%Object.prototype%\"*).\n            1. Perform ? InitializeInstanceElements(_result_, _F_).\n            1. Return _result_.\n          1. Let _F_ be CreateBuiltinFunction(_defaultConstructor_, 0, _className_, ¬´ [[ConstructorKind]], [[SourceText]] ¬ª, the current Realm Record, _constructorParent_).\n        1. Else,\n          1. Let _constructorInfo_ be ! DefineMethod of _constructor_ with arguments _proto_ and _constructorParent_.\n          1. Let _F_ be _constructorInfo_.[[Closure]].\n          1. Perform MakeClassConstructor(_F_).\n          1. Perform SetFunctionName(_F_, _className_).\n        1. Perform MakeConstructor(_F_, *false*, _proto_).\n        1. If |ClassHeritage| is present, set _F_.[[ConstructorKind]] to ~derived~.\n        1. Perform ! DefineMethodProperty(_proto_, *\"constructor\"*, _F_, *false*).\n        1. If |ClassBody| is not present, let _elements_ be a new empty List.\n        1. Else, let _elements_ be NonConstructorElements of |ClassBody|.\n        1. Let _instancePrivateMethods_ be a new empty List.\n        1. Let _staticPrivateMethods_ be a new empty List.\n        1. Let _instanceFields_ be a new empty List.\n        1. Let _staticElements_ be a new empty List.\n        1. For each |ClassElement| _e_ of _elements_, do\n          1. If IsStatic of _e_ is *false*, then\n            1. Let _element_ be Completion(ClassElementEvaluation of _e_ with argument _proto_).\n          1. Else,\n            1. Let _element_ be Completion(ClassElementEvaluation of _e_ with argument _F_).\n          1. If _element_ is an abrupt completion, then\n            1. Set the running execution context's LexicalEnvironment to _env_.\n            1. Set the running execution context's PrivateEnvironment to _outerPrivateEnvironment_.\n            1. Return ? _element_.\n          1. Set _element_ to ! _element_.\n          1. If _element_ is a PrivateElement, then\n            1. Assert: _element_.[[Kind]] is either ~method~ or ~accessor~.\n            1. If IsStatic of _e_ is *false*, let _container_ be _instancePrivateMethods_.\n            1. Else, let _container_ be _staticPrivateMethods_.\n            1. If _container_ contains a PrivateElement _pe_ such that _pe_.[[Key]] is _element_.[[Key]], then\n              1. Assert: _element_.[[Kind]] and _pe_.[[Kind]] are both ~accessor~.\n              1. If _element_.[[Get]] is *undefined*, then\n                1. Let _combined_ be PrivateElement { [[Key]]: _element_.[[Key]], [[Kind]]: ~accessor~, [[Get]]: _pe_.[[Get]], [[Set]]: _element_.[[Set]] }.\n              1. Else,\n                1. Let _combined_ be PrivateElement { [[Key]]: _element_.[[Key]], [[Kind]]: ~accessor~, [[Get]]: _element_.[[Get]], [[Set]]: _pe_.[[Set]] }.\n              1. Replace _pe_ in _container_ with _combined_.\n            1. Else,\n              1. Append _element_ to _container_.\n          1. Else if _element_ is a ClassFieldDefinition Record, then\n            1. If IsStatic of _e_ is *false*, append _element_ to _instanceFields_.\n            1. Else, append _element_ to _staticElements_.\n          1. Else if _element_ is a ClassStaticBlockDefinition Record, then\n            1. Append _element_ to _staticElements_.\n        1. Set the running execution context's LexicalEnvironment to _env_.\n        1. If _classBinding_ is not *undefined*, then\n          1. Perform ! _classEnv_.InitializeBinding(_classBinding_, _F_).\n        1. Set _F_.[[PrivateMethods]] to _instancePrivateMethods_.\n        1. Set _F_.[[Fields]] to _instanceFields_.\n        1. For each PrivateElement _method_ of _staticPrivateMethods_, do\n          1. Perform ! PrivateMethodOrAccessorAdd(_F_, _method_).\n        1. For each element _elementRecord_ of _staticElements_, do\n          1. If _elementRecord_ is a ClassFieldDefinition Record, then\n            1. Let _result_ be Completion(DefineField(_F_, _elementRecord_)).\n          1. Else,\n            1. Assert: _elementRecord_ is a ClassStaticBlockDefinition Record.\n            1. Let _result_ be Completion(Call(_elementRecord_.[[BodyFunction]], _F_)).\n          1. If _result_ is an abrupt completion, then\n            1. Set the running execution context's PrivateEnvironment to _outerPrivateEnvironment_.\n            1. Return ? _result_.\n        1. Set the running execution context's PrivateEnvironment to _outerPrivateEnvironment_.\n        1. Return _F_.\n      ",
  "TryStatement[1,0].ContainsUndefinedContinueTarget" : "\n        1. Let _hasUndefinedLabels_ be ContainsUndefinedContinueTarget of |Block| with arguments _iterationSet_ and ¬´ ¬ª.\n        1. If _hasUndefinedLabels_ is *true*, return *true*.\n        1. Return ContainsUndefinedContinueTarget of |Finally| with arguments _iterationSet_ and ¬´ ¬ª.\n      ",
  "RegExpIdentifierName[0,0].RegExpIdentifierCodePoints" : "\n          1. Let _cp_ be RegExpIdentifierCodePoint of |RegExpIdentifierStart|.\n          1. Return ¬´ _cp_ ¬ª.\n        ",
  "INTRINSICS.DataView.prototype.setBigInt64" : "\n          1. Let _v_ be the *this* value.\n          1. Return ? SetViewValue(_v_, _byteOffset_, _littleEndian_, ~bigint64~, _value_).\n        ",
  "INTRINSICS.Reflect.getPrototypeOf" : "\n        1. If _target_ is not an Object, throw a *TypeError* exception.\n        1. Return ? <emu-meta effects=\"user-code\">_target_.[[GetPrototypeOf]]()</emu-meta>.\n      ",
  "INTRINSICS.Promise.all" : "\n          1. Let _C_ be the *this* value.\n          1. Let _promiseCapability_ be ? NewPromiseCapability(_C_).\n          1. Let _promiseResolve_ be Completion(GetPromiseResolve(_C_)).\n          1. IfAbruptRejectPromise(_promiseResolve_, _promiseCapability_).\n          1. Let _iteratorRecord_ be Completion(GetIterator(_iterable_, ~sync~)).\n          1. IfAbruptRejectPromise(_iteratorRecord_, _promiseCapability_).\n          1. Let _result_ be Completion(PerformPromiseAll(_iteratorRecord_, _C_, _promiseCapability_, _promiseResolve_)).\n          1. If _result_ is an abrupt completion, then\n            1. If _iteratorRecord_.[[Done]] is *false*, set _result_ to Completion(IteratorClose(_iteratorRecord_, _result_)).\n            1. IfAbruptRejectPromise(_result_, _promiseCapability_).\n          1. Return ? _result_.\n        ",
  "ForInOfStatement[6,0].VarDeclaredNames" : "\n        1. Return the VarDeclaredNames of |Statement|.\n      ",
  "PrimaryExpression[10,0].IsFunctionDefinition" : "\n        1. Return *false*.\n      ",
  "INTRINSICS.Object.defineProperties" : "\n          1. If _O_ is not an Object, throw a *TypeError* exception.\n          1. Return ? ObjectDefineProperties(_O_, _Properties_).\n        ",
  "ExportSpecifier[0,0].ExportedBindings" : "\n          1. Return a List whose sole element is the StringValue of |ModuleExportName|.\n        ",
  "INTRINSICS.TypedArray.prototype.toSorted:clo0" : "\n          1. If _comparefn_ is not *undefined* and IsCallable(_comparefn_) is *false*, throw a *TypeError* exception.\n          1. Let _O_ be the *this* value.\n          1. Let _taRecord_ be ? ValidateTypedArray(_O_, ~seq-cst~).\n          1. Let _len_ be TypedArrayLength(_taRecord_).\n          1. Let _A_ be ? TypedArrayCreateSameType(_O_, ¬´ ùîΩ(_len_) ¬ª).\n          1. NOTE: The following closure performs a numeric comparison rather than the string comparison used in <emu-xref href=\"#sec-array.prototype.tosorted\"></emu-xref>.\n          1. Let _SortCompare_ be a new Abstract Closure with parameters (_x_, _y_) that captures _comparefn_ and performs the following steps when called:\n            1. Return ? CompareTypedArrayElements(_x_, _y_, _comparefn_).\n          1. Let _sortedList_ be ? SortIndexedProperties(_O_, _len_, _SortCompare_, ~read-through-holes~).\n          1. Let _j_ be 0.\n          1. Repeat, while _j_ < _len_,\n            1. Perform ! Set(_A_, ! ToString(ùîΩ(_j_)), _sortedList_[_j_], *true*).\n            1. Set _j_ to _j_ + 1.\n          1. Return _A_.\n        ",
  "UnicodeEscape" : "\n          1. Let _n_ be the numeric value of _C_.\n          1. Assert: _n_ ‚â§ 0xFFFF.\n          1. Let _hex_ be the String representation of _n_, formatted as a lowercase hexadecimal number.\n          1. Return the string-concatenation of the code unit 0x005C (REVERSE SOLIDUS), *\"u\"*, and StringPad(_hex_, 4, *\"0\"*, ~start~).\n        ",
  "NamedImports[0,0].BoundNames" : "\n        1. Return a new empty List.\n      ",
  "ToInt16" : "\n        1. Let _number_ be ? ToNumber(_argument_).\n        1. If _number_ is not finite or _number_ is either *+0*<sub>ùîΩ</sub> or *-0*<sub>ùîΩ</sub>, return *+0*<sub>ùîΩ</sub>.\n        1. Let _int_ be truncate(‚Ñù(_number_)).\n        1. Let _int16bit_ be _int_ modulo 2<sup>16</sup>.\n        1. If _int16bit_ ‚â• 2<sup>15</sup>, return ùîΩ(_int16bit_ - 2<sup>16</sup>); otherwise return ùîΩ(_int16bit_).\n      ",
  "ModuleItem[1,0].ExportedNames" : "\n          1. Return the ExportedNames of |ExportDeclaration|.\n        ",
  "INTRINSICS.Reflect.apply" : "\n        1. If IsCallable(_target_) is *false*, throw a *TypeError* exception.\n        1. Let _args_ be ? CreateListFromArrayLike(_argumentsList_).\n        1. Perform PrepareForTailCall().\n        1. Return ? Call(_target_, _thisArgument_, _args_).\n      ",
  "GetMatchString" : "\n          1. Assert: _match_.[[StartIndex]] ‚â§ _match_.[[EndIndex]] ‚â§ the length of _S_.\n          1. Return the substring of _S_ from _match_.[[StartIndex]] to _match_.[[EndIndex]].\n        ",
  "AdditiveExpression[2,0].IsFunctionDefinition" : "\n        1. Return *false*.\n      ",
  "TryStatement[0,0].Evaluation" : "\n        1. Let _B_ be Completion(Evaluation of |Block|).\n        1. If _B_ is a throw completion, let _C_ be Completion(CatchClauseEvaluation of |Catch| with argument _B_.[[Value]]).\n        1. Else, let _C_ be _B_.\n        1. Return ? UpdateEmpty(_C_, *undefined*).\n      ",
  "INTRINSICS.Promise" : "\n          1. If NewTarget is *undefined*, throw a *TypeError* exception.\n          1. If IsCallable(_executor_) is *false*, throw a *TypeError* exception.\n          1. Let _promise_ be ? OrdinaryCreateFromConstructor(NewTarget, *\"%Promise.prototype%\"*, ¬´ [[PromiseState]], [[PromiseResult]], [[PromiseFulfillReactions]], [[PromiseRejectReactions]], [[PromiseIsHandled]] ¬ª).\n          1. Set _promise_.[[PromiseState]] to ~pending~.\n          1. Set _promise_.[[PromiseFulfillReactions]] to a new empty List.\n          1. Set _promise_.[[PromiseRejectReactions]] to a new empty List.\n          1. Set _promise_.[[PromiseIsHandled]] to *false*.\n          1. Let _resolvingFunctions_ be CreateResolvingFunctions(_promise_).\n          1. Let _completion_ be Completion(Call(_executor_, *undefined*, ¬´ _resolvingFunctions_.[[Resolve]], _resolvingFunctions_.[[Reject]] ¬ª)).\n          1. If _completion_ is an abrupt completion, then\n            1. Perform ? Call(_resolvingFunctions_.[[Reject]], *undefined*, ¬´ _completion_.[[Value]] ¬ª).\n          1. Return _promise_.\n        ",
  "ExponentiationExpression[1,0].IsFunctionDefinition" : "\n        1. Return *false*.\n      ",
  "ObjectDefineProperties" : "\n            1. Let _props_ be ? ToObject(_Properties_).\n            1. Let _keys_ be ? <emu-meta effects=\"user-code\">_props_.[[OwnPropertyKeys]]()</emu-meta>.\n            1. Let _descriptors_ be a new empty List.\n            1. For each element _nextKey_ of _keys_, do\n              1. Let _propDesc_ be ? <emu-meta effects=\"user-code\">_props_.[[GetOwnProperty]]</emu-meta>(_nextKey_).\n              1. If _propDesc_ is not *undefined* and _propDesc_.[[Enumerable]] is *true*, then\n                1. Let _descObj_ be ? Get(_props_, _nextKey_).\n                1. Let _desc_ be ? ToPropertyDescriptor(_descObj_).\n                1. Append the Record { [[Key]]: _nextKey_, [[Descriptor]]: _desc_ } to _descriptors_.\n            1. For each element _property_ of _descriptors_, do\n              1. Perform ? DefinePropertyOrThrow(_O_, _property_.[[Key]], _property_.[[Descriptor]]).\n            1. Return _O_.\n          ",
  "VariableDeclaration[1,0].BoundNames" : "\n        1. Return the BoundNames of |BindingPattern|.\n      ",
  "ClassStaticBlockStatementList[0,0].ContainsUndefinedContinueTarget" : "\n        1. Return *false*.\n      ",
  "TypedArrayElementSize" : "\n          1. Return the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"></emu-xref> for _O_.[[TypedArrayName]].\n        ",
  "ElementList[1,0].ArrayAccumulation" : "\n          1. If |Elision| is present, then\n            1. Set _nextIndex_ to ? ArrayAccumulation of |Elision| with arguments _array_ and _nextIndex_.\n          1. Return ? ArrayAccumulation of |SpreadElement| with arguments _array_ and _nextIndex_.\n        ",
  "AtomicCompareExchangeInSharedBlock" : "\n          1. Let _execution_ be the [[CandidateExecution]] field of the surrounding agent's Agent Record.\n          1. Let _eventsRecord_ be the Agent Events Record of _execution_.[[EventsRecords]] whose [[AgentSignifier]] is AgentSignifier().\n          1. Let _rawBytesRead_ be a List of length _elementSize_ whose elements are nondeterministically chosen byte values.\n          1. NOTE: In implementations, _rawBytesRead_ is the result of a load-link, of a load-exclusive, or of an operand of a read-modify-write instruction on the underlying hardware. The nondeterminism is a semantic prescription of the memory model to describe observable behaviour of hardware with weak consistency.\n          1. NOTE: The comparison of the expected value and the read value is performed outside of the read-modify-write modification function to avoid needlessly strong synchronization when the expected value is not equal to the read value.\n          1. If ByteListEqual(_rawBytesRead_, _expectedBytes_) is *true*, then\n            1. Let _second_ be a new read-modify-write modification function with parameters (_oldBytes_, _newBytes_) that captures nothing and performs the following steps atomically when called:\n              1. Return _newBytes_.\n            1. Let _event_ be ReadModifyWriteSharedMemory { [[Order]]: ~seq-cst~, [[NoTear]]: *true*, [[Block]]: _block_, [[ByteIndex]]: _byteIndexInBuffer_, [[ElementSize]]: _elementSize_, [[Payload]]: _replacementBytes_, [[ModifyOp]]: _second_ }.\n          1. Else,\n            1. Let _event_ be ReadSharedMemory { [[Order]]: ~seq-cst~, [[NoTear]]: *true*, [[Block]]: _block_, [[ByteIndex]]: _byteIndexInBuffer_, [[ElementSize]]: _elementSize_ }.\n          1. Append _event_ to _eventsRecord_.[[EventList]].\n          1. Append Chosen Value Record { [[Event]]: _event_, [[ChosenValue]]: _rawBytesRead_ } to _execution_.[[ChosenValues]].\n          1. Return _rawBytesRead_.\n        ",
  "TemplateSpans[1,0].SubstitutionEvaluation" : "\n          1. Return ? SubstitutionEvaluation of |TemplateMiddleList|.\n        ",
  "ExportDeclaration[2,0].ExportEntries" : "\n          1. Let _entries_ be a new empty List.\n          1. Let _names_ be the BoundNames of |VariableStatement|.\n          1. For each element _name_ of _names_, do\n            1. Append the ExportEntry Record { [[ModuleRequest]]: *null*, [[ImportName]]: *null*, [[LocalName]]: _name_, [[ExportName]]: _name_ } to _entries_.\n          1. Return _entries_.\n        ",
  "FormalParameter[0,0].IsSimpleParameterList" : "\n        1. Return IsSimpleParameterList of |BindingElement|.\n      ",
  "ForStatement[0,1].ForLoopEvaluation" : "\n          1. If the first |Expression| is present, then\n            1. Let _exprRef_ be ? Evaluation of the first |Expression|.\n            1. Perform ? GetValue(_exprRef_).\n          1. If the second |Expression| is present, let _test_ be the second |Expression|; otherwise, let _test_ be ~empty~.\n          1. If the third |Expression| is present, let _increment_ be the third |Expression|; otherwise, let _increment_ be ~empty~.\n          1. Return ? ForBodyEvaluation(_test_, _increment_, |Statement|, ¬´ ¬ª, _labelSet_).\n        ",
  "ContinueDynamicImport:clo1" : "\n            1. If _moduleCompletion_ is an abrupt completion, then\n              1. Perform ! Call(_promiseCapability_.[[Reject]], *undefined*, ¬´ _moduleCompletion_.[[Value]] ¬ª).\n              1. Return ~unused~.\n            1. Let _module_ be _moduleCompletion_.[[Value]].\n            1. Let _loadPromise_ be _module_.LoadRequestedModules().\n            1. Let _rejectedClosure_ be a new Abstract Closure with parameters (_reason_) that captures _promiseCapability_ and performs the following steps when called:\n              1. Perform ! Call(_promiseCapability_.[[Reject]], *undefined*, ¬´ _reason_ ¬ª).\n              1. Return ~unused~.\n            1. Let _onRejected_ be CreateBuiltinFunction(_rejectedClosure_, 1, *\"\"*, ¬´ ¬ª).\n            1. Let _linkAndEvaluateClosure_ be a new Abstract Closure with no parameters that captures _module_, _promiseCapability_, and _onRejected_ and performs the following steps when called:\n              1. Let _link_ be Completion(_module_.Link()).\n              1. If _link_ is an abrupt completion, then\n                1. Perform ! Call(_promiseCapability_.[[Reject]], *undefined*, ¬´ _link_.[[Value]] ¬ª).\n                1. Return ~unused~.\n              1. Let _evaluatePromise_ be _module_.Evaluate().\n              1. Let _fulfilledClosure_ be a new Abstract Closure with no parameters that captures _module_ and _promiseCapability_ and performs the following steps when called:\n                1. Let _namespace_ be GetModuleNamespace(_module_).\n                1. Perform ! Call(_promiseCapability_.[[Resolve]], *undefined*, ¬´ _namespace_ ¬ª).\n                1. Return ~unused~.\n              1. Let _onFulfilled_ be CreateBuiltinFunction(_fulfilledClosure_, 0, *\"\"*, ¬´ ¬ª).\n              1. Perform PerformPromiseThen(_evaluatePromise_, _onFulfilled_, _onRejected_).\n              1. Return ~unused~.\n            1. Let _linkAndEvaluate_ be CreateBuiltinFunction(_linkAndEvaluateClosure_, 0, *\"\"*, ¬´ ¬ª).\n            1. Perform PerformPromiseThen(_loadPromise_, _linkAndEvaluate_, _onRejected_).\n            1. Return ~unused~.\n          ",
  "INTRINSICS.Symbol.prototype.valueOf" : "\n          1. Return ? ThisSymbolValue(*this* value).\n        ",
  "INTRINSICS.Array.prototype.toSorted" : "\n          1. If _comparefn_ is not *undefined* and IsCallable(_comparefn_) is *false*, throw a *TypeError* exception.\n          1. Let _O_ be ? ToObject(*this* value).\n          1. Let _len_ be ? LengthOfArrayLike(_O_).\n          1. Let _A_ be ? ArrayCreate(_len_).\n          1. Let _SortCompare_ be a new Abstract Closure with parameters (_x_, _y_) that captures _comparefn_ and performs the following steps when called:\n            1. Return ? CompareArrayElements(_x_, _y_, _comparefn_).\n          1. Let _sortedList_ be ? SortIndexedProperties(_O_, _len_, _SortCompare_, ~read-through-holes~).\n          1. Let _j_ be 0.\n          1. Repeat, while _j_ < _len_,\n            1. Perform ! CreateDataPropertyOrThrow(_A_, ! ToString(ùîΩ(_j_)), _sortedList_[_j_]).\n            1. Set _j_ to _j_ + 1.\n          1. Return _A_.\n        ",
  "CreateRegExpStringIterator:clo0" : "\n          1. Let _closure_ be a new Abstract Closure with no parameters that captures _R_, _S_, _global_, and _fullUnicode_ and performs the following steps when called:\n            1. Repeat,\n              1. Let _match_ be ? RegExpExec(_R_, _S_).\n              1. If _match_ is *null*, return *undefined*.\n              1. If _global_ is *false*, then\n                1. Perform ? GeneratorYield(CreateIterResultObject(_match_, *false*)).\n                1. Return *undefined*.\n              1. Let _matchStr_ be ? ToString(? Get(_match_, *\"0\"*)).\n              1. If _matchStr_ is the empty String, then\n                1. Let _thisIndex_ be ‚Ñù(? ToLength(? Get(_R_, *\"lastIndex\"*))).\n                1. Let _nextIndex_ be AdvanceStringIndex(_S_, _thisIndex_, _fullUnicode_).\n                1. Perform ? Set(_R_, *\"lastIndex\"*, ùîΩ(_nextIndex_), *true*).\n              1. Perform ? GeneratorYield(CreateIterResultObject(_match_, *false*)).\n          1. Return CreateIteratorFromClosure(_closure_, *\"%RegExpStringIteratorPrototype%\"*, %RegExpStringIteratorPrototype%).\n        ",
  "MemberExpression[7,0].AssignmentTargetType" : "\n        1. Return ~simple~.\n      ",
  "NotifyWaiter" : "\n          1. Assert: The surrounding agent is in the critical section for _WL_.\n          1. If _waiterRecord_.[[PromiseCapability]] is ~blocking~, then\n            1. Wake the agent whose signifier is _waiterRecord_.[[AgentSignifier]] from suspension.\n            1. NOTE: This causes the agent to resume execution in SuspendThisAgent.\n          1. Else if AgentSignifier() is _waiterRecord_.[[AgentSignifier]], then\n            1. Let _promiseCapability_ be _waiterRecord_.[[PromiseCapability]].\n            1. Perform ! Call(_promiseCapability_.[[Resolve]], *undefined*, ¬´ _waiterRecord_.[[Result]] ¬ª).\n          1. Else,\n            1. Perform EnqueueResolveInAgentJob(_waiterRecord_.[[AgentSignifier]], _waiterRecord_.[[PromiseCapability]], _waiterRecord_.[[Result]]).\n          1. Return ~unused~.\n        ",
  "LogicalANDExpression[1,0].Evaluation" : "\n        1. Let _lref_ be ? Evaluation of |LogicalANDExpression|.\n        1. Let _lval_ be ? GetValue(_lref_).\n        1. Let _lbool_ be ToBoolean(_lval_).\n        1. If _lbool_ is *false*, return _lval_.\n        1. Let _rref_ be ? Evaluation of |BitwiseORExpression|.\n        1. Return ? GetValue(_rref_).\n      ",
  "Statement[7,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "WithStatement[0,0].VarScopedDeclarations" : "\n        1. Return the VarScopedDeclarations of |Statement|.\n      ",
  "PerformPromiseAll" : "\n            1. Let _values_ be a new empty List.\n            1. Let _remainingElementsCount_ be the Record { [[Value]]: 1 }.\n            1. Let _index_ be 0.\n            1. Repeat,\n              1. Let _next_ be ? IteratorStepValue(_iteratorRecord_).\n              1. If _next_ is ~done~, then\n                1. Set _remainingElementsCount_.[[Value]] to _remainingElementsCount_.[[Value]] - 1.\n                1. If _remainingElementsCount_.[[Value]] = 0, then\n                  1. Let _valuesArray_ be CreateArrayFromList(_values_).\n                  1. Perform ? Call(_resultCapability_.[[Resolve]], *undefined*, ¬´ _valuesArray_ ¬ª).\n                1. Return _resultCapability_.[[Promise]].\n              1. Append *undefined* to _values_.\n              1. Let _nextPromise_ be ? Call(_promiseResolve_, _constructor_, ¬´ _next_ ¬ª).\n              1. Let _steps_ be the algorithm steps defined in <emu-xref href=\"#sec-promise.all-resolve-element-functions\" title></emu-xref>.\n              1. Let _length_ be the number of non-optional parameters of the function definition in <emu-xref href=\"#sec-promise.all-resolve-element-functions\" title></emu-xref>.\n              1. Let _onFulfilled_ be CreateBuiltinFunction(_steps_, _length_, *\"\"*, ¬´ [[AlreadyCalled]], [[Index]], [[Values]], [[Capability]], [[RemainingElements]] ¬ª).\n              1. Set _onFulfilled_.[[AlreadyCalled]] to *false*.\n              1. Set _onFulfilled_.[[Index]] to _index_.\n              1. Set _onFulfilled_.[[Values]] to _values_.\n              1. Set _onFulfilled_.[[Capability]] to _resultCapability_.\n              1. Set _onFulfilled_.[[RemainingElements]] to _remainingElementsCount_.\n              1. Set _remainingElementsCount_.[[Value]] to _remainingElementsCount_.[[Value]] + 1.\n              1. Perform ? Invoke(_nextPromise_, *\"then\"*, ¬´ _onFulfilled_, _resultCapability_.[[Reject]] ¬ª).\n              1. Set _index_ to _index_ + 1.\n          ",
  "StringNumericLiteral[1,1].StringNumericValue" : "\n            1. Return StringNumericValue of |StrNumericLiteral|.\n          ",
  "AsyncArrowFunction[1,0].NamedEvaluation" : "\n        1. Return InstantiateAsyncArrowFunctionExpression of |AsyncArrowFunction| with argument _name_.\n      ",
  "INTRINSICS.Atomics.xor" : "\n        1. Let _xor_ be a new read-modify-write modification function with parameters (_xBytes_, _yBytes_) that captures nothing and performs the following steps atomically when called:\n          1. Return ByteListBitwiseOp(`^`, _xBytes_, _yBytes_).\n        1. Return ? AtomicReadModifyWrite(_typedArray_, _index_, _value_, _xor_).\n      ",
  "INTRINSICS.Set.prototype.add" : "\n          1. Let _S_ be the *this* value.\n          1. Perform ? RequireInternalSlot(_S_, [[SetData]]).\n          1. For each element _e_ of _S_.[[SetData]], do\n            1. If _e_ is not ~empty~ and SameValueZero(_e_, _value_) is *true*, then\n              1. Return _S_.\n          1. If _value_ is *-0*<sub>ùîΩ</sub>, set _value_ to *+0*<sub>ùîΩ</sub>.\n          1. Append _value_ to _S_.[[SetData]].\n          1. Return _S_.\n        ",
  "StatementList[1,0].LexicallyDeclaredNames" : "\n        1. Let _names1_ be LexicallyDeclaredNames of |StatementList|.\n        1. Let _names2_ be LexicallyDeclaredNames of |StatementListItem|.\n        1. Return the list-concatenation of _names1_ and _names2_.\n      ",
  "INTRINSICS.Error" : "\n          1. If NewTarget is *undefined*, let _newTarget_ be the active function object; else let _newTarget_ be NewTarget.\n          1. Let _O_ be ? OrdinaryCreateFromConstructor(_newTarget_, *\"%Error.prototype%\"*, ¬´ [[ErrorData]] ¬ª).\n          1. If _message_ is not *undefined*, then\n            1. Let _msg_ be ? ToString(_message_).\n            1. Perform CreateNonEnumerableDataPropertyOrThrow(_O_, *\"message\"*, _msg_).\n          1. Perform ? InstallErrorCause(_O_, _options_).\n          1. Return _O_.\n        ",
  "INTRINSICS.Promise.prototype.finally:clo1" : "\n          1. Let _promise_ be the *this* value.\n          1. If _promise_ is not an Object, throw a *TypeError* exception.\n          1. Let _C_ be ? SpeciesConstructor(_promise_, %Promise%).\n          1. Assert: IsConstructor(_C_) is *true*.\n          1. If IsCallable(_onFinally_) is *false*, then\n            1. Let _thenFinally_ be _onFinally_.\n            1. Let _catchFinally_ be _onFinally_.\n          1. Else,\n            1. Let _thenFinallyClosure_ be a new Abstract Closure with parameters (_value_) that captures _onFinally_ and _C_ and performs the following steps when called:\n              1. Let _result_ be ? Call(_onFinally_, *undefined*).\n              1. Let _p_ be ? PromiseResolve(_C_, _result_).\n              1. Let _returnValue_ be a new Abstract Closure with no parameters that captures _value_ and performs the following steps when called:\n                1. Return _value_.\n              1. Let _valueThunk_ be CreateBuiltinFunction(_returnValue_, 0, *\"\"*, ¬´ ¬ª).\n              1. Return ? Invoke(_p_, *\"then\"*, ¬´ _valueThunk_ ¬ª).\n            1. Let _thenFinally_ be CreateBuiltinFunction(_thenFinallyClosure_, 1, *\"\"*, ¬´ ¬ª).\n            1. Let _catchFinallyClosure_ be a new Abstract Closure with parameters (_reason_) that captures _onFinally_ and _C_ and performs the following steps when called:\n              1. Let _result_ be ? Call(_onFinally_, *undefined*).\n              1. Let _p_ be ? PromiseResolve(_C_, _result_).\n              1. Let _throwReason_ be a new Abstract Closure with no parameters that captures _reason_ and performs the following steps when called:\n                1. Return ThrowCompletion(_reason_).\n              1. Let _thrower_ be CreateBuiltinFunction(_throwReason_, 0, *\"\"*, ¬´ ¬ª).\n              1. Return ? Invoke(_p_, *\"then\"*, ¬´ _thrower_ ¬ª).\n            1. Let _catchFinally_ be CreateBuiltinFunction(_catchFinallyClosure_, 1, *\"\"*, ¬´ ¬ª).\n          1. Return ? Invoke(_promise_, *\"then\"*, ¬´ _thenFinally_, _catchFinally_ ¬ª).\n        ",
  "AsyncFunctionExpression[0,0].Evaluation" : "\n        1. Return InstantiateAsyncFunctionExpression of |AsyncFunctionExpression|.\n      ",
  "PrimaryExpression[2,0].IsIdentifierRef" : "\n        1. Return *false*.\n      ",
  "MethodDefinition[4,0].PrivateBoundIdentifiers" : "\n        1. Return PrivateBoundIdentifiers of |ClassElementName|.\n      ",
  "PrimaryExpression[11,0].AssignmentTargetType" : "\n        1. Return ~invalid~.\n      ",
  "EqualityExpression[4,0].Evaluation" : "\n        1. Let _lref_ be ? Evaluation of |EqualityExpression|.\n        1. Let _lval_ be ? GetValue(_lref_).\n        1. Let _rref_ be ? Evaluation of |RelationalExpression|.\n        1. Let _rval_ be ? GetValue(_rref_).\n        1. Let _r_ be IsStrictlyEqual(_rval_, _lval_).\n        1. If _r_ is *true*, return *false*. Otherwise, return *true*.\n      ",
  "OptionalExpression[1,0].Evaluation" : "\n          1. Let _baseReference_ be ? Evaluation of |CallExpression|.\n          1. Let _baseValue_ be ? GetValue(_baseReference_).\n          1. If _baseValue_ is either *undefined* or *null*, then\n            1. Return *undefined*.\n          1. Return ? ChainEvaluation of |OptionalChain| with arguments _baseValue_ and _baseReference_.\n        ",
  "PropertyName[0,0].ComputedPropertyContains" : "\n        1. Return *false*.\n      ",
  "INTRINSICS.Promise.any" : "\n          1. Let _C_ be the *this* value.\n          1. Let _promiseCapability_ be ? NewPromiseCapability(_C_).\n          1. Let _promiseResolve_ be Completion(GetPromiseResolve(_C_)).\n          1. IfAbruptRejectPromise(_promiseResolve_, _promiseCapability_).\n          1. Let _iteratorRecord_ be Completion(GetIterator(_iterable_, ~sync~)).\n          1. IfAbruptRejectPromise(_iteratorRecord_, _promiseCapability_).\n          1. Let _result_ be Completion(PerformPromiseAny(_iteratorRecord_, _C_, _promiseCapability_, _promiseResolve_)).\n          1. If _result_ is an abrupt completion, then\n            1. If _iteratorRecord_.[[Done]] is *false*, set _result_ to Completion(IteratorClose(_iteratorRecord_, _result_)).\n            1. IfAbruptRejectPromise(_result_, _promiseCapability_).\n          1. Return ? _result_.\n        ",
  "ForStatement[0,7].ContainsDuplicateLabels" : "\n        1. Return ContainsDuplicateLabels of |Statement| with argument _labelSet_.\n      ",
  "MakeArgSetter" : "\n            1. Let _setterClosure_ be a new Abstract Closure with parameters (_value_) that captures _name_ and _env_ and performs the following steps when called:\n              1. Return ! _env_.SetMutableBinding(_name_, _value_, *false*).\n            1. Let _setter_ be CreateBuiltinFunction(_setterClosure_, 1, *\"\"*, ¬´ ¬ª).\n            1. NOTE: _setter_ is never directly accessible to ECMAScript code.\n            1. Return _setter_.\n          ",
  "PrimaryExpression[6,0].IsIdentifierRef" : "\n        1. Return *false*.\n      ",
  "OptionalChain[9,0].ChainEvaluation" : "\n          1. Let _optionalChain_ be |OptionalChain|.\n          1. Let _newReference_ be ? ChainEvaluation of _optionalChain_ with arguments _baseValue_ and _baseReference_.\n          1. Let _newValue_ be ? GetValue(_newReference_).\n          1. Let _fieldNameString_ be the StringValue of |PrivateIdentifier|.\n          1. Return MakePrivateReference(_newValue_, _fieldNameString_).\n        ",
  "DefaultClause[0,1].HasCallInTailPosition" : "\n        1. If |StatementList| is present, return HasCallInTailPosition of |StatementList| with argument _call_.\n        1. Return *false*.\n      ",
  "AsyncGeneratorYield" : "\n          1. Let _genContext_ be the running execution context.\n          1. Assert: _genContext_ is the execution context of a generator.\n          1. Let _generator_ be the value of the Generator component of _genContext_.\n          1. Assert: GetGeneratorKind() is ~async~.\n          1. Let _completion_ be NormalCompletion(_value_).\n          1. Assert: The execution context stack has at least two elements.\n          1. Let _previousContext_ be the second to top element of the execution context stack.\n          1. Let _previousRealm_ be _previousContext_'s Realm.\n          1. Perform AsyncGeneratorCompleteStep(_generator_, _completion_, *false*, _previousRealm_).\n          1. Let _queue_ be _generator_.[[AsyncGeneratorQueue]].\n          1. If _queue_ is not empty, then\n            1. NOTE: Execution continues without suspending the generator.\n            1. Let _toYield_ be the first element of _queue_.\n            1. Let _resumptionValue_ be Completion(_toYield_.[[Completion]]).\n            1. Return ? AsyncGeneratorUnwrapYieldResumption(_resumptionValue_).\n          1. Else,\n            1. Set _generator_.[[AsyncGeneratorState]] to ~suspended-yield~.\n            1. Remove _genContext_ from the execution context stack and restore the execution context that is at the top of the execution context stack as the running execution context.\n            1. Let _callerContext_ be the running execution context.\n            1. Resume _callerContext_ passing *undefined*. If _genContext_ is ever resumed again, let _resumptionValue_ be the Completion Record with which it is resumed.\n            1. Assert: If control reaches here, then _genContext_ is the running execution context again.\n            1. Return ? AsyncGeneratorUnwrapYieldResumption(_resumptionValue_).\n        ",
  "INTRINSICS.get RegExp.prototype.global" : "\n          1. Let _R_ be the *this* value.\n          1. Let _cu_ be the code unit 0x0067 (LATIN SMALL LETTER G).\n          1. Return ? RegExpHasFlag(_R_, _cu_).\n        ",
  "MemberExpression[2,0].Evaluation" : "\n          1. Let _baseReference_ be ? Evaluation of |MemberExpression|.\n          1. Let _baseValue_ be ? GetValue(_baseReference_).\n          1. If the source text matched by this |MemberExpression| is strict mode code, let _strict_ be *true*; else let _strict_ be *false*.\n          1. Return EvaluatePropertyAccessWithIdentifierKey(_baseValue_, |IdentifierName|, _strict_).\n        ",
  "RegExpInitialize" : "\n          1. If _pattern_ is *undefined*, let _P_ be the empty String.\n          1. Else, let _P_ be ? ToString(_pattern_).\n          1. If _flags_ is *undefined*, let _F_ be the empty String.\n          1. Else, let _F_ be ? ToString(_flags_).\n          1. If _F_ contains any code unit other than *\"d\"*, *\"g\"*, *\"i\"*, *\"m\"*, *\"s\"*, *\"u\"*, *\"v\"*, or *\"y\"*, or if _F_ contains any code unit more than once, throw a *SyntaxError* exception.\n          1. If _F_ contains *\"i\"*, let _i_ be *true*; else let _i_ be *false*.\n          1. If _F_ contains *\"m\"*, let _m_ be *true*; else let _m_ be *false*.\n          1. If _F_ contains *\"s\"*, let _s_ be *true*; else let _s_ be *false*.\n          1. If _F_ contains *\"u\"*, let _u_ be *true*; else let _u_ be *false*.\n          1. If _F_ contains *\"v\"*, let _v_ be *true*; else let _v_ be *false*.\n          1. If _u_ is *true* or _v_ is *true*, then\n            1. Let _patternText_ be StringToCodePoints(_P_).\n          1. Else,\n            1. Let _patternText_ be the result of interpreting each of _P_'s 16-bit elements as a Unicode BMP code point. UTF-16 decoding is not applied to the elements.\n          1. Let _parseResult_ be ParsePattern(_patternText_, _u_, _v_).\n          1. If _parseResult_ is a non-empty List of *SyntaxError* objects, throw a *SyntaxError* exception.\n          1. Assert: _parseResult_ is a |Pattern| Parse Node.\n          1. Set _obj_.[[OriginalSource]] to _P_.\n          1. Set _obj_.[[OriginalFlags]] to _F_.\n          1. Let _capturingGroupsCount_ be CountLeftCapturingParensWithin(_parseResult_).\n          1. Let _rer_ be the RegExp Record { [[IgnoreCase]]: _i_, [[Multiline]]: _m_, [[DotAll]]: _s_, [[Unicode]]: _u_, [[UnicodeSets]]: _v_, [[CapturingGroupsCount]]: _capturingGroupsCount_ }.\n          1. Set _obj_.[[RegExpRecord]] to _rer_.\n          1. Set _obj_.[[RegExpMatcher]] to CompilePattern of _parseResult_ with argument _rer_.\n          1. Perform ? Set(_obj_, *\"lastIndex\"*, *+0*<sub>ùîΩ</sub>, *true*).\n          1. Return _obj_.\n        ",
  "ClassEscape[3,0].IsCharacterClass" : "\n          1. Return *false*.\n        ",
  "ClassStringDisjunction[0,0].CompileToCharSet" : "\n          1. Return CompileToCharSet of |ClassStringDisjunctionContents| with argument _rer_.\n        ",
  "ModuleItem[1,0].ImportEntries" : "\n          1. Return a new empty List.\n        ",
  "ExportDeclaration[3,0].Evaluation" : "\n          1. Return ? Evaluation of |Declaration|.\n        ",
  "AsyncGeneratorExpression[0,0].IsFunctionDefinition" : "\n        1. Return *true*.\n      ",
  "ClassUnion[1,0].MayContainStrings" : "\n          1. If MayContainStrings of the |ClassSetOperand| is *true*, return *true*.\n          1. If |ClassUnion| is present, return MayContainStrings of the |ClassUnion|.\n          1. Return *false*.\n        ",
  "AsyncGeneratorBody[0,0].EvaluateAsyncGeneratorBody" : "\n        1. Perform ? FunctionDeclarationInstantiation(_functionObject_, _argumentsList_).\n        1. Let _generator_ be ? OrdinaryCreateFromConstructor(_functionObject_, *\"%AsyncGeneratorFunction.prototype.prototype%\"*, ¬´ [[AsyncGeneratorState]], [[AsyncGeneratorContext]], [[AsyncGeneratorQueue]], [[GeneratorBrand]] ¬ª).\n        1. Set _generator_.[[GeneratorBrand]] to ~empty~.\n        1. Set _generator_.[[AsyncGeneratorState]] to *undefined*.\n        1. Perform AsyncGeneratorStart(_generator_, |FunctionBody|).\n        1. Return Completion Record { [[Type]]: ~return~, [[Value]]: _generator_, [[Target]]: ~empty~ }.\n      ",
  "FormalParameterList[0,0].ExpectedArgumentCount" : "\n        1. If HasInitializer of |FormalParameter| is *true*, return 0.\n        1. Return 1.\n      ",
  "BindingPropertyList[1,0].ContainsExpression" : "\n        1. Let _has_ be ContainsExpression of |BindingPropertyList|.\n        1. If _has_ is *true*, return *true*.\n        1. Return ContainsExpression of |BindingProperty|.\n      ",
  "UnaryExpression[5,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "ForStatement[0,6].ContainsUndefinedBreakTarget" : "\n        1. Return ContainsUndefinedBreakTarget of |Statement| with argument _labelSet_.\n      ",
  "Statement[4,0].LabelledEvaluation" : "\n        1. Return ? Evaluation of |Statement|.\n      ",
  "CaseClauses[1,0].LexicallyDeclaredNames" : "\n        1. Let _names1_ be LexicallyDeclaredNames of |CaseClauses|.\n        1. Let _names2_ be LexicallyDeclaredNames of |CaseClause|.\n        1. Return the list-concatenation of _names1_ and _names2_.\n      ",
  "NonEmptyClassString[0,1].CompileClassSetString" : "\n          1. Let _cs_ be CompileToCharSet of |ClassSetCharacter| with argument _rer_.\n          1. Let _s1_ be the sequence of characters that is the single CharSetElement of _cs_.\n          1. If |NonEmptyClassString| is present, then\n            1. Let _s2_ be CompileClassSetString of |NonEmptyClassString| with argument _rer_.\n            1. Return the concatenation of _s1_ and _s2_.\n          1. Return _s1_.\n        ",
  "GeneratorDeclaration[0,0].Contains" : "\n        1. Return *false*.\n      ",
  "MemberExpression[4,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "CreateDataProperty" : "\n        1. Let _newDesc_ be the PropertyDescriptor { [[Value]]: _V_, [[Writable]]: *true*, [[Enumerable]]: *true*, [[Configurable]]: *true* }.\n        1. Return ? <emu-meta effects=\"user-code\">_O_.[[DefineOwnProperty]]</emu-meta>(_P_, _newDesc_).\n      ",
  "IsExtensible" : "\n        1. Return ? <emu-meta effects=\"user-code\">_O_.[[IsExtensible]]</emu-meta>().\n      ",
  "AsyncGeneratorDeclaration[0,0].InstantiateAsyncGeneratorFunctionObject" : "\n        1. Let _name_ be StringValue of |BindingIdentifier|.\n        1. Let _sourceText_ be the source text matched by |AsyncGeneratorDeclaration|.\n        1. Let _F_ be OrdinaryFunctionCreate(%AsyncGeneratorFunction.prototype%, _sourceText_, |FormalParameters|, |AsyncGeneratorBody|, ~non-lexical-this~, _env_, _privateEnv_).\n        1. Perform SetFunctionName(_F_, _name_).\n        1. Let _prototype_ be OrdinaryObjectCreate(%AsyncGeneratorFunction.prototype.prototype%).\n        1. Perform ! DefinePropertyOrThrow(_F_, *\"prototype\"*, PropertyDescriptor { [[Value]]: _prototype_, [[Writable]]: *true*, [[Enumerable]]: *false*, [[Configurable]]: *false* }).\n        1. Return _F_.\n      ",
  "NamedImports[0,0].ImportEntriesForModule" : "\n          1. Return a new empty List.\n        ",
  "INTRINSICS.Number.prototype.toPrecision" : "\n          1. Let _x_ be ? ThisNumberValue(*this* value).\n          1. If _precision_ is *undefined*, return ! ToString(_x_).\n          1. Let _p_ be ? ToIntegerOrInfinity(_precision_).\n          1. If _x_ is not finite, return Number::toString(_x_, 10).\n          1. If _p_ < 1 or _p_ > 100, throw a *RangeError* exception.\n          1. Set _x_ to ‚Ñù(_x_).\n          1. Let _s_ be the empty String.\n          1. If _x_ < 0, then\n            1. Set _s_ to the code unit 0x002D (HYPHEN-MINUS).\n            1. Set _x_ to -_x_.\n          1. If _x_ = 0, then\n            1. Let _m_ be the String value consisting of _p_ occurrences of the code unit 0x0030 (DIGIT ZERO).\n            1. Let _e_ be 0.\n          1. Else,\n            1. Let _e_ and _n_ be integers such that 10<sup>_p_ - 1</sup> ‚â§ _n_ < 10<sup>_p_</sup> and for which _n_ √ó 10<sup>_e_ - _p_ + 1</sup> - _x_ is as close to zero as possible. If there are two such sets of _e_ and _n_, pick the _e_ and _n_ for which _n_ √ó 10<sup>_e_ - _p_ + 1</sup> is larger.\n            1. Let _m_ be the String value consisting of the digits of the decimal representation of _n_ (in order, with no leading zeroes).\n            1. If _e_ < -6 or _e_ ‚â• _p_, then\n              1. Assert: _e_ ‚â† 0.\n              1. If _p_ ‚â† 1, then\n                1. Let _a_ be the first code unit of _m_.\n                1. Let _b_ be the other _p_ - 1 code units of _m_.\n                1. Set _m_ to the string-concatenation of _a_, *\".\"*, and _b_.\n              1. If _e_ > 0, then\n                1. Let _c_ be the code unit 0x002B (PLUS SIGN).\n              1. Else,\n                1. Assert: _e_ < 0.\n                1. Let _c_ be the code unit 0x002D (HYPHEN-MINUS).\n                1. Set _e_ to -_e_.\n              1. Let _d_ be the String value consisting of the digits of the decimal representation of _e_ (in order, with no leading zeroes).\n              1. Return the string-concatenation of _s_, _m_, the code unit 0x0065 (LATIN SMALL LETTER E), _c_, and _d_.\n          1. If _e_ = _p_ - 1, return the string-concatenation of _s_ and _m_.\n          1. If _e_ ‚â• 0, then\n            1. Set _m_ to the string-concatenation of the first _e_ + 1 code units of _m_, the code unit 0x002E (FULL STOP), and the remaining _p_ - (_e_ + 1) code units of _m_.\n          1. Else,\n            1. Set _m_ to the string-concatenation of the code unit 0x0030 (DIGIT ZERO), the code unit 0x002E (FULL STOP), -(_e_ + 1) occurrences of the code unit 0x0030 (DIGIT ZERO), and the String _m_.\n          1. Return the string-concatenation of _s_ and _m_.\n        ",
  "Expression[1,0].HasCallInTailPosition" : "\n        1. Return HasCallInTailPosition of |AssignmentExpression| with argument _call_.\n      ",
  "Atom[3,0].CompileAtom" : "\n          1. Let _cc_ be CompileCharacterClass of |CharacterClass| with argument _rer_.\n          1. Let _cs_ be _cc_.[[CharSet]].\n          1. If _rer_.[[UnicodeSets]] is *false*, or if every CharSetElement of _cs_ consists of a single character (including if _cs_ is empty), return CharacterSetMatcher(_rer_, _cs_, _cc_.[[Invert]], _direction_).\n          1. Assert: _cc_.[[Invert]] is *false*.\n          1. Let _lm_ be an empty List of Matchers.\n          1. For each CharSetElement _s_ in _cs_ containing more than 1 character, iterating in descending order of length, do\n            1. Let _cs2_ be a one-element CharSet containing the last code point of _s_.\n            1. Let _m2_ be CharacterSetMatcher(_rer_, _cs2_, *false*, _direction_).\n            1. For each code point _c1_ in _s_, iterating backwards from its second-to-last code point, do\n              1. Let _cs1_ be a one-element CharSet containing _c1_.\n              1. Let _m1_ be CharacterSetMatcher(_rer_, _cs1_, *false*, _direction_).\n              1. Set _m2_ to MatchSequence(_m1_, _m2_, _direction_).\n            1. Append _m2_ to _lm_.\n          1. Let _singles_ be the CharSet containing every CharSetElement of _cs_ that consists of a single character.\n          1. Append CharacterSetMatcher(_rer_, _singles_, *false*, _direction_) to _lm_.\n          1. If _cs_ contains the empty sequence of characters, append EmptyMatcher() to _lm_.\n          1. Let _m2_ be the last Matcher in _lm_.\n          1. For each Matcher _m1_ of _lm_, iterating backwards from its second-to-last element, do\n            1. Set _m2_ to MatchTwoAlternatives(_m1_, _m2_).\n          1. Return _m2_.\n        ",
  "Statement[8,0].ContainsUndefinedBreakTarget" : "\n        1. Return *false*.\n      ",
  "ArrayBufferCopyAndDetach" : "\n          1. Perform ? RequireInternalSlot(_arrayBuffer_, [[ArrayBufferData]]).\n          1. If IsSharedArrayBuffer(_arrayBuffer_) is *true*, throw a *TypeError* exception.\n          1. If _newLength_ is *undefined*, then\n            1. Let _newByteLength_ be _arrayBuffer_.[[ArrayBufferByteLength]].\n          1. Else,\n            1. Let _newByteLength_ be ? ToIndex(_newLength_).\n          1. If IsDetachedBuffer(_arrayBuffer_) is *true*, throw a *TypeError* exception.\n          1. If _preserveResizability_ is ~preserve-resizability~ and IsFixedLengthArrayBuffer(_arrayBuffer_) is *false*, then\n            1. Let _newMaxByteLength_ be _arrayBuffer_.[[ArrayBufferMaxByteLength]].\n          1. Else,\n            1. Let _newMaxByteLength_ be ~empty~.\n          1. If _arrayBuffer_.[[ArrayBufferDetachKey]] is not *undefined*, throw a *TypeError* exception.\n          1. Let _newBuffer_ be ? <emu-meta suppress-effects=\"user-code\">AllocateArrayBuffer(%ArrayBuffer%, _newByteLength_, _newMaxByteLength_)</emu-meta>.\n          1. Let _copyLength_ be min(_newByteLength_, _arrayBuffer_.[[ArrayBufferByteLength]]).\n          1. Let _fromBlock_ be _arrayBuffer_.[[ArrayBufferData]].\n          1. Let _toBlock_ be _newBuffer_.[[ArrayBufferData]].\n          1. Perform CopyDataBlockBytes(_toBlock_, 0, _fromBlock_, 0, _copyLength_).\n          1. NOTE: Neither creation of the new Data Block nor copying from the old Data Block are observable. Implementations may implement this method as a zero-copy move or a `realloc`.\n          1. Perform ! DetachArrayBuffer(_arrayBuffer_).\n          1. Return _newBuffer_.\n        ",
  "IteratorValue" : "\n        1. Return ? Get(_iterResult_, *\"value\"*).\n      ",
  "UnicodeEscapeSequence[1,0].IdentifierCodePoint" : "\n          1. Return the code point whose numeric value is the MV of |CodePoint|.\n        ",
  "LabelledStatement[0,0].ContainsUndefinedBreakTarget" : "\n        1. Let _label_ be the StringValue of |LabelIdentifier|.\n        1. Let _newLabelSet_ be the list-concatenation of _labelSet_ and ¬´ _label_ ¬ª.\n        1. Return ContainsUndefinedBreakTarget of |LabelledItem| with argument _newLabelSet_.\n      ",
  "UnaryExpression[3,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "YieldExpression[2,0].Evaluation" : "\n        1. Let _generatorKind_ be GetGeneratorKind().\n        1. Let _exprRef_ be ? Evaluation of |AssignmentExpression|.\n        1. Let _value_ be ? GetValue(_exprRef_).\n        1. Let _iteratorRecord_ be ? GetIterator(_value_, _generatorKind_).\n        1. Let _iterator_ be _iteratorRecord_.[[Iterator]].\n        1. Let _received_ be NormalCompletion(*undefined*).\n        1. Repeat,\n          1. If _received_ is a normal completion, then\n            1. Let _innerResult_ be ? Call(_iteratorRecord_.[[NextMethod]], _iteratorRecord_.[[Iterator]], ¬´ _received_.[[Value]] ¬ª).\n            1. If _generatorKind_ is ~async~, set _innerResult_ to ? Await(_innerResult_).\n            1. If _innerResult_ is not an Object, throw a *TypeError* exception.\n            1. Let _done_ be ? IteratorComplete(_innerResult_).\n            1. If _done_ is *true*, then\n              1. Return ? IteratorValue(_innerResult_).\n            1. If _generatorKind_ is ~async~, set _received_ to Completion(AsyncGeneratorYield(? IteratorValue(_innerResult_))).\n            1. Else, set _received_ to Completion(GeneratorYield(_innerResult_)).\n          1. Else if _received_ is a throw completion, then\n            1. Let _throw_ be ? GetMethod(_iterator_, *\"throw\"*).\n            1. If _throw_ is not *undefined*, then\n              1. Let _innerResult_ be ? Call(_throw_, _iterator_, ¬´ _received_.[[Value]] ¬ª).\n              1. If _generatorKind_ is ~async~, set _innerResult_ to ? Await(_innerResult_).\n              1. NOTE: Exceptions from the inner iterator `throw` method are propagated. Normal completions from an inner `throw` method are processed similarly to an inner `next`.\n              1. If _innerResult_ is not an Object, throw a *TypeError* exception.\n              1. Let _done_ be ? IteratorComplete(_innerResult_).\n              1. If _done_ is *true*, then\n                1. Return ? IteratorValue(_innerResult_).\n              1. If _generatorKind_ is ~async~, set _received_ to Completion(AsyncGeneratorYield(? IteratorValue(_innerResult_))).\n              1. Else, set _received_ to Completion(GeneratorYield(_innerResult_)).\n            1. Else,\n              1. NOTE: If _iterator_ does not have a `throw` method, this throw is going to terminate the `yield*` loop. But first we need to give _iterator_ a chance to clean up.\n              1. Let _closeCompletion_ be Completion Record { [[Type]]: ~normal~, [[Value]]: ~empty~, [[Target]]: ~empty~ }.\n              1. If _generatorKind_ is ~async~, perform ? AsyncIteratorClose(_iteratorRecord_, _closeCompletion_).\n              1. Else, perform ? IteratorClose(_iteratorRecord_, _closeCompletion_).\n              1. NOTE: The next step throws a *TypeError* to indicate that there was a `yield*` protocol violation: _iterator_ does not have a `throw` method.\n              1. Throw a *TypeError* exception.\n          1. Else,\n            1. Assert: _received_ is a return completion.\n            1. Let _return_ be ? GetMethod(_iterator_, *\"return\"*).\n            1. If _return_ is *undefined*, then\n              1. Set _value_ to _received_.[[Value]].\n              1. If _generatorKind_ is ~async~, then\n                1. Set _value_ to ? Await(_value_).\n              1. Return Completion Record { [[Type]]: ~return~, [[Value]]: _value_, [[Target]]: ~empty~ }.\n            1. Let _innerReturnResult_ be ? Call(_return_, _iterator_, ¬´ _received_.[[Value]] ¬ª).\n            1. If _generatorKind_ is ~async~, set _innerReturnResult_ to ? Await(_innerReturnResult_).\n            1. If _innerReturnResult_ is not an Object, throw a *TypeError* exception.\n            1. Let _done_ be ? IteratorComplete(_innerReturnResult_).\n            1. If _done_ is *true*, then\n              1. Set _value_ to ? IteratorValue(_innerReturnResult_).\n              1. Return Completion Record { [[Type]]: ~return~, [[Value]]: _value_, [[Target]]: ~empty~ }.\n            1. If _generatorKind_ is ~async~, set _received_ to Completion(AsyncGeneratorYield(? IteratorValue(_innerReturnResult_))).\n            1. Else, set _received_ to Completion(GeneratorYield(_innerReturnResult_)).\n      ",
  "SharedDataBlockEventSet" : "\n        1. Let _events_ be an empty Set.\n        1. For each event _E_ of EventSet(_execution_), do\n          1. If _E_ is a ReadSharedMemory, WriteSharedMemory, or ReadModifyWriteSharedMemory event, add _E_ to _events_.\n        1. Return _events_.\n      ",
  "Statement[0,0].LabelledEvaluation" : "\n        1. Return ? Evaluation of |Statement|.\n      ",
  "ToIntegerOrInfinity" : "\n        1. Let _number_ be ? ToNumber(_argument_).\n        1. If _number_ is one of *NaN*, *+0*<sub>ùîΩ</sub>, or *-0*<sub>ùîΩ</sub>, return 0.\n        1. If _number_ is *+‚àû*<sub>ùîΩ</sub>, return +‚àû.\n        1. If _number_ is *-‚àû*<sub>ùîΩ</sub>, return -‚àû.\n        1. Return truncate(‚Ñù(_number_)).\n      ",
  "Record[ProxyExoticObject].GetPrototypeOf" : "\n        1. Perform ? ValidateNonRevokedProxy(_O_).\n        1. Let _target_ be _O_.[[ProxyTarget]].\n        1. Let _handler_ be _O_.[[ProxyHandler]].\n        1. Assert: _handler_ is an Object.\n        1. Let _trap_ be ? GetMethod(_handler_, *\"getPrototypeOf\"*).\n        1. If _trap_ is *undefined*, then\n          1. Return ? <emu-meta effects=\"user-code\">_target_.[[GetPrototypeOf]]</emu-meta>().\n        1. Let _handlerProto_ be ? Call(_trap_, _handler_, ¬´ _target_ ¬ª).\n        1. If _handlerProto_ is not an Object and _handlerProto_ is not *null*, throw a *TypeError* exception.\n        1. Let _extensibleTarget_ be ? IsExtensible(_target_).\n        1. If _extensibleTarget_ is *true*, return _handlerProto_.\n        1. Let _targetProto_ be ? <emu-meta effects=\"user-code\">_target_.[[GetPrototypeOf]]</emu-meta>().\n        1. If SameValue(_handlerProto_, _targetProto_) is *false*, throw a *TypeError* exception.\n        1. Return _handlerProto_.\n      ",
  "AssignmentExpression[3,0].AssignmentTargetType" : "\n        1. Return ~invalid~.\n      ",
  "AdditiveExpression[1,0].Evaluation" : "\n          1. Return ? EvaluateStringOrNumericBinaryExpression(|AdditiveExpression|, `+`, |MultiplicativeExpression|).\n        ",
  "LabelledStatement[0,0].Evaluation" : "\n        1. Return ? LabelledEvaluation of this |LabelledStatement| with argument ¬´ ¬ª.\n      ",
  "LabelledStatement[0,0].VarDeclaredNames" : "\n        1. Return the VarDeclaredNames of |LabelledItem|.\n      ",
  "MemberExpression[7,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "INTRINSICS.String.prototype.toLowerCase" : "\n          1. Let _O_ be ? RequireObjectCoercible(*this* value).\n          1. Let _S_ be ? ToString(_O_).\n          1. Let _sText_ be StringToCodePoints(_S_).\n          1. Let _lowerText_ be the result of toLowercase(_sText_), according to the Unicode Default Case Conversion algorithm.\n          1. Let _L_ be CodePointsToString(_lowerText_).\n          1. Return _L_.\n        ",
  "NewTarget[0,0].Evaluation" : "\n          1. Return GetNewTarget().\n        ",
  "ClassSetCharacter[1,0].CompileToCharSet" : "\n          1. Let _cv_ be the CharacterValue of this |ClassSetCharacter|.\n          1. Let _c_ be the character whose character value is _cv_.\n          1. Return the CharSet containing the single character _c_.\n        ",
  "VariableDeclaration[1,0].Evaluation" : "\n          1. Let _rhs_ be ? Evaluation of |Initializer|.\n          1. Let _rval_ be ? GetValue(_rhs_).\n          1. Return ? BindingInitialization of |BindingPattern| with arguments _rval_ and *undefined*.\n        ",
  "ModuleItem[0,0].ContainsUndefinedBreakTarget" : "\n        1. Return *false*.\n      ",
  "Atom[0,0].CompileAtom" : "\n          1. Let _ch_ be the character matched by |PatternCharacter|.\n          1. Let _A_ be a one-element CharSet containing the character _ch_.\n          1. Return CharacterSetMatcher(_rer_, _A_, *false*, _direction_).\n        ",
  "StatementList[1,0].Evaluation" : "\n        1. Let _sl_ be ? Evaluation of |StatementList|.\n        1. Let _s_ be Completion(Evaluation of |StatementListItem|).\n        1. Return ? UpdateEmpty(_s_, _sl_).\n      ",
  "ForStatement[0,5].ContainsDuplicateLabels" : "\n        1. Return ContainsDuplicateLabels of |Statement| with argument _labelSet_.\n      ",
  "Script[0,0].IsStrict" : "\n        1. If |ScriptBody| is present and the Directive Prologue of |ScriptBody| contains a Use Strict Directive, return *true*; otherwise, return *false*.\n      ",
  "NonEmptyClassString[0,0].MayContainStrings" : "\n          1. If |NonEmptyClassString| is present, return *true*.\n          1. Return *false*.\n        ",
  "NamedExports[0,0].ReferencedBindings" : "\n          1. Return a new empty List.\n        ",
  "Identifier[0,0].StringValue" : "\n        1. Return the StringValue of |IdentifierName|.\n      ",
  "ForStatement[0,2].ContainsUndefinedContinueTarget" : "\n        1. Return ContainsUndefinedContinueTarget of |Statement| with arguments _iterationSet_ and ¬´ ¬ª.\n      ",
  "BindingElisionElement[0,1].IteratorBindingInitialization" : "\n        1. Perform ? IteratorDestructuringAssignmentEvaluation of |Elision| with argument _iteratorRecord_.\n        1. Return ? IteratorBindingInitialization of |BindingElement| with arguments _iteratorRecord_ and _environment_.\n      ",
  "SameValueNonNumber" : "\n        1. Assert: Type(_x_) is Type(_y_).\n        1. If _x_ is either *null* or *undefined*, return *true*.\n        1. If _x_ is a BigInt, then\n          1. Return BigInt::equal(_x_, _y_).\n        1. If _x_ is a String, then\n          1. If _x_ and _y_ have the same length and the same code units in the same positions, return *true*; otherwise, return *false*.\n        1. If _x_ is a Boolean, then\n          1. If _x_ and _y_ are both *true* or both *false*, return *true*; otherwise, return *false*.\n        1. NOTE: All other ECMAScript language values are compared by identity.\n        1. If _x_ is _y_, return *true*; otherwise, return *false*.\n      ",
  "RegExpIdentifierPart[0,0].RegExpIdentifierCodePoint" : "\n          1. Return the code point matched by |IdentifierPartChar|.\n        ",
  "CleanupFinalizationRegistry" : "\n      1. Assert: _finalizationRegistry_ has [[Cells]] and [[CleanupCallback]] internal slots.\n      1. Let _callback_ be _finalizationRegistry_.[[CleanupCallback]].\n      1. While _finalizationRegistry_.[[Cells]] contains a Record _cell_ such that _cell_.[[WeakRefTarget]] is ~empty~, an implementation may perform the following steps:\n        1. Choose any such _cell_.\n        1. Remove _cell_ from _finalizationRegistry_.[[Cells]].\n        1. Perform ? HostCallJobCallback(_callback_, *undefined*, ¬´ _cell_.[[HeldValue]] ¬ª).\n      1. Return ~unused~.\n    ",
  "Block[0,0].LexicallyDeclaredNames" : "\n        1. Return a new empty List.\n      ",
  "UpdateExpression[4,0].IsFunctionDefinition" : "\n        1. Return *false*.\n      ",
  "INTRINSICS.get RegExp.prototype.dotAll" : "\n          1. Let _R_ be the *this* value.\n          1. Let _cu_ be the code unit 0x0073 (LATIN SMALL LETTER S).\n          1. Return ? RegExpHasFlag(_R_, _cu_).\n        ",
  "ClassElement[5,0].PrivateBoundIdentifiers" : "\n        1. Return a new empty List.\n      ",
  "OrdinaryHasInstance" : "\n        1. If IsCallable(_C_) is *false*, return *false*.\n        1. If _C_ has a [[BoundTargetFunction]] internal slot, then\n          1. Let _BC_ be _C_.[[BoundTargetFunction]].\n          1. Return ? InstanceofOperator(_O_, _BC_).\n        1. If _O_ is not an Object, return *false*.\n        1. Let _P_ be ? Get(_C_, *\"prototype\"*).\n        1. If _P_ is not an Object, throw a *TypeError* exception.\n        1. Repeat,\n          1. Set _O_ to ? <emu-meta effects=\"user-code\">_O_.[[GetPrototypeOf]]</emu-meta>().\n          1. If _O_ is *null*, return *false*.\n          1. If SameValue(_P_, _O_) is *true*, return *true*.\n      ",
  "ForStatement[2,2].VarScopedDeclarations" : "\n        1. Return the VarScopedDeclarations of |Statement|.\n      ",
  "Statement[6,0].VarScopedDeclarations" : "\n        1. Return a new empty List.\n      ",
  "PrivateGet" : "\n        1. Let _entry_ be PrivateElementFind(_O_, _P_).\n        1. If _entry_ is ~empty~, throw a *TypeError* exception.\n        1. If _entry_.[[Kind]] is either ~field~ or ~method~, then\n          1. Return _entry_.[[Value]].\n        1. Assert: _entry_.[[Kind]] is ~accessor~.\n        1. If _entry_.[[Get]] is *undefined*, throw a *TypeError* exception.\n        1. Let _getter_ be _entry_.[[Get]].\n        1. Return ? Call(_getter_, _O_).\n      ",
  "AsyncGeneratorExpression[0,1].IsFunctionDefinition" : "\n        1. Return *true*.\n      ",
  "INTRINSICS.TypedArray.prototype.find" : "\n          1. Let _O_ be the *this* value.\n          1. Let _taRecord_ be ? ValidateTypedArray(_O_, ~seq-cst~).\n          1. Let _len_ be TypedArrayLength(_taRecord_).\n          1. Let _findRec_ be ? FindViaPredicate(_O_, _len_, ~ascending~, _predicate_, _thisArg_).\n          1. Return _findRec_.[[Value]].\n        ",
  "INTRINSICS.ArrayBuffer.prototype.transfer" : "\n          1. Let _O_ be the *this* value.\n          1. Return ? ArrayBufferCopyAndDetach(_O_, _newLength_, ~preserve-resizability~).\n        ",
  "INTRINSICS.JSON.parse" : "\n        1. Let _jsonString_ be ? ToString(_text_).\n        1. [id=\"step-json-parse-validate\"] Parse StringToCodePoints(_jsonString_) as a JSON text as specified in ECMA-404. Throw a *SyntaxError* exception if it is not a valid JSON text as defined in that specification.\n        1. Let _scriptString_ be the string-concatenation of *\"(\"*, _jsonString_, and *\");\"*.\n        1. [id=\"step-json-parse-parse\"] Let _script_ be ParseText(StringToCodePoints(_scriptString_), |Script|).\n        1. NOTE: The early error rules defined in <emu-xref href=\"#sec-object-initializer-static-semantics-early-errors\"></emu-xref> have special handling for the above invocation of ParseText.\n        1. Assert: _script_ is a Parse Node.\n        1. [id=\"step-json-parse-eval\"] Let _completion_ be Completion(<emu-meta suppress-effects=\"user-code\">Evaluation of _script_</emu-meta>).\n        1. NOTE: The PropertyDefinitionEvaluation semantics defined in <emu-xref href=\"#sec-runtime-semantics-propertydefinitionevaluation\"></emu-xref> have special handling for the above evaluation.\n        1. Let _unfiltered_ be _completion_.[[Value]].\n        1. [id=\"step-json-parse-assert-type\"] Assert: _unfiltered_ is either a String, a Number, a Boolean, an Object that is defined by either an |ArrayLiteral| or an |ObjectLiteral|, or *null*.\n        1. If IsCallable(_reviver_) is *true*, then\n          1. Let _root_ be OrdinaryObjectCreate(%Object.prototype%).\n          1. Let _rootName_ be the empty String.\n          1. Perform ! CreateDataPropertyOrThrow(_root_, _rootName_, _unfiltered_).\n          1. Return ? InternalizeJSONProperty(_root_, _rootName_, _reviver_).\n        1. Else,\n          1. Return _unfiltered_.\n      ",
  "QuantifierPrefix[4,0].CompileQuantifierPrefix" : "\n          1. Let _i_ be the MV of |DecimalDigits|.\n          1. Return the Record { [[Min]]: _i_, [[Max]]: +‚àû }.\n        ",
  "INTRINSICS.Promise.prototype.then" : "\n          1. Let _promise_ be the *this* value.\n          1. If IsPromise(_promise_) is *false*, throw a *TypeError* exception.\n          1. Let _C_ be ? SpeciesConstructor(_promise_, %Promise%).\n          1. Let _resultCapability_ be ? NewPromiseCapability(_C_).\n          1. Return PerformPromiseThen(_promise_, _onFulfilled_, _onRejected_, _resultCapability_).\n        ",
  "HostMakeJobCallback" : "\n        1. Return the JobCallback Record { [[Callback]]: _callback_, [[HostDefined]]: ~empty~ }.\n      ",
  "ExportSpecifier[0,0].ExportEntriesForModule" : "\n          1. Let _sourceName_ be the StringValue of |ModuleExportName|.\n          1. If _module_ is *null*, then\n            1. Let _localName_ be _sourceName_.\n            1. Let _importName_ be *null*.\n          1. Else,\n            1. Let _localName_ be *null*.\n            1. Let _importName_ be _sourceName_.\n          1. Return a List whose sole element is a new ExportEntry Record { [[ModuleRequest]]: _module_, [[ImportName]]: _importName_, [[LocalName]]: _localName_, [[ExportName]]: _sourceName_ }.\n        ",
  "INTRINSICS.Reflect.defineProperty" : "\n        1. If _target_ is not an Object, throw a *TypeError* exception.\n        1. Let _key_ be ? ToPropertyKey(_propertyKey_).\n        1. Let _desc_ be ? ToPropertyDescriptor(_attributes_).\n        1. Return ? <emu-meta effects=\"user-code\">_target_.[[DefineOwnProperty]]</emu-meta>(_key_, _desc_).\n      ",
  "CaseBlock[0,0].CaseBlockEvaluation" : "\n        1. Return *undefined*.\n      ",
  "INTRINSICS.AsyncGeneratorFunction.prototype.prototype.throw" : "\n          1. Let _generator_ be the *this* value.\n          1. Let _promiseCapability_ be ! NewPromiseCapability(%Promise%).\n          1. Let _result_ be Completion(AsyncGeneratorValidate(_generator_, ~empty~)).\n          1. IfAbruptRejectPromise(_result_, _promiseCapability_).\n          1. Let _state_ be _generator_.[[AsyncGeneratorState]].\n          1. If _state_ is ~suspended-start~, then\n            1. Set _generator_.[[AsyncGeneratorState]] to ~completed~.\n            1. Set _state_ to ~completed~.\n          1. If _state_ is ~completed~, then\n            1. Perform ! Call(_promiseCapability_.[[Reject]], *undefined*, ¬´ _exception_ ¬ª).\n            1. Return _promiseCapability_.[[Promise]].\n          1. Let _completion_ be ThrowCompletion(_exception_).\n          1. Perform AsyncGeneratorEnqueue(_generator_, _completion_, _promiseCapability_).\n          1. If _state_ is ~suspended-yield~, then\n            1. Perform AsyncGeneratorResume(_generator_, _completion_).\n          1. Else,\n            1. Assert: _state_ is either ~executing~ or ~awaiting-return~.\n          1. Return _promiseCapability_.[[Promise]].\n        ",
  "INTRINSICS.Array.prototype.some" : "\n          1. Let _O_ be ? ToObject(*this* value).\n          1. Let _len_ be ? LengthOfArrayLike(_O_).\n          1. If IsCallable(_callbackfn_) is *false*, throw a *TypeError* exception.\n          1. Let _k_ be 0.\n          1. Repeat, while _k_ < _len_,\n            1. Let _Pk_ be ! ToString(ùîΩ(_k_)).\n            1. Let _kPresent_ be ? HasProperty(_O_, _Pk_).\n            1. If _kPresent_ is *true*, then\n              1. Let _kValue_ be ? Get(_O_, _Pk_).\n              1. Let _testResult_ be ToBoolean(? Call(_callbackfn_, _thisArg_, ¬´ _kValue_, ùîΩ(_k_), _O_ ¬ª)).\n              1. If _testResult_ is *true*, return *true*.\n            1. Set _k_ to _k_ + 1.\n          1. Return *false*.\n        ",
  "SwitchStatement[0,0].Evaluation" : "\n        1. Let _exprRef_ be ? Evaluation of |Expression|.\n        1. Let _switchValue_ be ? GetValue(_exprRef_).\n        1. Let _oldEnv_ be the running execution context's LexicalEnvironment.\n        1. Let _blockEnv_ be NewDeclarativeEnvironment(_oldEnv_).\n        1. Perform BlockDeclarationInstantiation(|CaseBlock|, _blockEnv_).\n        1. Set the running execution context's LexicalEnvironment to _blockEnv_.\n        1. Let _R_ be Completion(CaseBlockEvaluation of |CaseBlock| with argument _switchValue_).\n        1. Set the running execution context's LexicalEnvironment to _oldEnv_.\n        1. Return _R_.\n      ",
  "INTRINSICS.Symbol.prototype.toString" : "\n          1. Let _sym_ be ? ThisSymbolValue(*this* value).\n          1. Return SymbolDescriptiveString(_sym_).\n        ",
  "UpdateExpression[1,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "ForStatement[2,2].ContainsUndefinedContinueTarget" : "\n        1. Return ContainsUndefinedContinueTarget of |Statement| with arguments _iterationSet_ and ¬´ ¬ª.\n      ",
  "AsyncConciseBody[0,0].EvaluateAsyncConciseBody" : "\n        1. Let _promiseCapability_ be ! NewPromiseCapability(%Promise%).\n        1. Let _declResult_ be Completion(FunctionDeclarationInstantiation(_functionObject_, _argumentsList_)).\n        1. If _declResult_ is an abrupt completion, then\n          1. Perform ! Call(_promiseCapability_.[[Reject]], *undefined*, ¬´ _declResult_.[[Value]] ¬ª).\n        1. Else,\n          1. Perform AsyncFunctionStart(_promiseCapability_, |ExpressionBody|).\n        1. Return Completion Record { [[Type]]: ~return~, [[Value]]: _promiseCapability_.[[Promise]], [[Target]]: ~empty~ }.\n      ",
  "ParseTimeZoneOffsetString" : "\n            1. Let _parseResult_ be ParseText(StringToCodePoints(_offsetString_), |UTCOffset|).\n            1. Assert: _parseResult_ is not a List of errors.\n            1. Assert: _parseResult_ contains a |TemporalSign| Parse Node.\n            1. Let _parsedSign_ be the source text matched by the |TemporalSign| Parse Node contained within _parseResult_.\n            1. If _parsedSign_ is the single code point U+002D (HYPHEN-MINUS) or U+2212 (MINUS SIGN), then\n              1. Let _sign_ be -1.\n            1. Else,\n              1. Let _sign_ be 1.\n            1. NOTE: Applications of StringToNumber below do not lose precision, since each of the parsed values is guaranteed to be a sufficiently short string of decimal digits.\n            1. Assert: _parseResult_ contains an |Hour| Parse Node.\n            1. Let _parsedHours_ be the source text matched by the |Hour| Parse Node contained within _parseResult_.\n            1. Let _hours_ be ‚Ñù(StringToNumber(CodePointsToString(_parsedHours_))).\n            1. If _parseResult_ does not contain a |MinuteSecond| Parse Node, then\n              1. Let _minutes_ be 0.\n            1. Else,\n              1. Let _parsedMinutes_ be the source text matched by the first |MinuteSecond| Parse Node contained within _parseResult_.\n              1. Let _minutes_ be ‚Ñù(StringToNumber(CodePointsToString(_parsedMinutes_))).\n            1. If _parseResult_ does not contain two |MinuteSecond| Parse Nodes, then\n              1. Let _seconds_ be 0.\n            1. Else,\n              1. Let _parsedSeconds_ be the source text matched by the second |MinuteSecond| Parse Node contained within _parseResult_.\n              1. Let _seconds_ be ‚Ñù(StringToNumber(CodePointsToString(_parsedSeconds_))).\n            1. If _parseResult_ does not contain a |TemporalDecimalFraction| Parse Node, then\n              1. Let _nanoseconds_ be 0.\n            1. Else,\n              1. Let _parsedFraction_ be the source text matched by the |TemporalDecimalFraction| Parse Node contained within _parseResult_.\n              1. Let _fraction_ be the string-concatenation of CodePointsToString(_parsedFraction_) and *\"000000000\"*.\n              1. Let _nanosecondsString_ be the substring of _fraction_ from 1 to 10.\n              1. Let _nanoseconds_ be ‚Ñù(StringToNumber(_nanosecondsString_)).\n            1. Return _sign_ √ó (((_hours_ √ó 60 + _minutes_) √ó 60 + _seconds_) √ó 10<sup>9</sup> + _nanoseconds_).\n          ",
  "StatementListItem[1,0].ContainsUndefinedContinueTarget" : "\n        1. Return *false*.\n      ",
  "Catch[1,0].CatchClauseEvaluation" : "\n        1. Return ? Evaluation of |Block|.\n      ",
  "ForStatement[2,3].ContainsUndefinedContinueTarget" : "\n        1. Return ContainsUndefinedContinueTarget of |Statement| with arguments _iterationSet_ and ¬´ ¬ª.\n      ",
  "ArgumentList[3,0].ArgumentListEvaluation" : "\n          1. Let _precedingArgs_ be ? ArgumentListEvaluation of |ArgumentList|.\n          1. Let _spreadRef_ be ? Evaluation of |AssignmentExpression|.\n          1. Let _iteratorRecord_ be ? GetIterator(? GetValue(_spreadRef_), ~sync~).\n          1. Repeat,\n            1. Let _next_ be ? IteratorStepValue(_iteratorRecord_).\n            1. If _next_ is ~done~, return _precedingArgs_.\n            1. Append _next_ to _precedingArgs_.\n        ",
  "ObjectAssignmentPattern[2,0].DestructuringAssignmentEvaluation" : "\n          1. Perform ? RequireObjectCoercible(_value_).\n          1. Perform ? PropertyDestructuringAssignmentEvaluation of |AssignmentPropertyList| with argument _value_.\n          1. Return ~unused~.\n        ",
  "ObjectBindingPattern[3,0].BindingInitialization" : "\n        1. Perform ? PropertyBindingInitialization of |BindingPropertyList| with arguments _value_ and _environment_.\n        1. Return ~unused~.\n      ",
  "Record[ProxyExoticObject].OwnPropertyKeys" : "\n        1. Perform ? ValidateNonRevokedProxy(_O_).\n        1. Let _target_ be _O_.[[ProxyTarget]].\n        1. Let _handler_ be _O_.[[ProxyHandler]].\n        1. Assert: _handler_ is an Object.\n        1. Let _trap_ be ? GetMethod(_handler_, *\"ownKeys\"*).\n        1. If _trap_ is *undefined*, then\n          1. Return ? <emu-meta effects=\"user-code\">_target_.[[OwnPropertyKeys]]()</emu-meta>.\n        1. Let _trapResultArray_ be ? Call(_trap_, _handler_, ¬´ _target_ ¬ª).\n        1. Let _trapResult_ be ? CreateListFromArrayLike(_trapResultArray_, ¬´ String, Symbol ¬ª).\n        1. If _trapResult_ contains any duplicate entries, throw a *TypeError* exception.\n        1. Let _extensibleTarget_ be ? IsExtensible(_target_).\n        1. Let _targetKeys_ be ? <emu-meta effects=\"user-code\">_target_.[[OwnPropertyKeys]]()</emu-meta>.\n        1. Assert: _targetKeys_ is a List of property keys.\n        1. Assert: _targetKeys_ contains no duplicate entries.\n        1. Let _targetConfigurableKeys_ be a new empty List.\n        1. Let _targetNonconfigurableKeys_ be a new empty List.\n        1. For each element _key_ of _targetKeys_, do\n          1. Let _desc_ be ? <emu-meta effects=\"user-code\">_target_.[[GetOwnProperty]]</emu-meta>(_key_).\n          1. If _desc_ is not *undefined* and _desc_.[[Configurable]] is *false*, then\n            1. Append _key_ to _targetNonconfigurableKeys_.\n          1. Else,\n            1. Append _key_ to _targetConfigurableKeys_.\n        1. If _extensibleTarget_ is *true* and _targetNonconfigurableKeys_ is empty, then\n          1. Return _trapResult_.\n        1. Let _uncheckedResultKeys_ be a List whose elements are the elements of _trapResult_.\n        1. For each element _key_ of _targetNonconfigurableKeys_, do\n          1. If _uncheckedResultKeys_ does not contain _key_, throw a *TypeError* exception.\n          1. Remove _key_ from _uncheckedResultKeys_.\n        1. If _extensibleTarget_ is *true*, return _trapResult_.\n        1. For each element _key_ of _targetConfigurableKeys_, do\n          1. If _uncheckedResultKeys_ does not contain _key_, throw a *TypeError* exception.\n          1. Remove _key_ from _uncheckedResultKeys_.\n        1. If _uncheckedResultKeys_ is not empty, throw a *TypeError* exception.\n        1. Return _trapResult_.\n      ",
  "Pattern[0,0].CompilePattern:clo0" : "\n          1. Let _m_ be CompileSubpattern of |Disjunction| with arguments _rer_ and ~forward~.\n          1. Return a new Abstract Closure with parameters (_Input_, _index_) that captures _rer_ and _m_ and performs the following steps when called:\n            1. Assert: _Input_ is a List of characters.\n            1. Assert: 0 ‚â§ _index_ ‚â§ the number of elements in _Input_.\n            1. Let _c_ be a new MatcherContinuation with parameters (_y_) that captures nothing and performs the following steps when called:\n              1. Assert: _y_ is a MatchState.\n              1. Return _y_.\n            1. Let _cap_ be a List of _rer_.[[CapturingGroupsCount]] *undefined* values, indexed 1 through _rer_.[[CapturingGroupsCount]].\n            1. Let _x_ be the MatchState { [[Input]]: _Input_, [[EndIndex]]: _index_, [[Captures]]: _cap_ }.\n            1. Return _m_(_x_, _c_).\n        ",
  "AsyncFunctionBody[0,0].EvaluateBody" : "\n          1. Return ? EvaluateAsyncFunctionBody of |AsyncFunctionBody| with arguments _functionObject_ and _argumentsList_.\n        ",
  "UnaryExpression[3,0].AssignmentTargetType" : "\n        1. Return ~invalid~.\n      ",
  "AsyncGeneratorExpression[0,1].Evaluation" : "\n        1. Return InstantiateAsyncGeneratorFunctionExpression of |AsyncGeneratorExpression|.\n      ",
  "INTRINSICS.String.prototype.toWellFormed" : "\n          1. Let _O_ be ? RequireObjectCoercible(*this* value).\n          1. Let _S_ be ? ToString(_O_).\n          1. Let _strLen_ be the length of _S_.\n          1. Let _k_ be 0.\n          1. Let _result_ be the empty String.\n          1. Repeat, while _k_ < _strLen_,\n            1. Let _cp_ be CodePointAt(_S_, _k_).\n            1. If _cp_.[[IsUnpairedSurrogate]] is *true*, then\n              1. Set _result_ to the string-concatenation of _result_ and 0xFFFD (REPLACEMENT CHARACTER).\n            1. Else,\n              1. Set _result_ to the string-concatenation of _result_ and UTF16EncodeCodePoint(_cp_.[[CodePoint]]).\n            1. Set _k_ to _k_ + _cp_.[[CodeUnitCount]].\n          1. Return _result_.\n        ",
  "GeneratorMethod[0,0].ContainsArguments" : "\n        1. Return ContainsArguments of |ClassElementName|.\n      ",
  "ClassIntersection[1,0].CompileToCharSet" : "\n          1. Let _A_ be CompileToCharSet of the |ClassIntersection| with argument _rer_.\n          1. Let _B_ be CompileToCharSet of the |ClassSetOperand| with argument _rer_.\n          1. Return the intersection of CharSets _A_ and _B_.\n        ",
  "INTRINSICS.Function" : "\n          1. Let _C_ be the active function object.\n          1. If _bodyArg_ is not present, set _bodyArg_ to the empty String.\n          1. Return ? CreateDynamicFunction(_C_, NewTarget, ~normal~, _parameterArgs_, _bodyArg_).\n        ",
  "NamedExports[0,0].ExportedBindings" : "\n          1. Return a new empty List.\n        ",
  "FormalParameterList[1,0].IteratorBindingInitialization" : "\n        1. Perform ? IteratorBindingInitialization of |FormalParameterList| with arguments _iteratorRecord_ and _environment_.\n        1. Return ? IteratorBindingInitialization of |FormalParameter| with arguments _iteratorRecord_ and _environment_.\n      ",
  "StringNumericLiteral[1,3].StringNumericValue" : "\n            1. Return StringNumericValue of |StrNumericLiteral|.\n          ",
  "Record[TypedArray].HasProperty" : "\n          1. If _P_ is a String, then\n            1. Let _numericIndex_ be CanonicalNumericIndexString(_P_).\n            1. If _numericIndex_ is not *undefined*, return IsValidIntegerIndex(_O_, _numericIndex_).\n          1. Return ? OrdinaryHasProperty(_O_, _P_).\n        ",
  "INTRINSICS.get RegExp.prototype.hasIndices" : "\n          1. Let _R_ be the *this* value.\n          1. Let _cu_ be the code unit 0x0064 (LATIN SMALL LETTER D).\n          1. Return ? RegExpHasFlag(_R_, _cu_).\n        ",
  "INTRINSICS.TypedArray.prototype.values" : "\n          1. Let _O_ be the *this* value.\n          1. Perform ? ValidateTypedArray(_O_, ~seq-cst~).\n          1. Return CreateArrayIterator(_O_, ~value~).\n        ",
  "OrdinaryHasProperty" : "\n          1. Let _hasOwn_ be ? <emu-meta effects=\"user-code\">_O_.[[GetOwnProperty]]</emu-meta>(_P_).\n          1. If _hasOwn_ is not *undefined*, return *true*.\n          1. Let _parent_ be ? <emu-meta effects=\"user-code\">_O_.[[GetPrototypeOf]]</emu-meta>().\n          1. If _parent_ is not *null*, then\n            1. Return ? <emu-meta effects=\"user-code\">_parent_.[[HasProperty]]</emu-meta>(_P_).\n          1. Return *false*.\n        ",
  "Record[OrdinaryObject].DefineOwnProperty" : "\n        1. Return ? OrdinaryDefineOwnProperty(_O_, _P_, _Desc_).\n      ",
  "AddValueToKeyedGroup" : "\n        1. For each Record { [[Key]], [[Elements]] } _g_ of _groups_, do\n          1. If SameValue(_g_.[[Key]], _key_) is *true*, then\n            1. Assert: Exactly one element of _groups_ meets this criterion.\n            1. Append _value_ to _g_.[[Elements]].\n            1. Return ~unused~.\n        1. Let _group_ be the Record { [[Key]]: _key_, [[Elements]]: ¬´ _value_ ¬ª }.\n        1. Append _group_ to _groups_.\n        1. Return ~unused~.\n      ",
  "RegExpHasFlag" : "\n            1. If _R_ is not an Object, throw a *TypeError* exception.\n            1. If _R_ does not have an [[OriginalFlags]] internal slot, then\n              1. If SameValue(_R_, %RegExp.prototype%) is *true*, return *undefined*.\n              1. Otherwise, throw a *TypeError* exception.\n            1. Let _flags_ be _R_.[[OriginalFlags]].\n            1. If _flags_ contains _codeUnit_, return *true*.\n            1. Return *false*.\n          ",
  "INTRINSICS.String.prototype.isWellFormed" : "\n          1. Let _O_ be ? RequireObjectCoercible(*this* value).\n          1. Let _S_ be ? ToString(_O_).\n          1. Return IsStringWellFormedUnicode(_S_).\n        ",
  "LoopContinues" : "\n          1. If _completion_ is a normal completion, return *true*.\n          1. If _completion_ is not a continue completion, return *false*.\n          1. If _completion_.[[Target]] is ~empty~, return *true*.\n          1. If _labelSet_ contains _completion_.[[Target]], return *true*.\n          1. Return *false*.\n        ",
  "StrUnsignedDecimalLiteral[2,1].StringNumericValue" : "\n            1. Let _b_ be MV of |DecimalDigits|.\n            1. If |ExponentPart| is present, let _e_ be MV of |ExponentPart|. Otherwise, let _e_ be 0.\n            1. Let _n_ be the number of code points in |DecimalDigits|.\n            1. Return RoundMVResult(_b_ √ó 10<sup>_e_ - _n_</sup>).\n          ",
  "ContinueStatement[0,0].Evaluation" : "\n        1. Return Completion Record { [[Type]]: ~continue~, [[Value]]: ~empty~, [[Target]]: ~empty~ }.\n      ",
  "Record[ProxyExoticObject].PreventExtensions" : "\n        1. Perform ? ValidateNonRevokedProxy(_O_).\n        1. Let _target_ be _O_.[[ProxyTarget]].\n        1. Let _handler_ be _O_.[[ProxyHandler]].\n        1. Assert: _handler_ is an Object.\n        1. Let _trap_ be ? GetMethod(_handler_, *\"preventExtensions\"*).\n        1. If _trap_ is *undefined*, then\n          1. Return ? <emu-meta effects=\"user-code\">_target_.[[PreventExtensions]]()</emu-meta>.\n        1. Let _booleanTrapResult_ be ToBoolean(? Call(_trap_, _handler_, ¬´ _target_ ¬ª)).\n        1. If _booleanTrapResult_ is *true*, then\n          1. Let _extensibleTarget_ be ? IsExtensible(_target_).\n          1. If _extensibleTarget_ is *true*, throw a *TypeError* exception.\n        1. Return _booleanTrapResult_.\n      ",
  "GeneratorExpression[0,1].IsFunctionDefinition" : "\n        1. Return *true*.\n      ",
  "RelationalExpression[6,0].IsFunctionDefinition" : "\n        1. Return *false*.\n      ",
  "INTRINSICS.Object.fromEntries" : "\n          1. Perform ? RequireObjectCoercible(_iterable_).\n          1. Let _obj_ be OrdinaryObjectCreate(%Object.prototype%).\n          1. Assert: _obj_ is an extensible ordinary object with no own properties.\n          1. Let _closure_ be a new Abstract Closure with parameters (_key_, _value_) that captures _obj_ and performs the following steps when called:\n            1. Let _propertyKey_ be ? ToPropertyKey(_key_).\n            1. Perform ! CreateDataPropertyOrThrow(_obj_, _propertyKey_, _value_).\n            1. Return *undefined*.\n          1. Let _adder_ be CreateBuiltinFunction(_closure_, 2, *\"\"*, ¬´ ¬ª).\n          1. Return ? AddEntriesFromIterable(_obj_, _iterable_, _adder_).\n        ",
  "IdentifierName[0,0].IdentifierCodePoints" : "\n          1. Let _cp_ be IdentifierCodePoint of |IdentifierStart|.\n          1. Return ¬´ _cp_ ¬ª.\n        ",
  "INTRINSICS.Object.seal" : "\n          1. If _O_ is not an Object, return _O_.\n          1. Let _status_ be ? SetIntegrityLevel(_O_, ~sealed~).\n          1. If _status_ is *false*, throw a *TypeError* exception.\n          1. Return _O_.\n        ",
  "Record[BuiltinFunctionObject].Call" : "\n        1. Return ? BuiltinCallOrConstruct(_F_, _thisArgument_, _argumentsList_, *undefined*).\n      ",
  "INTRINSICS.get Symbol.prototype.description" : "\n          1. Let _s_ be the *this* value.\n          1. Let _sym_ be ? ThisSymbolValue(_s_).\n          1. Return _sym_.[[Description]].\n        ",
  "ApplyStringOrNumericBinaryOperator" : "\n        1. If _opText_ is `+`, then\n          1. [id=\"step-binary-op-toprimitive-lval\"] Let _lprim_ be ? ToPrimitive(_lval_).\n          1. [id=\"step-binary-op-toprimitive-rval\"] Let _rprim_ be ? ToPrimitive(_rval_).\n          1. [id=\"step-binary-op-string-check\"] If _lprim_ is a String or _rprim_ is a String, then\n            1. Let _lstr_ be ? ToString(_lprim_).\n            1. Let _rstr_ be ? ToString(_rprim_).\n            1. Return the string-concatenation of _lstr_ and _rstr_.\n          1. Set _lval_ to _lprim_.\n          1. Set _rval_ to _rprim_.\n        1. NOTE: At this point, it must be a numeric operation.\n        1. Let _lnum_ be ? ToNumeric(_lval_).\n        1. Let _rnum_ be ? ToNumeric(_rval_).\n        1. If Type(_lnum_) is not Type(_rnum_), throw a *TypeError* exception.\n        1. If _lnum_ is a BigInt, then\n          1. If _opText_ is `**`, return ? BigInt::exponentiate(_lnum_, _rnum_).\n          1. If _opText_ is `/`, return ? BigInt::divide(_lnum_, _rnum_).\n          1. If _opText_ is `%`, return ? BigInt::remainder(_lnum_, _rnum_).\n          1. If _opText_ is `>>>`, return ? BigInt::unsignedRightShift(_lnum_, _rnum_).\n        1. Let _operation_ be the abstract operation associated with _opText_ and Type(_lnum_) in the following table:\n          <figure>\n            <!-- emu-format ignore -->\n            <table class=\"lightweight-table\">\n              <tbody><tr><th> _opText_       </th><th> Type(_lnum_) </th><th> _operation_                </th></tr>\n              <tr><td> `**`           </td><td> Number       </td><td> Number::exponentiate       </td></tr>\n              <tr><td> `*`            </td><td> Number       </td><td> Number::multiply           </td></tr>\n              <tr><td> `*`            </td><td> BigInt       </td><td> BigInt::multiply           </td></tr>\n              <tr><td> `/`            </td><td> Number       </td><td> Number::divide             </td></tr>\n              <tr><td> `%`            </td><td> Number       </td><td> Number::remainder          </td></tr>\n              <tr><td> `+`            </td><td> Number       </td><td> Number::add                </td></tr>\n              <tr><td> `+`            </td><td> BigInt       </td><td> BigInt::add                </td></tr>\n              <tr><td> `-`            </td><td> Number       </td><td> Number::subtract           </td></tr>\n              <tr><td> `-`            </td><td> BigInt       </td><td> BigInt::subtract           </td></tr>\n              <tr><td> `<<`     </td><td> Number       </td><td> Number::leftShift          </td></tr>\n              <tr><td> `<<`     </td><td> BigInt       </td><td> BigInt::leftShift          </td></tr>\n              <tr><td> `>>`     </td><td> Number       </td><td> Number::signedRightShift   </td></tr>\n              <tr><td> `>>`     </td><td> BigInt       </td><td> BigInt::signedRightShift   </td></tr>\n              <tr><td> `>>>` </td><td> Number       </td><td> Number::unsignedRightShift </td></tr>\n              <tr><td> `&`        </td><td> Number       </td><td> Number::bitwiseAND         </td></tr>\n              <tr><td> `&`        </td><td> BigInt       </td><td> BigInt::bitwiseAND         </td></tr>\n              <tr><td> `^`            </td><td> Number       </td><td> Number::bitwiseXOR         </td></tr>\n              <tr><td> `^`            </td><td> BigInt       </td><td> BigInt::bitwiseXOR         </td></tr>\n              <tr><td> `|`            </td><td> Number       </td><td> Number::bitwiseOR          </td></tr>\n              <tr><td> `|`            </td><td> BigInt       </td><td> BigInt::bitwiseOR          </td></tr>\n            </tbody></table>\n          </figure>\n        1. Return _operation_(_lnum_, _rnum_).\n      ",
  "ClassElementName[1,0].PrivateBoundIdentifiers" : "\n        1. Return a List whose sole element is the StringValue of |PrivateIdentifier|.\n      ",
  "AssignmentExpression[2,0].AssignmentTargetType" : "\n        1. Return ~invalid~.\n      ",
  "QuantifierPrefix[3,0].CompileQuantifierPrefix" : "\n          1. Let _i_ be the MV of |DecimalDigits| (see <emu-xref href=\"#sec-literals-numeric-literals\"></emu-xref>).\n          1. Return the Record { [[Min]]: _i_, [[Max]]: _i_ }.\n        ",
  "BigInt::bitwiseAND" : "\n            1. Return BigIntBitwiseOp(`&`, _x_, _y_).\n          ",
  "HostFinalizeImportMeta" : null,
  "LabelledItem[1,0].ContainsUndefinedContinueTarget" : "\n        1. Return *false*.\n      ",
  "PrimaryExpression[4,0].AssignmentTargetType" : "\n        1. Return ~invalid~.\n      ",
  "CaseBlock[1,2].VarScopedDeclarations" : "\n        1. If the first |CaseClauses| is present, let _declarations1_ be the VarScopedDeclarations of the first |CaseClauses|.\n        1. Else, let _declarations1_ be a new empty List.\n        1. Let _declarations2_ be VarScopedDeclarations of |DefaultClause|.\n        1. If the second |CaseClauses| is present, let _declarations3_ be the VarScopedDeclarations of the second |CaseClauses|.\n        1. Else, let _declarations3_ be a new empty List.\n        1. Return the list-concatenation of _declarations1_, _declarations2_, and _declarations3_.\n      ",
  "INTRINSICS.Reflect.get" : "\n        1. If _target_ is not an Object, throw a *TypeError* exception.\n        1. Let _key_ be ? ToPropertyKey(_propertyKey_).\n        1. If _receiver_ is not present, then\n          1. Set _receiver_ to _target_.\n        1. Return ? <emu-meta effects=\"user-code\">_target_.[[Get]]</emu-meta>(_key_, _receiver_).\n      ",
  "ClassDeclaration[0,0].BoundNames" : "\n        1. Return the BoundNames of |BindingIdentifier|.\n      ",
  "StrUnsignedDecimalLiteral[1,1].StringNumericValue" : "\n            1. Let _a_ be MV of the first |DecimalDigits|.\n            1. If the second |DecimalDigits| is present, then\n              1. Let _b_ be MV of the second |DecimalDigits|.\n              1. Let _n_ be the number of code points in the second |DecimalDigits|.\n            1. Else,\n              1. Let _b_ be 0.\n              1. Let _n_ be 0.\n            1. If |ExponentPart| is present, let _e_ be MV of |ExponentPart|. Otherwise, let _e_ be 0.\n            1. Return RoundMVResult((_a_ + (_b_ √ó 10<sup>-_n_</sup>)) √ó 10<sup>_e_</sup>).\n          ",
  "Number::unaryMinus" : "\n            1. If _x_ is *NaN*, return *NaN*.\n            1. Return the result of negating _x_; that is, compute a Number with the same magnitude but opposite sign.\n          ",
  "ModuleItem[2,0].ModuleRequests" : "\n          1. Return a new empty List.\n        ",
  "ImportDeclaration[1,0].ImportEntries" : "\n          1. Return a new empty List.\n        ",
  "Block[0,0].ContainsUndefinedBreakTarget" : "\n        1. Return *false*.\n      ",
  "GeneratorResumeAbrupt" : "\n          1. Let _state_ be ? GeneratorValidate(_generator_, _generatorBrand_).\n          1. If _state_ is ~suspended-start~, then\n            1. Set _generator_.[[GeneratorState]] to ~completed~.\n            1. NOTE: Once a generator enters the ~completed~ state it never leaves it and its associated execution context is never resumed. Any execution state associated with _generator_ can be discarded at this point.\n            1. Set _state_ to ~completed~.\n          1. If _state_ is ~completed~, then\n            1. If _abruptCompletion_ is a return completion, then\n              1. Return CreateIterResultObject(_abruptCompletion_.[[Value]], *true*).\n            1. Return ? _abruptCompletion_.\n          1. Assert: _state_ is ~suspended-yield~.\n          1. Let _genContext_ be _generator_.[[GeneratorContext]].\n          1. Let _methodContext_ be the running execution context.\n          1. Suspend _methodContext_.\n          1. Set _generator_.[[GeneratorState]] to ~executing~.\n          1. Push _genContext_ onto the execution context stack; _genContext_ is now the running execution context.\n          1. <emu-meta effects=\"user-code\">Resume the suspended evaluation of _genContext_</emu-meta> using _abruptCompletion_ as the result of the operation that suspended it. Let _result_ be the Completion Record returned by the resumed computation.\n          1. Assert: When we return here, _genContext_ has already been removed from the execution context stack and _methodContext_ is the currently running execution context.\n          1. Return ? _result_.\n        ",
  "ElementList[3,0].ArrayAccumulation" : "\n          1. Set _nextIndex_ to ? ArrayAccumulation of |ElementList| with arguments _array_ and _nextIndex_.\n          1. If |Elision| is present, then\n            1. Set _nextIndex_ to ? ArrayAccumulation of |Elision| with arguments _array_ and _nextIndex_.\n          1. Return ? ArrayAccumulation of |SpreadElement| with arguments _array_ and _nextIndex_.\n        ",
  "NumericLiteral[4,0].NumericValue" : "\n          1. Return ùîΩ(MV of |LegacyOctalIntegerLiteral|).\n        ",
  "ObjectBindingPattern[0,0].ContainsExpression" : "\n        1. Return *false*.\n      ",
  "MemberExpression[1,0].IsDestructuring" : "\n          1. Return *false*.\n        ",
  "AsyncMethod[0,0].PrivateBoundIdentifiers" : "\n        1. Return PrivateBoundIdentifiers of |ClassElementName|.\n      ",
  "SerializeJSONProperty" : "\n          1. Let _value_ be ? Get(_holder_, _key_).\n          1. If _value_ is an Object or _value_ is a BigInt, then\n            1. Let _toJSON_ be ? GetV(_value_, *\"toJSON\"*).\n            1. If IsCallable(_toJSON_) is *true*, then\n              1. Set _value_ to ? Call(_toJSON_, _value_, ¬´ _key_ ¬ª).\n          1. If _state_.[[ReplacerFunction]] is not *undefined*, then\n            1. Set _value_ to ? Call(_state_.[[ReplacerFunction]], _holder_, ¬´ _key_, _value_ ¬ª).\n          1. If _value_ is an Object, then\n            1. If _value_ has a [[NumberData]] internal slot, then\n              1. Set _value_ to ? ToNumber(_value_).\n            1. Else if _value_ has a [[StringData]] internal slot, then\n              1. Set _value_ to ? ToString(_value_).\n            1. Else if _value_ has a [[BooleanData]] internal slot, then\n              1. Set _value_ to _value_.[[BooleanData]].\n            1. Else if _value_ has a [[BigIntData]] internal slot, then\n              1. Set _value_ to _value_.[[BigIntData]].\n          1. If _value_ is *null*, return *\"null\"*.\n          1. If _value_ is *true*, return *\"true\"*.\n          1. If _value_ is *false*, return *\"false\"*.\n          1. If _value_ is a String, return QuoteJSONString(_value_).\n          1. If _value_ is a Number, then\n            1. If _value_ is finite, return ! ToString(_value_).\n            1. Return *\"null\"*.\n          1. If _value_ is a BigInt, throw a *TypeError* exception.\n          1. If _value_ is an Object and IsCallable(_value_) is *false*, then\n            1. Let _isArray_ be ? IsArray(_value_).\n            1. If _isArray_ is *true*, return ? SerializeJSONArray(_state_, _value_).\n            1. Return ? SerializeJSONObject(_state_, _value_).\n          1. Return *undefined*.\n        ",
  "UpdateExpression[2,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "FunctionDeclaration[0,0].Contains" : "\n        1. Return *false*.\n      ",
  "EmptyStatement[0,0].Evaluation" : "\n        1. Return ~empty~.\n      ",
  "MakePrivateReference" : "\n          1. Let _privEnv_ be the running execution context's PrivateEnvironment.\n          1. Assert: _privEnv_ is not *null*.\n          1. Let _privateName_ be ResolvePrivateIdentifier(_privEnv_, _privateIdentifier_).\n          1. Return the Reference Record { [[Base]]: _baseValue_, [[ReferencedName]]: _privateName_, [[Strict]]: *true*, [[ThisValue]]: ~empty~ }.\n        ",
  "CaseBlock[1,0].CaseBlockEvaluation" : "\n        1. Let _V_ be *undefined*.\n        1. If the first |CaseClauses| is present, then\n          1. Let _A_ be the List of |CaseClause| items in the first |CaseClauses|, in source text order.\n        1. Else,\n          1. Let _A_ be a new empty List.\n        1. Let _found_ be *false*.\n        1. For each |CaseClause| _C_ of _A_, do\n          1. If _found_ is *false*, then\n            1. Set _found_ to ? CaseClauseIsSelected(_C_, _input_).\n          1. If _found_ is *true*, then\n            1. Let _R_ be Completion(Evaluation of _C_).\n            1. If _R_.[[Value]] is not ~empty~, set _V_ to _R_.[[Value]].\n            1. If _R_ is an abrupt completion, return ? UpdateEmpty(_R_, _V_).\n        1. Let _foundInB_ be *false*.\n        1. If the second |CaseClauses| is present, then\n          1. Let _B_ be the List of |CaseClause| items in the second |CaseClauses|, in source text order.\n        1. Else,\n          1. Let _B_ be a new empty List.\n        1. If _found_ is *false*, then\n          1. For each |CaseClause| _C_ of _B_, do\n            1. If _foundInB_ is *false*, then\n              1. Set _foundInB_ to ? CaseClauseIsSelected(_C_, _input_).\n            1. If _foundInB_ is *true*, then\n              1. Let _R_ be Completion(Evaluation of |CaseClause| _C_).\n              1. If _R_.[[Value]] is not ~empty~, set _V_ to _R_.[[Value]].\n              1. If _R_ is an abrupt completion, return ? UpdateEmpty(_R_, _V_).\n        1. If _foundInB_ is *true*, return _V_.\n        1. Let _defaultR_ be Completion(Evaluation of |DefaultClause|).\n        1. If _defaultR_.[[Value]] is not ~empty~, set _V_ to _defaultR_.[[Value]].\n        1. If _defaultR_ is an abrupt completion, return ? UpdateEmpty(_defaultR_, _V_).\n        1. NOTE: The following is another complete iteration of the second |CaseClauses|.\n        1. For each |CaseClause| _C_ of _B_, do\n          1. Let _R_ be Completion(Evaluation of |CaseClause| _C_).\n          1. If _R_.[[Value]] is not ~empty~, set _V_ to _R_.[[Value]].\n          1. If _R_ is an abrupt completion, return ? UpdateEmpty(_R_, _V_).\n        1. Return _V_.\n      ",
  "SpreadElement[0,0].ArrayAccumulation" : "\n          1. Let _spreadRef_ be ? Evaluation of |AssignmentExpression|.\n          1. Let _spreadObj_ be ? GetValue(_spreadRef_).\n          1. Let _iteratorRecord_ be ? GetIterator(_spreadObj_, ~sync~).\n          1. Repeat,\n            1. Let _next_ be ? IteratorStepValue(_iteratorRecord_).\n            1. If _next_ is ~done~, return _nextIndex_.\n            1. Perform ! CreateDataPropertyOrThrow(_array_, ! ToString(ùîΩ(_nextIndex_)), _next_).\n            1. Set _nextIndex_ to _nextIndex_ + 1.\n        ",
  "PropertyDefinitionList[1,0].PropertyDefinitionEvaluation" : "\n          1. Perform ? PropertyDefinitionEvaluation of |PropertyDefinitionList| with argument _object_.\n          1. Perform ? PropertyDefinitionEvaluation of |PropertyDefinition| with argument _object_.\n          1. Return ~unused~.\n        ",
  "IsSharedArrayBuffer" : "\n          1. Let _bufferData_ be _obj_.[[ArrayBufferData]].\n          1. If _bufferData_ is *null*, return *false*.\n          1. If _bufferData_ is a Data Block, return *false*.\n          1. Assert: _bufferData_ is a Shared Data Block.\n          1. Return *true*.\n        ",
  "ExportDeclaration[1,0].ModuleRequests" : "\n          1. Return a new empty List.\n        ",
  "ForInOfStatement[2,0].ContainsUndefinedBreakTarget" : "\n        1. Return ContainsUndefinedBreakTarget of |Statement| with argument _labelSet_.\n      ",
  "AsyncGeneratorResume" : "\n          1. Assert: _generator_.[[AsyncGeneratorState]] is either ~suspended-start~ or ~suspended-yield~.\n          1. Let _genContext_ be _generator_.[[AsyncGeneratorContext]].\n          1. Let _callerContext_ be the running execution context.\n          1. Suspend _callerContext_.\n          1. Set _generator_.[[AsyncGeneratorState]] to ~executing~.\n          1. Push _genContext_ onto the execution context stack; _genContext_ is now the running execution context.\n          1. <emu-meta effects=\"user-code\">Resume the suspended evaluation of _genContext_</emu-meta> using _completion_ as the result of the operation that suspended it. Let _result_ be the Completion Record returned by the resumed computation.\n          1. Assert: _result_ is never an abrupt completion.\n          1. Assert: When we return here, _genContext_ has already been removed from the execution context stack and _callerContext_ is the currently running execution context.\n          1. Return ~unused~.\n        ",
  "Record[TypedArray].Delete" : "\n          1. If _P_ is a String, then\n            1. Let _numericIndex_ be CanonicalNumericIndexString(_P_).\n            1. If _numericIndex_ is not *undefined*, then\n              1. If IsValidIntegerIndex(_O_, _numericIndex_) is *false*, return *true*; else return *false*.\n          1. Return ! OrdinaryDelete(_O_, _P_).\n        ",
  "AsyncBlockStart:clo0" : "\n          1. Assert: _promiseCapability_ is a PromiseCapability Record.\n          1. Let _runningContext_ be the running execution context.\n          1. Let _closure_ be a new Abstract Closure with no parameters that captures _promiseCapability_ and _asyncBody_ and performs the following steps when called:\n            1. Let _acAsyncContext_ be the running execution context.\n            1. Let _result_ be Completion(Evaluation of _asyncBody_).\n            1. Assert: If we return here, the async function either threw an exception or performed an implicit or explicit return; all awaiting is done.\n            1. Remove _acAsyncContext_ from the execution context stack and restore the execution context that is at the top of the execution context stack as the running execution context.\n            1. If _result_ is a normal completion, then\n              1. Perform ! Call(_promiseCapability_.[[Resolve]], *undefined*, ¬´ *undefined* ¬ª).\n            1. Else if _result_ is a return completion, then\n              1. Perform ! Call(_promiseCapability_.[[Resolve]], *undefined*, ¬´ _result_.[[Value]] ¬ª).\n            1. Else,\n              1. Assert: _result_ is a throw completion.\n              1. Perform ! Call(_promiseCapability_.[[Reject]], *undefined*, ¬´ _result_.[[Value]] ¬ª).\n            1. [id=\"step-asyncblockstart-return-undefined\"] Return ~unused~.\n          1. Set the code evaluation state of _asyncContext_ such that when evaluation is resumed for that execution context, _closure_ will be called with no arguments.\n          1. Push _asyncContext_ onto the execution context stack; _asyncContext_ is now the running execution context.\n          1. <emu-meta effects=\"user-code\">Resume the suspended evaluation of _asyncContext_</emu-meta>. Let _result_ be the value returned by the resumed computation.\n          1. Assert: When we return here, _asyncContext_ has already been removed from the execution context stack and _runningContext_ is the currently running execution context.\n          1. Assert: _result_ is a normal completion with a value of ~unused~. The possible sources of this value are Await or, if the async function doesn't await anything, step <emu-xref href=\"#step-asyncblockstart-return-undefined\"></emu-xref> above.\n          1. Return ~unused~.\n        ",
  "ForInOfStatement[1,0].HasCallInTailPosition" : "\n        1. Return HasCallInTailPosition of |Statement| with argument _call_.\n      ",
  "CharacterClassEscape[7,0].MayContainStrings" : "\n          1. Return *false*.\n        ",
  "AsyncArrowFunction[1,0].Evaluation" : "\n        1. Return InstantiateAsyncArrowFunctionExpression of |AsyncArrowFunction|.\n      ",
  "MemberExpression[2,0].IsIdentifierRef" : "\n        1. Return *false*.\n      ",
  "CharacterComplement" : "\n            1. Let _A_ be AllCharacters(_rer_).\n            1. Return the CharSet containing the CharSetElements of _A_ which are not also CharSetElements of _S_.\n          ",
  "__NEW_ERROR_OBJ__" : null,
  "ExportFromClause[1,0].ExportEntriesForModule" : "\n          1. Let _exportName_ be the StringValue of |ModuleExportName|.\n          1. Let _entry_ be the ExportEntry Record { [[ModuleRequest]]: _module_, [[ImportName]]: ~all~, [[LocalName]]: *null*, [[ExportName]]: _exportName_ }.\n          1. Return ¬´ _entry_ ¬ª.\n        ",
  "MemberExpression[4,0].IsFunctionDefinition" : "\n        1. Return *false*.\n      ",
  "CallExpression[6,0].Evaluation" : "\n          1. Let _tagRef_ be ? Evaluation of |CallExpression|.\n          1. Let _tagFunc_ be ? GetValue(_tagRef_).\n          1. Let _thisCall_ be this |CallExpression|.\n          1. Let _tailCall_ be IsInTailPosition(_thisCall_).\n          1. Return ? EvaluateCall(_tagFunc_, _tagRef_, |TemplateLiteral|, _tailCall_).\n        ",
  "CountLeftCapturingParensBefore" : "\n          1. Assert: _node_ is an instance of a production in <emu-xref href=\"#sec-patterns\">the RegExp Pattern grammar</emu-xref>.\n          1. Let _pattern_ be the |Pattern| containing _node_.\n          1. Return the number of <emu-grammar>Atom :: `(` GroupSpecifier? Disjunction `)`</emu-grammar> Parse Nodes contained within _pattern_ that either occur before _node_ or contain _node_.\n        ",
  "ShiftExpression[2,0].IsFunctionDefinition" : "\n        1. Return *false*.\n      ",
  "PrimaryExpression[9,0].AssignmentTargetType" : "\n        1. Return ~invalid~.\n      ",
  "ForStatement[1,1].VarScopedDeclarations" : "\n        1. Let _declarations1_ be VarScopedDeclarations of |VariableDeclarationList|.\n        1. Let _declarations2_ be VarScopedDeclarations of |Statement|.\n        1. Return the list-concatenation of _declarations1_ and _declarations2_.\n      ",
  "INTRINSICS.StringIteratorPrototype.next" : "\n            1. Return ? <emu-meta suppress-effects=\"user-code\">GeneratorResume(*this* value, ~empty~, *\"%StringIteratorPrototype%\"*)</emu-meta>.\n          ",
  "INTRINSICS.String.prototype.replaceAll" : "\n          1. Let _O_ be ? RequireObjectCoercible(*this* value).\n          1. If _searchValue_ is neither *undefined* nor *null*, then\n            1. Let _isRegExp_ be ? IsRegExp(_searchValue_).\n            1. If _isRegExp_ is *true*, then\n              1. Let _flags_ be ? Get(_searchValue_, *\"flags\"*).\n              1. Perform ? RequireObjectCoercible(_flags_).\n              1. If ? ToString(_flags_) does not contain *\"g\"*, throw a *TypeError* exception.\n            1. Let _replacer_ be ? GetMethod(_searchValue_, @@replace).\n            1. If _replacer_ is not *undefined*, then\n              1. Return ? Call(_replacer_, _searchValue_, ¬´ _O_, _replaceValue_ ¬ª).\n          1. Let _string_ be ? ToString(_O_).\n          1. Let _searchString_ be ? ToString(_searchValue_).\n          1. Let _functionalReplace_ be IsCallable(_replaceValue_).\n          1. If _functionalReplace_ is *false*, then\n            1. Set _replaceValue_ to ? ToString(_replaceValue_).\n          1. Let _searchLength_ be the length of _searchString_.\n          1. Let _advanceBy_ be max(1, _searchLength_).\n          1. Let _matchPositions_ be a new empty List.\n          1. Let _position_ be StringIndexOf(_string_, _searchString_, 0).\n          1. Repeat, while _position_ ‚â† -1,\n            1. Append _position_ to _matchPositions_.\n            1. Set _position_ to StringIndexOf(_string_, _searchString_, _position_ + _advanceBy_).\n          1. Let _endOfLastMatch_ be 0.\n          1. Let _result_ be the empty String.\n          1. For each element _p_ of _matchPositions_, do\n            1. Let _preserved_ be the substring of _string_ from _endOfLastMatch_ to _p_.\n            1. If _functionalReplace_ is *true*, then\n              1. Let _replacement_ be ? ToString(? Call(_replaceValue_, *undefined*, ¬´ _searchString_, ùîΩ(_p_), _string_ ¬ª)).\n            1. Else,\n              1. Assert: _replaceValue_ is a String.\n              1. Let _captures_ be a new empty List.\n              1. Let _replacement_ be ! GetSubstitution(_searchString_, _string_, _p_, _captures_, *undefined*, _replaceValue_).\n            1. Set _result_ to the string-concatenation of _result_, _preserved_, and _replacement_.\n            1. Set _endOfLastMatch_ to _p_ + _searchLength_.\n          1. If _endOfLastMatch_ < the length of _string_, then\n            1. Set _result_ to the string-concatenation of _result_ and the substring of _string_ from _endOfLastMatch_.\n          1. Return _result_.\n        ",
  "NumericLiteral[2,0].NumericValue" : "\n          1. Return ùîΩ(MV of |NonDecimalIntegerLiteral|).\n        ",
  "TimeWithinDay" : "\n          1. Return ùîΩ(‚Ñù(_t_) modulo ‚Ñù(msPerDay)).\n        ",
  "ForInOfStatement[1,0].ContainsUndefinedContinueTarget" : "\n        1. Return ContainsUndefinedContinueTarget of |Statement| with arguments _iterationSet_ and ¬´ ¬ª.\n      ",
  "AsyncGeneratorExpression[0,1].ContainsArguments" : "\n        1. Return *false*.\n      ",
  "INTRINSICS.Math.log1p" : "\n          1. Let _n_ be ? ToNumber(_x_).\n          1. If _n_ is one of *NaN*, *+0*<sub>ùîΩ</sub>, *-0*<sub>ùîΩ</sub>, or *+‚àû*<sub>ùîΩ</sub>, return _n_.\n          1. If _n_ is *-1*<sub>ùîΩ</sub>, return *-‚àû*<sub>ùîΩ</sub>.\n          1. If _n_ < *-1*<sub>ùîΩ</sub>, return *NaN*.\n          1. Return an implementation-approximated Number value representing the result of the natural logarithm of 1 + ‚Ñù(_n_).\n        ",
  "Record[ProxyExoticObject].Construct" : "\n        1. Perform ? ValidateNonRevokedProxy(_O_).\n        1. Let _target_ be _O_.[[ProxyTarget]].\n        1. Assert: IsConstructor(_target_) is *true*.\n        1. Let _handler_ be _O_.[[ProxyHandler]].\n        1. Assert: _handler_ is an Object.\n        1. Let _trap_ be ? GetMethod(_handler_, *\"construct\"*).\n        1. If _trap_ is *undefined*, then\n          1. Return ? Construct(_target_, _argumentsList_, _newTarget_).\n        1. Let _argArray_ be CreateArrayFromList(_argumentsList_).\n        1. Let _newObj_ be ? Call(_trap_, _handler_, ¬´ _target_, _argArray_, _newTarget_ ¬ª).\n        1. If _newObj_ is not an Object, throw a *TypeError* exception.\n        1. Return _newObj_.\n      ",
  "InstanceofOperator" : "\n        1. If _target_ is not an Object, throw a *TypeError* exception.\n        1. Let _instOfHandler_ be ? GetMethod(_target_, @@hasInstance).\n        1. If _instOfHandler_ is not *undefined*, then\n          1. Return ToBoolean(? Call(_instOfHandler_, _target_, ¬´ _V_ ¬ª)).\n        1. [id=\"step-instanceof-check-function\"] If IsCallable(_target_) is *false*, throw a *TypeError* exception.\n        1. [id=\"step-instanceof-fallback\"] Return ? OrdinaryHasInstance(_target_, _V_).\n      ",
  "MethodDefinition[4,0].SpecialMethod" : "\n        1. Return *true*.\n      ",
  "PrimaryExpression[9,0].IsIdentifierRef" : "\n        1. Return *false*.\n      ",
  "BreakableStatement[0,0].ContainsUndefinedContinueTarget" : "\n        1. Let _newIterationSet_ be the list-concatenation of _iterationSet_ and _labelSet_.\n        1. Return ContainsUndefinedContinueTarget of |IterationStatement| with arguments _newIterationSet_ and ¬´ ¬ª.\n      ",
  "EqualityExpression[2,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "UnaryExpression[7,0].IsFunctionDefinition" : "\n        1. Return *false*.\n      ",
  "GetWaiterList" : "\n          1. Assert: _i_ and _i_ + 3 are valid byte offsets within the memory of _block_.\n          1. Return the WaiterList Record that is referenced by the pair (_block_, _i_).\n        ",
  "INTRINSICS.parseFloat" : "\n        1. Let _inputString_ be ? ToString(_string_).\n        1. Let _trimmedString_ be ! TrimString(_inputString_, ~start~).\n        1. Let _trimmed_ be StringToCodePoints(_trimmedString_).\n        1. Let _trimmedPrefix_ be the longest prefix of _trimmed_ that satisfies the syntax of a |StrDecimalLiteral|, which might be _trimmed_ itself. If there is no such prefix, return *NaN*.\n        1. Let _parsedNumber_ be ParseText(_trimmedPrefix_, |StrDecimalLiteral|).\n        1. Assert: _parsedNumber_ is a Parse Node.\n        1. Return StringNumericValue of _parsedNumber_.\n      ",
  "StatementListItem[1,0].VarDeclaredNames" : "\n        1. Return a new empty List.\n      ",
  "MatchSequence" : "\n            1. If _direction_ is ~forward~, then\n              1. Return a new Matcher with parameters (_x_, _c_) that captures _m1_ and _m2_ and performs the following steps when called:\n                1. Assert: _x_ is a MatchState.\n                1. Assert: _c_ is a MatcherContinuation.\n                1. Let _d_ be a new MatcherContinuation with parameters (_y_) that captures _c_ and _m2_ and performs the following steps when called:\n                  1. Assert: _y_ is a MatchState.\n                  1. Return _m2_(_y_, _c_).\n                1. Return _m1_(_x_, _d_).\n            1. Else,\n              1. Assert: _direction_ is ~backward~.\n              1. Return a new Matcher with parameters (_x_, _c_) that captures _m1_ and _m2_ and performs the following steps when called:\n                1. Assert: _x_ is a MatchState.\n                1. Assert: _c_ is a MatcherContinuation.\n                1. Let _d_ be a new MatcherContinuation with parameters (_y_) that captures _c_ and _m1_ and performs the following steps when called:\n                  1. Assert: _y_ is a MatchState.\n                  1. Return _m1_(_y_, _c_).\n                1. Return _m2_(_x_, _d_).\n          ",
  "Block[0,0].ContainsDuplicateLabels" : "\n        1. Return *false*.\n      ",
  "ClassAtom[0,0].IsCharacterClass" : "\n          1. Return *false*.\n        ",
  "<DEFAULT>.AllPrivateIdentifiersValid" : "\n        1. For each child node _child_ of this Parse Node, do\n          1. If _child_ is an instance of a nonterminal, then\n            1. If AllPrivateIdentifiersValid of _child_ with argument _names_ is *false*, return *false*.\n        1. Return *true*.\n      ",
  "ClassStaticBlockStatementList[0,1].LexicallyDeclaredNames" : "\n        1. Return the TopLevelLexicallyDeclaredNames of |StatementList|.\n      ",
  "ClassElement[4,0].IsStatic" : "\n        1. Return *true*.\n      ",
  "ImportsList[1,0].ImportEntriesForModule" : "\n          1. Let _specs1_ be the ImportEntriesForModule of |ImportsList| with argument _module_.\n          1. Let _specs2_ be the ImportEntriesForModule of |ImportSpecifier| with argument _module_.\n          1. Return the list-concatenation of _specs1_ and _specs2_.\n        ",
  "AllocateTypedArrayBuffer" : "\n            1. Assert: _O_.[[ViewedArrayBuffer]] is *undefined*.\n            1. Let _elementSize_ be TypedArrayElementSize(_O_).\n            1. Let _byteLength_ be _elementSize_ √ó _length_.\n            1. Let _data_ be ? <emu-meta suppress-effects=\"user-code\">AllocateArrayBuffer(%ArrayBuffer%, _byteLength_)</emu-meta>.\n            1. Set _O_.[[ViewedArrayBuffer]] to _data_.\n            1. Set _O_.[[ByteLength]] to _byteLength_.\n            1. Set _O_.[[ByteOffset]] to 0.\n            1. Set _O_.[[ArrayLength]] to _length_.\n            1. Return ~unused~.\n          ",
  "AsyncFunctionDeclaration[1,0].ContainsArguments" : "\n        1. Return *false*.\n      ",
  "EnqueueAtomicsWaitAsyncTimeoutJob" : "\n          1. Let _timeoutJob_ be a new Job Abstract Closure with no parameters that captures _WL_ and _waiterRecord_ and performs the following steps when called:\n            1. Perform EnterCriticalSection(_WL_).\n            1. If _WL_.[[Waiters]] contains _waiterRecord_, then\n              1. Let _timeOfJobExecution_ be the time value (UTC) identifying the current time.\n              1. Assert: ‚Ñù(_timeOfJobExecution_) ‚â• _waiterRecord_.[[TimeoutTime]] (ignoring potential non-monotonicity of time values).\n              1. Set _waiterRecord_.[[Result]] to *\"timed-out\"*.\n              1. Perform RemoveWaiter(_WL_, _waiterRecord_).\n              1. Perform NotifyWaiter(_WL_, _waiterRecord_).\n            1. Perform LeaveCriticalSection(_WL_).\n            1. Return ~unused~.\n          1. Let _now_ be the time value (UTC) identifying the current time.\n          1. Let _currentRealm_ be the current Realm Record.\n          1. Perform HostEnqueueTimeoutJob(_timeoutJob_, _currentRealm_, ùîΩ(_waiterRecord_.[[TimeoutTime]]) - _now_).\n          1. Return ~unused~.\n        ",
  "INTRINSICS.get RegExp.prototype.unicode" : "\n          1. Let _R_ be the *this* value.\n          1. Let _cu_ be the code unit 0x0075 (LATIN SMALL LETTER U).\n          1. Return ? RegExpHasFlag(_R_, _cu_).\n        ",
  "InitializeInstanceElements" : "\n        1. Let _methods_ be the value of _constructor_.[[PrivateMethods]].\n        1. For each PrivateElement _method_ of _methods_, do\n          1. Perform ? PrivateMethodOrAccessorAdd(_O_, _method_).\n        1. Let _fields_ be the value of _constructor_.[[Fields]].\n        1. For each element _fieldRecord_ of _fields_, do\n          1. Perform ? DefineField(_O_, _fieldRecord_).\n        1. Return ~unused~.\n      ",
  "DefineField" : "\n        1. Let _fieldName_ be _fieldRecord_.[[Name]].\n        1. Let _initializer_ be _fieldRecord_.[[Initializer]].\n        1. If _initializer_ is not ~empty~, then\n          1. Let _initValue_ be ? Call(_initializer_, _receiver_).\n        1. Else,\n          1. Let _initValue_ be *undefined*.\n        1. If _fieldName_ is a Private Name, then\n          1. Perform ? PrivateFieldAdd(_receiver_, _fieldName_, _initValue_).\n        1. Else,\n          1. Assert: IsPropertyKey(_fieldName_) is *true*.\n          1. Perform ? CreateDataPropertyOrThrow(_receiver_, _fieldName_, _initValue_).\n        1. Return ~unused~.\n      ",
  "ForStatement[0,6].VarScopedDeclarations" : "\n        1. Return the VarScopedDeclarations of |Statement|.\n      ",
  "BitwiseXORExpression[1,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "CaseBlock[0,0].LexicallyScopedDeclarations" : "\n        1. Return a new empty List.\n      ",
  "InitializeHostDefinedRealm" : "\n      1. Let _realm_ be CreateRealm().\n      1. Let _newContext_ be a new execution context.\n      1. Set the Function of _newContext_ to *null*.\n      1. Set the Realm of _newContext_ to _realm_.\n      1. Set the ScriptOrModule of _newContext_ to *null*.\n      1. Push _newContext_ onto the execution context stack; _newContext_ is now the running execution context.\n      1. If the host requires use of an exotic object to serve as _realm_'s global object, let _global_ be such an object created in a host-defined manner. Otherwise, let _global_ be *undefined*, indicating that an ordinary object should be created as the global object.\n      1. If the host requires that the `this` binding in _realm_'s global scope return an object other than the global object, let _thisValue_ be such an object created in a host-defined manner. Otherwise, let _thisValue_ be *undefined*, indicating that _realm_'s global `this` binding should be the global object.\n      1. Perform SetRealmGlobalObject(_realm_, _global_, _thisValue_).\n      1. Let _globalObj_ be ? SetDefaultGlobalBindings(_realm_).\n      1. Create any host-defined global object properties on _globalObj_.\n      1. Return ~unused~.\n    ",
  "Catch[0,0].ContainsUndefinedContinueTarget" : "\n        1. Return ContainsUndefinedContinueTarget of |Block| with arguments _iterationSet_ and ¬´ ¬ª.\n      ",
  "AssignmentProperty[0,0].PropertyDestructuringAssignmentEvaluation" : "\n          1. Let _P_ be StringValue of |IdentifierReference|.\n          1. Let _lref_ be ? ResolveBinding(_P_).\n          1. Let _v_ be ? GetV(_value_, _P_).\n          1. If |Initializer| is present and _v_ is *undefined*, then\n            1. If IsAnonymousFunctionDefinition(|Initializer|) is *true*, then\n              1. Set _v_ to ? NamedEvaluation of |Initializer| with argument _P_.\n            1. Else,\n              1. Let _defaultValue_ be ? Evaluation of |Initializer|.\n              1. Set _v_ to ? GetValue(_defaultValue_).\n          1. Perform ? PutValue(_lref_, _v_).\n          1. Return ¬´ _P_ ¬ª.\n        ",
  "EqualityExpression[1,0].Evaluation" : "\n        1. Let _lref_ be ? Evaluation of |EqualityExpression|.\n        1. Let _lval_ be ? GetValue(_lref_).\n        1. Let _rref_ be ? Evaluation of |RelationalExpression|.\n        1. Let _rval_ be ? GetValue(_rref_).\n        1. Return ? IsLooselyEqual(_rval_, _lval_).\n      ",
  "ForStatement[1,0].VarScopedDeclarations" : "\n        1. Let _declarations1_ be VarScopedDeclarations of |VariableDeclarationList|.\n        1. Let _declarations2_ be VarScopedDeclarations of |Statement|.\n        1. Return the list-concatenation of _declarations1_ and _declarations2_.\n      ",
  "CaseClause[0,0].Evaluation" : "\n        1. Return ~empty~.\n      ",
  "ElementList[0,0].ArrayAccumulation" : "\n          1. If |Elision| is present, then\n            1. Set _nextIndex_ to ? ArrayAccumulation of |Elision| with arguments _array_ and _nextIndex_.\n          1. Let _initResult_ be ? Evaluation of |AssignmentExpression|.\n          1. Let _initValue_ be ? GetValue(_initResult_).\n          1. Perform ! CreateDataPropertyOrThrow(_array_, ! ToString(ùîΩ(_nextIndex_)), _initValue_).\n          1. Return _nextIndex_ + 1.\n        ",
  "Statement[12,0].LabelledEvaluation" : "\n        1. Return ? Evaluation of |Statement|.\n      ",
  "ConditionalExpression[1,0].IsFunctionDefinition" : "\n        1. Return *false*.\n      ",
  "ComposeWriteEventBytes" : "\n        1. Let _byteLocation_ be _byteIndex_.\n        1. Let _bytesRead_ be a new empty List.\n        1. For each element _W_ of _Ws_, do\n          1. Assert: _W_ has _byteLocation_ in its range.\n          1. Let _payloadIndex_ be _byteLocation_ - _W_.[[ByteIndex]].\n          1. If _W_ is a WriteSharedMemory event, then\n            1. Let _byte_ be _W_.[[Payload]][_payloadIndex_].\n          1. Else,\n            1. Assert: _W_ is a ReadModifyWriteSharedMemory event.\n            1. Let _bytes_ be ValueOfReadEvent(_execution_, _W_).\n            1. Let _bytesModified_ be _W_.[[ModifyOp]](_bytes_, _W_.[[Payload]]).\n            1. Let _byte_ be _bytesModified_[_payloadIndex_].\n          1. Append _byte_ to _bytesRead_.\n          1. Set _byteLocation_ to _byteLocation_ + 1.\n        1. Return _bytesRead_.\n      ",
  "ClassEscape[1,0].CompileToCharSet" : "\n          1. Let _cv_ be the CharacterValue of this |ClassEscape|.\n          1. Let _c_ be the character whose character value is _cv_.\n          1. Return the CharSet containing the single character _c_.\n        ",
  "BigInt::leftShift" : "\n            1. If _y_ < *0*<sub>‚Ñ§</sub>, then\n              1. Return ‚Ñ§(floor(‚Ñù(_x_) / 2<sup>-‚Ñù(_y_)</sup>)).\n            1. Return _x_ √ó *2*<sub>‚Ñ§</sub><sup>_y_</sup>.\n          ",
  "ForInOfStatement[5,0].HasCallInTailPosition" : "\n        1. Return *false*.\n      ",
  "ForInOfStatement[7,0].ContainsDuplicateLabels" : "\n        1. Return ContainsDuplicateLabels of |Statement| with argument _labelSet_.\n      ",
  "LexicalBinding[1,0].BoundNames" : "\n        1. Return the BoundNames of |BindingPattern|.\n      ",
  "PropertyDefinitionList[0,0].PropertyNameList" : "\n          1. Let _propName_ be PropName of |PropertyDefinition|.\n          1. If _propName_ is ~empty~, return a new empty List.\n          1. Return ¬´ _propName_ ¬ª.\n        ",
  "Script[0,0].VarDeclaredNames" : "\n        1. Return a new empty List.\n      "
}